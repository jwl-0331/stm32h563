
stm32h563_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000faf4  08000250  08000250  00010250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .Table4CLI    00000018  0800fd44  0800fd44  0001fd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       000001f4  0800fd5c  0800fd5c  0001fd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800ff50  0800ff50  00020160  2**0
                  CONTENTS
  5 .ARM          00000008  0800ff50  0800ff50  0001ff50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800ff58  0800ff58  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800ff58  0800ff58  0001ff58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800ff5c  0800ff5c  0001ff5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000a0  20000000  0800ff60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RAMVectorTable 000000c0  200000a0  08010000  000200a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000039e4  20000160  080100c0  00020160  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20003b44  080100c0  00023b44  2**0
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020196  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002f1b9  00000000  00000000  000201d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000064bc  00000000  00000000  0004f392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000026b8  00000000  00000000  00055850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001dd8  00000000  00000000  00057f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003c31a  00000000  00000000  00059ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00031235  00000000  00000000  00095ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017069b  00000000  00000000  000c722f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a920  00000000  00000000  002378cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004b  00000000  00000000  002421ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000160 	.word	0x20000160
 800026c:	00000000 	.word	0x00000000
 8000270:	0800fd2c 	.word	0x0800fd2c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000164 	.word	0x20000164
 800028c:	0800fd2c 	.word	0x0800fd2c

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b982 	b.w	80005d0 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ea:	460d      	mov	r5, r1
 80002ec:	4604      	mov	r4, r0
 80002ee:	460f      	mov	r7, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d146      	bne.n	8000382 <__udivmoddi4+0x9e>
 80002f4:	428a      	cmp	r2, r1
 80002f6:	4694      	mov	ip, r2
 80002f8:	d95e      	bls.n	80003b8 <__udivmoddi4+0xd4>
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	b143      	cbz	r3, 8000312 <__udivmoddi4+0x2e>
 8000300:	fa02 fc03 	lsl.w	ip, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	409c      	lsls	r4, r3
 800030c:	fa20 f202 	lsr.w	r2, r0, r2
 8000310:	4317      	orrs	r7, r2
 8000312:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000316:	fa1f f58c 	uxth.w	r5, ip
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fbb7 f1fe 	udiv	r1, r7, lr
 8000320:	fb0e 7711 	mls	r7, lr, r1, r7
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800032c:	4290      	cmp	r0, r2
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x5e>
 8000330:	eb1c 0202 	adds.w	r2, ip, r2
 8000334:	f101 37ff 	add.w	r7, r1, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x5c>
 800033a:	4290      	cmp	r0, r2
 800033c:	f200 8134 	bhi.w	80005a8 <__udivmoddi4+0x2c4>
 8000340:	4639      	mov	r1, r7
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	fb00 f505 	mul.w	r5, r0, r5
 8000352:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000356:	42a5      	cmp	r5, r4
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x88>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x86>
 8000364:	42a5      	cmp	r5, r4
 8000366:	f200 8119 	bhi.w	800059c <__udivmoddi4+0x2b8>
 800036a:	4610      	mov	r0, r2
 800036c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	2100      	movs	r1, #0
 8000374:	b11e      	cbz	r6, 800037e <__udivmoddi4+0x9a>
 8000376:	40dc      	lsrs	r4, r3
 8000378:	2300      	movs	r3, #0
 800037a:	e9c6 4300 	strd	r4, r3, [r6]
 800037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0xb4>
 8000386:	2e00      	cmp	r6, #0
 8000388:	f000 80fc 	beq.w	8000584 <__udivmoddi4+0x2a0>
 800038c:	2100      	movs	r1, #0
 800038e:	e9c6 0500 	strd	r0, r5, [r6]
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	d14c      	bne.n	800043a <__udivmoddi4+0x156>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f0c0 80f2 	bcc.w	800058a <__udivmoddi4+0x2a6>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f240 80ef 	bls.w	800058a <__udivmoddi4+0x2a6>
 80003ac:	4608      	mov	r0, r1
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e5      	beq.n	800037e <__udivmoddi4+0x9a>
 80003b2:	e9c6 4700 	strd	r4, r7, [r6]
 80003b6:	e7e2      	b.n	800037e <__udivmoddi4+0x9a>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xd8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f382 	clz	r3, r2
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 809f 	bne.w	8000504 <__udivmoddi4+0x220>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f5fe 	udiv	r5, r2, lr
 80003d6:	fb0e 2015 	mls	r0, lr, r5, r2
 80003da:	0c22      	lsrs	r2, r4, #16
 80003dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e0:	fb07 f005 	mul.w	r0, r7, r5
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d90f      	bls.n	8000408 <__udivmoddi4+0x124>
 80003e8:	eb1c 0202 	adds.w	r2, ip, r2
 80003ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f0:	bf2c      	ite	cs
 80003f2:	f04f 0901 	movcs.w	r9, #1
 80003f6:	f04f 0900 	movcc.w	r9, #0
 80003fa:	4290      	cmp	r0, r2
 80003fc:	d903      	bls.n	8000406 <__udivmoddi4+0x122>
 80003fe:	f1b9 0f00 	cmp.w	r9, #0
 8000402:	f000 80ce 	beq.w	80005a2 <__udivmoddi4+0x2be>
 8000406:	4645      	mov	r5, r8
 8000408:	1a12      	subs	r2, r2, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000410:	fb0e 2210 	mls	r2, lr, r0, r2
 8000414:	fb00 f707 	mul.w	r7, r0, r7
 8000418:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041c:	42a7      	cmp	r7, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x14e>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 32ff 	add.w	r2, r0, #4294967295
 8000428:	d202      	bcs.n	8000430 <__udivmoddi4+0x14c>
 800042a:	42a7      	cmp	r7, r4
 800042c:	f200 80b3 	bhi.w	8000596 <__udivmoddi4+0x2b2>
 8000430:	4610      	mov	r0, r2
 8000432:	1be4      	subs	r4, r4, r7
 8000434:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000438:	e79c      	b.n	8000374 <__udivmoddi4+0x90>
 800043a:	f1c1 0420 	rsb	r4, r1, #32
 800043e:	408b      	lsls	r3, r1
 8000440:	fa05 fc01 	lsl.w	ip, r5, r1
 8000444:	fa22 f704 	lsr.w	r7, r2, r4
 8000448:	40e5      	lsrs	r5, r4
 800044a:	408a      	lsls	r2, r1
 800044c:	431f      	orrs	r7, r3
 800044e:	fa20 f304 	lsr.w	r3, r0, r4
 8000452:	4088      	lsls	r0, r1
 8000454:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000458:	ea43 030c 	orr.w	r3, r3, ip
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb5 fef8 	udiv	lr, r5, r8
 8000468:	fb08 551e 	mls	r5, r8, lr, r5
 800046c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000470:	fb0e f90c 	mul.w	r9, lr, ip
 8000474:	45a9      	cmp	r9, r5
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1b2>
 8000478:	197d      	adds	r5, r7, r5
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a9      	cmp	r9, r5
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b0>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 808d 	beq.w	80005ae <__udivmoddi4+0x2ca>
 8000494:	46d6      	mov	lr, sl
 8000496:	eba5 0509 	sub.w	r5, r5, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb5 f3f8 	udiv	r3, r5, r8
 80004a2:	fb08 5513 	mls	r5, r8, r3, r5
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004ae:	45ac      	cmp	ip, r5
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1dc>
 80004b2:	197d      	adds	r5, r7, r5
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1da>
 80004ba:	45ac      	cmp	ip, r5
 80004bc:	d87e      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004c4:	eba5 050c 	sub.w	r5, r5, ip
 80004c8:	fba3 9802 	umull	r9, r8, r3, r2
 80004cc:	4545      	cmp	r5, r8
 80004ce:	46ce      	mov	lr, r9
 80004d0:	46c4      	mov	ip, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1f6>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x200>
 80004d6:	4548      	cmp	r0, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x200>
 80004da:	3b01      	subs	r3, #1
 80004dc:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e0:	eb68 0c07 	sbc.w	ip, r8, r7
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d06f      	beq.n	80005c8 <__udivmoddi4+0x2e4>
 80004e8:	ebb0 020e 	subs.w	r2, r0, lr
 80004ec:	eb65 050c 	sbc.w	r5, r5, ip
 80004f0:	40ca      	lsrs	r2, r1
 80004f2:	fa05 f404 	lsl.w	r4, r5, r4
 80004f6:	40cd      	lsrs	r5, r1
 80004f8:	4618      	mov	r0, r3
 80004fa:	4314      	orrs	r4, r2
 80004fc:	2100      	movs	r1, #0
 80004fe:	e9c6 4500 	strd	r4, r5, [r6]
 8000502:	e73c      	b.n	800037e <__udivmoddi4+0x9a>
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	f1c3 0220 	rsb	r2, r3, #32
 800050c:	4099      	lsls	r1, r3
 800050e:	409c      	lsls	r4, r3
 8000510:	40d5      	lsrs	r5, r2
 8000512:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000516:	fa20 f202 	lsr.w	r2, r0, r2
 800051a:	fa1f f78c 	uxth.w	r7, ip
 800051e:	fbb5 f0fe 	udiv	r0, r5, lr
 8000522:	430a      	orrs	r2, r1
 8000524:	fb0e 5510 	mls	r5, lr, r0, r5
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052e:	fb00 f507 	mul.w	r5, r0, r7
 8000532:	428d      	cmp	r5, r1
 8000534:	d90e      	bls.n	8000554 <__udivmoddi4+0x270>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	bf2c      	ite	cs
 8000540:	f04f 0901 	movcs.w	r9, #1
 8000544:	f04f 0900 	movcc.w	r9, #0
 8000548:	428d      	cmp	r5, r1
 800054a:	d902      	bls.n	8000552 <__udivmoddi4+0x26e>
 800054c:	f1b9 0f00 	cmp.w	r9, #0
 8000550:	d031      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 8000552:	4640      	mov	r0, r8
 8000554:	1b49      	subs	r1, r1, r5
 8000556:	b292      	uxth	r2, r2
 8000558:	fbb1 f5fe 	udiv	r5, r1, lr
 800055c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000560:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000564:	fb05 f107 	mul.w	r1, r5, r7
 8000568:	4291      	cmp	r1, r2
 800056a:	d907      	bls.n	800057c <__udivmoddi4+0x298>
 800056c:	eb1c 0202 	adds.w	r2, ip, r2
 8000570:	f105 38ff 	add.w	r8, r5, #4294967295
 8000574:	d201      	bcs.n	800057a <__udivmoddi4+0x296>
 8000576:	4291      	cmp	r1, r2
 8000578:	d823      	bhi.n	80005c2 <__udivmoddi4+0x2de>
 800057a:	4645      	mov	r5, r8
 800057c:	1a52      	subs	r2, r2, r1
 800057e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000582:	e726      	b.n	80003d2 <__udivmoddi4+0xee>
 8000584:	4631      	mov	r1, r6
 8000586:	4630      	mov	r0, r6
 8000588:	e6f9      	b.n	800037e <__udivmoddi4+0x9a>
 800058a:	1a84      	subs	r4, r0, r2
 800058c:	eb65 0203 	sbc.w	r2, r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	4617      	mov	r7, r2
 8000594:	e70b      	b.n	80003ae <__udivmoddi4+0xca>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74a      	b.n	8000432 <__udivmoddi4+0x14e>
 800059c:	4464      	add	r4, ip
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e4      	b.n	800036c <__udivmoddi4+0x88>
 80005a2:	3d02      	subs	r5, #2
 80005a4:	4462      	add	r2, ip
 80005a6:	e72f      	b.n	8000408 <__udivmoddi4+0x124>
 80005a8:	3902      	subs	r1, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e6c9      	b.n	8000342 <__udivmoddi4+0x5e>
 80005ae:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b2:	443d      	add	r5, r7
 80005b4:	e76f      	b.n	8000496 <__udivmoddi4+0x1b2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4461      	add	r1, ip
 80005ba:	e7cb      	b.n	8000554 <__udivmoddi4+0x270>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443d      	add	r5, r7
 80005c0:	e77e      	b.n	80004c0 <__udivmoddi4+0x1dc>
 80005c2:	3d02      	subs	r5, #2
 80005c4:	4462      	add	r2, ip
 80005c6:	e7d9      	b.n	800057c <__udivmoddi4+0x298>
 80005c8:	4618      	mov	r0, r3
 80005ca:	4631      	mov	r1, r6
 80005cc:	e6d7      	b.n	800037e <__udivmoddi4+0x9a>
 80005ce:	bf00      	nop

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AppMain>:
svTaskTimer_DEF(svTimer, 10);

void MX_FREERTOS_Init(void);

void AppMain(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005d8:	b662      	cpsie	i
}
 80005da:	bf00      	nop
  __enable_irq();
  RTC_Init();
 80005dc:	f000 ffd8 	bl	8001590 <RTC_Init>
  Reset_Init();
 80005e0:	f001 f844 	bl	800166c <Reset_Init>
  //Flash_Init();
  svTaskTimer_InitTimers(&svTimer, HAL_GetTick);
 80005e4:	490d      	ldr	r1, [pc, #52]	; (800061c <AppMain+0x48>)
 80005e6:	480e      	ldr	r0, [pc, #56]	; (8000620 <AppMain+0x4c>)
 80005e8:	f00c f9cb 	bl	800c982 <svTaskTimer_InitTimers>
  UART_Init(_DEF_UART1, 115200);
 80005ec:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005f0:	2000      	movs	r0, #0
 80005f2:	f001 f883 	bl	80016fc <UART_Init>
  svDebugInit();
 80005f6:	f001 faad 	bl	8001b54 <svDebugInit>
  LED_Init();
 80005fa:	f000 ff19 	bl	8001430 <LED_Init>
  LED_SimpleAnimation();
 80005fe:	f000 ff71 	bl	80014e4 <LED_SimpleAnimation>
  //DebugMsg(DEBUGMSG_APP, "\r\n<< svCLI TEST : >>\r\n");
  //uint32_t pre_time = HAL_GetTick();

  /* Init scheduler */
  osKernelInitialize();
 8000602:	f00c fbad 	bl	800cd60 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000606:	f000 f80d 	bl	8000624 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800060a:	f00c fbcf 	bl	800cdac <osKernelStart>
  while(1)
  {
    svDebugProcess();
 800060e:	f001 fa49 	bl	8001aa4 <svDebugProcess>
    svTaskTimer_CheckTimers(&svTimer);
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <AppMain+0x4c>)
 8000614:	f00c faa7 	bl	800cb66 <svTaskTimer_CheckTimers>
    svDebugProcess();
 8000618:	e7f9      	b.n	800060e <AppMain+0x3a>
 800061a:	bf00      	nop
 800061c:	08001c61 	.word	0x08001c61
 8000620:	20000000 	.word	0x20000000

08000624 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
  xTaskCreate(vTask1, "Task1", 128, NULL, 1, NULL);
 800062a:	2300      	movs	r3, #0
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2301      	movs	r3, #1
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	490d      	ldr	r1, [pc, #52]	; (800066c <MX_FREERTOS_Init+0x48>)
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <MX_FREERTOS_Init+0x4c>)
 800063a:	f00c ff97 	bl	800d56c <xTaskCreate>
  xTaskCreate(vTask2, "Task2", 128, NULL, 1, NULL);
 800063e:	2300      	movs	r3, #0
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	490a      	ldr	r1, [pc, #40]	; (8000674 <MX_FREERTOS_Init+0x50>)
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <MX_FREERTOS_Init+0x54>)
 800064e:	f00c ff8d 	bl	800d56c <xTaskCreate>
  xTaskCreate(vTask3, "Task3", 128, NULL, 50, NULL);
 8000652:	2300      	movs	r3, #0
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2332      	movs	r3, #50	; 0x32
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	4907      	ldr	r1, [pc, #28]	; (800067c <MX_FREERTOS_Init+0x58>)
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <MX_FREERTOS_Init+0x5c>)
 8000662:	f00c ff83 	bl	800d56c <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	0800fd80 	.word	0x0800fd80
 8000670:	08000685 	.word	0x08000685
 8000674:	0800fd88 	.word	0x0800fd88
 8000678:	080006a1 	.word	0x080006a1
 800067c:	0800fd90 	.word	0x0800fd90
 8000680:	080006bd 	.word	0x080006bd

08000684 <vTask1>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void vTask1(void *pvParameters)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  while(1)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800068c:	2101      	movs	r1, #1
 800068e:	4803      	ldr	r0, [pc, #12]	; (800069c <vTask1+0x18>)
 8000690:	f002 fa50 	bl	8002b34 <HAL_GPIO_TogglePin>
    vTaskDelay(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f00d f8c3 	bl	800d820 <vTaskDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800069a:	e7f7      	b.n	800068c <vTask1+0x8>
 800069c:	42020400 	.word	0x42020400

080006a0 <vTask2>:
  }
}
void vTask2(void *pvParameters)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  while(1)
  {
    HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
 80006a8:	2110      	movs	r1, #16
 80006aa:	4803      	ldr	r0, [pc, #12]	; (80006b8 <vTask2+0x18>)
 80006ac:	f002 fa42 	bl	8002b34 <HAL_GPIO_TogglePin>
    vTaskDelay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f00d f8b5 	bl	800d820 <vTaskDelay>
    HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
 80006b6:	e7f7      	b.n	80006a8 <vTask2+0x8>
 80006b8:	42021400 	.word	0x42021400

080006bc <vTask3>:
  }
}
void vTask3(void *pvParameters)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  while(1)
  {
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_4);
 80006c4:	2110      	movs	r1, #16
 80006c6:	4803      	ldr	r0, [pc, #12]	; (80006d4 <vTask3+0x18>)
 80006c8:	f002 fa34 	bl	8002b34 <HAL_GPIO_TogglePin>
    vTaskDelay(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f00d f8a7 	bl	800d820 <vTaskDelay>
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_4);
 80006d2:	e7f7      	b.n	80006c4 <vTask3+0x8>
 80006d4:	42021800 	.word	0x42021800

080006d8 <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <LL_AHB2_GRP1_EnableClock+0x34>)
 80006e2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80006e6:	4909      	ldr	r1, [pc, #36]	; (800070c <LL_AHB2_GRP1_EnableClock+0x34>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <LL_AHB2_GRP1_EnableClock+0x34>)
 80006f2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4013      	ands	r3, r2
 80006fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006fc:	68fb      	ldr	r3, [r7, #12]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	44020c00 	.word	0x44020c00

08000710 <LL_APB1_GRP2_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1HENR, Periphs);
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <LL_APB1_GRP2_EnableClock+0x34>)
 800071a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800071e:	4909      	ldr	r1, [pc, #36]	; (8000744 <LL_APB1_GRP2_EnableClock+0x34>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4313      	orrs	r3, r2
 8000724:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1HENR, Periphs);
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <LL_APB1_GRP2_EnableClock+0x34>)
 800072a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4013      	ands	r3, r2
 8000732:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000734:	68fb      	ldr	r3, [r7, #12]
}
 8000736:	bf00      	nop
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	44020c00 	.word	0x44020c00

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  g_RCC_CSR = RCC->RSR;         // Get Boot Reason
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <main+0x5c>)
 8000750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000754:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <main+0x60>)
 8000756:	6013      	str	r3, [r2, #0]
  /* Copy the vector table from the Flash (mapped at the base of the application
    load address 0x08006000) to the base address of the SRAM at 0x20000000. */
  for(int i = 0; i < 48; i++)
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	e00d      	b.n	800077a <main+0x32>
  {
    VectorTable[i] = *(__IO uint32_t*)(APPLICATION_ADDRESS + (i<<2));
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000766:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	490f      	ldr	r1, [pc, #60]	; (80007ac <main+0x64>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < 48; i++)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3301      	adds	r3, #1
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b2f      	cmp	r3, #47	; 0x2f
 800077e:	ddee      	ble.n	800075e <main+0x16>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f001 fa34 	bl	8001bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f814 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000788:	f000 f932 	bl	80009f0 <MX_GPIO_Init>
  MX_ETH_Init();
 800078c:	f000 f882 	bl	8000894 <MX_ETH_Init>
  MX_UCPD1_Init();
 8000790:	f000 f8d8 	bl	8000944 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000794:	f000 f8fa 	bl	800098c <MX_USB_PCD_Init>
  MX_ICACHE_Init();
 8000798:	f000 f8c8 	bl	800092c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  AppMain();
 800079c:	f7ff ff1a 	bl	80005d4 <AppMain>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <main+0x58>
 80007a2:	bf00      	nop
 80007a4:	44020c00 	.word	0x44020c00
 80007a8:	2000071c 	.word	0x2000071c
 80007ac:	200000a0 	.word	0x200000a0

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b09c      	sub	sp, #112	; 0x70
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2250      	movs	r2, #80	; 0x50
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f00e feb8 	bl	800f534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <SystemClock_Config+0xe0>)
 80007d8:	691b      	ldr	r3, [r3, #16]
 80007da:	4a2d      	ldr	r2, [pc, #180]	; (8000890 <SystemClock_Config+0xe0>)
 80007dc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80007e0:	6113      	str	r3, [r2, #16]
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <SystemClock_Config+0xe0>)
 80007e4:	691b      	ldr	r3, [r3, #16]
 80007e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ee:	bf00      	nop
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <SystemClock_Config+0xe0>)
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	f003 0308 	and.w	r3, r3, #8
 80007f8:	2b08      	cmp	r3, #8
 80007fa:	d1f9      	bne.n	80007f0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80007fc:	232b      	movs	r3, #43	; 0x2b
 80007fe:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000806:	2301      	movs	r3, #1
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800080a:	2308      	movs	r3, #8
 800080c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080e:	2340      	movs	r3, #64	; 0x40
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000812:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000822:	2303      	movs	r3, #3
 8000824:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000826:	2301      	movs	r3, #1
 8000828:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 800082a:	2310      	movs	r3, #16
 800082c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000832:	2302      	movs	r3, #2
 8000834:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 800083a:	230c      	movs	r3, #12
 800083c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800083e:	2300      	movs	r3, #0
 8000840:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fa9a 	bl	8002d84 <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000856:	f000 f9b3 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	231f      	movs	r3, #31
 800085c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2303      	movs	r3, #3
 8000860:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	2103      	movs	r1, #3
 8000878:	4618      	mov	r0, r3
 800087a:	f002 febb 	bl	80035f4 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000884:	f000 f99c 	bl	8000bc0 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3770      	adds	r7, #112	; 0x70
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	44020800 	.word	0x44020800

08000894 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_ETH_Init+0x80>)
 800089a:	4a1f      	ldr	r2, [pc, #124]	; (8000918 <MX_ETH_Init+0x84>)
 800089c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_ETH_Init+0x88>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_ETH_Init+0x88>)
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_ETH_Init+0x88>)
 80008ac:	22e1      	movs	r2, #225	; 0xe1
 80008ae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_ETH_Init+0x88>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_ETH_Init+0x88>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_ETH_Init+0x88>)
 80008be:	2200      	movs	r2, #0
 80008c0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_ETH_Init+0x80>)
 80008c4:	4a15      	ldr	r2, [pc, #84]	; (800091c <MX_ETH_Init+0x88>)
 80008c6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_ETH_Init+0x80>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_ETH_Init+0x80>)
 80008d0:	4a13      	ldr	r2, [pc, #76]	; (8000920 <MX_ETH_Init+0x8c>)
 80008d2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_ETH_Init+0x80>)
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <MX_ETH_Init+0x90>)
 80008d8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_ETH_Init+0x80>)
 80008dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008e0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008e2:	480c      	ldr	r0, [pc, #48]	; (8000914 <MX_ETH_Init+0x80>)
 80008e4:	f001 fb88 	bl	8001ff8 <HAL_ETH_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008ee:	f000 f967 	bl	8000bc0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008f2:	2238      	movs	r2, #56	; 0x38
 80008f4:	2100      	movs	r1, #0
 80008f6:	480c      	ldr	r0, [pc, #48]	; (8000928 <MX_ETH_Init+0x94>)
 80008f8:	f00e fe1c 	bl	800f534 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MX_ETH_Init+0x94>)
 80008fe:	2221      	movs	r2, #33	; 0x21
 8000900:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_ETH_Init+0x94>)
 8000904:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000908:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MX_ETH_Init+0x94>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000364 	.word	0x20000364
 8000918:	40028000 	.word	0x40028000
 800091c:	20000720 	.word	0x20000720
 8000920:	20000304 	.word	0x20000304
 8000924:	200002a4 	.word	0x200002a4
 8000928:	2000026c 	.word	0x2000026c

0800092c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000930:	f002 f91a 	bl	8002b68 <HAL_ICACHE_Enable>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800093a:	f000 f941 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800095a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800095e:	f7ff fed7 	bl	8000710 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000962:	2002      	movs	r0, #2
 8000964:	f7ff feb8 	bl	80006d8 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB13   ------> UCPD1_CC1
  PB14   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 8000968:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800096c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800096e:	2303      	movs	r3, #3
 8000970:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000976:	463b      	mov	r3, r7
 8000978:	4619      	mov	r1, r3
 800097a:	4803      	ldr	r0, [pc, #12]	; (8000988 <MX_UCPD1_Init+0x44>)
 800097c:	f00b f8cb 	bl	800bb16 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	42020400 	.word	0x42020400

0800098c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_USB_PCD_Init+0x5c>)
 8000992:	4a16      	ldr	r2, [pc, #88]	; (80009ec <MX_USB_PCD_Init+0x60>)
 8000994:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_USB_PCD_Init+0x5c>)
 8000998:	2208      	movs	r2, #8
 800099a:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_USB_PCD_Init+0x5c>)
 800099e:	2202      	movs	r2, #2
 80009a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USB_PCD_Init+0x5c>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_USB_PCD_Init+0x5c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USB_PCD_Init+0x5c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USB_PCD_Init+0x5c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USB_PCD_Init+0x5c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USB_PCD_Init+0x5c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USB_PCD_Init+0x5c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USB_PCD_Init+0x5c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USB_PCD_Init+0x5c>)
 80009d4:	f002 f8d8 	bl	8002b88 <HAL_PCD_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 80009de:	f000 f8ef 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000414 	.word	0x20000414
 80009ec:	40016000 	.word	0x40016000

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	; 0x30
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b5f      	ldr	r3, [pc, #380]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a0c:	4a5d      	ldr	r2, [pc, #372]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a0e:	f043 0304 	orr.w	r3, r3, #4
 8000a12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a16:	4b5b      	ldr	r3, [pc, #364]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a24:	4b57      	ldr	r3, [pc, #348]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a2a:	4a56      	ldr	r2, [pc, #344]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a34:	4b53      	ldr	r3, [pc, #332]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a3a:	f003 0320 	and.w	r3, r3, #32
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	4b50      	ldr	r3, [pc, #320]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a48:	4a4e      	ldr	r2, [pc, #312]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a52:	4b4c      	ldr	r3, [pc, #304]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a66:	4a47      	ldr	r2, [pc, #284]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a70:	4b44      	ldr	r3, [pc, #272]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a84:	4a3f      	ldr	r2, [pc, #252]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a8e:	4b3d      	ldr	r3, [pc, #244]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9c:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aa2:	4a38      	ldr	r2, [pc, #224]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000aac:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aba:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ac0:	4a30      	ldr	r2, [pc, #192]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <MX_GPIO_Init+0x194>)
 8000acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2110      	movs	r1, #16
 8000adc:	482a      	ldr	r0, [pc, #168]	; (8000b88 <MX_GPIO_Init+0x198>)
 8000ade:	f002 f811 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	4829      	ldr	r0, [pc, #164]	; (8000b8c <MX_GPIO_Init+0x19c>)
 8000ae8:	f002 f80c 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2110      	movs	r1, #16
 8000af0:	4827      	ldr	r0, [pc, #156]	; (8000b90 <MX_GPIO_Init+0x1a0>)
 8000af2:	f002 f807 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <MX_GPIO_Init+0x1a4>)
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4823      	ldr	r0, [pc, #140]	; (8000b98 <MX_GPIO_Init+0x1a8>)
 8000b0c:	f001 fea8 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 8000b10:	2310      	movs	r3, #16
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4818      	ldr	r0, [pc, #96]	; (8000b88 <MX_GPIO_Init+0x198>)
 8000b28:	f001 fe9a 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4812      	ldr	r0, [pc, #72]	; (8000b8c <MX_GPIO_Init+0x19c>)
 8000b44:	f001 fe8c 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <MX_GPIO_Init+0x1a0>)
 8000b60:	f001 fe7e 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <MX_GPIO_Init+0x1a4>)
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	; (8000b90 <MX_GPIO_Init+0x1a0>)
 8000b78:	f001 fe72 	bl	8002860 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3730      	adds	r7, #48	; 0x30
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	44020c00 	.word	0x44020c00
 8000b88:	42021400 	.word	0x42021400
 8000b8c:	42020400 	.word	0x42020400
 8000b90:	42021800 	.word	0x42021800
 8000b94:	10110000 	.word	0x10110000
 8000b98:	42020800 	.word	0x42020800

08000b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d101      	bne.n	8000bb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bae:	f001 f843 	bl	8001c38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40001000 	.word	0x40001000

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <Error_Handler+0x8>

08000bca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	f06f 0001 	mvn.w	r0, #1
 8000bd6:	f001 f941 	bl	8001e5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	; 0x38
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a49      	ldr	r2, [pc, #292]	; (8000d24 <HAL_ETH_MspInit+0x144>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	f040 808b 	bne.w	8000d1a <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c04:	4b48      	ldr	r3, [pc, #288]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a47      	ldr	r2, [pc, #284]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000c14:	4b44      	ldr	r3, [pc, #272]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c1e:	623b      	str	r3, [r7, #32]
 8000c20:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8000c22:	4b41      	ldr	r3, [pc, #260]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c28:	4a3f      	ldr	r2, [pc, #252]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000c32:	4b3d      	ldr	r3, [pc, #244]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c3c:	61fb      	str	r3, [r7, #28]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8000c40:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a38      	ldr	r2, [pc, #224]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000c50:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c64:	4a30      	ldr	r2, [pc, #192]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c82:	4a29      	ldr	r2, [pc, #164]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c8c:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ca0:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <HAL_ETH_MspInit+0x148>)
 8000cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB15     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cb8:	2332      	movs	r3, #50	; 0x32
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc8:	230b      	movs	r3, #11
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4816      	ldr	r0, [pc, #88]	; (8000d2c <HAL_ETH_MspInit+0x14c>)
 8000cd4:	f001 fdc4 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_7;
 8000cd8:	23a6      	movs	r3, #166	; 0xa6
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce8:	230b      	movs	r3, #11
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480f      	ldr	r0, [pc, #60]	; (8000d30 <HAL_ETH_MspInit+0x150>)
 8000cf4:	f001 fdb4 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8000cf8:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d06:	2302      	movs	r3, #2
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0a:	230b      	movs	r3, #11
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <HAL_ETH_MspInit+0x154>)
 8000d16:	f001 fda3 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3738      	adds	r7, #56	; 0x38
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40028000 	.word	0x40028000
 8000d28:	44020c00 	.word	0x44020c00
 8000d2c:	42020800 	.word	0x42020800
 8000d30:	42020000 	.word	0x42020000
 8000d34:	42020400 	.word	0x42020400

08000d38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0c6      	sub	sp, #280	; 0x118
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000d46:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000d50:	4618      	mov	r0, r3
 8000d52:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000d56:	461a      	mov	r2, r3
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f00e fbeb 	bl	800f534 <memset>
  if(hrtc->Instance==RTC)
 8000d5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a21      	ldr	r2, [pc, #132]	; (8000df0 <HAL_RTC_MspInit+0xb8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d13a      	bne.n	8000de6 <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d74:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8000d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d90:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 ffa5 	bl	8003ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8000da4:	f7ff ff0c 	bl	8000bc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_RTC_MspInit+0xbc>)
 8000daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dae:	4a11      	ldr	r2, [pc, #68]	; (8000df4 <HAL_RTC_MspInit+0xbc>)
 8000db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_RTC_MspInit+0xbc>)
 8000dba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000dbe:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <HAL_RTC_MspInit+0xbc>)
 8000dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_RTC_MspInit+0xbc>)
 8000dca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000dce:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8000dd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000dd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000de0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000de4:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	44007800 	.word	0x44007800
 8000df4:	44020c00 	.word	0x44020c00

08000df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0ce      	sub	sp, #312	; 0x138
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e02:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e06:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e1c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e20:	4618      	mov	r0, r3
 8000e22:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000e26:	461a      	mov	r2, r3
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f00e fb83 	bl	800f534 <memset>
  if(huart->Instance==USART1)
 8000e2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e32:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a6e      	ldr	r2, [pc, #440]	; (8000ff4 <HAL_UART_MspInit+0x1fc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d165      	bne.n	8000f0c <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e44:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000e48:	f04f 0201 	mov.w	r2, #1
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e58:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	65da      	str	r2, [r3, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 ff3f 	bl	8003ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8000e70:	f7ff fea6 	bl	8000bc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e74:	4b60      	ldr	r3, [pc, #384]	; (8000ff8 <HAL_UART_MspInit+0x200>)
 8000e76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e7a:	4a5f      	ldr	r2, [pc, #380]	; (8000ff8 <HAL_UART_MspInit+0x200>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e80:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000e84:	4b5c      	ldr	r3, [pc, #368]	; (8000ff8 <HAL_UART_MspInit+0x200>)
 8000e86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e8a:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8000e8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e92:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e9c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000ea0:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	4b55      	ldr	r3, [pc, #340]	; (8000ff8 <HAL_UART_MspInit+0x200>)
 8000ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ea8:	4a53      	ldr	r2, [pc, #332]	; (8000ff8 <HAL_UART_MspInit+0x200>)
 8000eaa:	f043 0302 	orr.w	r3, r3, #2
 8000eae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000eb2:	4b51      	ldr	r3, [pc, #324]	; (8000ff8 <HAL_UART_MspInit+0x200>)
 8000eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eb8:	f003 0202 	and.w	r2, r3, #2
 8000ebc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ec0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000eca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000ece:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ed0:	23c0      	movs	r3, #192	; 0xc0
 8000ed2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ee8:	2307      	movs	r3, #7
 8000eea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4841      	ldr	r0, [pc, #260]	; (8000ffc <HAL_UART_MspInit+0x204>)
 8000ef6:	f001 fcb3 	bl	8002860 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2105      	movs	r1, #5
 8000efe:	203a      	movs	r0, #58	; 0x3a
 8000f00:	f000 ffac 	bl	8001e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f04:	203a      	movs	r0, #58	; 0x3a
 8000f06:	f000 ffc3 	bl	8001e90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f0a:	e06e      	b.n	8000fea <HAL_UART_MspInit+0x1f2>
  else if(huart->Instance==USART3)
 8000f0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a39      	ldr	r2, [pc, #228]	; (8001000 <HAL_UART_MspInit+0x208>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d165      	bne.n	8000fea <HAL_UART_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f22:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000f26:	f04f 0204 	mov.w	r2, #4
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3e:	f107 0318 	add.w	r3, r7, #24
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 fed0 	bl	8003ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_UART_MspInit+0x15a>
      Error_Handler();
 8000f4e:	f7ff fe37 	bl	8000bc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f52:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <HAL_UART_MspInit+0x200>)
 8000f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <HAL_UART_MspInit+0x200>)
 8000f5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000f62:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <HAL_UART_MspInit+0x200>)
 8000f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f68:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000f6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f7e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_UART_MspInit+0x200>)
 8000f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f86:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <HAL_UART_MspInit+0x200>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <HAL_UART_MspInit+0x200>)
 8000f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f96:	f003 0208 	and.w	r2, r3, #8
 8000f9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000fac:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000fae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fb2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fce:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480b      	ldr	r0, [pc, #44]	; (8001004 <HAL_UART_MspInit+0x20c>)
 8000fd6:	f001 fc43 	bl	8002860 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2105      	movs	r1, #5
 8000fde:	203c      	movs	r0, #60	; 0x3c
 8000fe0:	f000 ff3c 	bl	8001e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fe4:	203c      	movs	r0, #60	; 0x3c
 8000fe6:	f000 ff53 	bl	8001e90 <HAL_NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40013800 	.word	0x40013800
 8000ff8:	44020c00 	.word	0x44020c00
 8000ffc:	42020400 	.word	0x42020400
 8001000:	40004800 	.word	0x40004800
 8001004:	42020c00 	.word	0x42020c00

08001008 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b0cc      	sub	sp, #304	; 0x130
 800100c:	af00      	add	r7, sp, #0
 800100e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001012:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001016:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800102c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001030:	4618      	mov	r0, r3
 8001032:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001036:	461a      	mov	r2, r3
 8001038:	2100      	movs	r1, #0
 800103a:	f00e fa7b 	bl	800f534 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800103e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001042:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a33      	ldr	r2, [pc, #204]	; (8001118 <HAL_PCD_MspInit+0x110>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d15e      	bne.n	800110e <HAL_PCD_MspInit+0x106>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001054:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f04f 0310 	mov.w	r3, #16
 8001060:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001068:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800106c:	2230      	movs	r2, #48	; 0x30
 800106e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4618      	mov	r0, r3
 8001078:	f002 fe36 	bl	8003ce8 <HAL_RCCEx_PeriphCLKConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_PCD_MspInit+0x7e>
    {
      Error_Handler();
 8001082:	f7ff fd9d 	bl	8000bc0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <HAL_PCD_MspInit+0x114>)
 8001088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800108c:	4a23      	ldr	r2, [pc, #140]	; (800111c <HAL_PCD_MspInit+0x114>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <HAL_PCD_MspInit+0x114>)
 8001098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800109c:	f003 0201 	and.w	r2, r3, #1
 80010a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010ae:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80010b2:	681b      	ldr	r3, [r3, #0]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80010b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80010ce:	230a      	movs	r3, #10
 80010d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80010d8:	4619      	mov	r1, r3
 80010da:	4811      	ldr	r0, [pc, #68]	; (8001120 <HAL_PCD_MspInit+0x118>)
 80010dc:	f001 fbc0 	bl	8002860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_PCD_MspInit+0x114>)
 80010e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80010e6:	4a0d      	ldr	r2, [pc, #52]	; (800111c <HAL_PCD_MspInit+0x114>)
 80010e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_PCD_MspInit+0x114>)
 80010f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80010f6:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 80010fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001108:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800110c:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40016000 	.word	0x40016000
 800111c:	44020c00 	.word	0x44020c00
 8001120:	42020000 	.word	0x42020000

08001124 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	; 0x38
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800112c:	4b33      	ldr	r3, [pc, #204]	; (80011fc <HAL_InitTick+0xd8>)
 800112e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001132:	4a32      	ldr	r2, [pc, #200]	; (80011fc <HAL_InitTick+0xd8>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800113c:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <HAL_InitTick+0xd8>)
 800113e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800114a:	f107 020c 	add.w	r2, r7, #12
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f002 fd8f 	bl	8003c78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800115e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001160:	2b00      	cmp	r3, #0
 8001162:	d103      	bne.n	800116c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001164:	f002 fd46 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8001168:	6378      	str	r0, [r7, #52]	; 0x34
 800116a:	e004      	b.n	8001176 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800116c:	f002 fd42 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8001170:	4603      	mov	r3, r0
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8001176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001178:	095b      	lsrs	r3, r3, #5
 800117a:	4a21      	ldr	r2, [pc, #132]	; (8001200 <HAL_InitTick+0xdc>)
 800117c:	fba2 2303 	umull	r2, r3, r2, r3
 8001180:	09db      	lsrs	r3, r3, #7
 8001182:	3b01      	subs	r3, #1
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HAL_InitTick+0xe0>)
 8001188:	4a1f      	ldr	r2, [pc, #124]	; (8001208 <HAL_InitTick+0xe4>)
 800118a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_InitTick+0xe0>)
 800118e:	2263      	movs	r2, #99	; 0x63
 8001190:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001192:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <HAL_InitTick+0xe0>)
 8001194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001196:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_InitTick+0xe0>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_InitTick+0xe0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80011a4:	4817      	ldr	r0, [pc, #92]	; (8001204 <HAL_InitTick+0xe0>)
 80011a6:	f007 ff7b 	bl	80090a0 <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80011b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d118      	bne.n	80011ea <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011b8:	4812      	ldr	r0, [pc, #72]	; (8001204 <HAL_InitTick+0xe0>)
 80011ba:	f007 ffd3 	bl	8009164 <HAL_TIM_Base_Start_IT>
 80011be:	4603      	mov	r3, r0
 80011c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10e      	bne.n	80011ea <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	d808      	bhi.n	80011e4 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80011d2:	2200      	movs	r2, #0
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	2031      	movs	r0, #49	; 0x31
 80011d8:	f000 fe40 	bl	8001e5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011dc:	4a0b      	ldr	r2, [pc, #44]	; (800120c <HAL_InitTick+0xe8>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e002      	b.n	80011ea <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80011ea:	2031      	movs	r0, #49	; 0x31
 80011ec:	f000 fe50 	bl	8001e90 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 80011f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3738      	adds	r7, #56	; 0x38
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	44020c00 	.word	0x44020c00
 8001200:	0a7c5ac5 	.word	0x0a7c5ac5
 8001204:	20000728 	.word	0x20000728
 8001208:	40001000 	.word	0x40001000
 800120c:	2000002c 	.word	0x2000002c

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <TIM6_IRQHandler+0x10>)
 8001242:	f008 f83d 	bl	80092c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000728 	.word	0x20000728

08001250 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <USART1_IRQHandler+0x10>)
 8001256:	f008 fc59 	bl	8009b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200007c0 	.word	0x200007c0

08001264 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <USART3_IRQHandler+0x10>)
 800126a:	f008 fc4f 	bl	8009b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000854 	.word	0x20000854

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f00e f970 	bl	800f58c <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200a0000 	.word	0x200a0000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	20000774 	.word	0x20000774
 80012e0:	20003b48 	.word	0x20003b48

080012e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <SystemInit+0xdc>)
 80012ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f0:	4a33      	ldr	r2, [pc, #204]	; (80013c0 <SystemInit+0xdc>)
 80012f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80012fa:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <SystemInit+0xe0>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001300:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <SystemInit+0xe0>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001306:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <SystemInit+0xe0>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <SystemInit+0xe0>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	492c      	ldr	r1, [pc, #176]	; (80013c4 <SystemInit+0xe0>)
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <SystemInit+0xe4>)
 8001314:	4013      	ands	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <SystemInit+0xe0>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <SystemInit+0xe0>)
 8001320:	2200      	movs	r2, #0
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <SystemInit+0xe0>)
 8001326:	2200      	movs	r2, #0
 8001328:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <SystemInit+0xe0>)
 800132c:	4a27      	ldr	r2, [pc, #156]	; (80013cc <SystemInit+0xe8>)
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <SystemInit+0xe0>)
 8001332:	2200      	movs	r2, #0
 8001334:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <SystemInit+0xe0>)
 8001338:	4a24      	ldr	r2, [pc, #144]	; (80013cc <SystemInit+0xe8>)
 800133a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <SystemInit+0xe0>)
 800133e:	2200      	movs	r2, #0
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <SystemInit+0xe0>)
 8001344:	4a21      	ldr	r2, [pc, #132]	; (80013cc <SystemInit+0xe8>)
 8001346:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <SystemInit+0xe0>)
 800134a:	2200      	movs	r2, #0
 800134c:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <SystemInit+0xe0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <SystemInit+0xe0>)
 8001354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001358:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <SystemInit+0xe0>)
 800135c:	2200      	movs	r2, #0
 800135e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <SystemInit+0xdc>)
 8001362:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001366:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <SystemInit+0xec>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001370:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001378:	d003      	beq.n	8001382 <SystemInit+0x9e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001380:	d117      	bne.n	80013b2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <SystemInit+0xec>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <SystemInit+0xec>)
 8001390:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <SystemInit+0xf0>)
 8001392:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <SystemInit+0xec>)
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <SystemInit+0xf4>)
 8001398:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <SystemInit+0xec>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <SystemInit+0xec>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <SystemInit+0xec>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <SystemInit+0xec>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	61d3      	str	r3, [r2, #28]
  }
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00
 80013c4:	44020c00 	.word	0x44020c00
 80013c8:	eae2eae3 	.word	0xeae2eae3
 80013cc:	01010280 	.word	0x01010280
 80013d0:	40022000 	.word	0x40022000
 80013d4:	08192a3b 	.word	0x08192a3b
 80013d8:	4c5d6e7f 	.word	0x4c5d6e7f

080013dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013e0:	f7ff ff80 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <LoopForever+0x6>)
  ldr r1, =_edata
 80013e6:	490d      	ldr	r1, [pc, #52]	; (800141c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <LoopForever+0xe>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013fc:	4c0a      	ldr	r4, [pc, #40]	; (8001428 <LoopForever+0x16>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800140a:	f00e f8c5 	bl	800f598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800140e:	f7ff f99b 	bl	8000748 <main>

08001412 <LoopForever>:

LoopForever:
    b LoopForever
 8001412:	e7fe      	b.n	8001412 <LoopForever>
  ldr   r0, =_estack
 8001414:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001420:	0800ff60 	.word	0x0800ff60
  ldr r2, =_sbss
 8001424:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001428:	20003b44 	.word	0x20003b44

0800142c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC1_IRQHandler>
	...

08001430 <LED_Init>:
static BOOL s_bLEDInit = FALSE;
static BOOL s_bLEDEnable = FALSE;

// Function Declarations
void LED_Init(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  s_bLEDInit = TRUE;
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <LED_Init+0x1c>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]
  s_bLEDEnable = TRUE;
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <LED_Init+0x20>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000778 	.word	0x20000778
 8001450:	2000077c 	.word	0x2000077c

08001454 <LED_OnOff>:
{
  s_bLEDEnable = bEnable;
}

void LED_OnOff(LED_e eLED, BOOL bOn)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if(FALSE == s_bLEDEnable)
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <LED_OnOff+0x7c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d02d      	beq.n	80014c4 <LED_OnOff+0x70>
    return;
  }

  GPIO_TypeDef* LED_GPIO_Port;
  uint16_t LED_GPIO_Pin;
  if(s_bLEDInit)
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <LED_OnOff+0x80>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d02c      	beq.n	80014ca <LED_OnOff+0x76>
  {
    switch(eLED){
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d010      	beq.n	8001498 <LED_OnOff+0x44>
 8001476:	2b03      	cmp	r3, #3
 8001478:	dc26      	bgt.n	80014c8 <LED_OnOff+0x74>
 800147a:	2b01      	cmp	r3, #1
 800147c:	d002      	beq.n	8001484 <LED_OnOff+0x30>
 800147e:	2b02      	cmp	r3, #2
 8001480:	d005      	beq.n	800148e <LED_OnOff+0x3a>
      case LED_RED:
        LED_GPIO_Port = LED3_RED_GPIO_Port;
        LED_GPIO_Pin = LED3_RED_Pin;
        break;
      default:
        return;
 8001482:	e021      	b.n	80014c8 <LED_OnOff+0x74>
        LED_GPIO_Port = LED1_GREEN_GPIO_Port;
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <LED_OnOff+0x84>)
 8001486:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED1_GREEN_Pin;
 8001488:	2301      	movs	r3, #1
 800148a:	817b      	strh	r3, [r7, #10]
        break;
 800148c:	e009      	b.n	80014a2 <LED_OnOff+0x4e>
        LED_GPIO_Port = LED2_YELLOW_GPIO_Port;
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <LED_OnOff+0x88>)
 8001490:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED2_YELLOW_Pin;
 8001492:	2310      	movs	r3, #16
 8001494:	817b      	strh	r3, [r7, #10]
        break;
 8001496:	e004      	b.n	80014a2 <LED_OnOff+0x4e>
        LED_GPIO_Port = LED3_RED_GPIO_Port;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <LED_OnOff+0x8c>)
 800149a:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED3_RED_Pin;
 800149c:	2310      	movs	r3, #16
 800149e:	817b      	strh	r3, [r7, #10]
        break;
 80014a0:	bf00      	nop
        break;
    }
    if(bOn)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <LED_OnOff+0x62>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
 80014a8:	897b      	ldrh	r3, [r7, #10]
 80014aa:	2201      	movs	r2, #1
 80014ac:	4619      	mov	r1, r3
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f001 fb28 	bl	8002b04 <HAL_GPIO_WritePin>
 80014b4:	e009      	b.n	80014ca <LED_OnOff+0x76>
    }
    else
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 80014b6:	897b      	ldrh	r3, [r7, #10]
 80014b8:	2200      	movs	r2, #0
 80014ba:	4619      	mov	r1, r3
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f001 fb21 	bl	8002b04 <HAL_GPIO_WritePin>
 80014c2:	e002      	b.n	80014ca <LED_OnOff+0x76>
    return;
 80014c4:	bf00      	nop
 80014c6:	e000      	b.n	80014ca <LED_OnOff+0x76>
        return;
 80014c8:	bf00      	nop
    }
  }
}
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000077c 	.word	0x2000077c
 80014d4:	20000778 	.word	0x20000778
 80014d8:	42020400 	.word	0x42020400
 80014dc:	42021400 	.word	0x42021400
 80014e0:	42021800 	.word	0x42021800

080014e4 <LED_SimpleAnimation>:
  LED_OnOff(LED_YELLOW, bOn);
  LED_OnOff(LED_RED, bOn);
}

void LED_SimpleAnimation(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  for(int i =0; i<3; i++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	e02c      	b.n	800154a <LED_SimpleAnimation+0x66>
  {
    LED_OnOff(LED_GREEN, TRUE);
 80014f0:	2101      	movs	r1, #1
 80014f2:	2001      	movs	r0, #1
 80014f4:	f7ff ffae 	bl	8001454 <LED_OnOff>
    HAL_Delay(50);
 80014f8:	2032      	movs	r0, #50	; 0x32
 80014fa:	f000 fbbd 	bl	8001c78 <HAL_Delay>
    LED_OnOff(LED_YELLOW, TRUE);
 80014fe:	2101      	movs	r1, #1
 8001500:	2002      	movs	r0, #2
 8001502:	f7ff ffa7 	bl	8001454 <LED_OnOff>
    HAL_Delay(50);
 8001506:	2032      	movs	r0, #50	; 0x32
 8001508:	f000 fbb6 	bl	8001c78 <HAL_Delay>
    LED_OnOff(LED_RED, TRUE);
 800150c:	2101      	movs	r1, #1
 800150e:	2003      	movs	r0, #3
 8001510:	f7ff ffa0 	bl	8001454 <LED_OnOff>
    HAL_Delay(50);
 8001514:	2032      	movs	r0, #50	; 0x32
 8001516:	f000 fbaf 	bl	8001c78 <HAL_Delay>
    LED_OnOff(LED_GREEN, FALSE);
 800151a:	2100      	movs	r1, #0
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff ff99 	bl	8001454 <LED_OnOff>
    HAL_Delay(50);
 8001522:	2032      	movs	r0, #50	; 0x32
 8001524:	f000 fba8 	bl	8001c78 <HAL_Delay>
    LED_OnOff(LED_YELLOW, FALSE);
 8001528:	2100      	movs	r1, #0
 800152a:	2002      	movs	r0, #2
 800152c:	f7ff ff92 	bl	8001454 <LED_OnOff>
    HAL_Delay(50);
 8001530:	2032      	movs	r0, #50	; 0x32
 8001532:	f000 fba1 	bl	8001c78 <HAL_Delay>
    LED_OnOff(LED_RED, FALSE);
 8001536:	2100      	movs	r1, #0
 8001538:	2003      	movs	r0, #3
 800153a:	f7ff ff8b 	bl	8001454 <LED_OnOff>
    HAL_Delay(50);
 800153e:	2032      	movs	r0, #50	; 0x32
 8001540:	f000 fb9a 	bl	8001c78 <HAL_Delay>
  for(int i =0; i<3; i++)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3301      	adds	r3, #1
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b02      	cmp	r3, #2
 800154e:	ddcf      	ble.n	80014f0 <LED_SimpleAnimation+0xc>
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <CLI_LEDTest>:

#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (LED_TEST,"LED","LED [1~11] [0,1,2] ",CLI_LEDTest);

static void CLI_LEDTest(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
  if (nCount == 2) {
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d10b      	bne.n	8001586 <CLI_LEDTest+0x2c>
    LED_OnOff((LED_e)nFirst, (BOOL)(nSecond != 0));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf14      	ite	ne
 8001578:	2301      	movne	r3, #1
 800157a:	2300      	moveq	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	4619      	mov	r1, r3
 8001580:	4610      	mov	r0, r2
 8001582:	f7ff ff67 	bl	8001454 <LED_OnOff>
  }
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <RTC_Init>:
#include "RTC.h"

static RTC_HandleTypeDef hrtc;

BOOL RTC_Init()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 8001596:	2301      	movs	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800159a:	463b      	mov	r3, r7
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	619a      	str	r2, [r3, #24]

  hrtc.Instance = RTC;
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <RTC_Init+0x94>)
 80015ae:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <RTC_Init+0x98>)
 80015b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <RTC_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <RTC_Init+0x94>)
 80015ba:	227f      	movs	r2, #127	; 0x7f
 80015bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <RTC_Init+0x94>)
 80015c0:	22ff      	movs	r2, #255	; 0xff
 80015c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <RTC_Init+0x94>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <RTC_Init+0x94>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <RTC_Init+0x94>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <RTC_Init+0x94>)
 80015d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015dc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <RTC_Init+0x94>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015e4:	480f      	ldr	r0, [pc, #60]	; (8001624 <RTC_Init+0x94>)
 80015e6:	f007 fbd1 	bl	8008d8c <HAL_RTC_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <RTC_Init+0x64>
  {
    Error_Handler();
 80015f0:	f7ff fae6 	bl	8000bc0 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80015f4:	2300      	movs	r3, #0
 80015f6:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001604:	463b      	mov	r3, r7
 8001606:	4619      	mov	r1, r3
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <RTC_Init+0x94>)
 800160a:	f007 fd1b 	bl	8009044 <HAL_RTCEx_PrivilegeModeSet>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <RTC_Init+0x88>
  {
    Error_Handler();
 8001614:	f7ff fad4 	bl	8000bc0 <Error_Handler>
  }

  return ret;
 8001618:	69fb      	ldr	r3, [r7, #28]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000780 	.word	0x20000780
 8001628:	44007800 	.word	0x44007800

0800162c <RTC_BackupRegRead>:

uint32_t RTC_BackupRegRead(uint32_t index)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4804      	ldr	r0, [pc, #16]	; (8001648 <RTC_BackupRegRead+0x1c>)
 8001638:	f007 fcee 	bl	8009018 <HAL_RTCEx_BKUPRead>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000780 	.word	0x20000780

0800164c <RTC_BackupRegWrite>:
void RTC_BackupRegWrite(uint32_t index, uint32_t data)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4803      	ldr	r0, [pc, #12]	; (8001668 <RTC_BackupRegWrite+0x1c>)
 800165c:	f007 fcc4 	bl	8008fe8 <HAL_RTCEx_BKUPWrite>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000780 	.word	0x20000780

0800166c <Reset_Init>:
    }
  }
}

BOOL Reset_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 8001672:	2301      	movs	r3, #1
 8001674:	603b      	str	r3, [r7, #0]

  BOOL is_debug = FALSE;
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
  // 만약 디버거가 연결된 경우, Debug Flag True
  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <Reset_Init+0x80>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <Reset_Init+0x1e>
  {
    is_debug = TRUE;
 8001686:	2301      	movs	r3, #1
 8001688:	607b      	str	r3, [r7, #4]
  }
  RTC_BackupRegWrite(RESET_REG_COUNT+1, RESET_REG_MAGICNUMBER);
 800168a:	4919      	ldr	r1, [pc, #100]	; (80016f0 <Reset_Init+0x84>)
 800168c:	2002      	movs	r0, #2
 800168e:	f7ff ffdd 	bl	800164c <RTC_BackupRegWrite>

  // Reset 핀이 눌리고 , Debug 모드가 아니라면
  // 0.5초 안에 누른 Reset만 증가
  if((RCC->RSR & (1<<26) && is_debug != TRUE) && RTC_BackupRegRead(RESET_REG_COUNT+1) == RESET_REG_MAGICNUMBER)
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <Reset_Init+0x88>)
 8001694:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01c      	beq.n	80016da <Reset_Init+0x6e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d019      	beq.n	80016da <Reset_Init+0x6e>
 80016a6:	2002      	movs	r0, #2
 80016a8:	f7ff ffc0 	bl	800162c <RTC_BackupRegRead>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <Reset_Init+0x84>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d112      	bne.n	80016da <Reset_Init+0x6e>
  {
    RTC_BackupRegWrite(RESET_REG_COUNT, RTC_BackupRegRead(RESET_REG_COUNT) + 1);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff ffb9 	bl	800162c <RTC_BackupRegRead>
 80016ba:	4603      	mov	r3, r0
 80016bc:	3301      	adds	r3, #1
 80016be:	4619      	mov	r1, r3
 80016c0:	2001      	movs	r0, #1
 80016c2:	f7ff ffc3 	bl	800164c <RTC_BackupRegWrite>
    HAL_Delay(500);
 80016c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ca:	f000 fad5 	bl	8001c78 <HAL_Delay>
    s_ResetCount = RTC_BackupRegRead(RESET_REG_COUNT);   //For getting reset count
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff ffac 	bl	800162c <RTC_BackupRegRead>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <Reset_Init+0x8c>)
 80016d8:	6013      	str	r3, [r2, #0]
  }


  //clear 다시 0으로
  RTC_BackupRegWrite(RESET_REG_COUNT,0);
 80016da:	2100      	movs	r1, #0
 80016dc:	2001      	movs	r0, #1
 80016de:	f7ff ffb5 	bl	800164c <RTC_BackupRegWrite>

  return ret;
 80016e2:	683b      	ldr	r3, [r7, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	e000edf0 	.word	0xe000edf0
 80016f0:	20240215 	.word	0x20240215
 80016f4:	44020c00 	.word	0x44020c00
 80016f8:	200007b0 	.word	0x200007b0

080016fc <UART_Init>:

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

void  UART_Init(uint8_t ch, uint32_t baud)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  switch(ch)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <UART_Init+0x1a>
 800170e:	2b01      	cmp	r3, #1
 8001710:	f000 8085 	beq.w	800181e <UART_Init+0x122>
      {
        s_bUARTConnected[ch] = TRUE;
        g_bDebugTx = TRUE;
      }
    default:
      break;
 8001714:	e106      	b.n	8001924 <UART_Init+0x228>
      huart1.Instance = USART1;
 8001716:	4b86      	ldr	r3, [pc, #536]	; (8001930 <UART_Init+0x234>)
 8001718:	4a86      	ldr	r2, [pc, #536]	; (8001934 <UART_Init+0x238>)
 800171a:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 800171c:	4a84      	ldr	r2, [pc, #528]	; (8001930 <UART_Init+0x234>)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b83      	ldr	r3, [pc, #524]	; (8001930 <UART_Init+0x234>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b81      	ldr	r3, [pc, #516]	; (8001930 <UART_Init+0x234>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 800172e:	4b80      	ldr	r3, [pc, #512]	; (8001930 <UART_Init+0x234>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b7e      	ldr	r3, [pc, #504]	; (8001930 <UART_Init+0x234>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b7d      	ldr	r3, [pc, #500]	; (8001930 <UART_Init+0x234>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b7b      	ldr	r3, [pc, #492]	; (8001930 <UART_Init+0x234>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001746:	4b7a      	ldr	r3, [pc, #488]	; (8001930 <UART_Init+0x234>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800174c:	4b78      	ldr	r3, [pc, #480]	; (8001930 <UART_Init+0x234>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001752:	4b77      	ldr	r3, [pc, #476]	; (8001930 <UART_Init+0x234>)
 8001754:	2200      	movs	r2, #0
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart1) != HAL_OK)
 8001758:	4875      	ldr	r0, [pc, #468]	; (8001930 <UART_Init+0x234>)
 800175a:	f008 f887 	bl	800986c <HAL_UART_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00a      	beq.n	800177a <UART_Init+0x7e>
        Error_Handler();
 8001764:	f7ff fa2c 	bl	8000bc0 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4a73      	ldr	r2, [pc, #460]	; (8001938 <UART_Init+0x23c>)
 800176c:	2100      	movs	r1, #0
 800176e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 8001772:	4b72      	ldr	r3, [pc, #456]	; (800193c <UART_Init+0x240>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e037      	b.n	80017ea <UART_Init+0xee>
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800177a:	2100      	movs	r1, #0
 800177c:	486c      	ldr	r0, [pc, #432]	; (8001930 <UART_Init+0x234>)
 800177e:	f009 ffb4 	bl	800b6ea <HAL_UARTEx_SetTxFifoThreshold>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00a      	beq.n	800179e <UART_Init+0xa2>
        Error_Handler();
 8001788:	f7ff fa1a 	bl	8000bc0 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4a6a      	ldr	r2, [pc, #424]	; (8001938 <UART_Init+0x23c>)
 8001790:	2100      	movs	r1, #0
 8001792:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 8001796:	4b69      	ldr	r3, [pc, #420]	; (800193c <UART_Init+0x240>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	e025      	b.n	80017ea <UART_Init+0xee>
      else if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800179e:	2100      	movs	r1, #0
 80017a0:	4863      	ldr	r0, [pc, #396]	; (8001930 <UART_Init+0x234>)
 80017a2:	f009 ffe0 	bl	800b766 <HAL_UARTEx_SetRxFifoThreshold>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00a      	beq.n	80017c2 <UART_Init+0xc6>
        Error_Handler();
 80017ac:	f7ff fa08 	bl	8000bc0 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	4a61      	ldr	r2, [pc, #388]	; (8001938 <UART_Init+0x23c>)
 80017b4:	2100      	movs	r1, #0
 80017b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 80017ba:	4b60      	ldr	r3, [pc, #384]	; (800193c <UART_Init+0x240>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e013      	b.n	80017ea <UART_Init+0xee>
      else if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017c2:	485b      	ldr	r0, [pc, #364]	; (8001930 <UART_Init+0x234>)
 80017c4:	f009 ff58 	bl	800b678 <HAL_UARTEx_DisableFifoMode>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00a      	beq.n	80017e4 <UART_Init+0xe8>
        Error_Handler();
 80017ce:	f7ff f9f7 	bl	8000bc0 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	4a58      	ldr	r2, [pc, #352]	; (8001938 <UART_Init+0x23c>)
 80017d6:	2100      	movs	r1, #0
 80017d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 80017dc:	4b57      	ldr	r3, [pc, #348]	; (800193c <UART_Init+0x240>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e002      	b.n	80017ea <UART_Init+0xee>
        svRingBuffer_Reset(&g_uartRxBuff);
 80017e4:	4856      	ldr	r0, [pc, #344]	; (8001940 <UART_Init+0x244>)
 80017e6:	f00b f862 	bl	800c8ae <svRingBuffer_Reset>
      if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data,1) != HAL_OK)
 80017ea:	2201      	movs	r2, #1
 80017ec:	4955      	ldr	r1, [pc, #340]	; (8001944 <UART_Init+0x248>)
 80017ee:	4850      	ldr	r0, [pc, #320]	; (8001930 <UART_Init+0x234>)
 80017f0:	f008 f92a 	bl	8009a48 <HAL_UART_Receive_IT>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d008      	beq.n	800180c <UART_Init+0x110>
        s_bUARTConnected[ch] = FALSE;
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	4a4e      	ldr	r2, [pc, #312]	; (8001938 <UART_Init+0x23c>)
 80017fe:	2100      	movs	r1, #0
 8001800:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 8001804:	4b4d      	ldr	r3, [pc, #308]	; (800193c <UART_Init+0x240>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
      break;
 800180a:	e08c      	b.n	8001926 <UART_Init+0x22a>
        s_bUARTConnected[ch] = TRUE;
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	4a4a      	ldr	r2, [pc, #296]	; (8001938 <UART_Init+0x23c>)
 8001810:	2101      	movs	r1, #1
 8001812:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = TRUE;
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <UART_Init+0x240>)
 8001818:	2201      	movs	r2, #1
 800181a:	601a      	str	r2, [r3, #0]
      break;
 800181c:	e083      	b.n	8001926 <UART_Init+0x22a>
      huart3.Instance = USART3;
 800181e:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <UART_Init+0x24c>)
 8001820:	4a4a      	ldr	r2, [pc, #296]	; (800194c <UART_Init+0x250>)
 8001822:	601a      	str	r2, [r3, #0]
      huart3.Init.BaudRate = baud;
 8001824:	4a48      	ldr	r2, [pc, #288]	; (8001948 <UART_Init+0x24c>)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	6053      	str	r3, [r2, #4]
      huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <UART_Init+0x24c>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
      huart3.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b45      	ldr	r3, [pc, #276]	; (8001948 <UART_Init+0x24c>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
      huart3.Init.Parity = UART_PARITY_NONE;
 8001836:	4b44      	ldr	r3, [pc, #272]	; (8001948 <UART_Init+0x24c>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
      huart3.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b42      	ldr	r3, [pc, #264]	; (8001948 <UART_Init+0x24c>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
      huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <UART_Init+0x24c>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
      huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <UART_Init+0x24c>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
      huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184e:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <UART_Init+0x24c>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
      huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001854:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <UART_Init+0x24c>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
      huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800185a:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <UART_Init+0x24c>)
 800185c:	2200      	movs	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart3) != HAL_OK)
 8001860:	4839      	ldr	r0, [pc, #228]	; (8001948 <UART_Init+0x24c>)
 8001862:	f008 f803 	bl	800986c <HAL_UART_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00a      	beq.n	8001882 <UART_Init+0x186>
        Error_Handler();
 800186c:	f7ff f9a8 	bl	8000bc0 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	4a31      	ldr	r2, [pc, #196]	; (8001938 <UART_Init+0x23c>)
 8001874:	2100      	movs	r1, #0
 8001876:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <UART_Init+0x240>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e037      	b.n	80018f2 <UART_Init+0x1f6>
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001882:	2100      	movs	r1, #0
 8001884:	4830      	ldr	r0, [pc, #192]	; (8001948 <UART_Init+0x24c>)
 8001886:	f009 ff30 	bl	800b6ea <HAL_UARTEx_SetTxFifoThreshold>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00a      	beq.n	80018a6 <UART_Init+0x1aa>
        Error_Handler();
 8001890:	f7ff f996 	bl	8000bc0 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	4a28      	ldr	r2, [pc, #160]	; (8001938 <UART_Init+0x23c>)
 8001898:	2100      	movs	r1, #0
 800189a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 800189e:	4b27      	ldr	r3, [pc, #156]	; (800193c <UART_Init+0x240>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e025      	b.n	80018f2 <UART_Init+0x1f6>
      else if(HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a6:	2100      	movs	r1, #0
 80018a8:	4827      	ldr	r0, [pc, #156]	; (8001948 <UART_Init+0x24c>)
 80018aa:	f009 ff5c 	bl	800b766 <HAL_UARTEx_SetRxFifoThreshold>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00a      	beq.n	80018ca <UART_Init+0x1ce>
        Error_Handler();
 80018b4:	f7ff f984 	bl	8000bc0 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	4a1f      	ldr	r2, [pc, #124]	; (8001938 <UART_Init+0x23c>)
 80018bc:	2100      	movs	r1, #0
 80018be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <UART_Init+0x240>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	e013      	b.n	80018f2 <UART_Init+0x1f6>
      else if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80018ca:	481f      	ldr	r0, [pc, #124]	; (8001948 <UART_Init+0x24c>)
 80018cc:	f009 fed4 	bl	800b678 <HAL_UARTEx_DisableFifoMode>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <UART_Init+0x1f0>
        Error_Handler();
 80018d6:	f7ff f973 	bl	8000bc0 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	4a16      	ldr	r2, [pc, #88]	; (8001938 <UART_Init+0x23c>)
 80018de:	2100      	movs	r1, #0
 80018e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <UART_Init+0x240>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e002      	b.n	80018f2 <UART_Init+0x1f6>
        svRingBuffer_Reset(&g_uartRxBuff);
 80018ec:	4814      	ldr	r0, [pc, #80]	; (8001940 <UART_Init+0x244>)
 80018ee:	f00a ffde 	bl	800c8ae <svRingBuffer_Reset>
      if(HAL_UART_Receive_IT(&huart3, (uint8_t*)&rx_data,1) != HAL_OK)
 80018f2:	2201      	movs	r2, #1
 80018f4:	4913      	ldr	r1, [pc, #76]	; (8001944 <UART_Init+0x248>)
 80018f6:	4814      	ldr	r0, [pc, #80]	; (8001948 <UART_Init+0x24c>)
 80018f8:	f008 f8a6 	bl	8009a48 <HAL_UART_Receive_IT>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <UART_Init+0x218>
        s_bUARTConnected[ch] = FALSE;
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <UART_Init+0x23c>)
 8001906:	2100      	movs	r1, #0
 8001908:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <UART_Init+0x240>)
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
      break;
 8001912:	e007      	b.n	8001924 <UART_Init+0x228>
        s_bUARTConnected[ch] = TRUE;
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <UART_Init+0x23c>)
 8001918:	2101      	movs	r1, #1
 800191a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = TRUE;
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <UART_Init+0x240>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
      break;
 8001924:	bf00      	nop
  }
  return;
 8001926:	bf00      	nop
}
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200007c0 	.word	0x200007c0
 8001934:	40013800 	.word	0x40013800
 8001938:	200007b8 	.word	0x200007b8
 800193c:	20000968 	.word	0x20000968
 8001940:	20000010 	.word	0x20000010
 8001944:	200007b4 	.word	0x200007b4
 8001948:	20000854 	.word	0x20000854
 800194c:	40004800 	.word	0x40004800

08001950 <IsUartConnected>:

BOOL  IsUartConnected(uint8_t ch)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  return s_bUARTConnected[ch];
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <IsUartConnected+0x20>)
 800195e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	200007b8 	.word	0x200007b8

08001974 <UART_Write>:

uint32_t  UART_Write(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
 8001980:	4613      	mov	r3, r2
 8001982:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status;

  switch(ch)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <UART_Write+0x20>
 800198e:	2b01      	cmp	r3, #1
 8001990:	d011      	beq.n	80019b6 <UART_Write+0x42>
        ret = Len;
        g_bDebugTx = TRUE;
      }
      break;
    default:
      break;
 8001992:	e024      	b.n	80019de <UART_Write+0x6a>
      status = HAL_UART_Transmit(&huart1, Buf, Len, 100);
 8001994:	88ba      	ldrh	r2, [r7, #4]
 8001996:	2364      	movs	r3, #100	; 0x64
 8001998:	6839      	ldr	r1, [r7, #0]
 800199a:	4813      	ldr	r0, [pc, #76]	; (80019e8 <UART_Write+0x74>)
 800199c:	f007 ffb6 	bl	800990c <HAL_UART_Transmit>
 80019a0:	4603      	mov	r3, r0
 80019a2:	72fb      	strb	r3, [r7, #11]
      if(status == HAL_OK)
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d116      	bne.n	80019d8 <UART_Write+0x64>
        ret = Len;
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <UART_Write+0x78>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
      break;
 80019b4:	e010      	b.n	80019d8 <UART_Write+0x64>
      status = HAL_UART_Transmit(&huart3, Buf, Len, 100);
 80019b6:	88ba      	ldrh	r2, [r7, #4]
 80019b8:	2364      	movs	r3, #100	; 0x64
 80019ba:	6839      	ldr	r1, [r7, #0]
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <UART_Write+0x7c>)
 80019be:	f007 ffa5 	bl	800990c <HAL_UART_Transmit>
 80019c2:	4603      	mov	r3, r0
 80019c4:	72fb      	strb	r3, [r7, #11]
      if(status == HAL_OK)
 80019c6:	7afb      	ldrb	r3, [r7, #11]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d107      	bne.n	80019dc <UART_Write+0x68>
        ret = Len;
 80019cc:	88bb      	ldrh	r3, [r7, #4]
 80019ce:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <UART_Write+0x78>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
      break;
 80019d6:	e001      	b.n	80019dc <UART_Write+0x68>
      break;
 80019d8:	bf00      	nop
 80019da:	e000      	b.n	80019de <UART_Write+0x6a>
      break;
 80019dc:	bf00      	nop
  }
  return ret;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200007c0 	.word	0x200007c0
 80019ec:	20000968 	.word	0x20000968
 80019f0:	20000854 	.word	0x20000854

080019f4 <HAL_UART_RxCpltCallback>:
  return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <HAL_UART_RxCpltCallback+0x74>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d113      	bne.n	8001a2e <HAL_UART_RxCpltCallback+0x3a>
  {
    // For UART Test
    // UART_Printf(_DEF_UART1, "RxData : 0x%X\n", rx_data);
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_UART_RxCpltCallback+0x78>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4818      	ldr	r0, [pc, #96]	; (8001a70 <HAL_UART_RxCpltCallback+0x7c>)
 8001a0e:	f00a ff66 	bl	800c8de <svRingBuffer_Push>
 8001a12:	60b8      	str	r0, [r7, #8]
    if(result == -2 )
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f113 0f02 	cmn.w	r3, #2
 8001a1a:	d102      	bne.n	8001a22 <HAL_UART_RxCpltCallback+0x2e>
    {
      svRingBuffer_Reset(&g_uartRxBuff);
 8001a1c:	4814      	ldr	r0, [pc, #80]	; (8001a70 <HAL_UART_RxCpltCallback+0x7c>)
 8001a1e:	f00a ff46 	bl	800c8ae <svRingBuffer_Reset>
    }else
    {

    }
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data, 1);
 8001a22:	2201      	movs	r2, #1
 8001a24:	4911      	ldr	r1, [pc, #68]	; (8001a6c <HAL_UART_RxCpltCallback+0x78>)
 8001a26:	4813      	ldr	r0, [pc, #76]	; (8001a74 <HAL_UART_RxCpltCallback+0x80>)
 8001a28:	f008 f80e 	bl	8009a48 <HAL_UART_Receive_IT>
    {

    }
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
  }
}
 8001a2c:	e017      	b.n	8001a5e <HAL_UART_RxCpltCallback+0x6a>
  else if(huart->Instance == USART3)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <HAL_UART_RxCpltCallback+0x84>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d112      	bne.n	8001a5e <HAL_UART_RxCpltCallback+0x6a>
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_UART_RxCpltCallback+0x78>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	480c      	ldr	r0, [pc, #48]	; (8001a70 <HAL_UART_RxCpltCallback+0x7c>)
 8001a40:	f00a ff4d 	bl	800c8de <svRingBuffer_Push>
 8001a44:	60f8      	str	r0, [r7, #12]
    if(result == -2 )
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f113 0f02 	cmn.w	r3, #2
 8001a4c:	d102      	bne.n	8001a54 <HAL_UART_RxCpltCallback+0x60>
      svRingBuffer_Reset(&g_uartRxBuff);
 8001a4e:	4808      	ldr	r0, [pc, #32]	; (8001a70 <HAL_UART_RxCpltCallback+0x7c>)
 8001a50:	f00a ff2d 	bl	800c8ae <svRingBuffer_Reset>
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
 8001a54:	2201      	movs	r2, #1
 8001a56:	4905      	ldr	r1, [pc, #20]	; (8001a6c <HAL_UART_RxCpltCallback+0x78>)
 8001a58:	4808      	ldr	r0, [pc, #32]	; (8001a7c <HAL_UART_RxCpltCallback+0x88>)
 8001a5a:	f007 fff5 	bl	8009a48 <HAL_UART_Receive_IT>
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	200007b4 	.word	0x200007b4
 8001a70:	20000010 	.word	0x20000010
 8001a74:	200007c0 	.word	0x200007c0
 8001a78:	40004800 	.word	0x40004800
 8001a7c:	20000854 	.word	0x20000854

08001a80 <svDebugRxChar>:
  return ch;
}
#endif

char svDebugRxChar(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	if (svRingBuffer_GetCount(&g_rbDebugRx) > 0) {
 8001a84:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <svDebugRxChar+0x20>)
 8001a86:	f00a fef0 	bl	800c86a <svRingBuffer_GetCount>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <svDebugRxChar+0x1a>
		return svRingBuffer_Pop(&g_rbDebugRx);
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <svDebugRxChar+0x20>)
 8001a92:	f00a ff58 	bl	800c946 <svRingBuffer_Pop>
 8001a96:	4603      	mov	r3, r0
 8001a98:	e000      	b.n	8001a9c <svDebugRxChar+0x1c>
	}
	else {
		return 0;
 8001a9a:	2300      	movs	r3, #0
	}
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000010 	.word	0x20000010

08001aa4 <svDebugProcess>:

void svDebugProcess(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
	if (IsUartConnected(_DEF_UART1)) {
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f7ff ff50 	bl	8001950 <IsUartConnected>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d01a      	beq.n	8001aec <svDebugProcess+0x48>
	  svCLI_Handler();
 8001ab6:	f00a fd85 	bl	800c5c4 <svCLI_Handler>
		if (g_bDebugTx == TRUE) {
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <svDebugProcess+0x50>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d114      	bne.n	8001aec <svDebugProcess+0x48>
			size_t nLength = lwrb_get_linear_block_read_length(&g_lwrbDebugTx);
 8001ac2:	480d      	ldr	r0, [pc, #52]	; (8001af8 <svDebugProcess+0x54>)
 8001ac4:	f00d fbff 	bl	800f2c6 <lwrb_get_linear_block_read_length>
 8001ac8:	6078      	str	r0, [r7, #4]
			if (nLength > 0) {
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00d      	beq.n	8001aec <svDebugProcess+0x48>
			  /*
				if (nLength > UART_TX_DATA_SIZE) {
					nLength = UART_TX_DATA_SIZE;
				}
				*/
				UART_Write(_DEF_UART1, lwrb_get_linear_block_read_address(&g_lwrbDebugTx), nLength);
 8001ad0:	4809      	ldr	r0, [pc, #36]	; (8001af8 <svDebugProcess+0x54>)
 8001ad2:	f00d fbdc 	bl	800f28e <lwrb_get_linear_block_read_address>
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff ff48 	bl	8001974 <UART_Write>
				lwrb_skip(&g_lwrbDebugTx, nLength);
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4804      	ldr	r0, [pc, #16]	; (8001af8 <svDebugProcess+0x54>)
 8001ae8:	f00d fc20 	bl	800f32c <lwrb_skip>
				g_bDebugTx = TRUE;
		  }
		}
		*/
	}
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000968 	.word	0x20000968
 8001af8:	2000096c 	.word	0x2000096c

08001afc <svDebugCallback>:

void svDebugCallback(LWRB_VOLATILE struct lwrb* buff, lwrb_evt_type_t evt, size_t bp)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	460b      	mov	r3, r1
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	72fb      	strb	r3, [r7, #11]
	if (evt == LWRB_EVT_FULL) {
 8001b0a:	7afb      	ldrb	r3, [r7, #11]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d11a      	bne.n	8001b46 <svDebugCallback+0x4a>
		if (IsUartConnected(_DEF_UART1)) {
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff ff1d 	bl	8001950 <IsUartConnected>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d014      	beq.n	8001b46 <svDebugCallback+0x4a>
			uint32_t uTick = HAL_GetTick();
 8001b1c:	f000 f8a0 	bl	8001c60 <HAL_GetTick>
 8001b20:	6178      	str	r0, [r7, #20]
			while (GetElapsedTime(uTick) < 100) {
 8001b22:	e003      	b.n	8001b2c <svDebugCallback+0x30>
				if (g_bDebugTx == TRUE) {
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <svDebugCallback+0x54>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d006      	beq.n	8001b3a <svDebugCallback+0x3e>
			while (GetElapsedTime(uTick) < 100) {
 8001b2c:	6978      	ldr	r0, [r7, #20]
 8001b2e:	f000 f845 	bl	8001bbc <GetElapsedTime>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b63      	cmp	r3, #99	; 0x63
 8001b36:	d9f5      	bls.n	8001b24 <svDebugCallback+0x28>
 8001b38:	e000      	b.n	8001b3c <svDebugCallback+0x40>
					break;
 8001b3a:	bf00      	nop
				}
				// HAL_Delay(1);
			}
      g_bDebugTx = TRUE;
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <svDebugCallback+0x54>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
			svDebugProcess();
 8001b42:	f7ff ffaf 	bl	8001aa4 <svDebugProcess>
		}
	}
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000968 	.word	0x20000968

08001b54 <svDebugInit>:
{
	return lwrb_get_free(&g_lwrbDebugTx);
}

void svDebugInit(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	svRingBuffer_Reset(&g_rbDebugRx);
 8001b58:	4809      	ldr	r0, [pc, #36]	; (8001b80 <svDebugInit+0x2c>)
 8001b5a:	f00a fea8 	bl	800c8ae <svRingBuffer_Reset>
	svCLI_Init(&svDebugRxChar, &svDebugPutChar, NULL);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4908      	ldr	r1, [pc, #32]	; (8001b84 <svDebugInit+0x30>)
 8001b62:	4809      	ldr	r0, [pc, #36]	; (8001b88 <svDebugInit+0x34>)
 8001b64:	f00a f8b0 	bl	800bcc8 <svCLI_Init>

  lwrb_init(&g_lwrbDebugTx, &s_byDebugTxRingBuffer[0], DEBUG_TX_BUFFER_SIZE);
 8001b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6c:	4907      	ldr	r1, [pc, #28]	; (8001b8c <svDebugInit+0x38>)
 8001b6e:	4808      	ldr	r0, [pc, #32]	; (8001b90 <svDebugInit+0x3c>)
 8001b70:	f00d fa6e 	bl	800f050 <lwrb_init>
	lwrb_set_evt_fn(&g_lwrbDebugTx, svDebugCallback);
 8001b74:	4907      	ldr	r1, [pc, #28]	; (8001b94 <svDebugInit+0x40>)
 8001b76:	4806      	ldr	r0, [pc, #24]	; (8001b90 <svDebugInit+0x3c>)
 8001b78:	f00d fa8b 	bl	800f092 <lwrb_set_evt_fn>
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000010 	.word	0x20000010
 8001b84:	08001b99 	.word	0x08001b99
 8001b88:	08001a81 	.word	0x08001a81
 8001b8c:	20000980 	.word	0x20000980
 8001b90:	2000096c 	.word	0x2000096c
 8001b94:	08001afd 	.word	0x08001afd

08001b98 <svDebugPutChar>:
		uDebugMsgLevel = DEBUG_VERBOSE;
	g_DebugMsgLevel = uDebugMsgLevel;
}

void svDebugPutChar(char cPut)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
	lwrb_write(&g_lwrbDebugTx, (const void*)(&cPut), 1);
 8001ba2:	1dfb      	adds	r3, r7, #7
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <svDebugPutChar+0x20>)
 8001baa:	f00d fa8b 	bl	800f0c4 <lwrb_write>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000096c 	.word	0x2000096c

08001bbc <GetElapsedTime>:
#include <math.h>


// Functions
uint32_t GetElapsedTime(uint32_t tickRef)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	uint32_t tickCurrent = HAL_GetTick();
 8001bc4:	f000 f84c 	bl	8001c60 <HAL_GetTick>
 8001bc8:	60f8      	str	r0, [r7, #12]
	// Check Wrap around
	if (tickCurrent < tickRef) {
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d204      	bcs.n	8001bdc <GetElapsedTime+0x20>
		return (0xffffffff - tickRef + tickCurrent);
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	e002      	b.n	8001be2 <GetElapsedTime+0x26>
	}
	else {
		return tickCurrent - tickRef;
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	1ad3      	subs	r3, r2, r3
	}
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 f928 	bl	8001e46 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001bf6:	f001 feb5 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_Init+0x40>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	490a      	ldr	r1, [pc, #40]	; (8001c30 <HAL_Init+0x44>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <HAL_Init+0x48>)
 8001c0e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c10:	200f      	movs	r0, #15
 8001c12:	f7ff fa87 	bl	8001124 <HAL_InitTick>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e002      	b.n	8001c26 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c20:	f7fe ffd3 	bl	8000bca <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	44020c00 	.word	0x44020c00
 8001c30:	0800fedc 	.word	0x0800fedc
 8001c34:	2000000c 	.word	0x2000000c

08001c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x20>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x24>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_IncTick+0x24>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000030 	.word	0x20000030
 8001c5c:	20000b84 	.word	0x20000b84

08001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_GetTick+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000b84 	.word	0x20000b84

08001c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7ff ffee 	bl	8001c60 <HAL_GetTick>
 8001c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d005      	beq.n	8001c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_Delay+0x44>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9e:	bf00      	nop
 8001ca0:	f7ff ffde 	bl	8001c60 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d8f7      	bhi.n	8001ca0 <HAL_Delay+0x28>
  {
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000030 	.word	0x20000030

08001cc0 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001cca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001cce:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001cd2:	4905      	ldr	r1, [pc, #20]	; (8001ce8 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	44000400 	.word	0x44000400

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	; (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff4c 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6a:	f7ff ff63 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001e6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	6978      	ldr	r0, [r7, #20]
 8001e76:	f7ff ffb3 	bl	8001de0 <NVIC_EncodePriority>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff82 	bl	8001d8c <__NVIC_SetPriority>
}
 8001e88:	bf00      	nop
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ff56 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001eb4:	f7ff fed4 	bl	8001c60 <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e06b      	b.n	8001f9c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d008      	beq.n	8001ee2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e05c      	b.n	8001f9c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0204 	orr.w	r2, r2, #4
 8001ef0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2205      	movs	r2, #5
 8001ef6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001efa:	e020      	b.n	8001f3e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001efc:	f7ff feb0 	bl	8001c60 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b05      	cmp	r3, #5
 8001f08:	d919      	bls.n	8001f3e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0e:	f043 0210 	orr.w	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f2e:	2201      	movs	r2, #1
 8001f30:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e02e      	b.n	8001f9c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0d7      	beq.n	8001efc <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0202 	orr.w	r2, r2, #2
 8001f5a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2204      	movs	r2, #4
 8001f60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8001f6c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f86:	2201      	movs	r2, #1
 8001f88:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e019      	b.n	8001fea <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d004      	beq.n	8001fcc <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e00e      	b.n	8001fea <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0d2      	b.n	80021b0 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002010:	2b00      	cmp	r3, #0
 8002012:	d106      	bne.n	8002022 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2223      	movs	r2, #35	; 0x23
 8002018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7fe fddf 	bl	8000be0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 8002022:	4b65      	ldr	r3, [pc, #404]	; (80021b8 <HAL_ETH_Init+0x1c0>)
 8002024:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002028:	4a63      	ldr	r2, [pc, #396]	; (80021b8 <HAL_ETH_Init+0x1c0>)
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002032:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <HAL_ETH_Init+0x1c0>)
 8002034:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7a1b      	ldrb	r3, [r3, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d103      	bne.n	8002050 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff fe39 	bl	8001cc0 <HAL_SBS_ETHInterfaceSelect>
 800204e:	e003      	b.n	8002058 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8002050:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002054:	f7ff fe34 	bl	8001cc0 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8002058:	4b58      	ldr	r3, [pc, #352]	; (80021bc <HAL_ETH_Init+0x1c4>)
 800205a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002074:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002076:	f7ff fdf3 	bl	8001c60 <HAL_GetTick>
 800207a:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800207c:	e011      	b.n	80020a2 <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800207e:	f7ff fdef 	bl	8001c60 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800208c:	d909      	bls.n	80020a2 <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2204      	movs	r2, #4
 8002092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	22e0      	movs	r2, #224	; 0xe0
 800209a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e086      	b.n	80021b0 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1e4      	bne.n	800207e <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f885 	bl	80021c4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80020ba:	f001 fd7f 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 80020be:	4603      	mov	r3, r0
 80020c0:	4a3f      	ldr	r2, [pc, #252]	; (80021c0 <HAL_ETH_Init+0x1c8>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	0c9a      	lsrs	r2, r3, #18
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3a01      	subs	r2, #1
 80020ce:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fa80 	bl	80025d8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80020e4:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020f4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d009      	beq.n	8002118 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	22e0      	movs	r2, #224	; 0xe0
 8002110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e04b      	b.n	80021b0 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002120:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002124:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002128:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6952      	ldr	r2, [r2, #20]
 8002130:	0051      	lsls	r1, r2, #1
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	430b      	orrs	r3, r1
 8002138:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800213c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fae6 	bl	8002712 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fb2c 	bl	80027a4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	3305      	adds	r3, #5
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	021a      	lsls	r2, r3, #8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	3304      	adds	r3, #4
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	4619      	mov	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	3303      	adds	r3, #3
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	061a      	lsls	r2, r3, #24
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	3302      	adds	r3, #2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	3301      	adds	r3, #1
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800218a:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002198:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800219a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2210      	movs	r2, #16
 80021aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	44020c00 	.word	0x44020c00
 80021bc:	44000400 	.word	0x44000400
 80021c0:	431bde83 	.word	0x431bde83

080021c4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80021de:	f001 fced 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 80021e2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4a25      	ldr	r2, [pc, #148]	; (800227c <HAL_ETH_SetMDIOClockRange+0xb8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d908      	bls.n	80021fe <HAL_ETH_SetMDIOClockRange+0x3a>
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4a24      	ldr	r2, [pc, #144]	; (8002280 <HAL_ETH_SetMDIOClockRange+0xbc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d804      	bhi.n	80021fe <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	e034      	b.n	8002268 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d908      	bls.n	8002218 <HAL_ETH_SetMDIOClockRange+0x54>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <HAL_ETH_SetMDIOClockRange+0xc0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d204      	bcs.n	8002218 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	e027      	b.n	8002268 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4a1a      	ldr	r2, [pc, #104]	; (8002284 <HAL_ETH_SetMDIOClockRange+0xc0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d303      	bcc.n	8002228 <HAL_ETH_SetMDIOClockRange+0x64>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4a19      	ldr	r2, [pc, #100]	; (8002288 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d91e      	bls.n	8002266 <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4a17      	ldr	r2, [pc, #92]	; (8002288 <HAL_ETH_SetMDIOClockRange+0xc4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d908      	bls.n	8002242 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4a16      	ldr	r2, [pc, #88]	; (800228c <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d804      	bhi.n	8002242 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e012      	b.n	8002268 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4a11      	ldr	r2, [pc, #68]	; (800228c <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d908      	bls.n	800225c <HAL_ETH_SetMDIOClockRange+0x98>
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	4a10      	ldr	r2, [pc, #64]	; (8002290 <HAL_ETH_SetMDIOClockRange+0xcc>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d804      	bhi.n	800225c <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	e005      	b.n	8002268 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	e000      	b.n	8002268 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002266:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	01312cff 	.word	0x01312cff
 8002280:	02160ebf 	.word	0x02160ebf
 8002284:	03938700 	.word	0x03938700
 8002288:	05f5e0ff 	.word	0x05f5e0ff
 800228c:	08f0d17f 	.word	0x08f0d17f
 8002290:	0ee6b280 	.word	0x0ee6b280

08002294 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80022a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	791b      	ldrb	r3, [r3, #4]
 80022ac:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80022ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	7b1b      	ldrb	r3, [r3, #12]
 80022b4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80022b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	7b5b      	ldrb	r3, [r3, #13]
 80022bc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	7b9b      	ldrb	r3, [r3, #14]
 80022c4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80022c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	7bdb      	ldrb	r3, [r3, #15]
 80022cc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80022ce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	7c12      	ldrb	r2, [r2, #16]
 80022d4:	2a00      	cmp	r2, #0
 80022d6:	d102      	bne.n	80022de <ETH_SetMACConfig+0x4a>
 80022d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80022dc:	e000      	b.n	80022e0 <ETH_SetMACConfig+0x4c>
 80022de:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80022e0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	7c52      	ldrb	r2, [r2, #17]
 80022e6:	2a00      	cmp	r2, #0
 80022e8:	d102      	bne.n	80022f0 <ETH_SetMACConfig+0x5c>
 80022ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ee:	e000      	b.n	80022f2 <ETH_SetMACConfig+0x5e>
 80022f0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80022f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	7c9b      	ldrb	r3, [r3, #18]
 80022f8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80022fa:	431a      	orrs	r2, r3
               macconf->Speed |
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002300:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002306:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	7f1b      	ldrb	r3, [r3, #28]
 800230c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800230e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	7f5b      	ldrb	r3, [r3, #29]
 8002314:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002316:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	7f92      	ldrb	r2, [r2, #30]
 800231c:	2a00      	cmp	r2, #0
 800231e:	d102      	bne.n	8002326 <ETH_SetMACConfig+0x92>
 8002320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002324:	e000      	b.n	8002328 <ETH_SetMACConfig+0x94>
 8002326:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002328:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	7fdb      	ldrb	r3, [r3, #31]
 800232e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002330:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002338:	2a00      	cmp	r2, #0
 800233a:	d102      	bne.n	8002342 <ETH_SetMACConfig+0xae>
 800233c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002340:	e000      	b.n	8002344 <ETH_SetMACConfig+0xb0>
 8002342:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002344:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800234a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002352:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002354:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <ETH_SetMACConfig+0x230>)
 8002366:	4013      	ands	r3, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	430b      	orrs	r3, r1
 8002370:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800237e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002380:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002388:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800238a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002392:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002394:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800239c:	2a00      	cmp	r2, #0
 800239e:	d102      	bne.n	80023a6 <ETH_SetMACConfig+0x112>
 80023a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023a4:	e000      	b.n	80023a8 <ETH_SetMACConfig+0x114>
 80023a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80023a8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4b43      	ldr	r3, [pc, #268]	; (80024c8 <ETH_SetMACConfig+0x234>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	68f9      	ldr	r1, [r7, #12]
 80023c2:	430b      	orrs	r3, r1
 80023c4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023cc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	68f9      	ldr	r1, [r7, #12]
 80023ea:	430b      	orrs	r3, r1
 80023ec:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80023f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80023fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002402:	2a00      	cmp	r2, #0
 8002404:	d101      	bne.n	800240a <ETH_SetMACConfig+0x176>
 8002406:	2280      	movs	r2, #128	; 0x80
 8002408:	e000      	b.n	800240c <ETH_SetMACConfig+0x178>
 800240a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800240c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002412:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800241e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002422:	4013      	ands	r3, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	68f9      	ldr	r1, [r7, #12]
 800242a:	430b      	orrs	r3, r1
 800242c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002434:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800243c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	f023 0103 	bic.w	r1, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	430a      	orrs	r2, r1
 8002456:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002462:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800247e:	2a00      	cmp	r2, #0
 8002480:	d101      	bne.n	8002486 <ETH_SetMACConfig+0x1f2>
 8002482:	2240      	movs	r2, #64	; 0x40
 8002484:	e000      	b.n	8002488 <ETH_SetMACConfig+0x1f4>
 8002486:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002488:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002490:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002492:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800249a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80024a8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	00048083 	.word	0x00048083
 80024c8:	c0f88000 	.word	0xc0f88000

080024cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80024e4:	f023 0302 	bic.w	r3, r3, #2
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	6811      	ldr	r1, [r2, #0]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024f6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	791b      	ldrb	r3, [r3, #4]
 80024fc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002502:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	7b1b      	ldrb	r3, [r3, #12]
 8002508:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	68f9      	ldr	r1, [r7, #12]
 8002526:	430b      	orrs	r3, r1
 8002528:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800252c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	7b5b      	ldrb	r3, [r3, #13]
 8002532:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002544:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <ETH_SetDMAConfig+0x104>)
 800254a:	4013      	ands	r3, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	430b      	orrs	r3, r1
 8002554:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002558:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	7d1b      	ldrb	r3, [r3, #20]
 8002564:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002566:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	7f5b      	ldrb	r3, [r3, #29]
 800256c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800257a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <ETH_SetDMAConfig+0x108>)
 8002580:	4013      	ands	r3, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	430b      	orrs	r3, r1
 800258a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800258e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	7f1b      	ldrb	r3, [r3, #28]
 8002596:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025b0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	68f9      	ldr	r1, [r7, #12]
 80025ba:	430b      	orrs	r3, r1
 80025bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025c0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	fffec000 	.word	0xfffec000
 80025d4:	ffc0efef 	.word	0xffc0efef

080025d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b0a4      	sub	sp, #144	; 0x90
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80025e6:	2300      	movs	r3, #0
 80025e8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002602:	2301      	movs	r3, #1
 8002604:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800260e:	2301      	movs	r3, #1
 8002610:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002618:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002620:	2300      	movs	r3, #0
 8002622:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800262a:	2300      	movs	r3, #0
 800262c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002630:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002634:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800263c:	2300      	movs	r3, #0
 800263e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002652:	2300      	movs	r3, #0
 8002654:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002656:	2300      	movs	r3, #0
 8002658:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800265a:	2300      	movs	r3, #0
 800265c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800266a:	2301      	movs	r3, #1
 800266c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002670:	2320      	movs	r3, #32
 8002672:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002676:	2301      	movs	r3, #1
 8002678:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002682:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002688:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800268c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002694:	2302      	movs	r3, #2
 8002696:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80026b2:	2300      	movs	r3, #0
 80026b4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c0:	4619      	mov	r1, r3
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff fde6 	bl	8002294 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026cc:	2301      	movs	r3, #1
 80026ce:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80026f8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80026fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026fe:	f107 0308 	add.w	r3, r7, #8
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff fee1 	bl	80024cc <ETH_SetDMAConfig>
}
 800270a:	bf00      	nop
 800270c:	3790      	adds	r7, #144	; 0x90
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	e01d      	b.n	800275c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68d9      	ldr	r1, [r3, #12]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2200      	movs	r2, #0
 800273c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	3206      	adds	r2, #6
 8002752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3301      	adds	r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d9de      	bls.n	8002720 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002770:	461a      	mov	r2, r3
 8002772:	2303      	movs	r3, #3
 8002774:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002784:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002794:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e023      	b.n	80027fa <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6919      	ldr	r1, [r3, #16]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	440b      	add	r3, r1
 80027c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2200      	movs	r2, #0
 80027ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2200      	movs	r2, #0
 80027e6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	3212      	adds	r2, #18
 80027f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3301      	adds	r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d9d8      	bls.n	80027b2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002826:	461a      	mov	r2, r3
 8002828:	2303      	movs	r3, #3
 800282a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800284e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800286e:	e136      	b.n	8002ade <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2101      	movs	r1, #1
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	4013      	ands	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8128 	beq.w	8002ad8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d003      	beq.n	8002898 <HAL_GPIO_Init+0x38>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b12      	cmp	r3, #18
 8002896:	d125      	bne.n	80028e4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	08da      	lsrs	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3208      	adds	r2, #8
 80028a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	220f      	movs	r2, #15
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4013      	ands	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f003 020f 	and.w	r2, r3, #15
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	6979      	ldr	r1, [r7, #20]
 80028e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2203      	movs	r2, #3
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4013      	ands	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0203 	and.w	r2, r3, #3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d00b      	beq.n	8002938 <HAL_GPIO_Init+0xd8>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d007      	beq.n	8002938 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800292c:	2b11      	cmp	r3, #17
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b12      	cmp	r3, #18
 8002936:	d130      	bne.n	800299a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4013      	ands	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800296e:	2201      	movs	r2, #1
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4013      	ands	r3, r2
 800297c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f003 0201 	and.w	r2, r3, #1
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d017      	beq.n	80029d2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	2203      	movs	r2, #3
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	4013      	ands	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d07c      	beq.n	8002ad8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80029de:	4a47      	ldr	r2, [pc, #284]	; (8002afc <HAL_GPIO_Init+0x29c>)
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	3318      	adds	r3, #24
 80029e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ea:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	220f      	movs	r2, #15
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	4013      	ands	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	0a9a      	lsrs	r2, r3, #10
 8002a06:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <HAL_GPIO_Init+0x2a0>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	f002 0203 	and.w	r2, r2, #3
 8002a10:	00d2      	lsls	r2, r2, #3
 8002a12:	4093      	lsls	r3, r2
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002a1a:	4938      	ldr	r1, [pc, #224]	; (8002afc <HAL_GPIO_Init+0x29c>)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3318      	adds	r3, #24
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002a28:	4b34      	ldr	r3, [pc, #208]	; (8002afc <HAL_GPIO_Init+0x29c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4013      	ands	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002a4c:	4a2b      	ldr	r2, [pc, #172]	; (8002afc <HAL_GPIO_Init+0x29c>)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002a52:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HAL_GPIO_Init+0x29c>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002a76:	4a21      	ldr	r2, [pc, #132]	; (8002afc <HAL_GPIO_Init+0x29c>)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <HAL_GPIO_Init+0x29c>)
 8002a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a82:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002aa2:	4a16      	ldr	r2, [pc, #88]	; (8002afc <HAL_GPIO_Init+0x29c>)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002aaa:	4b14      	ldr	r3, [pc, #80]	; (8002afc <HAL_GPIO_Init+0x29c>)
 8002aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <HAL_GPIO_Init+0x29c>)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	3301      	adds	r3, #1
 8002adc:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f47f aec1 	bne.w	8002870 <HAL_GPIO_Init+0x10>
  }
}
 8002aee:	bf00      	nop
 8002af0:	bf00      	nop
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	44022000 	.word	0x44022000
 8002b00:	002f7f7f 	.word	0x002f7f7f

08002b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	43d9      	mvns	r1, r3
 8002b52:	887b      	ldrh	r3, [r7, #2]
 8002b54:	400b      	ands	r3, r1
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	619a      	str	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_ICACHE_Enable+0x1c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <HAL_ICACHE_Enable+0x1c>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40030400 	.word	0x40030400

08002b88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8a:	b08f      	sub	sp, #60	; 0x3c
 8002b8c:	af0a      	add	r7, sp, #40	; 0x28
 8002b8e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e0cd      	b.n	8002d36 <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe fa2a 	bl	8001008 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f009 f826 	bl	800bc12 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]
 8002bca:	e03e      	b.n	8002c4a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	333d      	adds	r3, #61	; 0x3d
 8002bdc:	2201      	movs	r2, #1
 8002bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	333c      	adds	r3, #60	; 0x3c
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	333f      	adds	r3, #63	; 0x3f
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	440b      	add	r3, r1
 8002c16:	334c      	adds	r3, #76	; 0x4c
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	3350      	adds	r3, #80	; 0x50
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3354      	adds	r3, #84	; 0x54
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	3301      	adds	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3bb      	bcc.n	8002bcc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
 8002c58:	e044      	b.n	8002ce4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	440b      	add	r3, r1
 8002c68:	f203 137d 	addw	r3, r3, #381	; 0x17d
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	f203 137f 	addw	r3, r3, #383	; 0x17f
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	440b      	add	r3, r1
 8002caa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d3b5      	bcc.n	8002c5a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	687e      	ldr	r6, [r7, #4]
 8002cf6:	466d      	mov	r5, sp
 8002cf8:	f106 0410 	add.w	r4, r6, #16
 8002cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d08:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d0c:	1d33      	adds	r3, r6, #4
 8002d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d10:	6838      	ldr	r0, [r7, #0]
 8002d12:	f008 ffb6 	bl	800bc82 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d102      	bne.n	8002d34 <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f805 	bl	8002d3e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d3e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b085      	sub	sp, #20
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f043 0201 	orr.w	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f043 0202 	orr.w	r2, r3, #2
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d102      	bne.n	8002d98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	f000 bc28 	b.w	80035e8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d98:	4b94      	ldr	r3, [pc, #592]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f003 0318 	and.w	r3, r3, #24
 8002da0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002da2:	4b92      	ldr	r3, [pc, #584]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d05b      	beq.n	8002e70 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d005      	beq.n	8002dca <HAL_RCC_OscConfig+0x46>
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	2b18      	cmp	r3, #24
 8002dc2:	d114      	bne.n	8002dee <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d111      	bne.n	8002dee <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d102      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f000 bc08 	b.w	80035e8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002dd8:	4b84      	ldr	r3, [pc, #528]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	041b      	lsls	r3, r3, #16
 8002de6:	4981      	ldr	r1, [pc, #516]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002dec:	e040      	b.n	8002e70 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d023      	beq.n	8002e3e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002df6:	4b7d      	ldr	r3, [pc, #500]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a7c      	ldr	r2, [pc, #496]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe ff2d 	bl	8001c60 <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002e0a:	f7fe ff29 	bl	8001c60 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e3e5      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002e1c:	4b73      	ldr	r3, [pc, #460]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002e28:	4b70      	ldr	r3, [pc, #448]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	041b      	lsls	r3, r3, #16
 8002e36:	496d      	ldr	r1, [pc, #436]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	618b      	str	r3, [r1, #24]
 8002e3c:	e018      	b.n	8002e70 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e3e:	4b6b      	ldr	r3, [pc, #428]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a6a      	ldr	r2, [pc, #424]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4a:	f7fe ff09 	bl	8001c60 <HAL_GetTick>
 8002e4e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002e52:	f7fe ff05 	bl	8001c60 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e3c1      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002e64:	4b61      	ldr	r3, [pc, #388]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f0      	bne.n	8002e52 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a0 	beq.w	8002fbe <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_OscConfig+0x10c>
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2b18      	cmp	r3, #24
 8002e88:	d109      	bne.n	8002e9e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f040 8092 	bne.w	8002fbe <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e3a4      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x132>
 8002ea8:	4b50      	ldr	r3, [pc, #320]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a4f      	ldr	r2, [pc, #316]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	e058      	b.n	8002f68 <HAL_RCC_OscConfig+0x1e4>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d112      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x160>
 8002ebe:	4b4b      	ldr	r3, [pc, #300]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a4a      	ldr	r2, [pc, #296]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	4b48      	ldr	r3, [pc, #288]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a47      	ldr	r2, [pc, #284]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002ed0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b45      	ldr	r3, [pc, #276]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a44      	ldr	r2, [pc, #272]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e041      	b.n	8002f68 <HAL_RCC_OscConfig+0x1e4>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eec:	d112      	bne.n	8002f14 <HAL_RCC_OscConfig+0x190>
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a3e      	ldr	r2, [pc, #248]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b3c      	ldr	r3, [pc, #240]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a3b      	ldr	r2, [pc, #236]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f00:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b39      	ldr	r3, [pc, #228]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a38      	ldr	r2, [pc, #224]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e029      	b.n	8002f68 <HAL_RCC_OscConfig+0x1e4>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002f1c:	d112      	bne.n	8002f44 <HAL_RCC_OscConfig+0x1c0>
 8002f1e:	4b33      	ldr	r3, [pc, #204]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a32      	ldr	r2, [pc, #200]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	4b30      	ldr	r3, [pc, #192]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a2f      	ldr	r2, [pc, #188]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2c      	ldr	r2, [pc, #176]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e011      	b.n	8002f68 <HAL_RCC_OscConfig+0x1e4>
 8002f44:	4b29      	ldr	r3, [pc, #164]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a28      	ldr	r2, [pc, #160]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b26      	ldr	r3, [pc, #152]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a25      	ldr	r2, [pc, #148]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b23      	ldr	r3, [pc, #140]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a22      	ldr	r2, [pc, #136]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe fe76 	bl	8001c60 <HAL_GetTick>
 8002f74:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002f78:	f7fe fe72 	bl	8001c60 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e32e      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f8a:	4b18      	ldr	r3, [pc, #96]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x1f4>
 8002f96:	e012      	b.n	8002fbe <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fe62 	bl	8001c60 <HAL_GetTick>
 8002f9c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fe5e 	bl	8001c60 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e31a      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <HAL_RCC_OscConfig+0x268>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 809a 	beq.w	8003100 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_RCC_OscConfig+0x25a>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	2b18      	cmp	r3, #24
 8002fd6:	d149      	bne.n	800306c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d146      	bne.n	800306c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d104      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e2fe      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
 8002fea:	bf00      	nop
 8002fec:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11c      	bne.n	8003030 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002ff6:	4b9a      	ldr	r3, [pc, #616]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0218 	and.w	r2, r3, #24
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	429a      	cmp	r2, r3
 8003004:	d014      	beq.n	8003030 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003006:	4b96      	ldr	r3, [pc, #600]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 0218 	bic.w	r2, r3, #24
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	4993      	ldr	r1, [pc, #588]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003018:	f000 fdd0 	bl	8003bbc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800301c:	4b91      	ldr	r3, [pc, #580]	; (8003264 <HAL_RCC_OscConfig+0x4e0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe f87f 	bl	8001124 <HAL_InitTick>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e2db      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe fe16 	bl	8001c60 <HAL_GetTick>
 8003034:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003038:	f7fe fe12 	bl	8001c60 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e2ce      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800304a:	4b85      	ldr	r3, [pc, #532]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003056:	4b82      	ldr	r3, [pc, #520]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	041b      	lsls	r3, r3, #16
 8003064:	497e      	ldr	r1, [pc, #504]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800306a:	e049      	b.n	8003100 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d02c      	beq.n	80030ce <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003074:	4b7a      	ldr	r3, [pc, #488]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 0218 	bic.w	r2, r3, #24
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	4977      	ldr	r1, [pc, #476]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003086:	4b76      	ldr	r3, [pc, #472]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a75      	ldr	r2, [pc, #468]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003092:	f7fe fde5 	bl	8001c60 <HAL_GetTick>
 8003096:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800309a:	f7fe fde1 	bl	8001c60 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e29d      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ac:	4b6c      	ldr	r3, [pc, #432]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80030b8:	4b69      	ldr	r3, [pc, #420]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	041b      	lsls	r3, r3, #16
 80030c6:	4966      	ldr	r1, [pc, #408]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	610b      	str	r3, [r1, #16]
 80030cc:	e018      	b.n	8003100 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ce:	4b64      	ldr	r3, [pc, #400]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a63      	ldr	r2, [pc, #396]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030da:	f7fe fdc1 	bl	8001c60 <HAL_GetTick>
 80030de:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80030e2:	f7fe fdbd 	bl	8001c60 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e279      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f4:	4b5a      	ldr	r3, [pc, #360]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d03c      	beq.n	8003186 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01c      	beq.n	800314e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003114:	4b52      	ldr	r3, [pc, #328]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800311a:	4a51      	ldr	r2, [pc, #324]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 800311c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003120:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fe fd9c 	bl	8001c60 <HAL_GetTick>
 8003128:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800312c:	f7fe fd98 	bl	8001c60 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e254      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800313e:	4b48      	ldr	r3, [pc, #288]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0ef      	beq.n	800312c <HAL_RCC_OscConfig+0x3a8>
 800314c:	e01b      	b.n	8003186 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314e:	4b44      	ldr	r3, [pc, #272]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003154:	4a42      	ldr	r2, [pc, #264]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003156:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800315a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315e:	f7fe fd7f 	bl	8001c60 <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003166:	f7fe fd7b 	bl	8001c60 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e237      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003178:	4b39      	ldr	r3, [pc, #228]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 800317a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800317e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1ef      	bne.n	8003166 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80d2 	beq.w	8003338 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003194:	4b34      	ldr	r3, [pc, #208]	; (8003268 <HAL_RCC_OscConfig+0x4e4>)
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d118      	bne.n	80031d2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80031a0:	4b31      	ldr	r3, [pc, #196]	; (8003268 <HAL_RCC_OscConfig+0x4e4>)
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	4a30      	ldr	r2, [pc, #192]	; (8003268 <HAL_RCC_OscConfig+0x4e4>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ac:	f7fe fd58 	bl	8001c60 <HAL_GetTick>
 80031b0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b4:	f7fe fd54 	bl	8001c60 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e210      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80031c6:	4b28      	ldr	r3, [pc, #160]	; (8003268 <HAL_RCC_OscConfig+0x4e4>)
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d108      	bne.n	80031ec <HAL_RCC_OscConfig+0x468>
 80031da:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 80031dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031e0:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031ea:	e074      	b.n	80032d6 <HAL_RCC_OscConfig+0x552>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d118      	bne.n	8003226 <HAL_RCC_OscConfig+0x4a2>
 80031f4:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 80031f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031fa:	4a19      	ldr	r2, [pc, #100]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003204:	4b16      	ldr	r3, [pc, #88]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800320a:	4a15      	ldr	r2, [pc, #84]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 800320c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003210:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800321a:	4a11      	ldr	r2, [pc, #68]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003224:	e057      	b.n	80032d6 <HAL_RCC_OscConfig+0x552>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b05      	cmp	r3, #5
 800322c:	d11e      	bne.n	800326c <HAL_RCC_OscConfig+0x4e8>
 800322e:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003236:	f043 0304 	orr.w	r3, r3, #4
 800323a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800323e:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003244:	4a06      	ldr	r2, [pc, #24]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800324e:	4b04      	ldr	r3, [pc, #16]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003254:	4a02      	ldr	r2, [pc, #8]	; (8003260 <HAL_RCC_OscConfig+0x4dc>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800325e:	e03a      	b.n	80032d6 <HAL_RCC_OscConfig+0x552>
 8003260:	44020c00 	.word	0x44020c00
 8003264:	2000002c 	.word	0x2000002c
 8003268:	44020800 	.word	0x44020800
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b85      	cmp	r3, #133	; 0x85
 8003272:	d118      	bne.n	80032a6 <HAL_RCC_OscConfig+0x522>
 8003274:	4ba2      	ldr	r3, [pc, #648]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800327a:	4aa1      	ldr	r2, [pc, #644]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003284:	4b9e      	ldr	r3, [pc, #632]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800328a:	4a9d      	ldr	r2, [pc, #628]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 800328c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003290:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003294:	4b9a      	ldr	r3, [pc, #616]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800329a:	4a99      	ldr	r2, [pc, #612]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032a4:	e017      	b.n	80032d6 <HAL_RCC_OscConfig+0x552>
 80032a6:	4b96      	ldr	r3, [pc, #600]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80032a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032ac:	4a94      	ldr	r2, [pc, #592]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032b6:	4b92      	ldr	r3, [pc, #584]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80032b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032bc:	4a90      	ldr	r2, [pc, #576]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80032be:	f023 0304 	bic.w	r3, r3, #4
 80032c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032c6:	4b8e      	ldr	r3, [pc, #568]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80032c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032cc:	4a8c      	ldr	r2, [pc, #560]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80032ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032de:	f7fe fcbf 	bl	8001c60 <HAL_GetTick>
 80032e2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fe fcbb 	bl	8001c60 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e175      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fc:	4b80      	ldr	r3, [pc, #512]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80032fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ed      	beq.n	80032e6 <HAL_RCC_OscConfig+0x562>
 800330a:	e015      	b.n	8003338 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fe fca8 	bl	8001c60 <HAL_GetTick>
 8003310:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fe fca4 	bl	8001c60 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e15e      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800332a:	4b75      	ldr	r3, [pc, #468]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 800332c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1ed      	bne.n	8003314 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d036      	beq.n	80033b2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	d019      	beq.n	8003380 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800334c:	4b6c      	ldr	r3, [pc, #432]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a6b      	ldr	r2, [pc, #428]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003352:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003356:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fe fc82 	bl	8001c60 <HAL_GetTick>
 800335c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003360:	f7fe fc7e 	bl	8001c60 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e13a      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003372:	4b63      	ldr	r3, [pc, #396]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0x5dc>
 800337e:	e018      	b.n	80033b2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003380:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a5e      	ldr	r2, [pc, #376]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800338a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7fe fc68 	bl	8001c60 <HAL_GetTick>
 8003390:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003394:	f7fe fc64 	bl	8001c60 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e120      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80033a6:	4b56      	ldr	r3, [pc, #344]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 8115 	beq.w	80035e6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b18      	cmp	r3, #24
 80033c0:	f000 80af 	beq.w	8003522 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	f040 8086 	bne.w	80034da <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80033ce:	4b4c      	ldr	r3, [pc, #304]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a4b      	ldr	r2, [pc, #300]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80033d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fe fc41 	bl	8001c60 <HAL_GetTick>
 80033de:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80033e2:	f7fe fc3d 	bl	8001c60 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e0f9      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033f4:	4b42      	ldr	r3, [pc, #264]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f0      	bne.n	80033e2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003400:	4b3f      	ldr	r3, [pc, #252]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003408:	f023 0303 	bic.w	r3, r3, #3
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003414:	0212      	lsls	r2, r2, #8
 8003416:	430a      	orrs	r2, r1
 8003418:	4939      	ldr	r1, [pc, #228]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 800341a:	4313      	orrs	r3, r2
 800341c:	628b      	str	r3, [r1, #40]	; 0x28
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003422:	3b01      	subs	r3, #1
 8003424:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	3b01      	subs	r3, #1
 800342e:	025b      	lsls	r3, r3, #9
 8003430:	b29b      	uxth	r3, r3
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	3b01      	subs	r3, #1
 800343a:	041b      	lsls	r3, r3, #16
 800343c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	3b01      	subs	r3, #1
 8003448:	061b      	lsls	r3, r3, #24
 800344a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800344e:	492c      	ldr	r1, [pc, #176]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003450:	4313      	orrs	r3, r2
 8003452:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003454:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	4a29      	ldr	r2, [pc, #164]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 800345a:	f023 0310 	bic.w	r3, r3, #16
 800345e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003464:	4a26      	ldr	r2, [pc, #152]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800346a:	4b25      	ldr	r3, [pc, #148]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	4a24      	ldr	r2, [pc, #144]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003470:	f043 0310 	orr.w	r3, r3, #16
 8003474:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003476:	4b22      	ldr	r3, [pc, #136]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	f023 020c 	bic.w	r2, r3, #12
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	491f      	ldr	r1, [pc, #124]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003484:	4313      	orrs	r3, r2
 8003486:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003488:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	f023 0220 	bic.w	r2, r3, #32
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003494:	491a      	ldr	r1, [pc, #104]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 8003496:	4313      	orrs	r3, r2
 8003498:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800349a:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	4a18      	ldr	r2, [pc, #96]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80034a6:	4b16      	ldr	r3, [pc, #88]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a15      	ldr	r2, [pc, #84]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80034ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fe fbd5 	bl	8001c60 <HAL_GetTick>
 80034b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80034ba:	f7fe fbd1 	bl	8001c60 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e08d      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x736>
 80034d8:	e085      	b.n	80035e6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a08      	ldr	r2, [pc, #32]	; (8003500 <HAL_RCC_OscConfig+0x77c>)
 80034e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fe fbbb 	bl	8001c60 <HAL_GetTick>
 80034ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80034ec:	e00a      	b.n	8003504 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80034ee:	f7fe fbb7 	bl	8001c60 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d903      	bls.n	8003504 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e073      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
 8003500:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003504:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <HAL_RCC_OscConfig+0x86c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ee      	bne.n	80034ee <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003510:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <HAL_RCC_OscConfig+0x86c>)
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	4a36      	ldr	r2, [pc, #216]	; (80035f0 <HAL_RCC_OscConfig+0x86c>)
 8003516:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	6293      	str	r3, [r2, #40]	; 0x28
 8003520:	e061      	b.n	80035e6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003522:	4b33      	ldr	r3, [pc, #204]	; (80035f0 <HAL_RCC_OscConfig+0x86c>)
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003528:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <HAL_RCC_OscConfig+0x86c>)
 800352a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	2b01      	cmp	r3, #1
 8003534:	d031      	beq.n	800359a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f003 0203 	and.w	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d12a      	bne.n	800359a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d122      	bne.n	800359a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d11a      	bne.n	800359a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	0a5b      	lsrs	r3, r3, #9
 8003568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d111      	bne.n	800359a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d108      	bne.n	800359a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	0e1b      	lsrs	r3, r3, #24
 800358c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d001      	beq.n	800359e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e024      	b.n	80035e8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800359e:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <HAL_RCC_OscConfig+0x86c>)
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	08db      	lsrs	r3, r3, #3
 80035a4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d01a      	beq.n	80035e6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCC_OscConfig+0x86c>)
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_RCC_OscConfig+0x86c>)
 80035b6:	f023 0310 	bic.w	r3, r3, #16
 80035ba:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fe fb50 	bl	8001c60 <HAL_GetTick>
 80035c0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80035c2:	bf00      	nop
 80035c4:	f7fe fb4c 	bl	8001c60 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d0f9      	beq.n	80035c4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d4:	4a06      	ldr	r2, [pc, #24]	; (80035f0 <HAL_RCC_OscConfig+0x86c>)
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_OscConfig+0x86c>)
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_RCC_OscConfig+0x86c>)
 80035e0:	f043 0310 	orr.w	r3, r3, #16
 80035e4:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	44020c00 	.word	0x44020c00

080035f4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e19e      	b.n	8003946 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003608:	4b83      	ldr	r3, [pc, #524]	; (8003818 <HAL_RCC_ClockConfig+0x224>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d910      	bls.n	8003638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b80      	ldr	r3, [pc, #512]	; (8003818 <HAL_RCC_ClockConfig+0x224>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 020f 	bic.w	r2, r3, #15
 800361e:	497e      	ldr	r1, [pc, #504]	; (8003818 <HAL_RCC_ClockConfig+0x224>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b7c      	ldr	r3, [pc, #496]	; (8003818 <HAL_RCC_ClockConfig+0x224>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e186      	b.n	8003946 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	d012      	beq.n	800366a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	4b74      	ldr	r3, [pc, #464]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	0a1b      	lsrs	r3, r3, #8
 800364e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003652:	429a      	cmp	r2, r3
 8003654:	d909      	bls.n	800366a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003656:	4b71      	ldr	r3, [pc, #452]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	496d      	ldr	r1, [pc, #436]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 8003666:	4313      	orrs	r3, r2
 8003668:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	4b68      	ldr	r3, [pc, #416]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003684:	429a      	cmp	r2, r3
 8003686:	d909      	bls.n	800369c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003688:	4b64      	ldr	r3, [pc, #400]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	4961      	ldr	r1, [pc, #388]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 8003698:	4313      	orrs	r3, r2
 800369a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d010      	beq.n	80036ca <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	4b5b      	ldr	r3, [pc, #364]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d908      	bls.n	80036ca <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80036b8:	4b58      	ldr	r3, [pc, #352]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4955      	ldr	r1, [pc, #340]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d010      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	4b50      	ldr	r3, [pc, #320]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d908      	bls.n	80036f8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80036e6:	4b4d      	ldr	r3, [pc, #308]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f023 020f 	bic.w	r2, r3, #15
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	494a      	ldr	r1, [pc, #296]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8093 	beq.w	800382c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b03      	cmp	r3, #3
 800370c:	d107      	bne.n	800371e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800370e:	4b43      	ldr	r3, [pc, #268]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d121      	bne.n	800375e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e113      	b.n	8003946 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003726:	4b3d      	ldr	r3, [pc, #244]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d115      	bne.n	800375e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e107      	b.n	8003946 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800373e:	4b37      	ldr	r3, [pc, #220]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0fb      	b.n	8003946 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800374e:	4b33      	ldr	r3, [pc, #204]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0f3      	b.n	8003946 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800375e:	4b2f      	ldr	r3, [pc, #188]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f023 0203 	bic.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	492c      	ldr	r1, [pc, #176]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 800376c:	4313      	orrs	r3, r2
 800376e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003770:	f7fe fa76 	bl	8001c60 <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d112      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800377e:	e00a      	b.n	8003796 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003780:	f7fe fa6e 	bl	8001c60 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	; 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e0d7      	b.n	8003946 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003796:	4b21      	ldr	r3, [pc, #132]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f003 0318 	and.w	r3, r3, #24
 800379e:	2b18      	cmp	r3, #24
 80037a0:	d1ee      	bne.n	8003780 <HAL_RCC_ClockConfig+0x18c>
 80037a2:	e043      	b.n	800382c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d112      	bne.n	80037d2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80037ae:	f7fe fa57 	bl	8001c60 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e0c0      	b.n	8003946 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c4:	4b15      	ldr	r3, [pc, #84]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f003 0318 	and.w	r3, r3, #24
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d1ee      	bne.n	80037ae <HAL_RCC_ClockConfig+0x1ba>
 80037d0:	e02c      	b.n	800382c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d122      	bne.n	8003820 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fe fa40 	bl	8001c60 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e0a9      	b.n	8003946 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80037f2:	4b0a      	ldr	r3, [pc, #40]	; (800381c <HAL_RCC_ClockConfig+0x228>)
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f003 0318 	and.w	r3, r3, #24
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d1ee      	bne.n	80037dc <HAL_RCC_ClockConfig+0x1e8>
 80037fe:	e015      	b.n	800382c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003800:	f7fe fa2e 	bl	8001c60 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	; 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d906      	bls.n	8003820 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e097      	b.n	8003946 <HAL_RCC_ClockConfig+0x352>
 8003816:	bf00      	nop
 8003818:	40022000 	.word	0x40022000
 800381c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003820:	4b4b      	ldr	r3, [pc, #300]	; (8003950 <HAL_RCC_ClockConfig+0x35c>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f003 0318 	and.w	r3, r3, #24
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e9      	bne.n	8003800 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d010      	beq.n	800385a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	4b44      	ldr	r3, [pc, #272]	; (8003950 <HAL_RCC_ClockConfig+0x35c>)
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	429a      	cmp	r2, r3
 8003846:	d208      	bcs.n	800385a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003848:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_RCC_ClockConfig+0x35c>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f023 020f 	bic.w	r2, r3, #15
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	493e      	ldr	r1, [pc, #248]	; (8003950 <HAL_RCC_ClockConfig+0x35c>)
 8003856:	4313      	orrs	r3, r2
 8003858:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800385a:	4b3e      	ldr	r3, [pc, #248]	; (8003954 <HAL_RCC_ClockConfig+0x360>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d210      	bcs.n	800388a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003868:	4b3a      	ldr	r3, [pc, #232]	; (8003954 <HAL_RCC_ClockConfig+0x360>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 020f 	bic.w	r2, r3, #15
 8003870:	4938      	ldr	r1, [pc, #224]	; (8003954 <HAL_RCC_ClockConfig+0x360>)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003878:	4b36      	ldr	r3, [pc, #216]	; (8003954 <HAL_RCC_ClockConfig+0x360>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d001      	beq.n	800388a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e05d      	b.n	8003946 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d010      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <HAL_RCC_ClockConfig+0x35c>)
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d208      	bcs.n	80038b8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80038a6:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <HAL_RCC_ClockConfig+0x35c>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	4927      	ldr	r1, [pc, #156]	; (8003950 <HAL_RCC_ClockConfig+0x35c>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d012      	beq.n	80038ea <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	4b21      	ldr	r3, [pc, #132]	; (8003950 <HAL_RCC_ClockConfig+0x35c>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d209      	bcs.n	80038ea <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80038d6:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <HAL_RCC_ClockConfig+0x35c>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	491a      	ldr	r1, [pc, #104]	; (8003950 <HAL_RCC_ClockConfig+0x35c>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d012      	beq.n	800391c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <HAL_RCC_ClockConfig+0x35c>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003904:	429a      	cmp	r2, r3
 8003906:	d209      	bcs.n	800391c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <HAL_RCC_ClockConfig+0x35c>)
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	490e      	ldr	r1, [pc, #56]	; (8003950 <HAL_RCC_ClockConfig+0x35c>)
 8003918:	4313      	orrs	r3, r2
 800391a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800391c:	f000 f822 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8003920:	4602      	mov	r2, r0
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_ClockConfig+0x35c>)
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	490b      	ldr	r1, [pc, #44]	; (8003958 <HAL_RCC_ClockConfig+0x364>)
 800392c:	5ccb      	ldrb	r3, [r1, r3]
 800392e:	fa22 f303 	lsr.w	r3, r2, r3
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <HAL_RCC_ClockConfig+0x368>)
 8003934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <HAL_RCC_ClockConfig+0x36c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fd fbf2 	bl	8001124 <HAL_InitTick>
 8003940:	4603      	mov	r3, r0
 8003942:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003944:	7afb      	ldrb	r3, [r7, #11]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	44020c00 	.word	0x44020c00
 8003954:	40022000 	.word	0x40022000
 8003958:	0800fedc 	.word	0x0800fedc
 800395c:	2000000c 	.word	0x2000000c
 8003960:	2000002c 	.word	0x2000002c

08003964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	b089      	sub	sp, #36	; 0x24
 8003968:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800396a:	4b8c      	ldr	r3, [pc, #560]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f003 0318 	and.w	r3, r3, #24
 8003972:	2b08      	cmp	r3, #8
 8003974:	d102      	bne.n	800397c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003976:	4b8a      	ldr	r3, [pc, #552]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	e107      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800397c:	4b87      	ldr	r3, [pc, #540]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f003 0318 	and.w	r3, r3, #24
 8003984:	2b00      	cmp	r3, #0
 8003986:	d112      	bne.n	80039ae <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003988:	4b84      	ldr	r3, [pc, #528]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d009      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003994:	4b81      	ldr	r3, [pc, #516]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	08db      	lsrs	r3, r3, #3
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	4a81      	ldr	r2, [pc, #516]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x240>)
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	e0f1      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80039a8:	4b7e      	ldr	r3, [pc, #504]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x240>)
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	e0ee      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039ae:	4b7b      	ldr	r3, [pc, #492]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 0318 	and.w	r3, r3, #24
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d102      	bne.n	80039c0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039ba:	4b7b      	ldr	r3, [pc, #492]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x244>)
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	e0e5      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039c0:	4b76      	ldr	r3, [pc, #472]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f003 0318 	and.w	r3, r3, #24
 80039c8:	2b18      	cmp	r3, #24
 80039ca:	f040 80dd 	bne.w	8003b88 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80039ce:	4b73      	ldr	r3, [pc, #460]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80039d8:	4b70      	ldr	r3, [pc, #448]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	0a1b      	lsrs	r3, r3, #8
 80039de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80039e4:	4b6d      	ldr	r3, [pc, #436]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80039f0:	4b6a      	ldr	r3, [pc, #424]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80039f4:	08db      	lsrs	r3, r3, #3
 80039f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	fb02 f303 	mul.w	r3, r2, r3
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a08:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80b7 	beq.w	8003b82 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d003      	beq.n	8003a22 <HAL_RCC_GetSysClockFreq+0xbe>
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d056      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x16a>
 8003a20:	e077      	b.n	8003b12 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003a22:	4b5e      	ldr	r3, [pc, #376]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d02d      	beq.n	8003a8a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003a2e:	4b5b      	ldr	r3, [pc, #364]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	08db      	lsrs	r3, r3, #3
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	4a5a      	ldr	r2, [pc, #360]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x240>)
 8003a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	ee07 3a90 	vmov	s15, r3
 8003a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a58:	4b50      	ldr	r3, [pc, #320]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a60:	ee07 3a90 	vmov	s15, r3
 8003a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a68:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a6c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003bac <HAL_RCC_GetSysClockFreq+0x248>
 8003a70:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a84:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003a88:	e065      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	ee07 3a90 	vmov	s15, r3
 8003a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a94:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003bb0 <HAL_RCC_GetSysClockFreq+0x24c>
 8003a98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a9c:	4b3f      	ldr	r3, [pc, #252]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aac:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ab0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003bac <HAL_RCC_GetSysClockFreq+0x248>
 8003ab4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ab8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003abc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003acc:	e043      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	ee07 3a90 	vmov	s15, r3
 8003ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad8:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003bb4 <HAL_RCC_GetSysClockFreq+0x250>
 8003adc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae0:	4b2e      	ldr	r3, [pc, #184]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae8:	ee07 3a90 	vmov	s15, r3
 8003aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003af0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003af4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003bac <HAL_RCC_GetSysClockFreq+0x248>
 8003af8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003b10:	e021      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	ee07 3a90 	vmov	s15, r3
 8003b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1c:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003bb8 <HAL_RCC_GetSysClockFreq+0x254>
 8003b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b24:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 8003b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b34:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b38:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003bac <HAL_RCC_GetSysClockFreq+0x248>
 8003b3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b48:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b50:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003b54:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003b56:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x238>)
 8003b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5a:	0a5b      	lsrs	r3, r3, #9
 8003b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b60:	3301      	adds	r3, #1
 8003b62:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b6e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b7a:	ee17 3a90 	vmov	r3, s15
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	e004      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	e001      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x240>)
 8003b8a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3724      	adds	r7, #36	; 0x24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	44020c00 	.word	0x44020c00
 8003ba0:	003d0900 	.word	0x003d0900
 8003ba4:	03d09000 	.word	0x03d09000
 8003ba8:	007a1200 	.word	0x007a1200
 8003bac:	46000000 	.word	0x46000000
 8003bb0:	4c742400 	.word	0x4c742400
 8003bb4:	4af42400 	.word	0x4af42400
 8003bb8:	4a742400 	.word	0x4a742400

08003bbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003bc0:	f7ff fed0 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003bca:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003bce:	4907      	ldr	r1, [pc, #28]	; (8003bec <HAL_RCC_GetHCLKFreq+0x30>)
 8003bd0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003bd2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bda:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <HAL_RCC_GetHCLKFreq+0x34>)
 8003bdc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003bde:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <HAL_RCC_GetHCLKFreq+0x34>)
 8003be0:	681b      	ldr	r3, [r3, #0]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	44020c00 	.word	0x44020c00
 8003bec:	0800fedc 	.word	0x0800fedc
 8003bf0:	2000000c 	.word	0x2000000c

08003bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003bf8:	f7ff ffe0 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4904      	ldr	r1, [pc, #16]	; (8003c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	44020c00 	.word	0x44020c00
 8003c1c:	0800feec 	.word	0x0800feec

08003c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003c24:	f7ff ffca 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4904      	ldr	r1, [pc, #16]	; (8003c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	44020c00 	.word	0x44020c00
 8003c48:	0800feec 	.word	0x0800feec

08003c4c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003c50:	f7ff ffb4 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	0b1b      	lsrs	r3, r3, #12
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4904      	ldr	r1, [pc, #16]	; (8003c74 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	44020c00 	.word	0x44020c00
 8003c74:	0800feec 	.word	0x0800feec

08003c78 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	221f      	movs	r2, #31
 8003c86:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8003c88:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <HAL_RCC_GetClockConfig+0x68>)
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f003 0203 	and.w	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8003c94:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <HAL_RCC_GetClockConfig+0x68>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 020f 	and.w	r2, r3, #15
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	0a1b      	lsrs	r3, r3, #8
 8003cbe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <HAL_RCC_GetClockConfig+0x6c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 020f 	and.w	r2, r3, #15
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	601a      	str	r2, [r3, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	44020c00 	.word	0x44020c00
 8003ce4:	40022000 	.word	0x40022000

08003ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cec:	b0d8      	sub	sp, #352	; 0x160
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8003d0c:	2500      	movs	r5, #0
 8003d0e:	ea54 0305 	orrs.w	r3, r4, r5
 8003d12:	d00b      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003d14:	4bcd      	ldr	r3, [pc, #820]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d1a:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8003d1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	4ac9      	ldr	r2, [pc, #804]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d26:	430b      	orrs	r3, r1
 8003d28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f002 0801 	and.w	r8, r2, #1
 8003d38:	f04f 0900 	mov.w	r9, #0
 8003d3c:	ea58 0309 	orrs.w	r3, r8, r9
 8003d40:	d042      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003d42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d48:	2b05      	cmp	r3, #5
 8003d4a:	d823      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003d4c:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d52:	bf00      	nop
 8003d54:	08003d9d 	.word	0x08003d9d
 8003d58:	08003d6d 	.word	0x08003d6d
 8003d5c:	08003d81 	.word	0x08003d81
 8003d60:	08003d9d 	.word	0x08003d9d
 8003d64:	08003d9d 	.word	0x08003d9d
 8003d68:	08003d9d 	.word	0x08003d9d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d70:	3308      	adds	r3, #8
 8003d72:	4618      	mov	r0, r3
 8003d74:	f004 feda 	bl	8008b2c <RCCEx_PLL2_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003d7e:	e00e      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d84:	3330      	adds	r3, #48	; 0x30
 8003d86:	4618      	mov	r0, r3
 8003d88:	f004 ff68 	bl	8008c5c <RCCEx_PLL3_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003d92:	e004      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d9a:	e000      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003da6:	4ba9      	ldr	r3, [pc, #676]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003da8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003dac:	f023 0107 	bic.w	r1, r3, #7
 8003db0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db6:	4aa5      	ldr	r2, [pc, #660]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003db8:	430b      	orrs	r3, r1
 8003dba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003dbe:	e003      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dc4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f002 0a02 	and.w	sl, r2, #2
 8003dd4:	f04f 0b00 	mov.w	fp, #0
 8003dd8:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ddc:	f000 8088 	beq.w	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003de0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de6:	2b28      	cmp	r3, #40	; 0x28
 8003de8:	d868      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003ec5 	.word	0x08003ec5
 8003df4:	08003ebd 	.word	0x08003ebd
 8003df8:	08003ebd 	.word	0x08003ebd
 8003dfc:	08003ebd 	.word	0x08003ebd
 8003e00:	08003ebd 	.word	0x08003ebd
 8003e04:	08003ebd 	.word	0x08003ebd
 8003e08:	08003ebd 	.word	0x08003ebd
 8003e0c:	08003ebd 	.word	0x08003ebd
 8003e10:	08003e95 	.word	0x08003e95
 8003e14:	08003ebd 	.word	0x08003ebd
 8003e18:	08003ebd 	.word	0x08003ebd
 8003e1c:	08003ebd 	.word	0x08003ebd
 8003e20:	08003ebd 	.word	0x08003ebd
 8003e24:	08003ebd 	.word	0x08003ebd
 8003e28:	08003ebd 	.word	0x08003ebd
 8003e2c:	08003ebd 	.word	0x08003ebd
 8003e30:	08003ea9 	.word	0x08003ea9
 8003e34:	08003ebd 	.word	0x08003ebd
 8003e38:	08003ebd 	.word	0x08003ebd
 8003e3c:	08003ebd 	.word	0x08003ebd
 8003e40:	08003ebd 	.word	0x08003ebd
 8003e44:	08003ebd 	.word	0x08003ebd
 8003e48:	08003ebd 	.word	0x08003ebd
 8003e4c:	08003ebd 	.word	0x08003ebd
 8003e50:	08003ec5 	.word	0x08003ec5
 8003e54:	08003ebd 	.word	0x08003ebd
 8003e58:	08003ebd 	.word	0x08003ebd
 8003e5c:	08003ebd 	.word	0x08003ebd
 8003e60:	08003ebd 	.word	0x08003ebd
 8003e64:	08003ebd 	.word	0x08003ebd
 8003e68:	08003ebd 	.word	0x08003ebd
 8003e6c:	08003ebd 	.word	0x08003ebd
 8003e70:	08003ec5 	.word	0x08003ec5
 8003e74:	08003ebd 	.word	0x08003ebd
 8003e78:	08003ebd 	.word	0x08003ebd
 8003e7c:	08003ebd 	.word	0x08003ebd
 8003e80:	08003ebd 	.word	0x08003ebd
 8003e84:	08003ebd 	.word	0x08003ebd
 8003e88:	08003ebd 	.word	0x08003ebd
 8003e8c:	08003ebd 	.word	0x08003ebd
 8003e90:	08003ec5 	.word	0x08003ec5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e98:	3308      	adds	r3, #8
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f004 fe46 	bl	8008b2c <RCCEx_PLL2_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003ea6:	e00e      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ea8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003eac:	3330      	adds	r3, #48	; 0x30
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f004 fed4 	bl	8008c5c <RCCEx_PLL3_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003eba:	e004      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003ece:	4b5f      	ldr	r3, [pc, #380]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003ed0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ed4:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ede:	4a5b      	ldr	r2, [pc, #364]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003ee6:	e003      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003eec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ef0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef8:	f002 0304 	and.w	r3, r2, #4
 8003efc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003f00:	2300      	movs	r3, #0
 8003f02:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003f06:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	d04e      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f16:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f1a:	d02c      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003f1c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f20:	d825      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f26:	d028      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2c:	d81f      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003f2e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f30:	d025      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003f32:	2bc0      	cmp	r3, #192	; 0xc0
 8003f34:	d81b      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d00f      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003f3a:	2b80      	cmp	r3, #128	; 0x80
 8003f3c:	d817      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01f      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003f42:	2b40      	cmp	r3, #64	; 0x40
 8003f44:	d113      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f004 fded 	bl	8008b2c <RCCEx_PLL2_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003f58:	e014      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f5e:	3330      	adds	r3, #48	; 0x30
 8003f60:	4618      	mov	r0, r3
 8003f62:	f004 fe7b 	bl	8008c5c <RCCEx_PLL3_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f74:	e006      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003f76:	bf00      	nop
 8003f78:	e004      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003f7a:	bf00      	nop
 8003f7c:	e002      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f84:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10c      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003f8c:	4b2f      	ldr	r3, [pc, #188]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003f8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003f92:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003f96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f9c:	4a2b      	ldr	r2, [pc, #172]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003fa4:	e003      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003faa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	f002 0308 	and.w	r3, r2, #8
 8003fba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003fc4:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	d056      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003fce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003fd8:	d031      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003fda:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003fde:	d82a      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe4:	d02d      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fea:	d824      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003fec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ff0:	d029      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003ff2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ff6:	d81e      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffc:	d011      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004002:	d818      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d023      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400c:	d113      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800400e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004012:	3308      	adds	r3, #8
 8004014:	4618      	mov	r0, r3
 8004016:	f004 fd89 	bl	8008b2c <RCCEx_PLL2_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004020:	e017      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004022:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004026:	3330      	adds	r3, #48	; 0x30
 8004028:	4618      	mov	r0, r3
 800402a:	f004 fe17 	bl	8008c5c <RCCEx_PLL3_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004034:	e00d      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800403c:	e009      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800403e:	bf00      	nop
 8004040:	e007      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004042:	bf00      	nop
 8004044:	e005      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004046:	bf00      	nop
 8004048:	e003      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800404a:	bf00      	nop
 800404c:	44020c00 	.word	0x44020c00
        break;
 8004050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004052:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10c      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800405a:	4bbb      	ldr	r3, [pc, #748]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800405c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004060:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800406a:	4ab7      	ldr	r2, [pc, #732]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800406c:	430b      	orrs	r3, r1
 800406e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004072:	e003      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004078:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800407c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f002 0310 	and.w	r3, r2, #16
 8004088:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004092:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8004096:	460b      	mov	r3, r1
 8004098:	4313      	orrs	r3, r2
 800409a:	d053      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800409c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80040a6:	d031      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80040a8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80040ac:	d82a      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80040ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040b2:	d02d      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80040b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040b8:	d824      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80040ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040be:	d029      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80040c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040c4:	d81e      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80040c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ca:	d011      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80040cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d0:	d818      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d020      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80040d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040da:	d113      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040e0:	3308      	adds	r3, #8
 80040e2:	4618      	mov	r0, r3
 80040e4:	f004 fd22 	bl	8008b2c <RCCEx_PLL2_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80040ee:	e014      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040f4:	3330      	adds	r3, #48	; 0x30
 80040f6:	4618      	mov	r0, r3
 80040f8:	f004 fdb0 	bl	8008c5c <RCCEx_PLL3_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004102:	e00a      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800410a:	e006      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800410c:	bf00      	nop
 800410e:	e004      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004110:	bf00      	nop
 8004112:	e002      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004114:	bf00      	nop
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10c      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004122:	4b89      	ldr	r3, [pc, #548]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004124:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004128:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800412c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004132:	4a85      	ldr	r2, [pc, #532]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004134:	430b      	orrs	r3, r1
 8004136:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800413a:	e003      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004140:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004144:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f002 0320 	and.w	r3, r2, #32
 8004150:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004154:	2300      	movs	r3, #0
 8004156:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800415a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800415e:	460b      	mov	r3, r1
 8004160:	4313      	orrs	r3, r2
 8004162:	d053      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004164:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800416e:	d031      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004170:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004174:	d82a      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800417a:	d02d      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800417c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004180:	d824      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004182:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004186:	d029      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004188:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800418c:	d81e      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800418e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004192:	d011      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004198:	d818      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d020      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800419e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a2:	d113      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041a8:	3308      	adds	r3, #8
 80041aa:	4618      	mov	r0, r3
 80041ac:	f004 fcbe 	bl	8008b2c <RCCEx_PLL2_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80041b6:	e014      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041bc:	3330      	adds	r3, #48	; 0x30
 80041be:	4618      	mov	r0, r3
 80041c0:	f004 fd4c 	bl	8008c5c <RCCEx_PLL3_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80041ca:	e00a      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80041d2:	e006      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80041d4:	bf00      	nop
 80041d6:	e004      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80041d8:	bf00      	nop
 80041da:	e002      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80041dc:	bf00      	nop
 80041de:	e000      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80041e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10c      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80041ea:	4b57      	ldr	r3, [pc, #348]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80041ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80041f0:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 80041f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	4a53      	ldr	r2, [pc, #332]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80041fc:	430b      	orrs	r3, r1
 80041fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004202:	e003      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004204:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004208:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800420c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004218:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800421c:	2300      	movs	r3, #0
 800421e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004222:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8004226:	460b      	mov	r3, r1
 8004228:	4313      	orrs	r3, r2
 800422a:	d053      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800422c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004232:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004236:	d031      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004238:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800423c:	d82a      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800423e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004242:	d02d      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004248:	d824      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800424a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800424e:	d029      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004250:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004254:	d81e      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004256:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800425a:	d011      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800425c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004260:	d818      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d020      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004266:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800426a:	d113      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800426c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004270:	3308      	adds	r3, #8
 8004272:	4618      	mov	r0, r3
 8004274:	f004 fc5a 	bl	8008b2c <RCCEx_PLL2_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800427e:	e014      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004280:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004284:	3330      	adds	r3, #48	; 0x30
 8004286:	4618      	mov	r0, r3
 8004288:	f004 fce8 	bl	8008c5c <RCCEx_PLL3_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004292:	e00a      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800429a:	e006      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800429c:	bf00      	nop
 800429e:	e004      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80042a0:	bf00      	nop
 80042a2:	e002      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80042a4:	bf00      	nop
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80042a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10c      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80042b2:	4b25      	ldr	r3, [pc, #148]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80042b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80042b8:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 80042bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c2:	4a21      	ldr	r2, [pc, #132]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80042c4:	430b      	orrs	r3, r1
 80042c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80042ca:	e003      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042d0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80042d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80042e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80042e4:	2300      	movs	r3, #0
 80042e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80042ea:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 80042ee:	460b      	mov	r3, r1
 80042f0:	4313      	orrs	r3, r2
 80042f2:	d055      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80042f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042fa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80042fe:	d033      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004300:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004304:	d82c      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004306:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800430a:	d02f      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x684>
 800430c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004310:	d826      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004312:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004316:	d02b      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004318:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800431c:	d820      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800431e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004322:	d013      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004328:	d81a      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d022      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800432e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004332:	d115      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004334:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004338:	3308      	adds	r3, #8
 800433a:	4618      	mov	r0, r3
 800433c:	f004 fbf6 	bl	8008b2c <RCCEx_PLL2_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004346:	e016      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8004348:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800434c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004350:	3330      	adds	r3, #48	; 0x30
 8004352:	4618      	mov	r0, r3
 8004354:	f004 fc82 	bl	8008c5c <RCCEx_PLL3_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800435e:	e00a      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004366:	e006      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004368:	bf00      	nop
 800436a:	e004      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800436c:	bf00      	nop
 800436e:	e002      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004370:	bf00      	nop
 8004372:	e000      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004376:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10c      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800437e:	4bbb      	ldr	r3, [pc, #748]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004380:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004384:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004388:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800438c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800438e:	4ab7      	ldr	r2, [pc, #732]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004390:	430b      	orrs	r3, r1
 8004392:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004396:	e003      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800439c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80043a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80043ac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80043b0:	2300      	movs	r3, #0
 80043b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80043b6:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80043ba:	460b      	mov	r3, r1
 80043bc:	4313      	orrs	r3, r2
 80043be:	d053      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80043c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80043ca:	d031      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80043cc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80043d0:	d82a      	bhi.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80043d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043d6:	d02d      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80043d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043dc:	d824      	bhi.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80043de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043e2:	d029      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80043e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043e8:	d81e      	bhi.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80043ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043ee:	d011      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80043f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043f4:	d818      	bhi.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d020      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x754>
 80043fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043fe:	d113      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004400:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004404:	3308      	adds	r3, #8
 8004406:	4618      	mov	r0, r3
 8004408:	f004 fb90 	bl	8008b2c <RCCEx_PLL2_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004412:	e014      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004414:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004418:	3330      	adds	r3, #48	; 0x30
 800441a:	4618      	mov	r0, r3
 800441c:	f004 fc1e 	bl	8008c5c <RCCEx_PLL3_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004426:	e00a      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800442e:	e006      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004430:	bf00      	nop
 8004432:	e004      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004434:	bf00      	nop
 8004436:	e002      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004438:	bf00      	nop
 800443a:	e000      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800443c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800443e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10c      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8004446:	4b89      	ldr	r3, [pc, #548]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800444c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004450:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004456:	4a85      	ldr	r2, [pc, #532]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004458:	430b      	orrs	r3, r1
 800445a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800445e:	e003      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004460:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004464:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004468:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004474:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004478:	2300      	movs	r3, #0
 800447a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800447e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004482:	460b      	mov	r3, r1
 8004484:	4313      	orrs	r3, r2
 8004486:	d055      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004488:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800448c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004490:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004494:	d031      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x812>
 8004496:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800449a:	d82a      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800449c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044a0:	d02d      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x816>
 80044a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044a6:	d824      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80044a8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80044ac:	d029      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80044ae:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80044b2:	d81e      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80044b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044b8:	d011      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80044ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044be:	d818      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d020      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80044c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044c8:	d113      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044ce:	3308      	adds	r3, #8
 80044d0:	4618      	mov	r0, r3
 80044d2:	f004 fb2b 	bl	8008b2c <RCCEx_PLL2_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80044dc:	e014      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044e2:	3330      	adds	r3, #48	; 0x30
 80044e4:	4618      	mov	r0, r3
 80044e6:	f004 fbb9 	bl	8008c5c <RCCEx_PLL3_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80044f0:	e00a      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80044f8:	e006      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80044fa:	bf00      	nop
 80044fc:	e004      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80044fe:	bf00      	nop
 8004500:	e002      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004502:	bf00      	nop
 8004504:	e000      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004508:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10d      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8004510:	4b56      	ldr	r3, [pc, #344]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004512:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004516:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 800451a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800451e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004522:	4a52      	ldr	r2, [pc, #328]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004524:	430b      	orrs	r3, r1
 8004526:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800452a:	e003      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004530:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004534:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004540:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800454a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800454e:	460b      	mov	r3, r1
 8004550:	4313      	orrs	r3, r2
 8004552:	d044      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8004554:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455c:	2b05      	cmp	r3, #5
 800455e:	d823      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004560:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	080045b1 	.word	0x080045b1
 800456c:	08004581 	.word	0x08004581
 8004570:	08004595 	.word	0x08004595
 8004574:	080045b1 	.word	0x080045b1
 8004578:	080045b1 	.word	0x080045b1
 800457c:	080045b1 	.word	0x080045b1
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004580:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004584:	3308      	adds	r3, #8
 8004586:	4618      	mov	r0, r3
 8004588:	f004 fad0 	bl	8008b2c <RCCEx_PLL2_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004592:	e00e      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004594:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004598:	3330      	adds	r3, #48	; 0x30
 800459a:	4618      	mov	r0, r3
 800459c:	f004 fb5e 	bl	8008c5c <RCCEx_PLL3_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80045a6:	e004      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80045ae:	e000      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80045b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10d      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80045ba:	4b2c      	ldr	r3, [pc, #176]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80045bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80045c0:	f023 0107 	bic.w	r1, r3, #7
 80045c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045cc:	4a27      	ldr	r2, [pc, #156]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80045ce:	430b      	orrs	r3, r1
 80045d0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80045d4:	e003      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045da:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80045de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80045ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80045ee:	2300      	movs	r3, #0
 80045f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045f4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80045f8:	460b      	mov	r3, r1
 80045fa:	4313      	orrs	r3, r2
 80045fc:	d04f      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80045fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	2b50      	cmp	r3, #80	; 0x50
 8004608:	d029      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800460a:	2b50      	cmp	r3, #80	; 0x50
 800460c:	d823      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800460e:	2b40      	cmp	r3, #64	; 0x40
 8004610:	d027      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d81f      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004616:	2b30      	cmp	r3, #48	; 0x30
 8004618:	d025      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800461a:	2b30      	cmp	r3, #48	; 0x30
 800461c:	d81b      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800461e:	2b20      	cmp	r3, #32
 8004620:	d00f      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004622:	2b20      	cmp	r3, #32
 8004624:	d817      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d022      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800462a:	2b10      	cmp	r3, #16
 800462c:	d113      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800462e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004632:	3308      	adds	r3, #8
 8004634:	4618      	mov	r0, r3
 8004636:	f004 fa79 	bl	8008b2c <RCCEx_PLL2_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004640:	e017      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004642:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004646:	3330      	adds	r3, #48	; 0x30
 8004648:	4618      	mov	r0, r3
 800464a:	f004 fb07 	bl	8008c5c <RCCEx_PLL3_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004654:	e00d      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800465c:	e009      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800465e:	bf00      	nop
 8004660:	e007      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004662:	bf00      	nop
 8004664:	e005      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004666:	bf00      	nop
 8004668:	e003      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800466a:	bf00      	nop
 800466c:	44020c00 	.word	0x44020c00
        break;
 8004670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004672:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10d      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800467a:	4baf      	ldr	r3, [pc, #700]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800467c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004680:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004684:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468c:	4aaa      	ldr	r2, [pc, #680]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800468e:	430b      	orrs	r3, r1
 8004690:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004694:	e003      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004696:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800469a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800469e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80046aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80046ae:	2300      	movs	r3, #0
 80046b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80046b4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4313      	orrs	r3, r2
 80046bc:	d055      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80046be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80046ca:	d031      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80046cc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80046d0:	d82a      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80046d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046d6:	d02d      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80046d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046dc:	d824      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80046de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046e2:	d029      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80046e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046e8:	d81e      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80046ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046ee:	d011      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80046f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046f4:	d818      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d020      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80046fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046fe:	d113      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004700:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004704:	3308      	adds	r3, #8
 8004706:	4618      	mov	r0, r3
 8004708:	f004 fa10 	bl	8008b2c <RCCEx_PLL2_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004712:	e014      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004714:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004718:	3330      	adds	r3, #48	; 0x30
 800471a:	4618      	mov	r0, r3
 800471c:	f004 fa9e 	bl	8008c5c <RCCEx_PLL3_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004726:	e00a      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800472e:	e006      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004730:	bf00      	nop
 8004732:	e004      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004734:	bf00      	nop
 8004736:	e002      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004738:	bf00      	nop
 800473a:	e000      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800473c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800473e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10d      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004746:	4b7c      	ldr	r3, [pc, #496]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800474c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004750:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004758:	4a77      	ldr	r2, [pc, #476]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800475a:	430b      	orrs	r3, r1
 800475c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004760:	e003      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004762:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004766:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800476a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004776:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800477a:	2300      	movs	r3, #0
 800477c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004780:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004784:	460b      	mov	r3, r1
 8004786:	4313      	orrs	r3, r2
 8004788:	d03d      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800478a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004796:	d01b      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004798:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800479c:	d814      	bhi.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800479e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047a2:	d017      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80047a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047a8:	d80e      	bhi.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d014      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80047ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b2:	d109      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047b8:	3330      	adds	r3, #48	; 0x30
 80047ba:	4618      	mov	r0, r3
 80047bc:	f004 fa4e 	bl	8008c5c <RCCEx_PLL3_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80047c6:	e008      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80047ce:	e004      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80047d0:	bf00      	nop
 80047d2:	e002      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80047d4:	bf00      	nop
 80047d6:	e000      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80047d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10d      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80047e2:	4b55      	ldr	r3, [pc, #340]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80047e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80047e8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80047ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f4:	4a50      	ldr	r2, [pc, #320]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80047f6:	430b      	orrs	r3, r1
 80047f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80047fc:	e003      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004802:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004806:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004812:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004816:	2300      	movs	r3, #0
 8004818:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800481c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004820:	460b      	mov	r3, r1
 8004822:	4313      	orrs	r3, r2
 8004824:	d03d      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004826:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800482a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004832:	d01b      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8004834:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004838:	d814      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800483a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800483e:	d017      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004840:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004844:	d80e      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d014      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800484a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800484e:	d109      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004850:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004854:	3330      	adds	r3, #48	; 0x30
 8004856:	4618      	mov	r0, r3
 8004858:	f004 fa00 	bl	8008c5c <RCCEx_PLL3_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004862:	e008      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800486a:	e004      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800486c:	bf00      	nop
 800486e:	e002      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004870:	bf00      	nop
 8004872:	e000      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004876:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10d      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800487e:	4b2e      	ldr	r3, [pc, #184]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004880:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004884:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004888:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800488c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004890:	4a29      	ldr	r2, [pc, #164]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004892:	430b      	orrs	r3, r1
 8004894:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004898:	e003      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800489e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80048ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048b2:	2300      	movs	r3, #0
 80048b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048b8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048bc:	460b      	mov	r3, r1
 80048be:	4313      	orrs	r3, r2
 80048c0:	d040      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80048c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048ce:	d01b      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80048d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048d4:	d814      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80048d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048da:	d017      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80048dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048e0:	d80e      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d014      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80048e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ea:	d109      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048f0:	3330      	adds	r3, #48	; 0x30
 80048f2:	4618      	mov	r0, r3
 80048f4:	f004 f9b2 	bl	8008c5c <RCCEx_PLL3_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80048fe:	e008      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004906:	e004      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004908:	bf00      	nop
 800490a:	e002      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800490c:	bf00      	nop
 800490e:	e000      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004912:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004916:	2b00      	cmp	r3, #0
 8004918:	d110      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800491c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004920:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004924:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800492c:	4a02      	ldr	r2, [pc, #8]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800492e:	430b      	orrs	r3, r1
 8004930:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004934:	e006      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004936:	bf00      	nop
 8004938:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004940:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004944:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	2100      	movs	r1, #0
 800494e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800495a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800495e:	460b      	mov	r3, r1
 8004960:	4313      	orrs	r3, r2
 8004962:	d03d      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8004964:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004968:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800496c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004970:	d01b      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004972:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004976:	d814      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004978:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800497c:	d017      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800497e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004982:	d80e      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004984:	2b00      	cmp	r3, #0
 8004986:	d014      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8004988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800498c:	d109      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800498e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004992:	3330      	adds	r3, #48	; 0x30
 8004994:	4618      	mov	r0, r3
 8004996:	f004 f961 	bl	8008c5c <RCCEx_PLL3_Config>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80049a0:	e008      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80049a8:	e004      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80049aa:	bf00      	nop
 80049ac:	e002      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80049ae:	bf00      	nop
 80049b0:	e000      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80049b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10d      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80049bc:	4bbe      	ldr	r3, [pc, #760]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80049be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80049c2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80049c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049ce:	4aba      	ldr	r2, [pc, #744]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80049d0:	430b      	orrs	r3, r1
 80049d2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80049d6:	e003      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049dc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80049e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80049ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049f0:	2300      	movs	r3, #0
 80049f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80049fa:	460b      	mov	r3, r1
 80049fc:	4313      	orrs	r3, r2
 80049fe:	d035      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004a00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a0c:	d015      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8004a0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a12:	d80e      	bhi.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d012      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a1c:	d109      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a22:	3330      	adds	r3, #48	; 0x30
 8004a24:	4618      	mov	r0, r3
 8004a26:	f004 f919 	bl	8008c5c <RCCEx_PLL3_Config>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004a30:	e006      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a38:	e002      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004a3a:	bf00      	nop
 8004a3c:	e000      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a40:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10d      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004a48:	4b9b      	ldr	r3, [pc, #620]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a4e:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8004a52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a5a:	4a97      	ldr	r2, [pc, #604]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004a62:	e003      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a68:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	2100      	movs	r1, #0
 8004a76:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	d00e      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004a8c:	4b8a      	ldr	r3, [pc, #552]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	4a89      	ldr	r2, [pc, #548]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a96:	61d3      	str	r3, [r2, #28]
 8004a98:	4b87      	ldr	r3, [pc, #540]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a9a:	69d9      	ldr	r1, [r3, #28]
 8004a9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aa0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004aa4:	4a84      	ldr	r2, [pc, #528]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004aaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004ab6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004aba:	2300      	movs	r3, #0
 8004abc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004ac0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	d055      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004aca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ace:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ad2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004ad6:	d031      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8004ad8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004adc:	d82a      	bhi.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae2:	d02d      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae8:	d824      	bhi.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aee:	d029      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004af4:	d81e      	bhi.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004afa:	d011      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b00:	d818      	bhi.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d020      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b0a:	d113      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b10:	3308      	adds	r3, #8
 8004b12:	4618      	mov	r0, r3
 8004b14:	f004 f80a 	bl	8008b2c <RCCEx_PLL2_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004b1e:	e014      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b24:	3330      	adds	r3, #48	; 0x30
 8004b26:	4618      	mov	r0, r3
 8004b28:	f004 f898 	bl	8008c5c <RCCEx_PLL3_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004b32:	e00a      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b3a:	e006      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004b3c:	bf00      	nop
 8004b3e:	e004      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004b40:	bf00      	nop
 8004b42:	e002      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004b44:	bf00      	nop
 8004b46:	e000      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b4a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10d      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004b52:	4b59      	ldr	r3, [pc, #356]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004b54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004b58:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004b5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b64:	4a54      	ldr	r2, [pc, #336]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004b66:	430b      	orrs	r3, r1
 8004b68:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004b6c:	e003      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b72:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b86:	2300      	movs	r3, #0
 8004b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b8c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4313      	orrs	r3, r2
 8004b94:	d055      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004b96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b9e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004ba2:	d031      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004ba4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004ba8:	d82a      	bhi.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bae:	d02d      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb4:	d824      	bhi.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004bb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bba:	d029      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004bbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bc0:	d81e      	bhi.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc6:	d011      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bcc:	d818      	bhi.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d020      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd6:	d113      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bdc:	3308      	adds	r3, #8
 8004bde:	4618      	mov	r0, r3
 8004be0:	f003 ffa4 	bl	8008b2c <RCCEx_PLL2_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004bea:	e014      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bf0:	3330      	adds	r3, #48	; 0x30
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f004 f832 	bl	8008c5c <RCCEx_PLL3_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004bfe:	e00a      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004c06:	e006      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004c08:	bf00      	nop
 8004c0a:	e004      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004c0c:	bf00      	nop
 8004c0e:	e002      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004c10:	bf00      	nop
 8004c12:	e000      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10d      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004c1e:	4b26      	ldr	r3, [pc, #152]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004c20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004c24:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004c28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c30:	4a21      	ldr	r2, [pc, #132]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004c32:	430b      	orrs	r3, r1
 8004c34:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004c38:	e003      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c3e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004c42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	d057      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004c62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c6e:	d033      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c74:	d82c      	bhi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004c76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c7a:	d02f      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004c7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c80:	d826      	bhi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004c82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c86:	d02b      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004c88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c8c:	d820      	bhi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004c8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c92:	d013      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c98:	d81a      	bhi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d022      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8004c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca2:	d115      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ca8:	3308      	adds	r3, #8
 8004caa:	4618      	mov	r0, r3
 8004cac:	f003 ff3e 	bl	8008b2c <RCCEx_PLL2_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004cb6:	e016      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004cb8:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cc0:	3330      	adds	r3, #48	; 0x30
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f003 ffca 	bl	8008c5c <RCCEx_PLL3_Config>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004cce:	e00a      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004cd6:	e006      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004cd8:	bf00      	nop
 8004cda:	e004      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004cdc:	bf00      	nop
 8004cde:	e002      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004ce0:	bf00      	nop
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10d      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004cee:	4bbb      	ldr	r3, [pc, #748]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004cf0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004cf4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004cf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cfc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d00:	4ab6      	ldr	r2, [pc, #728]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004d02:	430b      	orrs	r3, r1
 8004d04:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004d08:	e003      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d0e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004d12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	d055      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d3a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004d3e:	d031      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004d40:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004d44:	d82a      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d4a:	d02d      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004d4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d50:	d824      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004d52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d56:	d029      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004d58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d5c:	d81e      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004d5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d62:	d011      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8004d64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d68:	d818      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d020      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8004d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d72:	d113      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d78:	3308      	adds	r3, #8
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f003 fed6 	bl	8008b2c <RCCEx_PLL2_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004d86:	e014      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d8c:	3330      	adds	r3, #48	; 0x30
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f003 ff64 	bl	8008c5c <RCCEx_PLL3_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004da2:	e006      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004da4:	bf00      	nop
 8004da6:	e004      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004da8:	bf00      	nop
 8004daa:	e002      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004dac:	bf00      	nop
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10d      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8004dba:	4b88      	ldr	r3, [pc, #544]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004dbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004dc0:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8004dc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dcc:	4a83      	ldr	r2, [pc, #524]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004dd4:	e003      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004dda:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004dde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	2100      	movs	r1, #0
 8004de8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004df4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	d055      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004dfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e06:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004e0a:	d031      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004e0c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004e10:	d82a      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004e12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e16:	d02d      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8004e18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e1c:	d824      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004e1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e22:	d029      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8004e24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e28:	d81e      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004e2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e2e:	d011      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8004e30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e34:	d818      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d020      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8004e3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e3e:	d113      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e44:	3308      	adds	r3, #8
 8004e46:	4618      	mov	r0, r3
 8004e48:	f003 fe70 	bl	8008b2c <RCCEx_PLL2_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004e52:	e014      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e58:	3330      	adds	r3, #48	; 0x30
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f003 fefe 	bl	8008c5c <RCCEx_PLL3_Config>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004e66:	e00a      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004e6e:	e006      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004e70:	bf00      	nop
 8004e72:	e004      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004e74:	bf00      	nop
 8004e76:	e002      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004e78:	bf00      	nop
 8004e7a:	e000      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e7e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10d      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004e86:	4b55      	ldr	r3, [pc, #340]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004e88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004e8c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e98:	4a50      	ldr	r2, [pc, #320]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004ea0:	e003      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ea6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004eaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8004eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ec0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	d055      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004eca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ece:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ed6:	d031      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004edc:	d82a      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee2:	d02d      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee8:	d824      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004eea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004eee:	d029      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004ef0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ef4:	d81e      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004efa:	d011      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f00:	d818      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d020      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f0a:	d113      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f10:	3308      	adds	r3, #8
 8004f12:	4618      	mov	r0, r3
 8004f14:	f003 fe0a 	bl	8008b2c <RCCEx_PLL2_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004f1e:	e014      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f24:	3330      	adds	r3, #48	; 0x30
 8004f26:	4618      	mov	r0, r3
 8004f28:	f003 fe98 	bl	8008c5c <RCCEx_PLL3_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004f32:	e00a      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f3a:	e006      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004f3c:	bf00      	nop
 8004f3e:	e004      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004f40:	bf00      	nop
 8004f42:	e002      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004f44:	bf00      	nop
 8004f46:	e000      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f4a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10d      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8004f52:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004f54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004f58:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004f5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004f66:	430b      	orrs	r3, r1
 8004f68:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004f6c:	e003      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f72:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004f82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f86:	2300      	movs	r3, #0
 8004f88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f8c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004f90:	460b      	mov	r3, r1
 8004f92:	4313      	orrs	r3, r2
 8004f94:	d055      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004f96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fa2:	d035      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004fa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fa8:	d82e      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004faa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fae:	d031      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004fb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fb4:	d828      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004fb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fba:	d01b      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fc0:	d822      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fca:	d009      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004fcc:	e01c      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fce:	4b03      	ldr	r3, [pc, #12]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	4a02      	ldr	r2, [pc, #8]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fd8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fda:	e01c      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004fdc:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f003 fda0 	bl	8008b2c <RCCEx_PLL2_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ff2:	e010      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ff8:	3330      	adds	r3, #48	; 0x30
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f003 fe2e 	bl	8008c5c <RCCEx_PLL3_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005006:	e006      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800500e:	e002      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005010:	bf00      	nop
 8005012:	e000      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005016:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10d      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800501e:	4bc3      	ldr	r3, [pc, #780]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005024:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005028:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800502c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005030:	4abe      	ldr	r2, [pc, #760]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005032:	430b      	orrs	r3, r1
 8005034:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005038:	e003      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800503e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005042:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800504e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005052:	2300      	movs	r3, #0
 8005054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005058:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800505c:	460b      	mov	r3, r1
 800505e:	4313      	orrs	r3, r2
 8005060:	d051      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005062:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005066:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800506a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800506e:	d033      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005070:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005074:	d82c      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005076:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800507a:	d02d      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800507c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005080:	d826      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005086:	d019      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800508c:	d820      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005092:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005096:	d007      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005098:	e01a      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509a:	4ba4      	ldr	r3, [pc, #656]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	4aa3      	ldr	r2, [pc, #652]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80050a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80050a6:	e018      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050ac:	3308      	adds	r3, #8
 80050ae:	4618      	mov	r0, r3
 80050b0:	f003 fd3c 	bl	8008b2c <RCCEx_PLL2_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80050ba:	e00e      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050c0:	3330      	adds	r3, #48	; 0x30
 80050c2:	4618      	mov	r0, r3
 80050c4:	f003 fdca 	bl	8008c5c <RCCEx_PLL3_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80050ce:	e004      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80050d6:	e000      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80050d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10d      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80050e2:	4b92      	ldr	r3, [pc, #584]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80050e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050e8:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 80050ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050f0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80050f4:	4a8d      	ldr	r2, [pc, #564]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80050f6:	430b      	orrs	r3, r1
 80050f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050fc:	e003      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005102:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005106:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005112:	67bb      	str	r3, [r7, #120]	; 0x78
 8005114:	2300      	movs	r3, #0
 8005116:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005118:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800511c:	460b      	mov	r3, r1
 800511e:	4313      	orrs	r3, r2
 8005120:	d032      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005122:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005126:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800512a:	2b05      	cmp	r3, #5
 800512c:	d80f      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800512e:	2b03      	cmp	r3, #3
 8005130:	d211      	bcs.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8005132:	2b01      	cmp	r3, #1
 8005134:	d911      	bls.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8005136:	2b02      	cmp	r3, #2
 8005138:	d109      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800513a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800513e:	3308      	adds	r3, #8
 8005140:	4618      	mov	r0, r3
 8005142:	f003 fcf3 	bl	8008b2c <RCCEx_PLL2_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800514c:	e006      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005154:	e002      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005156:	bf00      	nop
 8005158:	e000      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800515a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800515c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10d      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005164:	4b71      	ldr	r3, [pc, #452]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005166:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800516a:	f023 0107 	bic.w	r1, r3, #7
 800516e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005172:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005176:	4a6d      	ldr	r2, [pc, #436]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005178:	430b      	orrs	r3, r1
 800517a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800517e:	e003      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005180:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005184:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005188:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	2100      	movs	r1, #0
 8005192:	6739      	str	r1, [r7, #112]	; 0x70
 8005194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005198:	677b      	str	r3, [r7, #116]	; 0x74
 800519a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800519e:	460b      	mov	r3, r1
 80051a0:	4313      	orrs	r3, r2
 80051a2:	d024      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80051a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d005      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80051ba:	e002      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80051bc:	bf00      	nop
 80051be:	e000      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80051c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10d      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80051ca:	4b58      	ldr	r3, [pc, #352]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80051cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051d0:	f023 0108 	bic.w	r1, r3, #8
 80051d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80051dc:	4a53      	ldr	r2, [pc, #332]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80051de:	430b      	orrs	r3, r1
 80051e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051e4:	e003      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80051ea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80051fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80051fc:	2300      	movs	r3, #0
 80051fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005200:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005204:	460b      	mov	r3, r1
 8005206:	4313      	orrs	r3, r2
 8005208:	f000 80b9 	beq.w	800537e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800520c:	4b48      	ldr	r3, [pc, #288]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	4a47      	ldr	r2, [pc, #284]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005218:	f7fc fd22 	bl	8001c60 <HAL_GetTick>
 800521c:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005220:	e00b      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005222:	f7fc fd1d 	bl	8001c60 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d903      	bls.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005238:	e005      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800523a:	4b3d      	ldr	r3, [pc, #244]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0ed      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8005246:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800524a:	2b00      	cmp	r3, #0
 800524c:	f040 8093 	bne.w	8005376 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005250:	4b36      	ldr	r3, [pc, #216]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800525e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d023      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8005266:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800526a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800526e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005272:	4293      	cmp	r3, r2
 8005274:	d01b      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005276:	4b2d      	ldr	r3, [pc, #180]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800527c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005280:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005284:	4b29      	ldr	r3, [pc, #164]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800528a:	4a28      	ldr	r2, [pc, #160]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800528c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005290:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005294:	4b25      	ldr	r3, [pc, #148]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800529a:	4a24      	ldr	r2, [pc, #144]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800529c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052a4:	4a21      	ldr	r2, [pc, #132]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80052a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80052aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d019      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ba:	f7fc fcd1 	bl	8001c60 <HAL_GetTick>
 80052be:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c2:	e00d      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c4:	f7fc fccc 	bl	8001c60 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d903      	bls.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 80052de:	e006      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052e0:	4b12      	ldr	r3, [pc, #72]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80052e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0ea      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80052ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d13a      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80052f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052fa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80052fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005306:	d115      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8005308:	4b08      	ldr	r3, [pc, #32]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005310:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005314:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800531e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005322:	4a02      	ldr	r2, [pc, #8]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005324:	430b      	orrs	r3, r1
 8005326:	61d3      	str	r3, [r2, #28]
 8005328:	e00a      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800532a:	bf00      	nop
 800532c:	44020c00 	.word	0x44020c00
 8005330:	44020800 	.word	0x44020800
 8005334:	4b9f      	ldr	r3, [pc, #636]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	4a9e      	ldr	r2, [pc, #632]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800533a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800533e:	61d3      	str	r3, [r2, #28]
 8005340:	4b9c      	ldr	r3, [pc, #624]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005346:	4a9b      	ldr	r2, [pc, #620]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005350:	4b98      	ldr	r3, [pc, #608]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005352:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8005356:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800535a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800535e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005362:	4a94      	ldr	r2, [pc, #592]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005364:	430b      	orrs	r3, r1
 8005366:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800536a:	e008      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800536c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005370:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8005374:	e003      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005376:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800537a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800537e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800538a:	663b      	str	r3, [r7, #96]	; 0x60
 800538c:	2300      	movs	r3, #0
 800538e:	667b      	str	r3, [r7, #100]	; 0x64
 8005390:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005394:	460b      	mov	r3, r1
 8005396:	4313      	orrs	r3, r2
 8005398:	d035      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800539a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800539e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80053a2:	2b30      	cmp	r3, #48	; 0x30
 80053a4:	d014      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80053a6:	2b30      	cmp	r3, #48	; 0x30
 80053a8:	d80e      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d012      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d80a      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d010      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80053b6:	2b10      	cmp	r3, #16
 80053b8:	d106      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ba:	4b7e      	ldr	r3, [pc, #504]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80053bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053be:	4a7d      	ldr	r2, [pc, #500]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80053c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c4:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80053c6:	e008      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80053ce:	e004      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80053d0:	bf00      	nop
 80053d2:	e002      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80053d4:	bf00      	nop
 80053d6:	e000      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80053d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10d      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80053e2:	4b74      	ldr	r3, [pc, #464]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80053e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053e8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80053ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053f0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80053f4:	4a6f      	ldr	r2, [pc, #444]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80053f6:	430b      	orrs	r3, r1
 80053f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80053fc:	e003      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005402:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005406:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005412:	65bb      	str	r3, [r7, #88]	; 0x58
 8005414:	2300      	movs	r3, #0
 8005416:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005418:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800541c:	460b      	mov	r3, r1
 800541e:	4313      	orrs	r3, r2
 8005420:	d033      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005422:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005426:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800542e:	2b40      	cmp	r3, #64	; 0x40
 8005430:	d007      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8005432:	e010      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005434:	4b5f      	ldr	r3, [pc, #380]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	4a5e      	ldr	r2, [pc, #376]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800543a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800543e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005440:	e00d      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005442:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005446:	3308      	adds	r3, #8
 8005448:	4618      	mov	r0, r3
 800544a:	f003 fb6f 	bl	8008b2c <RCCEx_PLL2_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005454:	e003      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800545c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800545e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10d      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005466:	4b53      	ldr	r3, [pc, #332]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005468:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800546c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005470:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005474:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005478:	4a4e      	ldr	r2, [pc, #312]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800547a:	430b      	orrs	r3, r1
 800547c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005480:	e003      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005482:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005486:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800548a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005496:	653b      	str	r3, [r7, #80]	; 0x50
 8005498:	2300      	movs	r3, #0
 800549a:	657b      	str	r3, [r7, #84]	; 0x54
 800549c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80054a0:	460b      	mov	r3, r1
 80054a2:	4313      	orrs	r3, r2
 80054a4:	d033      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80054a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d007      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80054b6:	e010      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b8:	4b3e      	ldr	r3, [pc, #248]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	4a3d      	ldr	r2, [pc, #244]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80054be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80054c4:	e00d      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054ca:	3308      	adds	r3, #8
 80054cc:	4618      	mov	r0, r3
 80054ce:	f003 fb2d 	bl	8008b2c <RCCEx_PLL2_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80054d8:	e003      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80054e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10d      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80054ea:	4b32      	ldr	r3, [pc, #200]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80054ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80054f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054f8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80054fc:	4a2d      	ldr	r2, [pc, #180]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80054fe:	430b      	orrs	r3, r1
 8005500:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005504:	e003      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005506:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800550a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800550e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800551a:	64bb      	str	r3, [r7, #72]	; 0x48
 800551c:	2300      	movs	r3, #0
 800551e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005520:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005524:	460b      	mov	r3, r1
 8005526:	4313      	orrs	r3, r2
 8005528:	d04a      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800552a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800552e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005532:	2b04      	cmp	r3, #4
 8005534:	d827      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	08005551 	.word	0x08005551
 8005540:	0800555f 	.word	0x0800555f
 8005544:	08005573 	.word	0x08005573
 8005548:	0800558f 	.word	0x0800558f
 800554c:	0800558f 	.word	0x0800558f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005550:	4b18      	ldr	r3, [pc, #96]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	4a17      	ldr	r2, [pc, #92]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800555a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800555c:	e018      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800555e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005562:	3308      	adds	r3, #8
 8005564:	4618      	mov	r0, r3
 8005566:	f003 fae1 	bl	8008b2c <RCCEx_PLL2_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005570:	e00e      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005572:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005576:	3330      	adds	r3, #48	; 0x30
 8005578:	4618      	mov	r0, r3
 800557a:	f003 fb6f 	bl	8008c5c <RCCEx_PLL3_Config>
 800557e:	4603      	mov	r3, r0
 8005580:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005584:	e004      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800558c:	e000      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800558e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005590:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10f      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005598:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800559a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800559e:	f023 0107 	bic.w	r1, r3, #7
 80055a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055aa:	4a02      	ldr	r2, [pc, #8]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80055ac:	430b      	orrs	r3, r1
 80055ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055b2:	e005      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80055b4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80055bc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80055c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80055cc:	643b      	str	r3, [r7, #64]	; 0x40
 80055ce:	2300      	movs	r3, #0
 80055d0:	647b      	str	r3, [r7, #68]	; 0x44
 80055d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80055d6:	460b      	mov	r3, r1
 80055d8:	4313      	orrs	r3, r2
 80055da:	f000 8081 	beq.w	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80055de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d85f      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80055ea:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005675 	.word	0x08005675
 80055f4:	080056ab 	.word	0x080056ab
 80055f8:	080056ab 	.word	0x080056ab
 80055fc:	080056ab 	.word	0x080056ab
 8005600:	080056ab 	.word	0x080056ab
 8005604:	080056ab 	.word	0x080056ab
 8005608:	080056ab 	.word	0x080056ab
 800560c:	080056ab 	.word	0x080056ab
 8005610:	08005683 	.word	0x08005683
 8005614:	080056ab 	.word	0x080056ab
 8005618:	080056ab 	.word	0x080056ab
 800561c:	080056ab 	.word	0x080056ab
 8005620:	080056ab 	.word	0x080056ab
 8005624:	080056ab 	.word	0x080056ab
 8005628:	080056ab 	.word	0x080056ab
 800562c:	080056ab 	.word	0x080056ab
 8005630:	08005697 	.word	0x08005697
 8005634:	080056ab 	.word	0x080056ab
 8005638:	080056ab 	.word	0x080056ab
 800563c:	080056ab 	.word	0x080056ab
 8005640:	080056ab 	.word	0x080056ab
 8005644:	080056ab 	.word	0x080056ab
 8005648:	080056ab 	.word	0x080056ab
 800564c:	080056ab 	.word	0x080056ab
 8005650:	080056b3 	.word	0x080056b3
 8005654:	080056ab 	.word	0x080056ab
 8005658:	080056ab 	.word	0x080056ab
 800565c:	080056ab 	.word	0x080056ab
 8005660:	080056ab 	.word	0x080056ab
 8005664:	080056ab 	.word	0x080056ab
 8005668:	080056ab 	.word	0x080056ab
 800566c:	080056ab 	.word	0x080056ab
 8005670:	080056b3 	.word	0x080056b3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005674:	4bab      	ldr	r3, [pc, #684]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	4aaa      	ldr	r2, [pc, #680]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800567a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800567e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005680:	e018      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005682:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005686:	3308      	adds	r3, #8
 8005688:	4618      	mov	r0, r3
 800568a:	f003 fa4f 	bl	8008b2c <RCCEx_PLL2_Config>
 800568e:	4603      	mov	r3, r0
 8005690:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005694:	e00e      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005696:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800569a:	3330      	adds	r3, #48	; 0x30
 800569c:	4618      	mov	r0, r3
 800569e:	f003 fadd 	bl	8008c5c <RCCEx_PLL3_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80056a8:	e004      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80056b0:	e000      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80056b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10d      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80056bc:	4b99      	ldr	r3, [pc, #612]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80056be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056c2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80056c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80056ce:	4a95      	ldr	r2, [pc, #596]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80056d0:	430b      	orrs	r3, r1
 80056d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056d6:	e003      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056dc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80056e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80056ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80056ee:	2300      	movs	r3, #0
 80056f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80056f6:	460b      	mov	r3, r1
 80056f8:	4313      	orrs	r3, r2
 80056fa:	d04e      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80056fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005708:	d02e      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800570a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570e:	d827      	bhi.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005710:	2bc0      	cmp	r3, #192	; 0xc0
 8005712:	d02b      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8005714:	2bc0      	cmp	r3, #192	; 0xc0
 8005716:	d823      	bhi.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005718:	2b80      	cmp	r3, #128	; 0x80
 800571a:	d017      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800571c:	2b80      	cmp	r3, #128	; 0x80
 800571e:	d81f      	bhi.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8005724:	2b40      	cmp	r3, #64	; 0x40
 8005726:	d007      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8005728:	e01a      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800572a:	4b7e      	ldr	r3, [pc, #504]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800572c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572e:	4a7d      	ldr	r2, [pc, #500]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005734:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005736:	e01a      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005738:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800573c:	3308      	adds	r3, #8
 800573e:	4618      	mov	r0, r3
 8005740:	f003 f9f4 	bl	8008b2c <RCCEx_PLL2_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800574a:	e010      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800574c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005750:	3330      	adds	r3, #48	; 0x30
 8005752:	4618      	mov	r0, r3
 8005754:	f003 fa82 	bl	8008c5c <RCCEx_PLL3_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800575e:	e006      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005766:	e002      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005768:	bf00      	nop
 800576a:	e000      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800576c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800576e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10d      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005776:	4b6b      	ldr	r3, [pc, #428]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800577c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005780:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005788:	4a66      	ldr	r2, [pc, #408]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800578a:	430b      	orrs	r3, r1
 800578c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005790:	e003      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005792:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005796:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800579a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80057a6:	633b      	str	r3, [r7, #48]	; 0x30
 80057a8:	2300      	movs	r3, #0
 80057aa:	637b      	str	r3, [r7, #52]	; 0x34
 80057ac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80057b0:	460b      	mov	r3, r1
 80057b2:	4313      	orrs	r3, r2
 80057b4:	d055      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80057b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057ba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80057be:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80057c2:	d031      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80057c4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80057c8:	d82a      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80057ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ce:	d02d      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80057d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d4:	d824      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80057d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057da:	d029      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80057dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057e0:	d81e      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80057e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e6:	d011      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80057e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ec:	d818      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d020      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80057f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057f6:	d113      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057fc:	3308      	adds	r3, #8
 80057fe:	4618      	mov	r0, r3
 8005800:	f003 f994 	bl	8008b2c <RCCEx_PLL2_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800580a:	e014      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800580c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005810:	3330      	adds	r3, #48	; 0x30
 8005812:	4618      	mov	r0, r3
 8005814:	f003 fa22 	bl	8008c5c <RCCEx_PLL3_Config>
 8005818:	4603      	mov	r3, r0
 800581a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800581e:	e00a      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005826:	e006      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005828:	bf00      	nop
 800582a:	e004      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800582c:	bf00      	nop
 800582e:	e002      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005830:	bf00      	nop
 8005832:	e000      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005836:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10d      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800583e:	4b39      	ldr	r3, [pc, #228]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005844:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005848:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800584c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005850:	4a34      	ldr	r2, [pc, #208]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005852:	430b      	orrs	r3, r1
 8005854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005858:	e003      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800585e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8005862:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005870:	2300      	movs	r3, #0
 8005872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005874:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005878:	460b      	mov	r3, r1
 800587a:	4313      	orrs	r3, r2
 800587c:	d058      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800587e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005886:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800588a:	d031      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800588c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005890:	d82a      	bhi.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005896:	d02d      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8005898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800589c:	d824      	bhi.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800589e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058a2:	d029      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80058a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058a8:	d81e      	bhi.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80058aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ae:	d011      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80058b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b4:	d818      	bhi.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d020      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80058ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058be:	d113      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058c4:	3308      	adds	r3, #8
 80058c6:	4618      	mov	r0, r3
 80058c8:	f003 f930 	bl	8008b2c <RCCEx_PLL2_Config>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80058d2:	e014      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058d8:	3330      	adds	r3, #48	; 0x30
 80058da:	4618      	mov	r0, r3
 80058dc:	f003 f9be 	bl	8008c5c <RCCEx_PLL3_Config>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80058e6:	e00a      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80058ee:	e006      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80058f0:	bf00      	nop
 80058f2:	e004      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80058f4:	bf00      	nop
 80058f6:	e002      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80058f8:	bf00      	nop
 80058fa:	e000      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80058fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005902:	2b00      	cmp	r3, #0
 8005904:	d110      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8005906:	4b07      	ldr	r3, [pc, #28]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800590c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005910:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005918:	4902      	ldr	r1, [pc, #8]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005920:	e006      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8005922:	bf00      	nop
 8005924:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005928:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800592c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005930:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	2100      	movs	r1, #0
 800593a:	6239      	str	r1, [r7, #32]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
 8005942:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005946:	460b      	mov	r3, r1
 8005948:	4313      	orrs	r3, r2
 800594a:	d055      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800594c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005954:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005958:	d031      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800595a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800595e:	d82a      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005964:	d02d      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8005966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800596a:	d824      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800596c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005970:	d029      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8005972:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005976:	d81e      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597c:	d011      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800597e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005982:	d818      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d020      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8005988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800598c:	d113      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800598e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005992:	3308      	adds	r3, #8
 8005994:	4618      	mov	r0, r3
 8005996:	f003 f8c9 	bl	8008b2c <RCCEx_PLL2_Config>
 800599a:	4603      	mov	r3, r0
 800599c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80059a0:	e014      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059a6:	3330      	adds	r3, #48	; 0x30
 80059a8:	4618      	mov	r0, r3
 80059aa:	f003 f957 	bl	8008c5c <RCCEx_PLL3_Config>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80059b4:	e00a      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80059bc:	e006      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80059be:	bf00      	nop
 80059c0:	e004      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80059c2:	bf00      	nop
 80059c4:	e002      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80059c6:	bf00      	nop
 80059c8:	e000      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80059ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10d      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80059d4:	4b88      	ldr	r3, [pc, #544]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80059d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059da:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 80059de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059e6:	4984      	ldr	r1, [pc, #528]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80059ee:	e003      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80059f4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80059f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	2100      	movs	r1, #0
 8005a02:	61b9      	str	r1, [r7, #24]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	61fb      	str	r3, [r7, #28]
 8005a0a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4313      	orrs	r3, r2
 8005a12:	d03d      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005a14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d81c      	bhi.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8005a20:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a63 	.word	0x08005a63
 8005a2c:	08005a39 	.word	0x08005a39
 8005a30:	08005a47 	.word	0x08005a47
 8005a34:	08005a63 	.word	0x08005a63
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a38:	4b6f      	ldr	r3, [pc, #444]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	4a6e      	ldr	r2, [pc, #440]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a42:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005a44:	e00e      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f003 f86d 	bl	8008b2c <RCCEx_PLL2_Config>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005a58:	e004      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005a60:	e000      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8005a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10d      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005a6c:	4b62      	ldr	r3, [pc, #392]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005a6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a72:	f023 0203 	bic.w	r2, r3, #3
 8005a76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005a7e:	495e      	ldr	r1, [pc, #376]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005a86:	e003      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a88:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a8c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	2100      	movs	r1, #0
 8005a9a:	6139      	str	r1, [r7, #16]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	d03a      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005aac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ab0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8005aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005abe:	d815      	bhi.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d017      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8005ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac8:	d110      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aca:	4b4b      	ldr	r3, [pc, #300]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	4a4a      	ldr	r2, [pc, #296]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ad4:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005ad6:	e00e      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005adc:	3308      	adds	r3, #8
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f003 f824 	bl	8008b2c <RCCEx_PLL2_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005aea:	e004      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005af2:	e000      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8005af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005af6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10d      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005afe:	4b3e      	ldr	r3, [pc, #248]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b10:	4939      	ldr	r1, [pc, #228]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8005b18:	e003      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b1e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	f003 0310 	and.w	r3, r3, #16
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	d038      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b42:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005b46:	2b30      	cmp	r3, #48	; 0x30
 8005b48:	d01b      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8005b4a:	2b30      	cmp	r3, #48	; 0x30
 8005b4c:	d815      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8005b4e:	2b10      	cmp	r3, #16
 8005b50:	d002      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d007      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8005b56:	e010      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b58:	4b27      	ldr	r3, [pc, #156]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	4a26      	ldr	r2, [pc, #152]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b62:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b64:	e00e      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b6a:	3330      	adds	r3, #48	; 0x30
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f003 f875 	bl	8008c5c <RCCEx_PLL3_Config>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005b78:	e004      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005b80:	e000      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8005b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b84:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10d      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005b8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005b9e:	4916      	ldr	r1, [pc, #88]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005ba6:	e003      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005bac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb8:	2100      	movs	r1, #0
 8005bba:	6039      	str	r1, [r7, #0]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	607b      	str	r3, [r7, #4]
 8005bc2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	d00c      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005bce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005bd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bda:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005bde:	4906      	ldr	r1, [pc, #24]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8005be6:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bf6:	bf00      	nop
 8005bf8:	44020c00 	.word	0x44020c00

08005bfc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b08b      	sub	sp, #44	; 0x2c
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005c04:	4bad      	ldr	r3, [pc, #692]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005c0e:	4bab      	ldr	r3, [pc, #684]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005c18:	4ba8      	ldr	r3, [pc, #672]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	0a1b      	lsrs	r3, r3, #8
 8005c1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c22:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005c24:	4ba5      	ldr	r3, [pc, #660]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c2e:	4ba3      	ldr	r3, [pc, #652]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	08db      	lsrs	r3, r3, #3
 8005c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	fb02 f303 	mul.w	r3, r2, r3
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8126 	beq.w	8005e9e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d053      	beq.n	8005d00 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d86f      	bhi.n	8005d3e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d003      	beq.n	8005c6c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d02b      	beq.n	8005cc2 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8005c6a:	e068      	b.n	8005d3e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c6c:	4b93      	ldr	r3, [pc, #588]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	08db      	lsrs	r3, r3, #3
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	4a92      	ldr	r2, [pc, #584]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	ee07 3a90 	vmov	s15, r3
 8005c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	ee07 3a90 	vmov	s15, r3
 8005c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca0:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ca4:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005ca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cbc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005cc0:	e068      	b.n	8005d94 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	ee07 3a90 	vmov	s15, r3
 8005cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ccc:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005cd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cde:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ce2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005cfe:	e049      	b.n	8005d94 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0a:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005ecc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	ee07 3a90 	vmov	s15, r3
 8005d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d20:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d38:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005d3c:	e02a      	b.n	8005d94 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d3e:	4b5f      	ldr	r3, [pc, #380]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	08db      	lsrs	r3, r3, #3
 8005d44:	f003 0303 	and.w	r3, r3, #3
 8005d48:	4a5d      	ldr	r2, [pc, #372]	; (8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	ee07 3a90 	vmov	s15, r3
 8005d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	ee07 3a90 	vmov	s15, r3
 8005d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d72:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d76:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005d92:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d94:	4b49      	ldr	r3, [pc, #292]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005da0:	d121      	bne.n	8005de6 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005da2:	4b46      	ldr	r3, [pc, #280]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d017      	beq.n	8005dde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005dae:	4b43      	ldr	r3, [pc, #268]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db2:	0a5b      	lsrs	r3, r3, #9
 8005db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005db8:	ee07 3a90 	vmov	s15, r3
 8005dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dc4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005dc8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	e006      	b.n	8005dec <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	e002      	b.n	8005dec <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005dec:	4b33      	ldr	r3, [pc, #204]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005df8:	d121      	bne.n	8005e3e <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005dfa:	4b30      	ldr	r3, [pc, #192]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d017      	beq.n	8005e36 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e06:	4b2d      	ldr	r3, [pc, #180]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0a:	0c1b      	lsrs	r3, r3, #16
 8005e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e10:	ee07 3a90 	vmov	s15, r3
 8005e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005e18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e1c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005e20:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e2c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	605a      	str	r2, [r3, #4]
 8005e34:	e006      	b.n	8005e44 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	605a      	str	r2, [r3, #4]
 8005e3c:	e002      	b.n	8005e44 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e44:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e50:	d121      	bne.n	8005e96 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005e52:	4b1a      	ldr	r3, [pc, #104]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d017      	beq.n	8005e8e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e5e:	4b17      	ldr	r3, [pc, #92]	; (8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e62:	0e1b      	lsrs	r3, r3, #24
 8005e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e68:	ee07 3a90 	vmov	s15, r3
 8005e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005e70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e74:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005e78:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e84:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005e8c:	e010      	b.n	8005eb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	609a      	str	r2, [r3, #8]
}
 8005e94:	e00c      	b.n	8005eb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	609a      	str	r2, [r3, #8]
}
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	609a      	str	r2, [r3, #8]
}
 8005eb0:	bf00      	nop
 8005eb2:	372c      	adds	r7, #44	; 0x2c
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	44020c00 	.word	0x44020c00
 8005ec0:	03d09000 	.word	0x03d09000
 8005ec4:	46000000 	.word	0x46000000
 8005ec8:	4a742400 	.word	0x4a742400
 8005ecc:	4af42400 	.word	0x4af42400

08005ed0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b08b      	sub	sp, #44	; 0x2c
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005ed8:	4bad      	ldr	r3, [pc, #692]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005ee2:	4bab      	ldr	r3, [pc, #684]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005eec:	4ba8      	ldr	r3, [pc, #672]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	0a1b      	lsrs	r3, r3, #8
 8005ef2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef6:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005ef8:	4ba5      	ldr	r3, [pc, #660]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005f02:	4ba3      	ldr	r3, [pc, #652]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	08db      	lsrs	r3, r3, #3
 8005f08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	fb02 f303 	mul.w	r3, r2, r3
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8126 	beq.w	8006172 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d053      	beq.n	8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d86f      	bhi.n	8006012 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d003      	beq.n	8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d02b      	beq.n	8005f96 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8005f3e:	e068      	b.n	8006012 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f40:	4b93      	ldr	r3, [pc, #588]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	08db      	lsrs	r3, r3, #3
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	4a92      	ldr	r2, [pc, #584]	; (8006194 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f50:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	ee07 3a90 	vmov	s15, r3
 8005f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f74:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f78:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006198 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005f7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005f94:	e068      	b.n	8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	ee07 3a90 	vmov	s15, r3
 8005f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800619c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005fa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb2:	ed97 6a04 	vldr	s12, [r7, #16]
 8005fb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006198 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005fd2:	e049      	b.n	8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	eddf 6a70 	vldr	s13, [pc, #448]	; 80061a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	ee07 3a90 	vmov	s15, r3
 8005fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff0:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ff4:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006198 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005ff8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006000:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006010:	e02a      	b.n	8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006012:	4b5f      	ldr	r3, [pc, #380]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	08db      	lsrs	r3, r3, #3
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	4a5d      	ldr	r2, [pc, #372]	; (8006194 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800601e:	fa22 f303 	lsr.w	r3, r2, r3
 8006022:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006046:	ed97 6a04 	vldr	s12, [r7, #16]
 800604a:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006198 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800604e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800605a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006062:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006066:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006068:	4b49      	ldr	r3, [pc, #292]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006074:	d121      	bne.n	80060ba <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006076:	4b46      	ldr	r3, [pc, #280]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d017      	beq.n	80060b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006082:	4b43      	ldr	r3, [pc, #268]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006086:	0a5b      	lsrs	r3, r3, #9
 8006088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800608c:	ee07 3a90 	vmov	s15, r3
 8006090:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006094:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006098:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800609c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80060a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060a8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e006      	b.n	80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	e002      	b.n	80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060c0:	4b33      	ldr	r3, [pc, #204]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060cc:	d121      	bne.n	8006112 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80060ce:	4b30      	ldr	r3, [pc, #192]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80060d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d017      	beq.n	800610a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060da:	4b2d      	ldr	r3, [pc, #180]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80060dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060de:	0c1b      	lsrs	r3, r3, #16
 80060e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e4:	ee07 3a90 	vmov	s15, r3
 80060e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80060ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060f0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80060f4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80060f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006100:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	605a      	str	r2, [r3, #4]
 8006108:	e006      	b.n	8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	605a      	str	r2, [r3, #4]
 8006110:	e002      	b.n	8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006118:	4b1d      	ldr	r3, [pc, #116]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006124:	d121      	bne.n	800616a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006126:	4b1a      	ldr	r3, [pc, #104]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d017      	beq.n	8006162 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006132:	4b17      	ldr	r3, [pc, #92]	; (8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006136:	0e1b      	lsrs	r3, r3, #24
 8006138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800613c:	ee07 3a90 	vmov	s15, r3
 8006140:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006148:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800614c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006158:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006160:	e010      	b.n	8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	609a      	str	r2, [r3, #8]
}
 8006168:	e00c      	b.n	8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	609a      	str	r2, [r3, #8]
}
 8006170:	e008      	b.n	8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	609a      	str	r2, [r3, #8]
}
 8006184:	bf00      	nop
 8006186:	372c      	adds	r7, #44	; 0x2c
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	44020c00 	.word	0x44020c00
 8006194:	03d09000 	.word	0x03d09000
 8006198:	46000000 	.word	0x46000000
 800619c:	4a742400 	.word	0x4a742400
 80061a0:	4af42400 	.word	0x4af42400

080061a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b08b      	sub	sp, #44	; 0x2c
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80061ac:	4bad      	ldr	r3, [pc, #692]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80061ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80061b6:	4bab      	ldr	r3, [pc, #684]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80061c0:	4ba8      	ldr	r3, [pc, #672]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061ca:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80061cc:	4ba5      	ldr	r3, [pc, #660]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80061ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80061d6:	4ba3      	ldr	r3, [pc, #652]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80061d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061da:	08db      	lsrs	r3, r3, #3
 80061dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	fb02 f303 	mul.w	r3, r2, r3
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ee:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 8126 	beq.w	8006446 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d053      	beq.n	80062a8 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	2b03      	cmp	r3, #3
 8006204:	d86f      	bhi.n	80062e6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d003      	beq.n	8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d02b      	beq.n	800626a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8006212:	e068      	b.n	80062e6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006214:	4b93      	ldr	r3, [pc, #588]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	08db      	lsrs	r3, r3, #3
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	4a92      	ldr	r2, [pc, #584]	; (8006468 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006220:	fa22 f303 	lsr.w	r3, r2, r3
 8006224:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	ee07 3a90 	vmov	s15, r3
 800622c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	ee07 3a90 	vmov	s15, r3
 8006244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006248:	ed97 6a04 	vldr	s12, [r7, #16]
 800624c:	eddf 5a87 	vldr	s11, [pc, #540]	; 800646c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006250:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800625c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006264:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006268:	e068      	b.n	800633c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	ee07 3a90 	vmov	s15, r3
 8006270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006274:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006470 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006286:	ed97 6a04 	vldr	s12, [r7, #16]
 800628a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800646c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800628e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800629a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80062a6:	e049      	b.n	800633c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b2:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006474 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80062b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	ee07 3a90 	vmov	s15, r3
 80062c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c4:	ed97 6a04 	vldr	s12, [r7, #16]
 80062c8:	eddf 5a68 	vldr	s11, [pc, #416]	; 800646c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80062cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80062e4:	e02a      	b.n	800633c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062e6:	4b5f      	ldr	r3, [pc, #380]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	08db      	lsrs	r3, r3, #3
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	4a5d      	ldr	r2, [pc, #372]	; (8006468 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80062f2:	fa22 f303 	lsr.w	r3, r2, r3
 80062f6:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	ee07 3a90 	vmov	s15, r3
 8006308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	ee07 3a90 	vmov	s15, r3
 8006316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631a:	ed97 6a04 	vldr	s12, [r7, #16]
 800631e:	eddf 5a53 	vldr	s11, [pc, #332]	; 800646c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800632a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800632e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006336:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800633a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800633c:	4b49      	ldr	r3, [pc, #292]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006348:	d121      	bne.n	800638e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800634a:	4b46      	ldr	r3, [pc, #280]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d017      	beq.n	8006386 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006356:	4b43      	ldr	r3, [pc, #268]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635a:	0a5b      	lsrs	r3, r3, #9
 800635c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006360:	ee07 3a90 	vmov	s15, r3
 8006364:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800636c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006370:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800637c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	e006      	b.n	8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	e002      	b.n	8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006394:	4b33      	ldr	r3, [pc, #204]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800639c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063a0:	d121      	bne.n	80063e6 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80063a2:	4b30      	ldr	r3, [pc, #192]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d017      	beq.n	80063de <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80063ae:	4b2d      	ldr	r3, [pc, #180]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	0c1b      	lsrs	r3, r3, #16
 80063b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b8:	ee07 3a90 	vmov	s15, r3
 80063bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80063c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063c4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80063c8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80063cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063d4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	605a      	str	r2, [r3, #4]
 80063dc:	e006      	b.n	80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	605a      	str	r2, [r3, #4]
 80063e4:	e002      	b.n	80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063ec:	4b1d      	ldr	r3, [pc, #116]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063f8:	d121      	bne.n	800643e <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80063fa:	4b1a      	ldr	r3, [pc, #104]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d017      	beq.n	8006436 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006406:	4b17      	ldr	r3, [pc, #92]	; (8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640a:	0e1b      	lsrs	r3, r3, #24
 800640c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006410:	ee07 3a90 	vmov	s15, r3
 8006414:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800641c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006420:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800642c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006434:	e010      	b.n	8006458 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	609a      	str	r2, [r3, #8]
}
 800643c:	e00c      	b.n	8006458 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	609a      	str	r2, [r3, #8]
}
 8006444:	e008      	b.n	8006458 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	609a      	str	r2, [r3, #8]
}
 8006458:	bf00      	nop
 800645a:	372c      	adds	r7, #44	; 0x2c
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	44020c00 	.word	0x44020c00
 8006468:	03d09000 	.word	0x03d09000
 800646c:	46000000 	.word	0x46000000
 8006470:	4a742400 	.word	0x4a742400
 8006474:	4af42400 	.word	0x4af42400

08006478 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b08f      	sub	sp, #60	; 0x3c
 800647c:	af00      	add	r7, sp, #0
 800647e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006486:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800648a:	4321      	orrs	r1, r4
 800648c:	d150      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800648e:	4b26      	ldr	r3, [pc, #152]	; (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006498:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800649a:	4b23      	ldr	r3, [pc, #140]	; (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800649c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d108      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ae:	d104      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80064b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b4:	637b      	str	r3, [r7, #52]	; 0x34
 80064b6:	f002 bb2a 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80064ba:	4b1b      	ldr	r3, [pc, #108]	; (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80064bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064c8:	d108      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d0:	d104      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80064d2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80064d6:	637b      	str	r3, [r7, #52]	; 0x34
 80064d8:	f002 bb19 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80064dc:	4b12      	ldr	r3, [pc, #72]	; (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064e8:	d119      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f0:	d115      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80064f2:	4b0d      	ldr	r3, [pc, #52]	; (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80064fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064fe:	d30a      	bcc.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006500:	4b09      	ldr	r3, [pc, #36]	; (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	0a1b      	lsrs	r3, r3, #8
 8006506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800650a:	4a08      	ldr	r2, [pc, #32]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800650c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006510:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006512:	f002 bafc 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800651a:	f002 baf8 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
 8006522:	f002 baf4 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006526:	bf00      	nop
 8006528:	44020c00 	.word	0x44020c00
 800652c:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006534:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8006538:	ea50 0104 	orrs.w	r1, r0, r4
 800653c:	f001 8275 	beq.w	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8006540:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006544:	2801      	cmp	r0, #1
 8006546:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 800654a:	f082 82dd 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800654e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006552:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8006556:	ea50 0104 	orrs.w	r1, r0, r4
 800655a:	f001 816c 	beq.w	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800655e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006562:	2801      	cmp	r0, #1
 8006564:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8006568:	f082 82ce 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800656c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006570:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8006574:	ea50 0104 	orrs.w	r1, r0, r4
 8006578:	f001 8602 	beq.w	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800657c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006580:	2801      	cmp	r0, #1
 8006582:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8006586:	f082 82bf 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800658a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800658e:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8006592:	ea50 0104 	orrs.w	r1, r0, r4
 8006596:	f001 854c 	beq.w	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800659a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800659e:	2801      	cmp	r0, #1
 80065a0:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 80065a4:	f082 82b0 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80065a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065ac:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 80065b0:	ea50 0104 	orrs.w	r1, r0, r4
 80065b4:	f001 849e 	beq.w	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80065b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065bc:	2801      	cmp	r0, #1
 80065be:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 80065c2:	f082 82a1 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80065c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065ca:	f1a1 0420 	sub.w	r4, r1, #32
 80065ce:	ea50 0104 	orrs.w	r1, r0, r4
 80065d2:	f001 83e8 	beq.w	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80065d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065da:	2801      	cmp	r0, #1
 80065dc:	f171 0120 	sbcs.w	r1, r1, #32
 80065e0:	f082 8292 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80065e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065e8:	f1a1 0410 	sub.w	r4, r1, #16
 80065ec:	ea50 0104 	orrs.w	r1, r0, r4
 80065f0:	f002 8256 	beq.w	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80065f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065f8:	2801      	cmp	r0, #1
 80065fa:	f171 0110 	sbcs.w	r1, r1, #16
 80065fe:	f082 8283 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006602:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006606:	f1a1 0408 	sub.w	r4, r1, #8
 800660a:	ea50 0104 	orrs.w	r1, r0, r4
 800660e:	f002 81cc 	beq.w	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8006612:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006616:	2801      	cmp	r0, #1
 8006618:	f171 0108 	sbcs.w	r1, r1, #8
 800661c:	f082 8274 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006620:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006624:	1f0c      	subs	r4, r1, #4
 8006626:	ea50 0104 	orrs.w	r1, r0, r4
 800662a:	f001 8648 	beq.w	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800662e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006632:	2801      	cmp	r0, #1
 8006634:	f171 0104 	sbcs.w	r1, r1, #4
 8006638:	f082 8266 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800663c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006640:	1e8c      	subs	r4, r1, #2
 8006642:	ea50 0104 	orrs.w	r1, r0, r4
 8006646:	f002 8143 	beq.w	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800664a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800664e:	2801      	cmp	r0, #1
 8006650:	f171 0102 	sbcs.w	r1, r1, #2
 8006654:	f082 8258 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800665c:	1e4c      	subs	r4, r1, #1
 800665e:	ea50 0104 	orrs.w	r1, r0, r4
 8006662:	f002 80ce 	beq.w	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8006666:	e9d7 0100 	ldrd	r0, r1, [r7]
 800666a:	2801      	cmp	r0, #1
 800666c:	f171 0101 	sbcs.w	r1, r1, #1
 8006670:	f082 824a 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006674:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006678:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800667c:	4321      	orrs	r1, r4
 800667e:	f002 8059 	beq.w	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8006682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006686:	4cd9      	ldr	r4, [pc, #868]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006688:	42a0      	cmp	r0, r4
 800668a:	f171 0100 	sbcs.w	r1, r1, #0
 800668e:	f082 823b 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006692:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006696:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800669a:	4321      	orrs	r1, r4
 800669c:	f001 87d9 	beq.w	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80066a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066a4:	4cd2      	ldr	r4, [pc, #840]	; (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80066a6:	42a0      	cmp	r0, r4
 80066a8:	f171 0100 	sbcs.w	r1, r1, #0
 80066ac:	f082 822c 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80066b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066b4:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 80066b8:	4321      	orrs	r1, r4
 80066ba:	f001 8751 	beq.w	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80066be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066c2:	4ccc      	ldr	r4, [pc, #816]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80066c4:	42a0      	cmp	r0, r4
 80066c6:	f171 0100 	sbcs.w	r1, r1, #0
 80066ca:	f082 821d 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80066ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066d2:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 80066d6:	4321      	orrs	r1, r4
 80066d8:	f001 869a 	beq.w	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80066dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066e0:	4cc5      	ldr	r4, [pc, #788]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80066e2:	42a0      	cmp	r0, r4
 80066e4:	f171 0100 	sbcs.w	r1, r1, #0
 80066e8:	f082 820e 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80066ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066f0:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 80066f4:	4321      	orrs	r1, r4
 80066f6:	f001 8612 	beq.w	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80066fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066fe:	4cbf      	ldr	r4, [pc, #764]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8006700:	42a0      	cmp	r0, r4
 8006702:	f171 0100 	sbcs.w	r1, r1, #0
 8006706:	f082 81ff 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800670a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800670e:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8006712:	4321      	orrs	r1, r4
 8006714:	f002 817e 	beq.w	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8006718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800671c:	4cb8      	ldr	r4, [pc, #736]	; (8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800671e:	42a0      	cmp	r0, r4
 8006720:	f171 0100 	sbcs.w	r1, r1, #0
 8006724:	f082 81f0 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800672c:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8006730:	4321      	orrs	r1, r4
 8006732:	f000 829e 	beq.w	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8006736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800673a:	4cb2      	ldr	r4, [pc, #712]	; (8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800673c:	42a0      	cmp	r0, r4
 800673e:	f171 0100 	sbcs.w	r1, r1, #0
 8006742:	f082 81e1 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006746:	e9d7 0100 	ldrd	r0, r1, [r7]
 800674a:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 800674e:	4321      	orrs	r1, r4
 8006750:	f000 826d 	beq.w	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8006754:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006758:	4cab      	ldr	r4, [pc, #684]	; (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800675a:	42a0      	cmp	r0, r4
 800675c:	f171 0100 	sbcs.w	r1, r1, #0
 8006760:	f082 81d2 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006764:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006768:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 800676c:	4321      	orrs	r1, r4
 800676e:	f001 800d 	beq.w	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8006772:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006776:	4ca5      	ldr	r4, [pc, #660]	; (8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006778:	42a0      	cmp	r0, r4
 800677a:	f171 0100 	sbcs.w	r1, r1, #0
 800677e:	f082 81c3 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006782:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006786:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 800678a:	4321      	orrs	r1, r4
 800678c:	f000 81d0 	beq.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006794:	4c9e      	ldr	r4, [pc, #632]	; (8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006796:	42a0      	cmp	r0, r4
 8006798:	f171 0100 	sbcs.w	r1, r1, #0
 800679c:	f082 81b4 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80067a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067a4:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 80067a8:	4321      	orrs	r1, r4
 80067aa:	f000 8142 	beq.w	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80067ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067b2:	4c98      	ldr	r4, [pc, #608]	; (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80067b4:	42a0      	cmp	r0, r4
 80067b6:	f171 0100 	sbcs.w	r1, r1, #0
 80067ba:	f082 81a5 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80067be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067c2:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 80067c6:	4321      	orrs	r1, r4
 80067c8:	f001 824e 	beq.w	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80067cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067d0:	4c91      	ldr	r4, [pc, #580]	; (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80067d2:	42a0      	cmp	r0, r4
 80067d4:	f171 0100 	sbcs.w	r1, r1, #0
 80067d8:	f082 8196 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80067dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067e0:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 80067e4:	4321      	orrs	r1, r4
 80067e6:	f001 8197 	beq.w	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80067ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067ee:	4c8b      	ldr	r4, [pc, #556]	; (8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80067f0:	42a0      	cmp	r0, r4
 80067f2:	f171 0100 	sbcs.w	r1, r1, #0
 80067f6:	f082 8187 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80067fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067fe:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8006802:	4321      	orrs	r1, r4
 8006804:	f001 8154 	beq.w	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8006808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800680c:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8006810:	f171 0100 	sbcs.w	r1, r1, #0
 8006814:	f082 8178 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006818:	e9d7 0100 	ldrd	r0, r1, [r7]
 800681c:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8006820:	4321      	orrs	r1, r4
 8006822:	f001 80b7 	beq.w	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006826:	e9d7 0100 	ldrd	r0, r1, [r7]
 800682a:	f248 0401 	movw	r4, #32769	; 0x8001
 800682e:	42a0      	cmp	r0, r4
 8006830:	f171 0100 	sbcs.w	r1, r1, #0
 8006834:	f082 8168 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006838:	e9d7 0100 	ldrd	r0, r1, [r7]
 800683c:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8006840:	4321      	orrs	r1, r4
 8006842:	f001 8064 	beq.w	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8006846:	e9d7 0100 	ldrd	r0, r1, [r7]
 800684a:	f244 0401 	movw	r4, #16385	; 0x4001
 800684e:	42a0      	cmp	r0, r4
 8006850:	f171 0100 	sbcs.w	r1, r1, #0
 8006854:	f082 8158 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800685c:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8006860:	4321      	orrs	r1, r4
 8006862:	f001 8011 	beq.w	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8006866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800686a:	f242 0401 	movw	r4, #8193	; 0x2001
 800686e:	42a0      	cmp	r0, r4
 8006870:	f171 0100 	sbcs.w	r1, r1, #0
 8006874:	f082 8148 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800687c:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8006880:	4321      	orrs	r1, r4
 8006882:	f000 871e 	beq.w	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8006886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800688a:	f241 0401 	movw	r4, #4097	; 0x1001
 800688e:	42a0      	cmp	r0, r4
 8006890:	f171 0100 	sbcs.w	r1, r1, #0
 8006894:	f082 8138 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800689c:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 80068a0:	4321      	orrs	r1, r4
 80068a2:	f000 86a8 	beq.w	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80068a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068aa:	f640 0401 	movw	r4, #2049	; 0x801
 80068ae:	42a0      	cmp	r0, r4
 80068b0:	f171 0100 	sbcs.w	r1, r1, #0
 80068b4:	f082 8128 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068bc:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 80068c0:	4321      	orrs	r1, r4
 80068c2:	f000 8632 	beq.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80068c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068ca:	f240 4401 	movw	r4, #1025	; 0x401
 80068ce:	42a0      	cmp	r0, r4
 80068d0:	f171 0100 	sbcs.w	r1, r1, #0
 80068d4:	f082 8118 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068dc:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 80068e0:	4321      	orrs	r1, r4
 80068e2:	f000 85b0 	beq.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80068e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068ea:	f240 2401 	movw	r4, #513	; 0x201
 80068ee:	42a0      	cmp	r0, r4
 80068f0:	f171 0100 	sbcs.w	r1, r1, #0
 80068f4:	f082 8108 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068fc:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8006900:	4321      	orrs	r1, r4
 8006902:	f000 8535 	beq.w	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800690a:	f240 1401 	movw	r4, #257	; 0x101
 800690e:	42a0      	cmp	r0, r4
 8006910:	f171 0100 	sbcs.w	r1, r1, #0
 8006914:	f082 80f8 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800691c:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8006920:	4321      	orrs	r1, r4
 8006922:	f000 84ba 	beq.w	800729a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8006926:	e9d7 0100 	ldrd	r0, r1, [r7]
 800692a:	2881      	cmp	r0, #129	; 0x81
 800692c:	f171 0100 	sbcs.w	r1, r1, #0
 8006930:	f082 80ea 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006934:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006938:	2821      	cmp	r0, #33	; 0x21
 800693a:	f171 0100 	sbcs.w	r1, r1, #0
 800693e:	d26f      	bcs.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006940:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006944:	4301      	orrs	r1, r0
 8006946:	f002 80df 	beq.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800694a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800694e:	1e42      	subs	r2, r0, #1
 8006950:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006954:	2a20      	cmp	r2, #32
 8006956:	f173 0100 	sbcs.w	r1, r3, #0
 800695a:	f082 80d5 	bcs.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800695e:	2a1f      	cmp	r2, #31
 8006960:	f202 80d2 	bhi.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006964:	a101      	add	r1, pc, #4	; (adr r1, 800696c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8006966:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800696a:	bf00      	nop
 800696c:	08006ccd 	.word	0x08006ccd
 8006970:	08006d99 	.word	0x08006d99
 8006974:	08008b09 	.word	0x08008b09
 8006978:	08006e59 	.word	0x08006e59
 800697c:	08008b09 	.word	0x08008b09
 8006980:	08008b09 	.word	0x08008b09
 8006984:	08008b09 	.word	0x08008b09
 8006988:	08006f29 	.word	0x08006f29
 800698c:	08008b09 	.word	0x08008b09
 8006990:	08008b09 	.word	0x08008b09
 8006994:	08008b09 	.word	0x08008b09
 8006998:	08008b09 	.word	0x08008b09
 800699c:	08008b09 	.word	0x08008b09
 80069a0:	08008b09 	.word	0x08008b09
 80069a4:	08008b09 	.word	0x08008b09
 80069a8:	0800700b 	.word	0x0800700b
 80069ac:	08008b09 	.word	0x08008b09
 80069b0:	08008b09 	.word	0x08008b09
 80069b4:	08008b09 	.word	0x08008b09
 80069b8:	08008b09 	.word	0x08008b09
 80069bc:	08008b09 	.word	0x08008b09
 80069c0:	08008b09 	.word	0x08008b09
 80069c4:	08008b09 	.word	0x08008b09
 80069c8:	08008b09 	.word	0x08008b09
 80069cc:	08008b09 	.word	0x08008b09
 80069d0:	08008b09 	.word	0x08008b09
 80069d4:	08008b09 	.word	0x08008b09
 80069d8:	08008b09 	.word	0x08008b09
 80069dc:	08008b09 	.word	0x08008b09
 80069e0:	08008b09 	.word	0x08008b09
 80069e4:	08008b09 	.word	0x08008b09
 80069e8:	080070e1 	.word	0x080070e1
 80069ec:	80000001 	.word	0x80000001
 80069f0:	40000001 	.word	0x40000001
 80069f4:	20000001 	.word	0x20000001
 80069f8:	10000001 	.word	0x10000001
 80069fc:	08000001 	.word	0x08000001
 8006a00:	04000001 	.word	0x04000001
 8006a04:	00800001 	.word	0x00800001
 8006a08:	00400001 	.word	0x00400001
 8006a0c:	00200001 	.word	0x00200001
 8006a10:	00100001 	.word	0x00100001
 8006a14:	00080001 	.word	0x00080001
 8006a18:	00040001 	.word	0x00040001
 8006a1c:	00020001 	.word	0x00020001
 8006a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a24:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	f000 83c4 	beq.w	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006a2e:	f002 b86b 	b.w	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006a32:	4ba1      	ldr	r3, [pc, #644]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a38:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a44:	d036      	beq.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a4c:	d86b      	bhi.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a54:	d02b      	beq.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a5c:	d863      	bhi.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a64:	d01b      	beq.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a6c:	d85b      	bhi.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d004      	beq.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a7a:	d008      	beq.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8006a7c:	e053      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a7e:	f107 0320 	add.w	r3, r7, #32
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff f8ba 	bl	8005bfc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a8c:	e04e      	b.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a8e:	f107 0314 	add.w	r3, r7, #20
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7ff fa1c 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a9c:	e046      	b.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a9e:	f107 0308 	add.w	r3, r7, #8
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff fb7e 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006aac:	e03e      	b.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006aae:	4b83      	ldr	r3, [pc, #524]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006ab0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ab2:	e03b      	b.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ab4:	4b80      	ldr	r3, [pc, #512]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006aba:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006abe:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ac0:	4b7d      	ldr	r3, [pc, #500]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d10c      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8006acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d109      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ad2:	4b79      	ldr	r3, [pc, #484]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	08db      	lsrs	r3, r3, #3
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	4a78      	ldr	r2, [pc, #480]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006ade:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae4:	e01e      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ae6:	4b74      	ldr	r3, [pc, #464]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006af2:	d106      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006afa:	d102      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006afc:	4b71      	ldr	r3, [pc, #452]	; (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006afe:	637b      	str	r3, [r7, #52]	; 0x34
 8006b00:	e010      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b02:	4b6d      	ldr	r3, [pc, #436]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b0e:	d106      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b16:	d102      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006b18:	4b6b      	ldr	r3, [pc, #428]	; (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1c:	e002      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006b22:	e003      	b.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8006b24:	e002      	b.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b2a:	bf00      	nop
          }
        }
        break;
 8006b2c:	f001 bfef 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006b30:	4b61      	ldr	r3, [pc, #388]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b36:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b42:	d036      	beq.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b4a:	d86b      	bhi.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006b52:	d02b      	beq.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006b5a:	d863      	bhi.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b62:	d01b      	beq.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b6a:	d85b      	bhi.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d004      	beq.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b78:	d008      	beq.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8006b7a:	e053      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b7c:	f107 0320 	add.w	r3, r7, #32
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff f83b 	bl	8005bfc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b8a:	e04e      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b8c:	f107 0314 	add.w	r3, r7, #20
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff f99d 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b9a:	e046      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b9c:	f107 0308 	add.w	r3, r7, #8
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff faff 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006baa:	e03e      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006bac:	4b43      	ldr	r3, [pc, #268]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006bae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006bb0:	e03b      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bb2:	4b41      	ldr	r3, [pc, #260]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bb8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bbe:	4b3e      	ldr	r3, [pc, #248]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d10c      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d109      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bd0:	4b39      	ldr	r3, [pc, #228]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	08db      	lsrs	r3, r3, #3
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	4a39      	ldr	r2, [pc, #228]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006be0:	637b      	str	r3, [r7, #52]	; 0x34
 8006be2:	e01e      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006be4:	4b34      	ldr	r3, [pc, #208]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf0:	d106      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf8:	d102      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006bfa:	4b32      	ldr	r3, [pc, #200]	; (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bfe:	e010      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c00:	4b2d      	ldr	r3, [pc, #180]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c0c:	d106      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c14:	d102      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006c16:	4b2c      	ldr	r3, [pc, #176]	; (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006c18:	637b      	str	r3, [r7, #52]	; 0x34
 8006c1a:	e002      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006c20:	e003      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8006c22:	e002      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c28:	bf00      	nop
          }
        }
        break;
 8006c2a:	f001 bf70 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006c2e:	4b22      	ldr	r3, [pc, #136]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006c30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c38:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d108      	bne.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c40:	f107 0320 	add.w	r3, r7, #32
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fe ffd9 	bl	8005bfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c4e:	f001 bf5e 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	2b40      	cmp	r3, #64	; 0x40
 8006c56:	d108      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c58:	f107 0314 	add.w	r3, r7, #20
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff f937 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c66:	f001 bf52 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c6e:	f001 bf4e 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8006c72:	4b11      	ldr	r3, [pc, #68]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006c74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d108      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c84:	f107 0320 	add.w	r3, r7, #32
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fe ffb7 	bl	8005bfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c92:	f001 bf3c 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	2b80      	cmp	r3, #128	; 0x80
 8006c9a:	d108      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c9c:	f107 0314 	add.w	r3, r7, #20
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff f915 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006caa:	f001 bf30 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cb2:	f001 bf2c 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006cb6:	bf00      	nop
 8006cb8:	44020c00 	.word	0x44020c00
 8006cbc:	00bb8000 	.word	0x00bb8000
 8006cc0:	03d09000 	.word	0x03d09000
 8006cc4:	003d0900 	.word	0x003d0900
 8006cc8:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006ccc:	4b9d      	ldr	r3, [pc, #628]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d104      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006cde:	f7fc ff9f 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8006ce2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ce4:	f001 bf13 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006ce8:	4b96      	ldr	r3, [pc, #600]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cf4:	d10a      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d107      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cfc:	f107 0314 	add.w	r3, r7, #20
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff f8e5 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	637b      	str	r3, [r7, #52]	; 0x34
 8006d0a:	e043      	b.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006d0c:	4b8d      	ldr	r3, [pc, #564]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d18:	d10a      	bne.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d107      	bne.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d20:	f107 0308 	add.w	r3, r7, #8
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff fa3d 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d2e:	e031      	b.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006d30:	4b84      	ldr	r3, [pc, #528]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d10c      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d109      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d42:	4b80      	ldr	r3, [pc, #512]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	08db      	lsrs	r3, r3, #3
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	4a7e      	ldr	r2, [pc, #504]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d52:	637b      	str	r3, [r7, #52]	; 0x34
 8006d54:	e01e      	b.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006d56:	4b7b      	ldr	r3, [pc, #492]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d62:	d105      	bne.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d102      	bne.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8006d6a:	4b78      	ldr	r3, [pc, #480]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6e:	e011      	b.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006d70:	4b74      	ldr	r3, [pc, #464]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d106      	bne.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	2b05      	cmp	r3, #5
 8006d82:	d103      	bne.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d88:	637b      	str	r3, [r7, #52]	; 0x34
 8006d8a:	e003      	b.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d90:	f001 bebd 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d94:	f001 bebb 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006d98:	4b6a      	ldr	r3, [pc, #424]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006da2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d104      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006daa:	f7fc ff23 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8006dae:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006db0:	f001 bead 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006db4:	4b63      	ldr	r3, [pc, #396]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dc0:	d10a      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d107      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dc8:	f107 0314 	add.w	r3, r7, #20
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff f87f 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd6:	e03d      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	2b10      	cmp	r3, #16
 8006ddc:	d108      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dde:	f107 0308 	add.w	r3, r7, #8
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7ff f9de 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dec:	f001 be8f 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006df0:	4b54      	ldr	r3, [pc, #336]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d10c      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	2b18      	cmp	r3, #24
 8006e00:	d109      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e02:	4b50      	ldr	r3, [pc, #320]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	08db      	lsrs	r3, r3, #3
 8006e08:	f003 0303 	and.w	r3, r3, #3
 8006e0c:	4a4e      	ldr	r2, [pc, #312]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e12:	637b      	str	r3, [r7, #52]	; 0x34
 8006e14:	e01e      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8006e16:	4b4b      	ldr	r3, [pc, #300]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e22:	d105      	bne.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	d102      	bne.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8006e2a:	4b48      	ldr	r3, [pc, #288]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2e:	e011      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006e30:	4b44      	ldr	r3, [pc, #272]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d106      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	2b28      	cmp	r3, #40	; 0x28
 8006e42:	d103      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8006e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
 8006e4a:	e003      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e50:	f001 be5d 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e54:	f001 be5b 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006e58:	4b3a      	ldr	r3, [pc, #232]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006e5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006e5e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006e62:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d104      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e6a:	f7fc fec3 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8006e6e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e70:	f001 be4d 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006e74:	4b33      	ldr	r3, [pc, #204]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e80:	d10a      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e84:	2b40      	cmp	r3, #64	; 0x40
 8006e86:	d107      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e88:	f107 0314 	add.w	r3, r7, #20
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff f81f 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
 8006e96:	e045      	b.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006e98:	4b2a      	ldr	r3, [pc, #168]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ea4:	d10a      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	2b80      	cmp	r3, #128	; 0x80
 8006eaa:	d107      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eac:	f107 0308 	add.w	r3, r7, #8
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff f977 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eba:	e033      	b.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006ebc:	4b21      	ldr	r3, [pc, #132]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d10c      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	2bc0      	cmp	r3, #192	; 0xc0
 8006ecc:	d109      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ece:	4b1d      	ldr	r3, [pc, #116]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	08db      	lsrs	r3, r3, #3
 8006ed4:	f003 0303 	and.w	r3, r3, #3
 8006ed8:	4a1b      	ldr	r2, [pc, #108]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006eda:	fa22 f303 	lsr.w	r3, r2, r3
 8006ede:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee0:	e020      	b.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006ee2:	4b18      	ldr	r3, [pc, #96]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eee:	d106      	bne.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef6:	d102      	bne.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8006ef8:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006efa:	637b      	str	r3, [r7, #52]	; 0x34
 8006efc:	e012      	b.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006efe:	4b11      	ldr	r3, [pc, #68]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d107      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006f12:	d103      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8006f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1a:	e003      	b.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f20:	f001 bdf5 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f24:	f001 bdf3 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006f28:	4b06      	ldr	r3, [pc, #24]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006f2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f2e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006f32:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f3a:	f7fc fe5b 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8006f3e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f40:	f001 bde5 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f44:	44020c00 	.word	0x44020c00
 8006f48:	03d09000 	.word	0x03d09000
 8006f4c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006f50:	4ba0      	ldr	r3, [pc, #640]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f5c:	d10b      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f64:	d107      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f66:	f107 0314 	add.w	r3, r7, #20
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe ffb0 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	637b      	str	r3, [r7, #52]	; 0x34
 8006f74:	e047      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8006f76:	4b97      	ldr	r3, [pc, #604]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f82:	d10b      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f8a:	d107      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f8c:	f107 0308 	add.w	r3, r7, #8
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff f907 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9a:	e034      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006f9c:	4b8d      	ldr	r3, [pc, #564]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d10d      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006fae:	d109      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fb0:	4b88      	ldr	r3, [pc, #544]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	08db      	lsrs	r3, r3, #3
 8006fb6:	f003 0303 	and.w	r3, r3, #3
 8006fba:	4a87      	ldr	r2, [pc, #540]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fc2:	e020      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006fc4:	4b83      	ldr	r3, [pc, #524]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fd0:	d106      	bne.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fd8:	d102      	bne.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8006fda:	4b80      	ldr	r3, [pc, #512]	; (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006fde:	e012      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006fe0:	4b7c      	ldr	r3, [pc, #496]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d107      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006ff4:	d103      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8006ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8006ffc:	e003      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007002:	f001 bd84 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007006:	f001 bd82 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800700a:	4b72      	ldr	r3, [pc, #456]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800700c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007010:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007014:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	2b00      	cmp	r3, #0
 800701a:	d104      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800701c:	f7fc fdea 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8007020:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007022:	f001 bd74 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007026:	4b6b      	ldr	r3, [pc, #428]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800702e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007032:	d10b      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800703a:	d107      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800703c:	f107 0314 	add.w	r3, r7, #20
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe ff45 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	637b      	str	r3, [r7, #52]	; 0x34
 800704a:	e047      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800704c:	4b61      	ldr	r3, [pc, #388]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007058:	d10b      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007060:	d107      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007062:	f107 0308 	add.w	r3, r7, #8
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff f89c 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	637b      	str	r3, [r7, #52]	; 0x34
 8007070:	e034      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007072:	4b58      	ldr	r3, [pc, #352]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b02      	cmp	r3, #2
 800707c:	d10d      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007084:	d109      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007086:	4b53      	ldr	r3, [pc, #332]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	08db      	lsrs	r3, r3, #3
 800708c:	f003 0303 	and.w	r3, r3, #3
 8007090:	4a51      	ldr	r2, [pc, #324]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007092:	fa22 f303 	lsr.w	r3, r2, r3
 8007096:	637b      	str	r3, [r7, #52]	; 0x34
 8007098:	e020      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800709a:	4b4e      	ldr	r3, [pc, #312]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a6:	d106      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070ae:	d102      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80070b0:	4b4a      	ldr	r3, [pc, #296]	; (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80070b2:	637b      	str	r3, [r7, #52]	; 0x34
 80070b4:	e012      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80070b6:	4b47      	ldr	r3, [pc, #284]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80070b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d107      	bne.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80070ca:	d103      	bne.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80070cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070d0:	637b      	str	r3, [r7, #52]	; 0x34
 80070d2:	e003      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070d8:	f001 bd19 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80070dc:	f001 bd17 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80070e0:	4b3c      	ldr	r3, [pc, #240]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80070e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80070e6:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80070ea:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d104      	bne.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80070f2:	f7fc fd7f 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 80070f6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80070f8:	f001 bd09 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80070fc:	4b35      	ldr	r3, [pc, #212]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007108:	d10b      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007110:	d107      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007112:	f107 0314 	add.w	r3, r7, #20
 8007116:	4618      	mov	r0, r3
 8007118:	f7fe feda 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	637b      	str	r3, [r7, #52]	; 0x34
 8007120:	e047      	b.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007122:	4b2c      	ldr	r3, [pc, #176]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800712a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800712e:	d10b      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007136:	d107      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007138:	f107 0308 	add.w	r3, r7, #8
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff f831 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	637b      	str	r3, [r7, #52]	; 0x34
 8007146:	e034      	b.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007148:	4b22      	ldr	r3, [pc, #136]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b02      	cmp	r3, #2
 8007152:	d10d      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800715a:	d109      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800715c:	4b1d      	ldr	r3, [pc, #116]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	08db      	lsrs	r3, r3, #3
 8007162:	f003 0303 	and.w	r3, r3, #3
 8007166:	4a1c      	ldr	r2, [pc, #112]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007168:	fa22 f303 	lsr.w	r3, r2, r3
 800716c:	637b      	str	r3, [r7, #52]	; 0x34
 800716e:	e020      	b.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007170:	4b18      	ldr	r3, [pc, #96]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800717c:	d106      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007184:	d102      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8007186:	4b15      	ldr	r3, [pc, #84]	; (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
 800718a:	e012      	b.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800718c:	4b11      	ldr	r3, [pc, #68]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800718e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b02      	cmp	r3, #2
 8007198:	d107      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80071a0:	d103      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80071a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071a6:	637b      	str	r3, [r7, #52]	; 0x34
 80071a8:	e003      	b.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071ae:	f001 bcae 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80071b2:	f001 bcac 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80071b6:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80071b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80071bc:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 80071c0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10b      	bne.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80071c8:	f7fc fd14 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 80071cc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80071ce:	f001 bc9e 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80071d2:	bf00      	nop
 80071d4:	44020c00 	.word	0x44020c00
 80071d8:	03d09000 	.word	0x03d09000
 80071dc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80071e0:	4ba0      	ldr	r3, [pc, #640]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071ec:	d10b      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071f4:	d107      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071f6:	f107 0314 	add.w	r3, r7, #20
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fe fe68 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	637b      	str	r3, [r7, #52]	; 0x34
 8007204:	e047      	b.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8007206:	4b97      	ldr	r3, [pc, #604]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800720e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007212:	d10b      	bne.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800721a:	d107      	bne.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800721c:	f107 0308 	add.w	r3, r7, #8
 8007220:	4618      	mov	r0, r3
 8007222:	f7fe ffbf 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	637b      	str	r3, [r7, #52]	; 0x34
 800722a:	e034      	b.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800722c:	4b8d      	ldr	r3, [pc, #564]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b02      	cmp	r3, #2
 8007236:	d10d      	bne.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800723e:	d109      	bne.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007240:	4b88      	ldr	r3, [pc, #544]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	08db      	lsrs	r3, r3, #3
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	4a87      	ldr	r2, [pc, #540]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800724c:	fa22 f303 	lsr.w	r3, r2, r3
 8007250:	637b      	str	r3, [r7, #52]	; 0x34
 8007252:	e020      	b.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8007254:	4b83      	ldr	r3, [pc, #524]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800725c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007260:	d106      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007268:	d102      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800726a:	4b80      	ldr	r3, [pc, #512]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800726c:	637b      	str	r3, [r7, #52]	; 0x34
 800726e:	e012      	b.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007270:	4b7c      	ldr	r3, [pc, #496]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b02      	cmp	r3, #2
 800727c:	d107      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007284:	d103      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8007286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800728a:	637b      	str	r3, [r7, #52]	; 0x34
 800728c:	e003      	b.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007292:	f001 bc3c 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007296:	f001 bc3a 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800729a:	4b72      	ldr	r3, [pc, #456]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800729c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80072a0:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80072a4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80072ac:	f7fc fca2 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 80072b0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80072b2:	f001 bc2c 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80072b6:	4b6b      	ldr	r3, [pc, #428]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072c2:	d10b      	bne.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072ca:	d107      	bne.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072cc:	f107 0314 	add.w	r3, r7, #20
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe fdfd 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34
 80072da:	e047      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80072dc:	4b61      	ldr	r3, [pc, #388]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072e8:	d10b      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072f0:	d107      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072f2:	f107 0308 	add.w	r3, r7, #8
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe ff54 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007300:	e034      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8007302:	4b58      	ldr	r3, [pc, #352]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b02      	cmp	r3, #2
 800730c:	d10d      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007314:	d109      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007316:	4b53      	ldr	r3, [pc, #332]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	08db      	lsrs	r3, r3, #3
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	4a51      	ldr	r2, [pc, #324]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007322:	fa22 f303 	lsr.w	r3, r2, r3
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
 8007328:	e020      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800732a:	4b4e      	ldr	r3, [pc, #312]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007336:	d106      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800733e:	d102      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8007340:	4b4a      	ldr	r3, [pc, #296]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007342:	637b      	str	r3, [r7, #52]	; 0x34
 8007344:	e012      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8007346:	4b47      	ldr	r3, [pc, #284]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b02      	cmp	r3, #2
 8007352:	d107      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800735a:	d103      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800735c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
 8007362:	e003      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007368:	f001 bbd1 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800736c:	f001 bbcf 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8007370:	4b3c      	ldr	r3, [pc, #240]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007372:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007376:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800737a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	2b00      	cmp	r3, #0
 8007380:	d104      	bne.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007382:	f7fc fc37 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8007386:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8007388:	f001 bbc1 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800738c:	4b35      	ldr	r3, [pc, #212]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007398:	d10b      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073a0:	d107      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073a2:	f107 0314 	add.w	r3, r7, #20
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe fd92 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	637b      	str	r3, [r7, #52]	; 0x34
 80073b0:	e047      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80073b2:	4b2c      	ldr	r3, [pc, #176]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073be:	d10b      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073c6:	d107      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073c8:	f107 0308 	add.w	r3, r7, #8
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe fee9 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	637b      	str	r3, [r7, #52]	; 0x34
 80073d6:	e034      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80073d8:	4b22      	ldr	r3, [pc, #136]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d10d      	bne.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073ea:	d109      	bne.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073ec:	4b1d      	ldr	r3, [pc, #116]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	08db      	lsrs	r3, r3, #3
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	4a1c      	ldr	r2, [pc, #112]	; (8007468 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80073f8:	fa22 f303 	lsr.w	r3, r2, r3
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
 80073fe:	e020      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8007400:	4b18      	ldr	r3, [pc, #96]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800740c:	d106      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007414:	d102      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8007416:	4b15      	ldr	r3, [pc, #84]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007418:	637b      	str	r3, [r7, #52]	; 0x34
 800741a:	e012      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800741c:	4b11      	ldr	r3, [pc, #68]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800741e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b02      	cmp	r3, #2
 8007428:	d107      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007430:	d103      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8007432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007436:	637b      	str	r3, [r7, #52]	; 0x34
 8007438:	e003      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800743e:	f001 bb66 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007442:	f001 bb64 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8007446:	4b07      	ldr	r3, [pc, #28]	; (8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800744c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8007450:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10b      	bne.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007458:	f7fc fbcc 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 800745c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800745e:	f001 bb56 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007462:	bf00      	nop
 8007464:	44020c00 	.word	0x44020c00
 8007468:	03d09000 	.word	0x03d09000
 800746c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007470:	4ba1      	ldr	r3, [pc, #644]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800747c:	d10b      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007484:	d107      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007486:	f107 0314 	add.w	r3, r7, #20
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe fd20 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	637b      	str	r3, [r7, #52]	; 0x34
 8007494:	e047      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8007496:	4b98      	ldr	r3, [pc, #608]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800749e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074a2:	d10b      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074aa:	d107      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ac:	f107 0308 	add.w	r3, r7, #8
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe fe77 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ba:	e034      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80074bc:	4b8e      	ldr	r3, [pc, #568]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d10d      	bne.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80074ce:	d109      	bne.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074d0:	4b89      	ldr	r3, [pc, #548]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	08db      	lsrs	r3, r3, #3
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	4a88      	ldr	r2, [pc, #544]	; (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80074dc:	fa22 f303 	lsr.w	r3, r2, r3
 80074e0:	637b      	str	r3, [r7, #52]	; 0x34
 80074e2:	e020      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80074e4:	4b84      	ldr	r3, [pc, #528]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f0:	d106      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074f8:	d102      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80074fa:	4b81      	ldr	r3, [pc, #516]	; (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80074fc:	637b      	str	r3, [r7, #52]	; 0x34
 80074fe:	e012      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8007500:	4b7d      	ldr	r3, [pc, #500]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	2b02      	cmp	r3, #2
 800750c:	d107      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8007514:	d103      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8007516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800751a:	637b      	str	r3, [r7, #52]	; 0x34
 800751c:	e003      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007522:	f001 baf4 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007526:	f001 baf2 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800752a:	4b73      	ldr	r3, [pc, #460]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800752c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007530:	f003 0307 	and.w	r3, r3, #7
 8007534:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	2b00      	cmp	r3, #0
 800753a:	d104      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800753c:	f7fc fb5a 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8007540:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8007542:	f001 bae4 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8007546:	4b6c      	ldr	r3, [pc, #432]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800754e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007552:	d10a      	bne.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	2b01      	cmp	r3, #1
 8007558:	d107      	bne.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800755a:	f107 0314 	add.w	r3, r7, #20
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fcb6 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	637b      	str	r3, [r7, #52]	; 0x34
 8007568:	e043      	b.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800756a:	4b63      	ldr	r3, [pc, #396]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007576:	d10a      	bne.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	2b02      	cmp	r3, #2
 800757c:	d107      	bne.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800757e:	f107 0308 	add.w	r3, r7, #8
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fe0e 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	637b      	str	r3, [r7, #52]	; 0x34
 800758c:	e031      	b.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800758e:	4b5a      	ldr	r3, [pc, #360]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b02      	cmp	r3, #2
 8007598:	d10c      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	2b03      	cmp	r3, #3
 800759e:	d109      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075a0:	4b55      	ldr	r3, [pc, #340]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	08db      	lsrs	r3, r3, #3
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	4a54      	ldr	r2, [pc, #336]	; (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80075ac:	fa22 f303 	lsr.w	r3, r2, r3
 80075b0:	637b      	str	r3, [r7, #52]	; 0x34
 80075b2:	e01e      	b.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80075b4:	4b50      	ldr	r3, [pc, #320]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c0:	d105      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d102      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80075c8:	4b4d      	ldr	r3, [pc, #308]	; (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80075ca:	637b      	str	r3, [r7, #52]	; 0x34
 80075cc:	e011      	b.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80075ce:	4b4a      	ldr	r3, [pc, #296]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80075d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d106      	bne.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	2b05      	cmp	r3, #5
 80075e0:	d103      	bne.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80075e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075e6:	637b      	str	r3, [r7, #52]	; 0x34
 80075e8:	e003      	b.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075ee:	f001 ba8e 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80075f2:	f001 ba8c 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80075f6:	4b40      	ldr	r3, [pc, #256]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80075f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80075fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007600:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	2b00      	cmp	r3, #0
 8007606:	d104      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007608:	f7fc faf4 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 800760c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800760e:	f001 ba7e 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8007612:	4b39      	ldr	r3, [pc, #228]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800761a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800761e:	d10a      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	2b10      	cmp	r3, #16
 8007624:	d107      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007626:	f107 0314 	add.w	r3, r7, #20
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe fc50 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	637b      	str	r3, [r7, #52]	; 0x34
 8007634:	e043      	b.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8007636:	4b30      	ldr	r3, [pc, #192]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800763e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007642:	d10a      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	2b20      	cmp	r3, #32
 8007648:	d107      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800764a:	f107 0308 	add.w	r3, r7, #8
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe fda8 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	637b      	str	r3, [r7, #52]	; 0x34
 8007658:	e031      	b.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800765a:	4b27      	ldr	r3, [pc, #156]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b02      	cmp	r3, #2
 8007664:	d10c      	bne.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	2b30      	cmp	r3, #48	; 0x30
 800766a:	d109      	bne.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800766c:	4b22      	ldr	r3, [pc, #136]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	08db      	lsrs	r3, r3, #3
 8007672:	f003 0303 	and.w	r3, r3, #3
 8007676:	4a21      	ldr	r2, [pc, #132]	; (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007678:	fa22 f303 	lsr.w	r3, r2, r3
 800767c:	637b      	str	r3, [r7, #52]	; 0x34
 800767e:	e01e      	b.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8007680:	4b1d      	ldr	r3, [pc, #116]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800768c:	d105      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	2b40      	cmp	r3, #64	; 0x40
 8007692:	d102      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8007694:	4b1a      	ldr	r3, [pc, #104]	; (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007696:	637b      	str	r3, [r7, #52]	; 0x34
 8007698:	e011      	b.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800769a:	4b17      	ldr	r3, [pc, #92]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800769c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d106      	bne.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	2b50      	cmp	r3, #80	; 0x50
 80076ac:	d103      	bne.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80076ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076b2:	637b      	str	r3, [r7, #52]	; 0x34
 80076b4:	e003      	b.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076ba:	f001 ba28 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076be:	f001 ba26 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80076c2:	4b0d      	ldr	r3, [pc, #52]	; (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80076c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076c8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80076cc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d104      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80076d4:	f7fc faba 	bl	8003c4c <HAL_RCC_GetPCLK3Freq>
 80076d8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80076da:	f001 ba18 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076e4:	d10e      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076e6:	f107 0314 	add.w	r3, r7, #20
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fbf0 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076f4:	f001 ba0b 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076f8:	44020c00 	.word	0x44020c00
 80076fc:	03d09000 	.word	0x03d09000
 8007700:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800770a:	d108      	bne.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800770c:	f107 0308 	add.w	r3, r7, #8
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe fd47 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800771a:	f001 b9f8 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800771e:	4ba4      	ldr	r3, [pc, #656]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b02      	cmp	r3, #2
 8007728:	d10d      	bne.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007730:	d109      	bne.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007732:	4b9f      	ldr	r3, [pc, #636]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	08db      	lsrs	r3, r3, #3
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	4a9d      	ldr	r2, [pc, #628]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800773e:	fa22 f303 	lsr.w	r3, r2, r3
 8007742:	637b      	str	r3, [r7, #52]	; 0x34
 8007744:	e020      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007746:	4b9a      	ldr	r3, [pc, #616]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800774e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007752:	d106      	bne.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800775a:	d102      	bne.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800775c:	4b96      	ldr	r3, [pc, #600]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
 8007760:	e012      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007762:	4b93      	ldr	r3, [pc, #588]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007768:	f003 0302 	and.w	r3, r3, #2
 800776c:	2b02      	cmp	r3, #2
 800776e:	d107      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007776:	d103      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8007778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800777c:	637b      	str	r3, [r7, #52]	; 0x34
 800777e:	e003      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007784:	f001 b9c3 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007788:	f001 b9c1 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800778c:	4b88      	ldr	r3, [pc, #544]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800778e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	2b00      	cmp	r3, #0
 800779c:	d104      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800779e:	f7fc fa0d 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 80077a2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80077a4:	f001 b9b3 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d104      	bne.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80077ae:	f7fc f8d9 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 80077b2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80077b4:	f001 b9ab 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d108      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077be:	f107 0314 	add.w	r3, r7, #20
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe fb84 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077cc:	f001 b99f 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80077d0:	4b77      	ldr	r3, [pc, #476]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077dc:	d105      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d102      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80077e4:	4b75      	ldr	r3, [pc, #468]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80077e6:	637b      	str	r3, [r7, #52]	; 0x34
 80077e8:	e023      	b.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80077ea:	4b71      	ldr	r3, [pc, #452]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d10c      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d109      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077fc:	4b6c      	ldr	r3, [pc, #432]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	08db      	lsrs	r3, r3, #3
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	4a6b      	ldr	r2, [pc, #428]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007808:	fa22 f303 	lsr.w	r3, r2, r3
 800780c:	637b      	str	r3, [r7, #52]	; 0x34
 800780e:	e010      	b.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007810:	4b67      	ldr	r3, [pc, #412]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800781c:	d105      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	2b05      	cmp	r3, #5
 8007822:	d102      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8007824:	4b64      	ldr	r3, [pc, #400]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007826:	637b      	str	r3, [r7, #52]	; 0x34
 8007828:	e003      	b.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800782e:	f001 b96e 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007832:	f001 b96c 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007836:	4b5e      	ldr	r3, [pc, #376]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800783c:	f003 0308 	and.w	r3, r3, #8
 8007840:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007842:	4b5b      	ldr	r3, [pc, #364]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b02      	cmp	r3, #2
 800784e:	d106      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	2b00      	cmp	r3, #0
 8007854:	d103      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8007856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800785a:	637b      	str	r3, [r7, #52]	; 0x34
 800785c:	e012      	b.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800785e:	4b54      	ldr	r3, [pc, #336]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800786c:	d106      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	2b08      	cmp	r3, #8
 8007872:	d103      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8007874:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007878:	637b      	str	r3, [r7, #52]	; 0x34
 800787a:	e003      	b.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007880:	f001 b945 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007884:	f001 b943 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007888:	4b49      	ldr	r3, [pc, #292]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800788a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800788e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007892:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	2b00      	cmp	r3, #0
 8007898:	d104      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800789a:	f7fc f9ab 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 800789e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80078a0:	f001 b935 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80078a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078aa:	d108      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ac:	f107 0308 	add.w	r3, r7, #8
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fe fc77 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078ba:	f001 b928 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80078be:	4b3c      	ldr	r3, [pc, #240]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d10d      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078d0:	d109      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078d2:	4b37      	ldr	r3, [pc, #220]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	08db      	lsrs	r3, r3, #3
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	4a35      	ldr	r2, [pc, #212]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80078de:	fa22 f303 	lsr.w	r3, r2, r3
 80078e2:	637b      	str	r3, [r7, #52]	; 0x34
 80078e4:	e011      	b.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80078e6:	4b32      	ldr	r3, [pc, #200]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f2:	d106      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078fa:	d102      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80078fc:	4b2e      	ldr	r3, [pc, #184]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80078fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007900:	e003      	b.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007906:	f001 b902 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800790a:	f001 b900 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800790e:	4b28      	ldr	r3, [pc, #160]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007910:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007914:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007918:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	2b00      	cmp	r3, #0
 800791e:	d104      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007920:	f7fc f968 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8007924:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007926:	f001 b8f2 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007930:	d108      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007932:	f107 0308 	add.w	r3, r7, #8
 8007936:	4618      	mov	r0, r3
 8007938:	f7fe fc34 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007940:	f001 b8e5 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007944:	4b1a      	ldr	r3, [pc, #104]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b02      	cmp	r3, #2
 800794e:	d10d      	bne.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007956:	d109      	bne.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007958:	4b15      	ldr	r3, [pc, #84]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	08db      	lsrs	r3, r3, #3
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	4a14      	ldr	r2, [pc, #80]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007964:	fa22 f303 	lsr.w	r3, r2, r3
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
 800796a:	e011      	b.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800796c:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007978:	d106      	bne.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007980:	d102      	bne.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8007982:	4b0d      	ldr	r3, [pc, #52]	; (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007984:	637b      	str	r3, [r7, #52]	; 0x34
 8007986:	e003      	b.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800798c:	f001 b8bf 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007990:	f001 b8bd 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007994:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007996:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800799a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800799e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80079a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10c      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80079a6:	f7fc f951 	bl	8003c4c <HAL_RCC_GetPCLK3Freq>
 80079aa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80079ac:	f001 b8af 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80079b0:	44020c00 	.word	0x44020c00
 80079b4:	03d09000 	.word	0x03d09000
 80079b8:	003d0900 	.word	0x003d0900
 80079bc:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079c6:	d108      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079c8:	f107 0308 	add.w	r3, r7, #8
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fe fbe9 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079d6:	f001 b89a 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80079da:	4b9f      	ldr	r3, [pc, #636]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d10d      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079ec:	d109      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079ee:	4b9a      	ldr	r3, [pc, #616]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	08db      	lsrs	r3, r3, #3
 80079f4:	f003 0303 	and.w	r3, r3, #3
 80079f8:	4a98      	ldr	r2, [pc, #608]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80079fa:	fa22 f303 	lsr.w	r3, r2, r3
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007a00:	e011      	b.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8007a02:	4b95      	ldr	r3, [pc, #596]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a0e:	d106      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8007a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a16:	d102      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8007a18:	4b91      	ldr	r3, [pc, #580]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a1c:	e003      	b.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a22:	f001 b874 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a26:	f001 b872 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007a2a:	4b8b      	ldr	r3, [pc, #556]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a30:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007a34:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d104      	bne.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007a3c:	f7fc f906 	bl	8003c4c <HAL_RCC_GetPCLK3Freq>
 8007a40:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a42:	f001 b864 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a4c:	d108      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a4e:	f107 0308 	add.w	r3, r7, #8
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fba6 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a5c:	f001 b857 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007a60:	4b7d      	ldr	r3, [pc, #500]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d10d      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a72:	d109      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a74:	4b78      	ldr	r3, [pc, #480]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	08db      	lsrs	r3, r3, #3
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	4a77      	ldr	r2, [pc, #476]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007a80:	fa22 f303 	lsr.w	r3, r2, r3
 8007a84:	637b      	str	r3, [r7, #52]	; 0x34
 8007a86:	e011      	b.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8007a88:	4b73      	ldr	r3, [pc, #460]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a94:	d106      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a9c:	d102      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8007a9e:	4b70      	ldr	r3, [pc, #448]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa2:	e003      	b.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aa8:	f001 b831 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007aac:	f001 b82f 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007ab0:	4b69      	ldr	r3, [pc, #420]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007ab2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ab6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007aba:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d104      	bne.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ac2:	f7fc f897 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8007ac6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007ac8:	f001 b821 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ad2:	d108      	bne.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ad4:	f107 0308 	add.w	r3, r7, #8
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fe fb63 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ae2:	f001 b814 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007ae6:	4b5c      	ldr	r3, [pc, #368]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d10e      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007af8:	d10a      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007afa:	4b57      	ldr	r3, [pc, #348]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	08db      	lsrs	r3, r3, #3
 8007b00:	f003 0303 	and.w	r3, r3, #3
 8007b04:	4a55      	ldr	r2, [pc, #340]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007b06:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b0c:	f000 bfff 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b14:	f000 bffb 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007b18:	4b4f      	ldr	r3, [pc, #316]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007b1a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007b1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b22:	633b      	str	r3, [r7, #48]	; 0x30
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007b2a:	d056      	beq.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007b32:	f200 808b 	bhi.w	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b3c:	d03e      	beq.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b44:	f200 8082 	bhi.w	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b4e:	d027      	beq.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b56:	d879      	bhi.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b5e:	d017      	beq.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8007b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b66:	d871      	bhi.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d004      	beq.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b74:	d004      	beq.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8007b76:	e069      	b.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007b78:	f7fc f868 	bl	8003c4c <HAL_RCC_GetPCLK3Freq>
 8007b7c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007b7e:	e068      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b80:	f107 0314 	add.w	r3, r7, #20
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fe f9a3 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b8e:	e060      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b90:	f107 0308 	add.w	r3, r7, #8
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fe fb05 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b9e:	e058      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ba0:	4b2d      	ldr	r3, [pc, #180]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d103      	bne.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8007bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bb2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007bb4:	e04d      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007bba:	e04a      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007bbc:	4b26      	ldr	r3, [pc, #152]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bca:	d103      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8007bcc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007bd0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007bd2:	e03e      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007bd8:	e03b      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bda:	4b1f      	ldr	r3, [pc, #124]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007be0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007be4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007be6:	4b1c      	ldr	r3, [pc, #112]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d10c      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8007bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d109      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bf8:	4b17      	ldr	r3, [pc, #92]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	08db      	lsrs	r3, r3, #3
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	4a16      	ldr	r2, [pc, #88]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007c04:	fa22 f303 	lsr.w	r3, r2, r3
 8007c08:	637b      	str	r3, [r7, #52]	; 0x34
 8007c0a:	e01e      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c0c:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c18:	d106      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8007c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c20:	d102      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007c22:	4b0f      	ldr	r3, [pc, #60]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
 8007c26:	e010      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c28:	4b0b      	ldr	r3, [pc, #44]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c34:	d106      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c3c:	d102      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007c3e:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8007c40:	637b      	str	r3, [r7, #52]	; 0x34
 8007c42:	e002      	b.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007c48:	e003      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8007c4a:	e002      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c50:	bf00      	nop
          }
        }
        break;
 8007c52:	f000 bf5c 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c56:	bf00      	nop
 8007c58:	44020c00 	.word	0x44020c00
 8007c5c:	03d09000 	.word	0x03d09000
 8007c60:	003d0900 	.word	0x003d0900
 8007c64:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007c68:	4b9e      	ldr	r3, [pc, #632]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007c6a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007c6e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007c72:	633b      	str	r3, [r7, #48]	; 0x30
 8007c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c76:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007c7a:	d056      	beq.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007c82:	f200 808b 	bhi.w	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c8c:	d03e      	beq.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c94:	f200 8082 	bhi.w	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c9e:	d027      	beq.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ca6:	d879      	bhi.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cae:	d017      	beq.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cb6:	d871      	bhi.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d004      	beq.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc4:	d004      	beq.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8007cc6:	e069      	b.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007cc8:	f7fb ff94 	bl	8003bf4 <HAL_RCC_GetPCLK1Freq>
 8007ccc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007cce:	e068      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cd0:	f107 0314 	add.w	r3, r7, #20
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fe f8fb 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007cde:	e060      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ce0:	f107 0308 	add.w	r3, r7, #8
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe fa5d 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007cee:	e058      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007cf0:	4b7c      	ldr	r3, [pc, #496]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d103      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8007cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d02:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007d04:	e04d      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d0a:	e04a      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007d0c:	4b75      	ldr	r3, [pc, #468]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d1a:	d103      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8007d1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007d20:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007d22:	e03e      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d28:	e03b      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d2a:	4b6e      	ldr	r3, [pc, #440]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d30:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007d34:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d36:	4b6b      	ldr	r3, [pc, #428]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d10c      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8007d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d109      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d48:	4b66      	ldr	r3, [pc, #408]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	08db      	lsrs	r3, r3, #3
 8007d4e:	f003 0303 	and.w	r3, r3, #3
 8007d52:	4a65      	ldr	r2, [pc, #404]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007d54:	fa22 f303 	lsr.w	r3, r2, r3
 8007d58:	637b      	str	r3, [r7, #52]	; 0x34
 8007d5a:	e01e      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d5c:	4b61      	ldr	r3, [pc, #388]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d68:	d106      	bne.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d70:	d102      	bne.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007d72:	4b5e      	ldr	r3, [pc, #376]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007d74:	637b      	str	r3, [r7, #52]	; 0x34
 8007d76:	e010      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d78:	4b5a      	ldr	r3, [pc, #360]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d84:	d106      	bne.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8007d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d8c:	d102      	bne.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007d8e:	4b58      	ldr	r3, [pc, #352]	; (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007d90:	637b      	str	r3, [r7, #52]	; 0x34
 8007d92:	e002      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007d94:	2300      	movs	r3, #0
 8007d96:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007d98:	e003      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8007d9a:	e002      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007da0:	bf00      	nop
          }
        }
        break;
 8007da2:	f000 beb4 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007da6:	4b4f      	ldr	r3, [pc, #316]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007da8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007dac:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007db0:	633b      	str	r3, [r7, #48]	; 0x30
 8007db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007db8:	d056      	beq.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dc0:	f200 808b 	bhi.w	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dca:	d03e      	beq.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dd2:	f200 8082 	bhi.w	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ddc:	d027      	beq.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007de4:	d879      	bhi.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dec:	d017      	beq.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007df4:	d871      	bhi.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d004      	beq.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e02:	d004      	beq.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8007e04:	e069      	b.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007e06:	f7fb ff21 	bl	8003c4c <HAL_RCC_GetPCLK3Freq>
 8007e0a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007e0c:	e068      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e0e:	f107 0314 	add.w	r3, r7, #20
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe f85c 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e1c:	e060      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e1e:	f107 0308 	add.w	r3, r7, #8
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe f9be 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e2c:	e058      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e2e:	4b2d      	ldr	r3, [pc, #180]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d103      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8007e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e40:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007e42:	e04d      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e48:	e04a      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007e4a:	4b26      	ldr	r3, [pc, #152]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e58:	d103      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8007e5a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e5e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007e60:	e03e      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e66:	e03b      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e68:	4b1e      	ldr	r3, [pc, #120]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007e6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e6e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007e72:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e74:	4b1b      	ldr	r3, [pc, #108]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d10c      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8007e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d109      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e86:	4b17      	ldr	r3, [pc, #92]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	08db      	lsrs	r3, r3, #3
 8007e8c:	f003 0303 	and.w	r3, r3, #3
 8007e90:	4a15      	ldr	r2, [pc, #84]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007e92:	fa22 f303 	lsr.w	r3, r2, r3
 8007e96:	637b      	str	r3, [r7, #52]	; 0x34
 8007e98:	e01e      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e9a:	4b12      	ldr	r3, [pc, #72]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ea6:	d106      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8007ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eae:	d102      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007eb0:	4b0e      	ldr	r3, [pc, #56]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8007eb4:	e010      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007eb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ec2:	d106      	bne.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8007ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eca:	d102      	bne.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ecc:	4b08      	ldr	r3, [pc, #32]	; (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007ece:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed0:	e002      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007ed6:	e003      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8007ed8:	e002      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ede:	bf00      	nop
          }
        }
        break;
 8007ee0:	f000 be15 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ee4:	44020c00 	.word	0x44020c00
 8007ee8:	03d09000 	.word	0x03d09000
 8007eec:	003d0900 	.word	0x003d0900
 8007ef0:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007ef4:	4b9e      	ldr	r3, [pc, #632]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007ef6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007efa:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8007efe:	633b      	str	r3, [r7, #48]	; 0x30
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007f06:	d056      	beq.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007f0e:	f200 808b 	bhi.w	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f18:	d03e      	beq.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f20:	f200 8082 	bhi.w	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f2a:	d027      	beq.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f32:	d879      	bhi.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f3a:	d017      	beq.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f42:	d871      	bhi.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d004      	beq.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f50:	d004      	beq.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8007f52:	e069      	b.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007f54:	f7fb fe7a 	bl	8003c4c <HAL_RCC_GetPCLK3Freq>
 8007f58:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007f5a:	e068      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f5c:	f107 0314 	add.w	r3, r7, #20
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fd ffb5 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f6a:	e060      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f6c:	f107 0308 	add.w	r3, r7, #8
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fe f917 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f7a:	e058      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f7c:	4b7c      	ldr	r3, [pc, #496]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d103      	bne.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8007f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f8e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007f90:	e04d      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f96:	e04a      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007f98:	4b75      	ldr	r3, [pc, #468]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fa6:	d103      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8007fa8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007fac:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007fae:	e03e      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fb4:	e03b      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fb6:	4b6e      	ldr	r3, [pc, #440]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fbc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007fc0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fc2:	4b6b      	ldr	r3, [pc, #428]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d10c      	bne.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8007fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d109      	bne.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fd4:	4b66      	ldr	r3, [pc, #408]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	08db      	lsrs	r3, r3, #3
 8007fda:	f003 0303 	and.w	r3, r3, #3
 8007fde:	4a65      	ldr	r2, [pc, #404]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe6:	e01e      	b.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fe8:	4b61      	ldr	r3, [pc, #388]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ff4:	d106      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ffc:	d102      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007ffe:	4b5e      	ldr	r3, [pc, #376]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008000:	637b      	str	r3, [r7, #52]	; 0x34
 8008002:	e010      	b.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008004:	4b5a      	ldr	r3, [pc, #360]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800800c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008010:	d106      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8008012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008018:	d102      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800801a:	4b58      	ldr	r3, [pc, #352]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800801c:	637b      	str	r3, [r7, #52]	; 0x34
 800801e:	e002      	b.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008024:	e003      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8008026:	e002      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800802c:	bf00      	nop
          }
        }
        break;
 800802e:	f000 bd6e 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008032:	4b4f      	ldr	r3, [pc, #316]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008034:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008038:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800803c:	633b      	str	r3, [r7, #48]	; 0x30
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008044:	d056      	beq.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8008046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008048:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800804c:	f200 808b 	bhi.w	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008052:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008056:	d03e      	beq.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800805e:	f200 8082 	bhi.w	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008064:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008068:	d027      	beq.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008070:	d879      	bhi.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008078:	d017      	beq.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008080:	d871      	bhi.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	2b00      	cmp	r3, #0
 8008086:	d004      	beq.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800808e:	d004      	beq.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008090:	e069      	b.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008092:	f7fb fddb 	bl	8003c4c <HAL_RCC_GetPCLK3Freq>
 8008096:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008098:	e068      	b.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800809a:	f107 0314 	add.w	r3, r7, #20
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fd ff16 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080a8:	e060      	b.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080aa:	f107 0308 	add.w	r3, r7, #8
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe f878 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080b8:	e058      	b.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80080ba:	4b2d      	ldr	r3, [pc, #180]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80080bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d103      	bne.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80080c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080cc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80080ce:	e04d      	b.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080d4:	e04a      	b.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80080d6:	4b26      	ldr	r3, [pc, #152]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80080d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080e4:	d103      	bne.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 80080e6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80080ea:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80080ec:	e03e      	b.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080f2:	e03b      	b.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080f4:	4b1e      	ldr	r3, [pc, #120]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80080f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80080fa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80080fe:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008100:	4b1b      	ldr	r3, [pc, #108]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b02      	cmp	r3, #2
 800810a:	d10c      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d109      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008112:	4b17      	ldr	r3, [pc, #92]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	08db      	lsrs	r3, r3, #3
 8008118:	f003 0303 	and.w	r3, r3, #3
 800811c:	4a15      	ldr	r2, [pc, #84]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800811e:	fa22 f303 	lsr.w	r3, r2, r3
 8008122:	637b      	str	r3, [r7, #52]	; 0x34
 8008124:	e01e      	b.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008126:	4b12      	ldr	r3, [pc, #72]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800812e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008132:	d106      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8008134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800813a:	d102      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800813c:	4b0e      	ldr	r3, [pc, #56]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800813e:	637b      	str	r3, [r7, #52]	; 0x34
 8008140:	e010      	b.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008142:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800814a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800814e:	d106      	bne.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8008150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008156:	d102      	bne.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008158:	4b08      	ldr	r3, [pc, #32]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800815a:	637b      	str	r3, [r7, #52]	; 0x34
 800815c:	e002      	b.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008162:	e003      	b.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8008164:	e002      	b.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800816a:	bf00      	nop
          }
        }
        break;
 800816c:	f000 bccf 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008170:	44020c00 	.word	0x44020c00
 8008174:	03d09000 	.word	0x03d09000
 8008178:	003d0900 	.word	0x003d0900
 800817c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008180:	4b9e      	ldr	r3, [pc, #632]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008182:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008186:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800818a:	633b      	str	r3, [r7, #48]	; 0x30
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008192:	d056      	beq.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8008194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008196:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800819a:	f200 808b 	bhi.w	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081a4:	d03e      	beq.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ac:	f200 8082 	bhi.w	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081b6:	d027      	beq.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081be:	d879      	bhi.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081c6:	d017      	beq.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081ce:	d871      	bhi.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d004      	beq.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081dc:	d004      	beq.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 80081de:	e069      	b.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80081e0:	f7fb fd34 	bl	8003c4c <HAL_RCC_GetPCLK3Freq>
 80081e4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80081e6:	e068      	b.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081e8:	f107 0314 	add.w	r3, r7, #20
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fd fe6f 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081f6:	e060      	b.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081f8:	f107 0308 	add.w	r3, r7, #8
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fd ffd1 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008206:	e058      	b.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008208:	4b7c      	ldr	r3, [pc, #496]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800820a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b02      	cmp	r3, #2
 8008214:	d103      	bne.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8008216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800821c:	e04d      	b.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800821e:	2300      	movs	r3, #0
 8008220:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008222:	e04a      	b.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008224:	4b75      	ldr	r3, [pc, #468]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800822a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800822e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008232:	d103      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8008234:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008238:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800823a:	e03e      	b.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008240:	e03b      	b.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008242:	4b6e      	ldr	r3, [pc, #440]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008244:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008248:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800824c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800824e:	4b6b      	ldr	r3, [pc, #428]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b02      	cmp	r3, #2
 8008258:	d10c      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825c:	2b00      	cmp	r3, #0
 800825e:	d109      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008260:	4b66      	ldr	r3, [pc, #408]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	08db      	lsrs	r3, r3, #3
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	4a65      	ldr	r2, [pc, #404]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800826c:	fa22 f303 	lsr.w	r3, r2, r3
 8008270:	637b      	str	r3, [r7, #52]	; 0x34
 8008272:	e01e      	b.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008274:	4b61      	ldr	r3, [pc, #388]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800827c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008280:	d106      	bne.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008288:	d102      	bne.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800828a:	4b5e      	ldr	r3, [pc, #376]	; (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800828c:	637b      	str	r3, [r7, #52]	; 0x34
 800828e:	e010      	b.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008290:	4b5a      	ldr	r3, [pc, #360]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800829c:	d106      	bne.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800829e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082a4:	d102      	bne.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80082a6:	4b58      	ldr	r3, [pc, #352]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80082a8:	637b      	str	r3, [r7, #52]	; 0x34
 80082aa:	e002      	b.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80082b0:	e003      	b.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80082b2:	e002      	b.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082b8:	bf00      	nop
          }
        }
        break;
 80082ba:	f000 bc28 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80082be:	4b4f      	ldr	r3, [pc, #316]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80082c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082c8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80082ca:	4b4c      	ldr	r3, [pc, #304]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082d6:	d106      	bne.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 80082d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d103      	bne.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 80082de:	4b4a      	ldr	r3, [pc, #296]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80082e0:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80082e2:	f000 bc14 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ec:	d108      	bne.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082ee:	f107 0320 	add.w	r3, r7, #32
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fd fc82 	bl	8005bfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082fc:	f000 bc07 	b.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008306:	d107      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008308:	f107 0314 	add.w	r3, r7, #20
 800830c:	4618      	mov	r0, r3
 800830e:	f7fd fddf 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008316:	e3fa      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800831c:	e3f7      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800831e:	4b37      	ldr	r3, [pc, #220]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008324:	f003 0307 	and.w	r3, r3, #7
 8008328:	633b      	str	r3, [r7, #48]	; 0x30
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	2b04      	cmp	r3, #4
 800832e:	d861      	bhi.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8008330:	a201      	add	r2, pc, #4	; (adr r2, 8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8008332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008336:	bf00      	nop
 8008338:	0800834d 	.word	0x0800834d
 800833c:	0800835d 	.word	0x0800835d
 8008340:	0800836d 	.word	0x0800836d
 8008344:	0800837d 	.word	0x0800837d
 8008348:	08008383 	.word	0x08008383
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800834c:	f107 0320 	add.w	r3, r7, #32
 8008350:	4618      	mov	r0, r3
 8008352:	f7fd fc53 	bl	8005bfc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800835a:	e04e      	b.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800835c:	f107 0314 	add.w	r3, r7, #20
 8008360:	4618      	mov	r0, r3
 8008362:	f7fd fdb5 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800836a:	e046      	b.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800836c:	f107 0308 	add.w	r3, r7, #8
 8008370:	4618      	mov	r0, r3
 8008372:	f7fd ff17 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800837a:	e03e      	b.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800837c:	4b23      	ldr	r3, [pc, #140]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800837e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008380:	e03b      	b.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008382:	4b1e      	ldr	r3, [pc, #120]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008388:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800838c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800838e:	4b1b      	ldr	r3, [pc, #108]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0302 	and.w	r3, r3, #2
 8008396:	2b02      	cmp	r3, #2
 8008398:	d10c      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d109      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083a0:	4b16      	ldr	r3, [pc, #88]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	08db      	lsrs	r3, r3, #3
 80083a6:	f003 0303 	and.w	r3, r3, #3
 80083aa:	4a15      	ldr	r2, [pc, #84]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80083ac:	fa22 f303 	lsr.w	r3, r2, r3
 80083b0:	637b      	str	r3, [r7, #52]	; 0x34
 80083b2:	e01e      	b.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083b4:	4b11      	ldr	r3, [pc, #68]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083c0:	d106      	bne.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80083c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c8:	d102      	bne.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80083ca:	4b0e      	ldr	r3, [pc, #56]	; (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80083cc:	637b      	str	r3, [r7, #52]	; 0x34
 80083ce:	e010      	b.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083d0:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083dc:	d106      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083e4:	d102      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80083e6:	4b08      	ldr	r3, [pc, #32]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80083e8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ea:	e002      	b.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80083f0:	e003      	b.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80083f2:	e002      	b.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80083f8:	bf00      	nop
          }
        }
        break;
 80083fa:	e388      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083fc:	44020c00 	.word	0x44020c00
 8008400:	03d09000 	.word	0x03d09000
 8008404:	003d0900 	.word	0x003d0900
 8008408:	007a1200 	.word	0x007a1200
 800840c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008410:	4ba9      	ldr	r3, [pc, #676]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800841a:	633b      	str	r3, [r7, #48]	; 0x30
 800841c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841e:	2b20      	cmp	r3, #32
 8008420:	f200 809a 	bhi.w	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8008424:	a201      	add	r2, pc, #4	; (adr r2, 800842c <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8008426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842a:	bf00      	nop
 800842c:	080084b1 	.word	0x080084b1
 8008430:	08008559 	.word	0x08008559
 8008434:	08008559 	.word	0x08008559
 8008438:	08008559 	.word	0x08008559
 800843c:	08008559 	.word	0x08008559
 8008440:	08008559 	.word	0x08008559
 8008444:	08008559 	.word	0x08008559
 8008448:	08008559 	.word	0x08008559
 800844c:	080084c1 	.word	0x080084c1
 8008450:	08008559 	.word	0x08008559
 8008454:	08008559 	.word	0x08008559
 8008458:	08008559 	.word	0x08008559
 800845c:	08008559 	.word	0x08008559
 8008460:	08008559 	.word	0x08008559
 8008464:	08008559 	.word	0x08008559
 8008468:	08008559 	.word	0x08008559
 800846c:	080084d1 	.word	0x080084d1
 8008470:	08008559 	.word	0x08008559
 8008474:	08008559 	.word	0x08008559
 8008478:	08008559 	.word	0x08008559
 800847c:	08008559 	.word	0x08008559
 8008480:	08008559 	.word	0x08008559
 8008484:	08008559 	.word	0x08008559
 8008488:	08008559 	.word	0x08008559
 800848c:	080084e1 	.word	0x080084e1
 8008490:	08008559 	.word	0x08008559
 8008494:	08008559 	.word	0x08008559
 8008498:	08008559 	.word	0x08008559
 800849c:	08008559 	.word	0x08008559
 80084a0:	08008559 	.word	0x08008559
 80084a4:	08008559 	.word	0x08008559
 80084a8:	08008559 	.word	0x08008559
 80084ac:	080084e7 	.word	0x080084e7
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084b0:	f107 0320 	add.w	r3, r7, #32
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fd fba1 	bl	8005bfc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084be:	e04e      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084c0:	f107 0314 	add.w	r3, r7, #20
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fd fd03 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084ce:	e046      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084d0:	f107 0308 	add.w	r3, r7, #8
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fd fe65 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084de:	e03e      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80084e0:	4b76      	ldr	r3, [pc, #472]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80084e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084e4:	e03b      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084e6:	4b74      	ldr	r3, [pc, #464]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80084e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80084ec:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80084f0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084f2:	4b71      	ldr	r3, [pc, #452]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d10c      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	2b00      	cmp	r3, #0
 8008502:	d109      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008504:	4b6c      	ldr	r3, [pc, #432]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	08db      	lsrs	r3, r3, #3
 800850a:	f003 0303 	and.w	r3, r3, #3
 800850e:	4a6c      	ldr	r2, [pc, #432]	; (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008510:	fa22 f303 	lsr.w	r3, r2, r3
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
 8008516:	e01e      	b.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008518:	4b67      	ldr	r3, [pc, #412]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008524:	d106      	bne.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800852c:	d102      	bne.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800852e:	4b65      	ldr	r3, [pc, #404]	; (80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008530:	637b      	str	r3, [r7, #52]	; 0x34
 8008532:	e010      	b.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008534:	4b60      	ldr	r3, [pc, #384]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800853c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008540:	d106      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8008542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008548:	d102      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800854a:	4b5f      	ldr	r3, [pc, #380]	; (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800854c:	637b      	str	r3, [r7, #52]	; 0x34
 800854e:	e002      	b.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008554:	e003      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8008556:	e002      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8008558:	2300      	movs	r3, #0
 800855a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800855c:	bf00      	nop
          }
        }
        break;
 800855e:	e2d6      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008560:	4b55      	ldr	r3, [pc, #340]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008566:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800856a:	633b      	str	r3, [r7, #48]	; 0x30
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008572:	d031      	beq.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800857a:	d866      	bhi.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	2bc0      	cmp	r3, #192	; 0xc0
 8008580:	d027      	beq.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	2bc0      	cmp	r3, #192	; 0xc0
 8008586:	d860      	bhi.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	2b80      	cmp	r3, #128	; 0x80
 800858c:	d019      	beq.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	2b80      	cmp	r3, #128	; 0x80
 8008592:	d85a      	bhi.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859c:	2b40      	cmp	r3, #64	; 0x40
 800859e:	d008      	beq.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80085a0:	e053      	b.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085a2:	f107 0320 	add.w	r3, r7, #32
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fd fb28 	bl	8005bfc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085b0:	e04e      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b2:	f107 0314 	add.w	r3, r7, #20
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fd fc8a 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085c0:	e046      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085c2:	f107 0308 	add.w	r3, r7, #8
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fd fdec 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085d0:	e03e      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80085d2:	4b3a      	ldr	r3, [pc, #232]	; (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80085d4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085d6:	e03b      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085d8:	4b37      	ldr	r3, [pc, #220]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80085da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80085de:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80085e2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085e4:	4b34      	ldr	r3, [pc, #208]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d10c      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80085f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d109      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085f6:	4b30      	ldr	r3, [pc, #192]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	08db      	lsrs	r3, r3, #3
 80085fc:	f003 0303 	and.w	r3, r3, #3
 8008600:	4a2f      	ldr	r2, [pc, #188]	; (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008602:	fa22 f303 	lsr.w	r3, r2, r3
 8008606:	637b      	str	r3, [r7, #52]	; 0x34
 8008608:	e01e      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800860a:	4b2b      	ldr	r3, [pc, #172]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008616:	d106      	bne.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8008618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800861e:	d102      	bne.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008620:	4b28      	ldr	r3, [pc, #160]	; (80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008622:	637b      	str	r3, [r7, #52]	; 0x34
 8008624:	e010      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008626:	4b24      	ldr	r3, [pc, #144]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800862e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008632:	d106      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8008634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800863a:	d102      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800863c:	4b22      	ldr	r3, [pc, #136]	; (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800863e:	637b      	str	r3, [r7, #52]	; 0x34
 8008640:	e002      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008646:	e003      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8008648:	e002      	b.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800864e:	bf00      	nop
          }
        }
        break;
 8008650:	e25d      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8008652:	4b19      	ldr	r3, [pc, #100]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008658:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800865c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	2b00      	cmp	r3, #0
 8008662:	d103      	bne.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008664:	f7fb fadc 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8008668:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800866a:	e250      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800866c:	4b12      	ldr	r3, [pc, #72]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008678:	d10b      	bne.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008680:	d107      	bne.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008682:	f107 0314 	add.w	r3, r7, #20
 8008686:	4618      	mov	r0, r3
 8008688:	f7fd fc22 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	637b      	str	r3, [r7, #52]	; 0x34
 8008690:	e04f      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8008692:	4b09      	ldr	r3, [pc, #36]	; (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800869a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800869e:	d115      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a6:	d111      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086a8:	f107 0308 	add.w	r3, r7, #8
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fd fd79 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	637b      	str	r3, [r7, #52]	; 0x34
 80086b6:	e03c      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80086b8:	44020c00 	.word	0x44020c00
 80086bc:	00bb8000 	.word	0x00bb8000
 80086c0:	03d09000 	.word	0x03d09000
 80086c4:	003d0900 	.word	0x003d0900
 80086c8:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80086cc:	4b94      	ldr	r3, [pc, #592]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0302 	and.w	r3, r3, #2
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d10d      	bne.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80086de:	d109      	bne.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086e0:	4b8f      	ldr	r3, [pc, #572]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	08db      	lsrs	r3, r3, #3
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	4a8e      	ldr	r2, [pc, #568]	; (8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80086ec:	fa22 f303 	lsr.w	r3, r2, r3
 80086f0:	637b      	str	r3, [r7, #52]	; 0x34
 80086f2:	e01e      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80086f4:	4b8a      	ldr	r3, [pc, #552]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008700:	d106      	bne.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008708:	d102      	bne.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800870a:	4b87      	ldr	r3, [pc, #540]	; (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800870c:	637b      	str	r3, [r7, #52]	; 0x34
 800870e:	e010      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008710:	4b83      	ldr	r3, [pc, #524]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008718:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800871c:	d106      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008724:	d102      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8008726:	4b81      	ldr	r3, [pc, #516]	; (800892c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008728:	637b      	str	r3, [r7, #52]	; 0x34
 800872a:	e002      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800872c:	2300      	movs	r3, #0
 800872e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008730:	e1ed      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008732:	e1ec      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8008734:	4b7a      	ldr	r3, [pc, #488]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800873a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800873e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8008740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008742:	2b00      	cmp	r3, #0
 8008744:	d103      	bne.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008746:	f7fb fa81 	bl	8003c4c <HAL_RCC_GetPCLK3Freq>
 800874a:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800874c:	e1df      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800874e:	4b74      	ldr	r3, [pc, #464]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800875a:	d10b      	bne.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008762:	d107      	bne.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008764:	f107 0314 	add.w	r3, r7, #20
 8008768:	4618      	mov	r0, r3
 800876a:	f7fd fbb1 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	637b      	str	r3, [r7, #52]	; 0x34
 8008772:	e045      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8008774:	4b6a      	ldr	r3, [pc, #424]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800877c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008780:	d10b      	bne.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8008782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008788:	d107      	bne.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800878a:	f107 0308 	add.w	r3, r7, #8
 800878e:	4618      	mov	r0, r3
 8008790:	f7fd fd08 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	637b      	str	r3, [r7, #52]	; 0x34
 8008798:	e032      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800879a:	4b61      	ldr	r3, [pc, #388]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 0302 	and.w	r3, r3, #2
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d10d      	bne.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087ac:	d109      	bne.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087ae:	4b5c      	ldr	r3, [pc, #368]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	08db      	lsrs	r3, r3, #3
 80087b4:	f003 0303 	and.w	r3, r3, #3
 80087b8:	4a5a      	ldr	r2, [pc, #360]	; (8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80087ba:	fa22 f303 	lsr.w	r3, r2, r3
 80087be:	637b      	str	r3, [r7, #52]	; 0x34
 80087c0:	e01e      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80087c2:	4b57      	ldr	r3, [pc, #348]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ce:	d106      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 80087d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087d6:	d102      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 80087d8:	4b53      	ldr	r3, [pc, #332]	; (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80087da:	637b      	str	r3, [r7, #52]	; 0x34
 80087dc:	e010      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80087de:	4b50      	ldr	r3, [pc, #320]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087ea:	d106      	bne.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80087f2:	d102      	bne.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 80087f4:	4b4d      	ldr	r3, [pc, #308]	; (800892c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80087f6:	637b      	str	r3, [r7, #52]	; 0x34
 80087f8:	e002      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087fe:	e186      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008800:	e185      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008802:	4b47      	ldr	r3, [pc, #284]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008808:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800880c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	2b00      	cmp	r3, #0
 8008812:	d103      	bne.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008814:	f7fb fa04 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8008818:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800881a:	e178      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800881c:	4b40      	ldr	r3, [pc, #256]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008828:	d10b      	bne.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008830:	d107      	bne.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008832:	f107 0314 	add.w	r3, r7, #20
 8008836:	4618      	mov	r0, r3
 8008838:	f7fd fb4a 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	637b      	str	r3, [r7, #52]	; 0x34
 8008840:	e045      	b.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8008842:	4b37      	ldr	r3, [pc, #220]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800884a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800884e:	d10b      	bne.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008856:	d107      	bne.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008858:	f107 0308 	add.w	r3, r7, #8
 800885c:	4618      	mov	r0, r3
 800885e:	f7fd fca1 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	637b      	str	r3, [r7, #52]	; 0x34
 8008866:	e032      	b.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8008868:	4b2d      	ldr	r3, [pc, #180]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0302 	and.w	r3, r3, #2
 8008870:	2b02      	cmp	r3, #2
 8008872:	d10d      	bne.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800887a:	d109      	bne.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800887c:	4b28      	ldr	r3, [pc, #160]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	08db      	lsrs	r3, r3, #3
 8008882:	f003 0303 	and.w	r3, r3, #3
 8008886:	4a27      	ldr	r2, [pc, #156]	; (8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008888:	fa22 f303 	lsr.w	r3, r2, r3
 800888c:	637b      	str	r3, [r7, #52]	; 0x34
 800888e:	e01e      	b.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8008890:	4b23      	ldr	r3, [pc, #140]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800889c:	d106      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088a4:	d102      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80088a6:	4b20      	ldr	r3, [pc, #128]	; (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80088a8:	637b      	str	r3, [r7, #52]	; 0x34
 80088aa:	e010      	b.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80088ac:	4b1c      	ldr	r3, [pc, #112]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088b8:	d106      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80088c0:	d102      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 80088c2:	4b1a      	ldr	r3, [pc, #104]	; (800892c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80088c4:	637b      	str	r3, [r7, #52]	; 0x34
 80088c6:	e002      	b.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088cc:	e11f      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088ce:	e11e      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80088d0:	4b13      	ldr	r3, [pc, #76]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80088d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	633b      	str	r3, [r7, #48]	; 0x30
 80088dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d85f      	bhi.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 80088e2:	a201      	add	r2, pc, #4	; (adr r2, 80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 80088e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e8:	080088f9 	.word	0x080088f9
 80088ec:	08008901 	.word	0x08008901
 80088f0:	08008911 	.word	0x08008911
 80088f4:	08008931 	.word	0x08008931

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80088f8:	f7fb f960 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 80088fc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80088fe:	e053      	b.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008900:	f107 0320 	add.w	r3, r7, #32
 8008904:	4618      	mov	r0, r3
 8008906:	f7fd f979 	bl	8005bfc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800890e:	e04b      	b.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008910:	f107 0314 	add.w	r3, r7, #20
 8008914:	4618      	mov	r0, r3
 8008916:	f7fd fadb 	bl	8005ed0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800891e:	e043      	b.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008920:	44020c00 	.word	0x44020c00
 8008924:	03d09000 	.word	0x03d09000
 8008928:	003d0900 	.word	0x003d0900
 800892c:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008930:	4b79      	ldr	r3, [pc, #484]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008936:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800893a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800893c:	4b76      	ldr	r3, [pc, #472]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0302 	and.w	r3, r3, #2
 8008944:	2b02      	cmp	r3, #2
 8008946:	d10c      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8008948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894a:	2b00      	cmp	r3, #0
 800894c:	d109      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800894e:	4b72      	ldr	r3, [pc, #456]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	08db      	lsrs	r3, r3, #3
 8008954:	f003 0303 	and.w	r3, r3, #3
 8008958:	4a70      	ldr	r2, [pc, #448]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800895a:	fa22 f303 	lsr.w	r3, r2, r3
 800895e:	637b      	str	r3, [r7, #52]	; 0x34
 8008960:	e01e      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008962:	4b6d      	ldr	r3, [pc, #436]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800896a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800896e:	d106      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8008970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008976:	d102      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008978:	4b69      	ldr	r3, [pc, #420]	; (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800897a:	637b      	str	r3, [r7, #52]	; 0x34
 800897c:	e010      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800897e:	4b66      	ldr	r3, [pc, #408]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800898a:	d106      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800898c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008992:	d102      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008994:	4b63      	ldr	r3, [pc, #396]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8008996:	637b      	str	r3, [r7, #52]	; 0x34
 8008998:	e002      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800899e:	e003      	b.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80089a0:	e002      	b.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089a6:	bf00      	nop
          }
        }
        break;
 80089a8:	e0b1      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80089aa:	4b5b      	ldr	r3, [pc, #364]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80089ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80089b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80089b4:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80089b6:	4b58      	ldr	r3, [pc, #352]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80089b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089bc:	f003 0302 	and.w	r3, r3, #2
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d106      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d103      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 80089ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ce:	637b      	str	r3, [r7, #52]	; 0x34
 80089d0:	e01f      	b.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80089d2:	4b51      	ldr	r3, [pc, #324]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80089d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089e0:	d106      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 80089e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e4:	2b40      	cmp	r3, #64	; 0x40
 80089e6:	d103      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 80089e8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80089ec:	637b      	str	r3, [r7, #52]	; 0x34
 80089ee:	e010      	b.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80089f0:	4b49      	ldr	r3, [pc, #292]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089fc:	d106      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	2b80      	cmp	r3, #128	; 0x80
 8008a02:	d103      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8008a04:	f248 0312 	movw	r3, #32786	; 0x8012
 8008a08:	637b      	str	r3, [r7, #52]	; 0x34
 8008a0a:	e002      	b.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008a10:	e07d      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a12:	e07c      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008a14:	4b40      	ldr	r3, [pc, #256]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008a1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008a1e:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008a20:	4b3d      	ldr	r3, [pc, #244]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a2c:	d105      	bne.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8008a34:	4b3c      	ldr	r3, [pc, #240]	; (8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008a36:	637b      	str	r3, [r7, #52]	; 0x34
 8008a38:	e031      	b.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008a3a:	4b37      	ldr	r3, [pc, #220]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a46:	d10a      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	2b10      	cmp	r3, #16
 8008a4c:	d107      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a4e:	f107 0320 	add.w	r3, r7, #32
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fd f8d2 	bl	8005bfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a5c:	e01f      	b.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8008a5e:	4b2e      	ldr	r3, [pc, #184]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d106      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	2b20      	cmp	r3, #32
 8008a70:	d103      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8008a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a76:	637b      	str	r3, [r7, #52]	; 0x34
 8008a78:	e011      	b.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008a7a:	4b27      	ldr	r3, [pc, #156]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a88:	d106      	bne.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	2b30      	cmp	r3, #48	; 0x30
 8008a8e:	d103      	bne.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8008a90:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008a94:	637b      	str	r3, [r7, #52]	; 0x34
 8008a96:	e002      	b.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008a9c:	e037      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a9e:	e036      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008aa0:	4b1d      	ldr	r3, [pc, #116]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008aa2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008aa6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008aaa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	2b10      	cmp	r3, #16
 8008ab0:	d107      	bne.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ab2:	f107 0320 	add.w	r3, r7, #32
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fd f8a0 	bl	8005bfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008ac0:	e025      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8008ac2:	4b15      	ldr	r3, [pc, #84]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ace:	d10a      	bne.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	2b20      	cmp	r3, #32
 8008ad4:	d107      	bne.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ad6:	f107 0308 	add.w	r3, r7, #8
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fd fb62 	bl	80061a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ae4:	e00f      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008ae6:	4b0c      	ldr	r3, [pc, #48]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008af2:	d105      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	2b30      	cmp	r3, #48	; 0x30
 8008af8:	d102      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8008afa:	4b0b      	ldr	r3, [pc, #44]	; (8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008afc:	637b      	str	r3, [r7, #52]	; 0x34
 8008afe:	e002      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8008b04:	e003      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b06:	e002      	b.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b0c:	bf00      	nop
    }
  }

  return (frequency);
 8008b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	373c      	adds	r7, #60	; 0x3c
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd90      	pop	{r4, r7, pc}
 8008b18:	44020c00 	.word	0x44020c00
 8008b1c:	03d09000 	.word	0x03d09000
 8008b20:	003d0900 	.word	0x003d0900
 8008b24:	007a1200 	.word	0x007a1200
 8008b28:	02dc6c00 	.word	0x02dc6c00

08008b2c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008b34:	4b48      	ldr	r3, [pc, #288]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a47      	ldr	r2, [pc, #284]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008b3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b3e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b40:	f7f9 f88e 	bl	8001c60 <HAL_GetTick>
 8008b44:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b46:	e008      	b.n	8008b5a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b48:	f7f9 f88a 	bl	8001c60 <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d901      	bls.n	8008b5a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008b56:	2303      	movs	r3, #3
 8008b58:	e07a      	b.n	8008c50 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b5a:	4b3f      	ldr	r3, [pc, #252]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1f0      	bne.n	8008b48 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008b66:	4b3c      	ldr	r3, [pc, #240]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008b6e:	f023 0303 	bic.w	r3, r3, #3
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	6811      	ldr	r1, [r2, #0]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	6852      	ldr	r2, [r2, #4]
 8008b7a:	0212      	lsls	r2, r2, #8
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	4936      	ldr	r1, [pc, #216]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	025b      	lsls	r3, r3, #9
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	041b      	lsls	r3, r3, #16
 8008ba2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	061b      	lsls	r3, r3, #24
 8008bb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008bb4:	4928      	ldr	r1, [pc, #160]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008bba:	4b27      	ldr	r3, [pc, #156]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbe:	f023 020c 	bic.w	r2, r3, #12
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	4924      	ldr	r1, [pc, #144]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008bcc:	4b22      	ldr	r3, [pc, #136]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd0:	f023 0220 	bic.w	r2, r3, #32
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	69db      	ldr	r3, [r3, #28]
 8008bd8:	491f      	ldr	r1, [pc, #124]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008bde:	4b1e      	ldr	r3, [pc, #120]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	491c      	ldr	r1, [pc, #112]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008bec:	4b1a      	ldr	r3, [pc, #104]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf0:	4a19      	ldr	r2, [pc, #100]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008bf2:	f023 0310 	bic.w	r3, r3, #16
 8008bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008bf8:	4b17      	ldr	r3, [pc, #92]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	6a12      	ldr	r2, [r2, #32]
 8008c08:	00d2      	lsls	r2, r2, #3
 8008c0a:	4913      	ldr	r1, [pc, #76]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008c10:	4b11      	ldr	r3, [pc, #68]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c14:	4a10      	ldr	r2, [pc, #64]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008c16:	f043 0310 	orr.w	r3, r3, #16
 8008c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008c1c:	4b0e      	ldr	r3, [pc, #56]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a0d      	ldr	r2, [pc, #52]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008c22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c28:	f7f9 f81a 	bl	8001c60 <HAL_GetTick>
 8008c2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c2e:	e008      	b.n	8008c42 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c30:	f7f9 f816 	bl	8001c60 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d901      	bls.n	8008c42 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e006      	b.n	8008c50 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c42:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <RCCEx_PLL2_Config+0x12c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d0f0      	beq.n	8008c30 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0

}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	44020c00 	.word	0x44020c00

08008c5c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008c64:	4b48      	ldr	r3, [pc, #288]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a47      	ldr	r2, [pc, #284]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c6e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c70:	f7f8 fff6 	bl	8001c60 <HAL_GetTick>
 8008c74:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c76:	e008      	b.n	8008c8a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c78:	f7f8 fff2 	bl	8001c60 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d901      	bls.n	8008c8a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e07a      	b.n	8008d80 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c8a:	4b3f      	ldr	r3, [pc, #252]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1f0      	bne.n	8008c78 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008c96:	4b3c      	ldr	r3, [pc, #240]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008c9e:	f023 0303 	bic.w	r3, r3, #3
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	6811      	ldr	r1, [r2, #0]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	6852      	ldr	r2, [r2, #4]
 8008caa:	0212      	lsls	r2, r2, #8
 8008cac:	430a      	orrs	r2, r1
 8008cae:	4936      	ldr	r1, [pc, #216]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	630b      	str	r3, [r1, #48]	; 0x30
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	025b      	lsls	r3, r3, #9
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	041b      	lsls	r3, r3, #16
 8008cd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008cd6:	431a      	orrs	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	061b      	lsls	r3, r3, #24
 8008ce0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ce4:	4928      	ldr	r1, [pc, #160]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008cea:	4b27      	ldr	r3, [pc, #156]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cee:	f023 020c 	bic.w	r2, r3, #12
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	4924      	ldr	r1, [pc, #144]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008cfc:	4b22      	ldr	r3, [pc, #136]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d00:	f023 0220 	bic.w	r2, r3, #32
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	491f      	ldr	r1, [pc, #124]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008d0e:	4b1e      	ldr	r3, [pc, #120]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d16:	491c      	ldr	r1, [pc, #112]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008d1c:	4b1a      	ldr	r3, [pc, #104]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d20:	4a19      	ldr	r2, [pc, #100]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008d22:	f023 0310 	bic.w	r3, r3, #16
 8008d26:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008d28:	4b17      	ldr	r3, [pc, #92]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6a12      	ldr	r2, [r2, #32]
 8008d38:	00d2      	lsls	r2, r2, #3
 8008d3a:	4913      	ldr	r1, [pc, #76]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008d40:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d44:	4a10      	ldr	r2, [pc, #64]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008d46:	f043 0310 	orr.w	r3, r3, #16
 8008d4a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008d4c:	4b0e      	ldr	r3, [pc, #56]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a0d      	ldr	r2, [pc, #52]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d56:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d58:	f7f8 ff82 	bl	8001c60 <HAL_GetTick>
 8008d5c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d5e:	e008      	b.n	8008d72 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d60:	f7f8 ff7e 	bl	8001c60 <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d901      	bls.n	8008d72 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e006      	b.n	8008d80 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d72:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <RCCEx_PLL3_Config+0x12c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d0f0      	beq.n	8008d60 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	44020c00 	.word	0x44020c00

08008d8c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d071      	beq.n	8008e82 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d106      	bne.n	8008db8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7f7 ffc0 	bl	8000d38 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008dc0:	4b32      	ldr	r3, [pc, #200]	; (8008e8c <HAL_RTC_Init+0x100>)
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f003 0310 	and.w	r3, r3, #16
 8008dc8:	2b10      	cmp	r3, #16
 8008dca:	d051      	beq.n	8008e70 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008dcc:	4b2f      	ldr	r3, [pc, #188]	; (8008e8c <HAL_RTC_Init+0x100>)
 8008dce:	22ca      	movs	r2, #202	; 0xca
 8008dd0:	625a      	str	r2, [r3, #36]	; 0x24
 8008dd2:	4b2e      	ldr	r3, [pc, #184]	; (8008e8c <HAL_RTC_Init+0x100>)
 8008dd4:	2253      	movs	r2, #83	; 0x53
 8008dd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f88b 	bl	8008ef4 <RTC_EnterInitMode>
 8008dde:	4603      	mov	r3, r0
 8008de0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d13f      	bne.n	8008e68 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008de8:	4b28      	ldr	r3, [pc, #160]	; (8008e8c <HAL_RTC_Init+0x100>)
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	4a27      	ldr	r2, [pc, #156]	; (8008e8c <HAL_RTC_Init+0x100>)
 8008dee:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008df6:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008df8:	4b24      	ldr	r3, [pc, #144]	; (8008e8c <HAL_RTC_Init+0x100>)
 8008dfa:	699a      	ldr	r2, [r3, #24]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6859      	ldr	r1, [r3, #4]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	4319      	orrs	r1, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	491f      	ldr	r1, [pc, #124]	; (8008e8c <HAL_RTC_Init+0x100>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68da      	ldr	r2, [r3, #12]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	041b      	lsls	r3, r3, #16
 8008e1c:	491b      	ldr	r1, [pc, #108]	; (8008e8c <HAL_RTC_Init+0x100>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008e22:	4b1a      	ldr	r3, [pc, #104]	; (8008e8c <HAL_RTC_Init+0x100>)
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e32:	430b      	orrs	r3, r1
 8008e34:	4915      	ldr	r1, [pc, #84]	; (8008e8c <HAL_RTC_Init+0x100>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f896 	bl	8008f6c <RTC_ExitInitMode>
 8008e40:	4603      	mov	r3, r0
 8008e42:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10e      	bne.n	8008e68 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 8008e4a:	4b10      	ldr	r3, [pc, #64]	; (8008e8c <HAL_RTC_Init+0x100>)
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a19      	ldr	r1, [r3, #32]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	4319      	orrs	r1, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	430b      	orrs	r3, r1
 8008e62:	490a      	ldr	r1, [pc, #40]	; (8008e8c <HAL_RTC_Init+0x100>)
 8008e64:	4313      	orrs	r3, r2
 8008e66:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e68:	4b08      	ldr	r3, [pc, #32]	; (8008e8c <HAL_RTC_Init+0x100>)
 8008e6a:	22ff      	movs	r2, #255	; 0xff
 8008e6c:	625a      	str	r2, [r3, #36]	; 0x24
 8008e6e:	e001      	b.n	8008e74 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d103      	bne.n	8008e82 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8008e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	44007800 	.word	0x44007800

08008e90 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008e98:	4b15      	ldr	r3, [pc, #84]	; (8008ef0 <HAL_RTC_WaitForSynchro+0x60>)
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	4a14      	ldr	r2, [pc, #80]	; (8008ef0 <HAL_RTC_WaitForSynchro+0x60>)
 8008e9e:	f023 0320 	bic.w	r3, r3, #32
 8008ea2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008ea4:	f7f8 fedc 	bl	8001c60 <HAL_GetTick>
 8008ea8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008eaa:	e013      	b.n	8008ed4 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008eac:	f7f8 fed8 	bl	8001c60 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008eba:	d90b      	bls.n	8008ed4 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008ebc:	4b0c      	ldr	r3, [pc, #48]	; (8008ef0 <HAL_RTC_WaitForSynchro+0x60>)
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f003 0320 	and.w	r3, r3, #32
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10c      	bne.n	8008ee2 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2203      	movs	r2, #3
 8008ecc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e008      	b.n	8008ee6 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008ed4:	4b06      	ldr	r3, [pc, #24]	; (8008ef0 <HAL_RTC_WaitForSynchro+0x60>)
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	f003 0320 	and.w	r3, r3, #32
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d0e5      	beq.n	8008eac <HAL_RTC_WaitForSynchro+0x1c>
 8008ee0:	e000      	b.n	8008ee4 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8008ee2:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	44007800 	.word	0x44007800

08008ef4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008f00:	4b19      	ldr	r3, [pc, #100]	; (8008f68 <RTC_EnterInitMode+0x74>)
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d128      	bne.n	8008f5e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008f0c:	4b16      	ldr	r3, [pc, #88]	; (8008f68 <RTC_EnterInitMode+0x74>)
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	4a15      	ldr	r2, [pc, #84]	; (8008f68 <RTC_EnterInitMode+0x74>)
 8008f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f16:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008f18:	f7f8 fea2 	bl	8001c60 <HAL_GetTick>
 8008f1c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008f1e:	e013      	b.n	8008f48 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008f20:	f7f8 fe9e 	bl	8001c60 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f2e:	d90b      	bls.n	8008f48 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008f30:	4b0d      	ldr	r3, [pc, #52]	; (8008f68 <RTC_EnterInitMode+0x74>)
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10f      	bne.n	8008f5c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2203      	movs	r2, #3
 8008f44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008f48:	4b07      	ldr	r3, [pc, #28]	; (8008f68 <RTC_EnterInitMode+0x74>)
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d104      	bne.n	8008f5e <RTC_EnterInitMode+0x6a>
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d1e2      	bne.n	8008f20 <RTC_EnterInitMode+0x2c>
 8008f5a:	e000      	b.n	8008f5e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8008f5c:	bf00      	nop
        }
      }
    }
  }

  return status;
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	44007800 	.word	0x44007800

08008f6c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008f78:	4b1a      	ldr	r3, [pc, #104]	; (8008fe4 <RTC_ExitInitMode+0x78>)
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	4a19      	ldr	r2, [pc, #100]	; (8008fe4 <RTC_ExitInitMode+0x78>)
 8008f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f82:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008f84:	4b17      	ldr	r3, [pc, #92]	; (8008fe4 <RTC_ExitInitMode+0x78>)
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	f003 0320 	and.w	r3, r3, #32
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10c      	bne.n	8008faa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7ff ff7d 	bl	8008e90 <HAL_RTC_WaitForSynchro>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d01e      	beq.n	8008fda <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2203      	movs	r2, #3
 8008fa0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	73fb      	strb	r3, [r7, #15]
 8008fa8:	e017      	b.n	8008fda <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008faa:	4b0e      	ldr	r3, [pc, #56]	; (8008fe4 <RTC_ExitInitMode+0x78>)
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	4a0d      	ldr	r2, [pc, #52]	; (8008fe4 <RTC_ExitInitMode+0x78>)
 8008fb0:	f023 0320 	bic.w	r3, r3, #32
 8008fb4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7ff ff6a 	bl	8008e90 <HAL_RTC_WaitForSynchro>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d005      	beq.n	8008fce <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2203      	movs	r2, #3
 8008fc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008fce:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <RTC_ExitInitMode+0x78>)
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	4a04      	ldr	r2, [pc, #16]	; (8008fe4 <RTC_ExitInitMode+0x78>)
 8008fd4:	f043 0320 	orr.w	r3, r3, #32
 8008fd8:	6193      	str	r3, [r2, #24]
  }
  return status;
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	44007800 	.word	0x44007800

08008fe8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b087      	sub	sp, #28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 8008ff4:	4b07      	ldr	r3, [pc, #28]	; (8009014 <HAL_RTCEx_BKUPWrite+0x2c>)
 8008ff6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	4413      	add	r3, r2
 8009000:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	601a      	str	r2, [r3, #0]
}
 8009008:	bf00      	nop
 800900a:	371c      	adds	r7, #28
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	44007d00 	.word	0x44007d00

08009018 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 8009022:	4b07      	ldr	r3, [pc, #28]	; (8009040 <HAL_RTCEx_BKUPRead+0x28>)
 8009024:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	4413      	add	r3, r2
 800902e:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	44007d00 	.word	0x44007d00

08009044 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	4910      	ldr	r1, [pc, #64]	; (8009098 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009058:	4313      	orrs	r3, r2
 800905a:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	689a      	ldr	r2, [r3, #8]
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	431a      	orrs	r2, r3
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	490c      	ldr	r1, [pc, #48]	; (800909c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800906c:	4313      	orrs	r3, r2
 800906e:	624b      	str	r3, [r1, #36]	; 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 8009070:	4b0a      	ldr	r3, [pc, #40]	; (800909c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	6919      	ldr	r1, [r3, #16]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	695b      	ldr	r3, [r3, #20]
 8009080:	041b      	lsls	r3, r3, #16
 8009082:	430b      	orrs	r3, r1
 8009084:	4905      	ldr	r1, [pc, #20]	; (800909c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009086:	4313      	orrs	r3, r2
 8009088:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	44007800 	.word	0x44007800
 800909c:	44007c00 	.word	0x44007c00

080090a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d101      	bne.n	80090b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e049      	b.n	8009146 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d106      	bne.n	80090cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f841 	bl	800914e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2202      	movs	r2, #2
 80090d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	3304      	adds	r3, #4
 80090dc:	4619      	mov	r1, r3
 80090de:	4610      	mov	r0, r2
 80090e0:	f000 fa60 	bl	80095a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800914e:	b480      	push	{r7}
 8009150:	b083      	sub	sp, #12
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009156:	bf00      	nop
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
	...

08009164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b01      	cmp	r3, #1
 8009176:	d001      	beq.n	800917c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e07c      	b.n	8009276 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2202      	movs	r2, #2
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68da      	ldr	r2, [r3, #12]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f042 0201 	orr.w	r2, r2, #1
 8009192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a3a      	ldr	r2, [pc, #232]	; (8009284 <HAL_TIM_Base_Start_IT+0x120>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d04a      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a39      	ldr	r2, [pc, #228]	; (8009288 <HAL_TIM_Base_Start_IT+0x124>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d045      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091b0:	d040      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091ba:	d03b      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a32      	ldr	r2, [pc, #200]	; (800928c <HAL_TIM_Base_Start_IT+0x128>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d036      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a31      	ldr	r2, [pc, #196]	; (8009290 <HAL_TIM_Base_Start_IT+0x12c>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d031      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a2f      	ldr	r2, [pc, #188]	; (8009294 <HAL_TIM_Base_Start_IT+0x130>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d02c      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a2e      	ldr	r2, [pc, #184]	; (8009298 <HAL_TIM_Base_Start_IT+0x134>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d027      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a2c      	ldr	r2, [pc, #176]	; (800929c <HAL_TIM_Base_Start_IT+0x138>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d022      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a2b      	ldr	r2, [pc, #172]	; (80092a0 <HAL_TIM_Base_Start_IT+0x13c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d01d      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a29      	ldr	r2, [pc, #164]	; (80092a4 <HAL_TIM_Base_Start_IT+0x140>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d018      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a28      	ldr	r2, [pc, #160]	; (80092a8 <HAL_TIM_Base_Start_IT+0x144>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d013      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a26      	ldr	r2, [pc, #152]	; (80092ac <HAL_TIM_Base_Start_IT+0x148>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d00e      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a25      	ldr	r2, [pc, #148]	; (80092b0 <HAL_TIM_Base_Start_IT+0x14c>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d009      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a23      	ldr	r2, [pc, #140]	; (80092b4 <HAL_TIM_Base_Start_IT+0x150>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d004      	beq.n	8009234 <HAL_TIM_Base_Start_IT+0xd0>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a22      	ldr	r2, [pc, #136]	; (80092b8 <HAL_TIM_Base_Start_IT+0x154>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d115      	bne.n	8009260 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689a      	ldr	r2, [r3, #8]
 800923a:	4b20      	ldr	r3, [pc, #128]	; (80092bc <HAL_TIM_Base_Start_IT+0x158>)
 800923c:	4013      	ands	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2b06      	cmp	r3, #6
 8009244:	d015      	beq.n	8009272 <HAL_TIM_Base_Start_IT+0x10e>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800924c:	d011      	beq.n	8009272 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f042 0201 	orr.w	r2, r2, #1
 800925c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800925e:	e008      	b.n	8009272 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f042 0201 	orr.w	r2, r2, #1
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	e000      	b.n	8009274 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009272:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	40012c00 	.word	0x40012c00
 8009288:	50012c00 	.word	0x50012c00
 800928c:	40000400 	.word	0x40000400
 8009290:	50000400 	.word	0x50000400
 8009294:	40000800 	.word	0x40000800
 8009298:	50000800 	.word	0x50000800
 800929c:	40000c00 	.word	0x40000c00
 80092a0:	50000c00 	.word	0x50000c00
 80092a4:	40013400 	.word	0x40013400
 80092a8:	50013400 	.word	0x50013400
 80092ac:	40001800 	.word	0x40001800
 80092b0:	50001800 	.word	0x50001800
 80092b4:	40014000 	.word	0x40014000
 80092b8:	50014000 	.word	0x50014000
 80092bc:	00010007 	.word	0x00010007

080092c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	f003 0302 	and.w	r3, r3, #2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d020      	beq.n	8009324 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d01b      	beq.n	8009324 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f06f 0202 	mvn.w	r2, #2
 80092f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	f003 0303 	and.w	r3, r3, #3
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f92c 	bl	8009568 <HAL_TIM_IC_CaptureCallback>
 8009310:	e005      	b.n	800931e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f91e 	bl	8009554 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f92f 	bl	800957c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	f003 0304 	and.w	r3, r3, #4
 800932a:	2b00      	cmp	r3, #0
 800932c:	d020      	beq.n	8009370 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f003 0304 	and.w	r3, r3, #4
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01b      	beq.n	8009370 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f06f 0204 	mvn.w	r2, #4
 8009340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2202      	movs	r2, #2
 8009346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f906 	bl	8009568 <HAL_TIM_IC_CaptureCallback>
 800935c:	e005      	b.n	800936a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f8f8 	bl	8009554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f909 	bl	800957c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f003 0308 	and.w	r3, r3, #8
 8009376:	2b00      	cmp	r3, #0
 8009378:	d020      	beq.n	80093bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f003 0308 	and.w	r3, r3, #8
 8009380:	2b00      	cmp	r3, #0
 8009382:	d01b      	beq.n	80093bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f06f 0208 	mvn.w	r2, #8
 800938c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2204      	movs	r2, #4
 8009392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	f003 0303 	and.w	r3, r3, #3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f8e0 	bl	8009568 <HAL_TIM_IC_CaptureCallback>
 80093a8:	e005      	b.n	80093b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f8d2 	bl	8009554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f8e3 	bl	800957c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f003 0310 	and.w	r3, r3, #16
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d020      	beq.n	8009408 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f003 0310 	and.w	r3, r3, #16
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d01b      	beq.n	8009408 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f06f 0210 	mvn.w	r2, #16
 80093d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2208      	movs	r2, #8
 80093de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f8ba 	bl	8009568 <HAL_TIM_IC_CaptureCallback>
 80093f4:	e005      	b.n	8009402 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f8ac 	bl	8009554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f8bd 	bl	800957c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00c      	beq.n	800942c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f003 0301 	and.w	r3, r3, #1
 8009418:	2b00      	cmp	r3, #0
 800941a:	d007      	beq.n	800942c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f06f 0201 	mvn.w	r2, #1
 8009424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7f7 fbb8 	bl	8000b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00c      	beq.n	8009450 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800943c:	2b00      	cmp	r3, #0
 800943e:	d007      	beq.n	8009450 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f9d2 	bl	80097f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00c      	beq.n	8009474 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009460:	2b00      	cmp	r3, #0
 8009462:	d007      	beq.n	8009474 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800946c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f9ca 	bl	8009808 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00c      	beq.n	8009498 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009484:	2b00      	cmp	r3, #0
 8009486:	d007      	beq.n	8009498 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f87c 	bl	8009590 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	f003 0320 	and.w	r3, r3, #32
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00c      	beq.n	80094bc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f003 0320 	and.w	r3, r3, #32
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d007      	beq.n	80094bc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f06f 0220 	mvn.w	r2, #32
 80094b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f992 	bl	80097e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00c      	beq.n	80094e0 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d007      	beq.n	80094e0 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80094d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f99e 	bl	800981c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00c      	beq.n	8009504 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d007      	beq.n	8009504 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80094fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f996 	bl	8009830 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00c      	beq.n	8009528 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d007      	beq.n	8009528 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f98e 	bl	8009844 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00c      	beq.n	800954c <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d007      	beq.n	800954c <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f986 	bl	8009858 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800954c:	bf00      	nop
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a74      	ldr	r2, [pc, #464]	; (8009788 <TIM_Base_SetConfig+0x1e4>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d02b      	beq.n	8009614 <TIM_Base_SetConfig+0x70>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a73      	ldr	r2, [pc, #460]	; (800978c <TIM_Base_SetConfig+0x1e8>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d027      	beq.n	8009614 <TIM_Base_SetConfig+0x70>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ca:	d023      	beq.n	8009614 <TIM_Base_SetConfig+0x70>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095d2:	d01f      	beq.n	8009614 <TIM_Base_SetConfig+0x70>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a6e      	ldr	r2, [pc, #440]	; (8009790 <TIM_Base_SetConfig+0x1ec>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d01b      	beq.n	8009614 <TIM_Base_SetConfig+0x70>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a6d      	ldr	r2, [pc, #436]	; (8009794 <TIM_Base_SetConfig+0x1f0>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d017      	beq.n	8009614 <TIM_Base_SetConfig+0x70>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a6c      	ldr	r2, [pc, #432]	; (8009798 <TIM_Base_SetConfig+0x1f4>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d013      	beq.n	8009614 <TIM_Base_SetConfig+0x70>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a6b      	ldr	r2, [pc, #428]	; (800979c <TIM_Base_SetConfig+0x1f8>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d00f      	beq.n	8009614 <TIM_Base_SetConfig+0x70>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a6a      	ldr	r2, [pc, #424]	; (80097a0 <TIM_Base_SetConfig+0x1fc>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d00b      	beq.n	8009614 <TIM_Base_SetConfig+0x70>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a69      	ldr	r2, [pc, #420]	; (80097a4 <TIM_Base_SetConfig+0x200>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d007      	beq.n	8009614 <TIM_Base_SetConfig+0x70>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a68      	ldr	r2, [pc, #416]	; (80097a8 <TIM_Base_SetConfig+0x204>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d003      	beq.n	8009614 <TIM_Base_SetConfig+0x70>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a67      	ldr	r2, [pc, #412]	; (80097ac <TIM_Base_SetConfig+0x208>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d108      	bne.n	8009626 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800961a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a57      	ldr	r2, [pc, #348]	; (8009788 <TIM_Base_SetConfig+0x1e4>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d05b      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a56      	ldr	r2, [pc, #344]	; (800978c <TIM_Base_SetConfig+0x1e8>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d057      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800963c:	d053      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009644:	d04f      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a51      	ldr	r2, [pc, #324]	; (8009790 <TIM_Base_SetConfig+0x1ec>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d04b      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a50      	ldr	r2, [pc, #320]	; (8009794 <TIM_Base_SetConfig+0x1f0>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d047      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a4f      	ldr	r2, [pc, #316]	; (8009798 <TIM_Base_SetConfig+0x1f4>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d043      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a4e      	ldr	r2, [pc, #312]	; (800979c <TIM_Base_SetConfig+0x1f8>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d03f      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a4d      	ldr	r2, [pc, #308]	; (80097a0 <TIM_Base_SetConfig+0x1fc>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d03b      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a4c      	ldr	r2, [pc, #304]	; (80097a4 <TIM_Base_SetConfig+0x200>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d037      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a4b      	ldr	r2, [pc, #300]	; (80097a8 <TIM_Base_SetConfig+0x204>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d033      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a4a      	ldr	r2, [pc, #296]	; (80097ac <TIM_Base_SetConfig+0x208>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d02f      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a49      	ldr	r2, [pc, #292]	; (80097b0 <TIM_Base_SetConfig+0x20c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d02b      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a48      	ldr	r2, [pc, #288]	; (80097b4 <TIM_Base_SetConfig+0x210>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d027      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a47      	ldr	r2, [pc, #284]	; (80097b8 <TIM_Base_SetConfig+0x214>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d023      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a46      	ldr	r2, [pc, #280]	; (80097bc <TIM_Base_SetConfig+0x218>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d01f      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a45      	ldr	r2, [pc, #276]	; (80097c0 <TIM_Base_SetConfig+0x21c>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d01b      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a44      	ldr	r2, [pc, #272]	; (80097c4 <TIM_Base_SetConfig+0x220>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d017      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a43      	ldr	r2, [pc, #268]	; (80097c8 <TIM_Base_SetConfig+0x224>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d013      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a42      	ldr	r2, [pc, #264]	; (80097cc <TIM_Base_SetConfig+0x228>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d00f      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a41      	ldr	r2, [pc, #260]	; (80097d0 <TIM_Base_SetConfig+0x22c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d00b      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a40      	ldr	r2, [pc, #256]	; (80097d4 <TIM_Base_SetConfig+0x230>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d007      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a3f      	ldr	r2, [pc, #252]	; (80097d8 <TIM_Base_SetConfig+0x234>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d003      	beq.n	80096e6 <TIM_Base_SetConfig+0x142>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a3e      	ldr	r2, [pc, #248]	; (80097dc <TIM_Base_SetConfig+0x238>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d108      	bne.n	80096f8 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	4313      	orrs	r3, r2
 8009704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	689a      	ldr	r2, [r3, #8]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a1a      	ldr	r2, [pc, #104]	; (8009788 <TIM_Base_SetConfig+0x1e4>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d023      	beq.n	800976c <TIM_Base_SetConfig+0x1c8>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a19      	ldr	r2, [pc, #100]	; (800978c <TIM_Base_SetConfig+0x1e8>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d01f      	beq.n	800976c <TIM_Base_SetConfig+0x1c8>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a1e      	ldr	r2, [pc, #120]	; (80097a8 <TIM_Base_SetConfig+0x204>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d01b      	beq.n	800976c <TIM_Base_SetConfig+0x1c8>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a1d      	ldr	r2, [pc, #116]	; (80097ac <TIM_Base_SetConfig+0x208>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d017      	beq.n	800976c <TIM_Base_SetConfig+0x1c8>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a22      	ldr	r2, [pc, #136]	; (80097c8 <TIM_Base_SetConfig+0x224>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d013      	beq.n	800976c <TIM_Base_SetConfig+0x1c8>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a21      	ldr	r2, [pc, #132]	; (80097cc <TIM_Base_SetConfig+0x228>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d00f      	beq.n	800976c <TIM_Base_SetConfig+0x1c8>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a20      	ldr	r2, [pc, #128]	; (80097d0 <TIM_Base_SetConfig+0x22c>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d00b      	beq.n	800976c <TIM_Base_SetConfig+0x1c8>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a1f      	ldr	r2, [pc, #124]	; (80097d4 <TIM_Base_SetConfig+0x230>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d007      	beq.n	800976c <TIM_Base_SetConfig+0x1c8>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a1e      	ldr	r2, [pc, #120]	; (80097d8 <TIM_Base_SetConfig+0x234>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d003      	beq.n	800976c <TIM_Base_SetConfig+0x1c8>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a1d      	ldr	r2, [pc, #116]	; (80097dc <TIM_Base_SetConfig+0x238>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d103      	bne.n	8009774 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	691a      	ldr	r2, [r3, #16]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	615a      	str	r2, [r3, #20]
}
 800977a:	bf00      	nop
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	40012c00 	.word	0x40012c00
 800978c:	50012c00 	.word	0x50012c00
 8009790:	40000400 	.word	0x40000400
 8009794:	50000400 	.word	0x50000400
 8009798:	40000800 	.word	0x40000800
 800979c:	50000800 	.word	0x50000800
 80097a0:	40000c00 	.word	0x40000c00
 80097a4:	50000c00 	.word	0x50000c00
 80097a8:	40013400 	.word	0x40013400
 80097ac:	50013400 	.word	0x50013400
 80097b0:	40001800 	.word	0x40001800
 80097b4:	50001800 	.word	0x50001800
 80097b8:	40001c00 	.word	0x40001c00
 80097bc:	50001c00 	.word	0x50001c00
 80097c0:	40002000 	.word	0x40002000
 80097c4:	50002000 	.word	0x50002000
 80097c8:	40014000 	.word	0x40014000
 80097cc:	50014000 	.word	0x50014000
 80097d0:	40014400 	.word	0x40014400
 80097d4:	50014400 	.word	0x50014400
 80097d8:	40014800 	.word	0x40014800
 80097dc:	50014800 	.word	0x50014800

080097e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e042      	b.n	8009904 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009884:	2b00      	cmp	r3, #0
 8009886:	d106      	bne.n	8009896 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7f7 fab1 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2224      	movs	r2, #36	; 0x24
 800989a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f022 0201 	bic.w	r2, r2, #1
 80098ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d002      	beq.n	80098bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fe0a 	bl	800a4d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fc19 	bl	800a0f4 <UART_SetConfig>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d101      	bne.n	80098cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e01b      	b.n	8009904 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689a      	ldr	r2, [r3, #8]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f042 0201 	orr.w	r2, r2, #1
 80098fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fe89 	bl	800a614 <UART_CheckIdleState>
 8009902:	4603      	mov	r3, r0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	; 0x28
 8009910:	af02      	add	r7, sp, #8
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	4613      	mov	r3, r2
 800991a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009922:	2b20      	cmp	r3, #32
 8009924:	f040 808b 	bne.w	8009a3e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d002      	beq.n	8009934 <HAL_UART_Transmit+0x28>
 800992e:	88fb      	ldrh	r3, [r7, #6]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d101      	bne.n	8009938 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	e083      	b.n	8009a40 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009942:	2b80      	cmp	r3, #128	; 0x80
 8009944:	d107      	bne.n	8009956 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009954:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2221      	movs	r2, #33	; 0x21
 8009962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009966:	f7f8 f97b 	bl	8001c60 <HAL_GetTick>
 800996a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	88fa      	ldrh	r2, [r7, #6]
 8009970:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	88fa      	ldrh	r2, [r7, #6]
 8009978:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009984:	d108      	bne.n	8009998 <HAL_UART_Transmit+0x8c>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d104      	bne.n	8009998 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	61bb      	str	r3, [r7, #24]
 8009996:	e003      	b.n	80099a0 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800999c:	2300      	movs	r3, #0
 800999e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80099a0:	e030      	b.n	8009a04 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	2200      	movs	r2, #0
 80099aa:	2180      	movs	r1, #128	; 0x80
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 fedb 	bl	800a768 <UART_WaitOnFlagUntilTimeout>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d005      	beq.n	80099c4 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2220      	movs	r2, #32
 80099bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e03d      	b.n	8009a40 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d10b      	bne.n	80099e2 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	881b      	ldrh	r3, [r3, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	3302      	adds	r3, #2
 80099de:	61bb      	str	r3, [r7, #24]
 80099e0:	e007      	b.n	80099f2 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	781a      	ldrb	r2, [r3, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	3301      	adds	r3, #1
 80099f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	3b01      	subs	r3, #1
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1c8      	bne.n	80099a2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	9300      	str	r3, [sp, #0]
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	2200      	movs	r2, #0
 8009a18:	2140      	movs	r1, #64	; 0x40
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f000 fea4 	bl	800a768 <UART_WaitOnFlagUntilTimeout>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2220      	movs	r2, #32
 8009a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e006      	b.n	8009a40 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2220      	movs	r2, #32
 8009a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	e000      	b.n	8009a40 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009a3e:	2302      	movs	r3, #2
  }
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3720      	adds	r7, #32
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08a      	sub	sp, #40	; 0x28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	4613      	mov	r3, r2
 8009a54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a5c:	2b20      	cmp	r3, #32
 8009a5e:	d14b      	bne.n	8009af8 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d002      	beq.n	8009a6c <HAL_UART_Receive_IT+0x24>
 8009a66:	88fb      	ldrh	r3, [r7, #6]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d101      	bne.n	8009a70 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e044      	b.n	8009afa <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a80:	2b40      	cmp	r3, #64	; 0x40
 8009a82:	d107      	bne.n	8009a94 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	689a      	ldr	r2, [r3, #8]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a92:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a1a      	ldr	r2, [pc, #104]	; (8009b04 <HAL_UART_Receive_IT+0xbc>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d024      	beq.n	8009ae8 <HAL_UART_Receive_IT+0xa0>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a19      	ldr	r2, [pc, #100]	; (8009b08 <HAL_UART_Receive_IT+0xc0>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d01f      	beq.n	8009ae8 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d018      	beq.n	8009ae8 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	e853 3f00 	ldrex	r3, [r3]
 8009ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009aca:	627b      	str	r3, [r7, #36]	; 0x24
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad4:	623b      	str	r3, [r7, #32]
 8009ad6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad8:	69f9      	ldr	r1, [r7, #28]
 8009ada:	6a3a      	ldr	r2, [r7, #32]
 8009adc:	e841 2300 	strex	r3, r2, [r1]
 8009ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1e6      	bne.n	8009ab6 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009ae8:	88fb      	ldrh	r3, [r7, #6]
 8009aea:	461a      	mov	r2, r3
 8009aec:	68b9      	ldr	r1, [r7, #8]
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f000 fea2 	bl	800a838 <UART_Start_Receive_IT>
 8009af4:	4603      	mov	r3, r0
 8009af6:	e000      	b.n	8009afa <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8009af8:	2302      	movs	r3, #2
  }
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3728      	adds	r7, #40	; 0x28
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	44002400 	.word	0x44002400
 8009b08:	54002400 	.word	0x54002400

08009b0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b0ae      	sub	sp, #184	; 0xb8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	69db      	ldr	r3, [r3, #28]
 8009b1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b36:	f640 030f 	movw	r3, #2063	; 0x80f
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8009b40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d11b      	bne.n	8009b80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b4c:	f003 0320 	and.w	r3, r3, #32
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d015      	beq.n	8009b80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b58:	f003 0320 	and.w	r3, r3, #32
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d105      	bne.n	8009b6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d009      	beq.n	8009b80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 8293 	beq.w	800a09c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	4798      	blx	r3
      }
      return;
 8009b7e:	e28d      	b.n	800a09c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 80fd 	beq.w	8009d84 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009b8e:	4b7a      	ldr	r3, [pc, #488]	; (8009d78 <HAL_UART_IRQHandler+0x26c>)
 8009b90:	4013      	ands	r3, r2
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d106      	bne.n	8009ba4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b9a:	4b78      	ldr	r3, [pc, #480]	; (8009d7c <HAL_UART_IRQHandler+0x270>)
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 80f0 	beq.w	8009d84 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ba4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d011      	beq.n	8009bd4 <HAL_UART_IRQHandler+0xc8>
 8009bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00b      	beq.n	8009bd4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bca:	f043 0201 	orr.w	r2, r3, #1
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bd8:	f003 0302 	and.w	r3, r3, #2
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d011      	beq.n	8009c04 <HAL_UART_IRQHandler+0xf8>
 8009be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009be4:	f003 0301 	and.w	r3, r3, #1
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00b      	beq.n	8009c04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bfa:	f043 0204 	orr.w	r2, r3, #4
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c08:	f003 0304 	and.w	r3, r3, #4
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d011      	beq.n	8009c34 <HAL_UART_IRQHandler+0x128>
 8009c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00b      	beq.n	8009c34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2204      	movs	r2, #4
 8009c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c2a:	f043 0202 	orr.w	r2, r3, #2
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c38:	f003 0308 	and.w	r3, r3, #8
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d017      	beq.n	8009c70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c44:	f003 0320 	and.w	r3, r3, #32
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d105      	bne.n	8009c58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009c50:	4b49      	ldr	r3, [pc, #292]	; (8009d78 <HAL_UART_IRQHandler+0x26c>)
 8009c52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00b      	beq.n	8009c70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2208      	movs	r2, #8
 8009c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c66:	f043 0208 	orr.w	r2, r3, #8
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d012      	beq.n	8009ca2 <HAL_UART_IRQHandler+0x196>
 8009c7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00c      	beq.n	8009ca2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c98:	f043 0220 	orr.w	r2, r3, #32
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 81f9 	beq.w	800a0a0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009cae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009cb2:	f003 0320 	and.w	r3, r3, #32
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d013      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009cba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009cbe:	f003 0320 	and.w	r3, r3, #32
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d105      	bne.n	8009cd2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d007      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf6:	2b40      	cmp	r3, #64	; 0x40
 8009cf8:	d005      	beq.n	8009d06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009cfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009cfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d02e      	beq.n	8009d64 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 feb8 	bl	800aa7c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d16:	2b40      	cmp	r3, #64	; 0x40
 8009d18:	d120      	bne.n	8009d5c <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d017      	beq.n	8009d54 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d2a:	4a15      	ldr	r2, [pc, #84]	; (8009d80 <HAL_UART_IRQHandler+0x274>)
 8009d2c:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7f8 f935 	bl	8001fa4 <HAL_DMA_Abort_IT>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d019      	beq.n	8009d74 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009d4e:	4610      	mov	r0, r2
 8009d50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d52:	e00f      	b.n	8009d74 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f9b7 	bl	800a0c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d5a:	e00b      	b.n	8009d74 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f9b3 	bl	800a0c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d62:	e007      	b.n	8009d74 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f9af 	bl	800a0c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009d72:	e195      	b.n	800a0a0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d74:	bf00      	nop
    return;
 8009d76:	e193      	b.n	800a0a0 <HAL_UART_IRQHandler+0x594>
 8009d78:	10000001 	.word	0x10000001
 8009d7c:	04000120 	.word	0x04000120
 8009d80:	0800ab49 	.word	0x0800ab49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	f040 8129 	bne.w	8009fe0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d92:	f003 0310 	and.w	r3, r3, #16
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 8122 	beq.w	8009fe0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009da0:	f003 0310 	and.w	r3, r3, #16
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f000 811b 	beq.w	8009fe0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2210      	movs	r2, #16
 8009db0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dbc:	2b40      	cmp	r3, #64	; 0x40
 8009dbe:	f040 8091 	bne.w	8009ee4 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dcc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 8009dd0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f000 8165 	beq.w	800a0a4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009de0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8009de4:	429a      	cmp	r2, r3
 8009de6:	f080 815d 	bcs.w	800a0a4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8009df0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dfc:	2b81      	cmp	r3, #129	; 0x81
 8009dfe:	d060      	beq.n	8009ec2 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e08:	e853 3f00 	ldrex	r3, [r3]
 8009e0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e26:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e2      	bne.n	8009e00 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3308      	adds	r3, #8
 8009e40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e4c:	f023 0301 	bic.w	r3, r3, #1
 8009e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3308      	adds	r3, #8
 8009e5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009e5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e66:	e841 2300 	strex	r3, r2, [r1]
 8009e6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1e3      	bne.n	8009e3a <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2220      	movs	r2, #32
 8009e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e88:	e853 3f00 	ldrex	r3, [r3]
 8009e8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e90:	f023 0310 	bic.w	r3, r3, #16
 8009e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ea2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ea4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009eaa:	e841 2300 	strex	r3, r2, [r1]
 8009eae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1e4      	bne.n	8009e80 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7f7 fff5 	bl	8001eac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2202      	movs	r2, #2
 8009ec6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f8fd 	bl	800a0dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ee2:	e0df      	b.n	800a0a4 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f000 80d1 	beq.w	800a0a8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8009f06:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f000 80cc 	beq.w	800a0a8 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f32:	647b      	str	r3, [r7, #68]	; 0x44
 8009f34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f3a:	e841 2300 	strex	r3, r2, [r1]
 8009f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e4      	bne.n	8009f10 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	e853 3f00 	ldrex	r3, [r3]
 8009f54:	623b      	str	r3, [r7, #32]
   return(result);
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f5c:	f023 0301 	bic.w	r3, r3, #1
 8009f60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3308      	adds	r3, #8
 8009f6a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8009f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f76:	e841 2300 	strex	r3, r2, [r1]
 8009f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1e1      	bne.n	8009f46 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	e853 3f00 	ldrex	r3, [r3]
 8009fa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f023 0310 	bic.w	r3, r3, #16
 8009faa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fb8:	61fb      	str	r3, [r7, #28]
 8009fba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	69b9      	ldr	r1, [r7, #24]
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e4      	bne.n	8009f96 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2202      	movs	r2, #2
 8009fd0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009fd2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f87f 	bl	800a0dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009fde:	e063      	b.n	800a0a8 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009fe0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00e      	beq.n	800a00a <HAL_UART_IRQHandler+0x4fe>
 8009fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d008      	beq.n	800a00a <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a000:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 fb1a 	bl	800b63c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a008:	e051      	b.n	800a0ae <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a00a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a00e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a012:	2b00      	cmp	r3, #0
 800a014:	d014      	beq.n	800a040 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a016:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a01a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d105      	bne.n	800a02e <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a026:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d008      	beq.n	800a040 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a032:	2b00      	cmp	r3, #0
 800a034:	d03a      	beq.n	800a0ac <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	4798      	blx	r3
    }
    return;
 800a03e:	e035      	b.n	800a0ac <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a040:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d009      	beq.n	800a060 <HAL_UART_IRQHandler+0x554>
 800a04c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a054:	2b00      	cmp	r3, #0
 800a056:	d003      	beq.n	800a060 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fd8b 	bl	800ab74 <UART_EndTransmit_IT>
    return;
 800a05e:	e026      	b.n	800a0ae <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a060:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d009      	beq.n	800a080 <HAL_UART_IRQHandler+0x574>
 800a06c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a070:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f001 faf3 	bl	800b664 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a07e:	e016      	b.n	800a0ae <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a080:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d010      	beq.n	800a0ae <HAL_UART_IRQHandler+0x5a2>
 800a08c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a090:	2b00      	cmp	r3, #0
 800a092:	da0c      	bge.n	800a0ae <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f001 fadb 	bl	800b650 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a09a:	e008      	b.n	800a0ae <HAL_UART_IRQHandler+0x5a2>
      return;
 800a09c:	bf00      	nop
 800a09e:	e006      	b.n	800a0ae <HAL_UART_IRQHandler+0x5a2>
    return;
 800a0a0:	bf00      	nop
 800a0a2:	e004      	b.n	800a0ae <HAL_UART_IRQHandler+0x5a2>
      return;
 800a0a4:	bf00      	nop
 800a0a6:	e002      	b.n	800a0ae <HAL_UART_IRQHandler+0x5a2>
      return;
 800a0a8:	bf00      	nop
 800a0aa:	e000      	b.n	800a0ae <HAL_UART_IRQHandler+0x5a2>
    return;
 800a0ac:	bf00      	nop
  }
}
 800a0ae:	37b8      	adds	r7, #184	; 0xb8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0f8:	b094      	sub	sp, #80	; 0x50
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	4b78      	ldr	r3, [pc, #480]	; (800a2ec <UART_SetConfig+0x1f8>)
 800a10a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10e:	689a      	ldr	r2, [r3, #8]
 800a110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	431a      	orrs	r2, r3
 800a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	431a      	orrs	r2, r3
 800a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11e:	69db      	ldr	r3, [r3, #28]
 800a120:	4313      	orrs	r3, r2
 800a122:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4971      	ldr	r1, [pc, #452]	; (800a2f0 <UART_SetConfig+0x1fc>)
 800a12c:	4019      	ands	r1, r3
 800a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a134:	430b      	orrs	r3, r1
 800a136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a144:	68d9      	ldr	r1, [r3, #12]
 800a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	ea40 0301 	orr.w	r3, r0, r1
 800a14e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	4b64      	ldr	r3, [pc, #400]	; (800a2ec <UART_SetConfig+0x1f8>)
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d009      	beq.n	800a174 <UART_SetConfig+0x80>
 800a160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	4b63      	ldr	r3, [pc, #396]	; (800a2f4 <UART_SetConfig+0x200>)
 800a166:	429a      	cmp	r2, r3
 800a168:	d004      	beq.n	800a174 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16c:	6a1a      	ldr	r2, [r3, #32]
 800a16e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a170:	4313      	orrs	r3, r2
 800a172:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a17e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a188:	430b      	orrs	r3, r1
 800a18a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a192:	f023 000f 	bic.w	r0, r3, #15
 800a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a198:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	ea40 0301 	orr.w	r3, r0, r1
 800a1a2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	4b53      	ldr	r3, [pc, #332]	; (800a2f8 <UART_SetConfig+0x204>)
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d102      	bne.n	800a1b4 <UART_SetConfig+0xc0>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1b2:	e066      	b.n	800a282 <UART_SetConfig+0x18e>
 800a1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	4b50      	ldr	r3, [pc, #320]	; (800a2fc <UART_SetConfig+0x208>)
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d102      	bne.n	800a1c4 <UART_SetConfig+0xd0>
 800a1be:	2302      	movs	r3, #2
 800a1c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1c2:	e05e      	b.n	800a282 <UART_SetConfig+0x18e>
 800a1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	4b4d      	ldr	r3, [pc, #308]	; (800a300 <UART_SetConfig+0x20c>)
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d102      	bne.n	800a1d4 <UART_SetConfig+0xe0>
 800a1ce:	2304      	movs	r3, #4
 800a1d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1d2:	e056      	b.n	800a282 <UART_SetConfig+0x18e>
 800a1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	4b4a      	ldr	r3, [pc, #296]	; (800a304 <UART_SetConfig+0x210>)
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d102      	bne.n	800a1e4 <UART_SetConfig+0xf0>
 800a1de:	2308      	movs	r3, #8
 800a1e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1e2:	e04e      	b.n	800a282 <UART_SetConfig+0x18e>
 800a1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	4b47      	ldr	r3, [pc, #284]	; (800a308 <UART_SetConfig+0x214>)
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d102      	bne.n	800a1f4 <UART_SetConfig+0x100>
 800a1ee:	2310      	movs	r3, #16
 800a1f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1f2:	e046      	b.n	800a282 <UART_SetConfig+0x18e>
 800a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	4b44      	ldr	r3, [pc, #272]	; (800a30c <UART_SetConfig+0x218>)
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d102      	bne.n	800a204 <UART_SetConfig+0x110>
 800a1fe:	2320      	movs	r3, #32
 800a200:	64bb      	str	r3, [r7, #72]	; 0x48
 800a202:	e03e      	b.n	800a282 <UART_SetConfig+0x18e>
 800a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	4b41      	ldr	r3, [pc, #260]	; (800a310 <UART_SetConfig+0x21c>)
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d102      	bne.n	800a214 <UART_SetConfig+0x120>
 800a20e:	2340      	movs	r3, #64	; 0x40
 800a210:	64bb      	str	r3, [r7, #72]	; 0x48
 800a212:	e036      	b.n	800a282 <UART_SetConfig+0x18e>
 800a214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	4b3e      	ldr	r3, [pc, #248]	; (800a314 <UART_SetConfig+0x220>)
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d102      	bne.n	800a224 <UART_SetConfig+0x130>
 800a21e:	2380      	movs	r3, #128	; 0x80
 800a220:	64bb      	str	r3, [r7, #72]	; 0x48
 800a222:	e02e      	b.n	800a282 <UART_SetConfig+0x18e>
 800a224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	4b3b      	ldr	r3, [pc, #236]	; (800a318 <UART_SetConfig+0x224>)
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d103      	bne.n	800a236 <UART_SetConfig+0x142>
 800a22e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a232:	64bb      	str	r3, [r7, #72]	; 0x48
 800a234:	e025      	b.n	800a282 <UART_SetConfig+0x18e>
 800a236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	4b38      	ldr	r3, [pc, #224]	; (800a31c <UART_SetConfig+0x228>)
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d103      	bne.n	800a248 <UART_SetConfig+0x154>
 800a240:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a244:	64bb      	str	r3, [r7, #72]	; 0x48
 800a246:	e01c      	b.n	800a282 <UART_SetConfig+0x18e>
 800a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	4b34      	ldr	r3, [pc, #208]	; (800a320 <UART_SetConfig+0x22c>)
 800a24e:	429a      	cmp	r2, r3
 800a250:	d103      	bne.n	800a25a <UART_SetConfig+0x166>
 800a252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a256:	64bb      	str	r3, [r7, #72]	; 0x48
 800a258:	e013      	b.n	800a282 <UART_SetConfig+0x18e>
 800a25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	4b31      	ldr	r3, [pc, #196]	; (800a324 <UART_SetConfig+0x230>)
 800a260:	429a      	cmp	r2, r3
 800a262:	d103      	bne.n	800a26c <UART_SetConfig+0x178>
 800a264:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a268:	64bb      	str	r3, [r7, #72]	; 0x48
 800a26a:	e00a      	b.n	800a282 <UART_SetConfig+0x18e>
 800a26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	4b1e      	ldr	r3, [pc, #120]	; (800a2ec <UART_SetConfig+0x1f8>)
 800a272:	429a      	cmp	r2, r3
 800a274:	d103      	bne.n	800a27e <UART_SetConfig+0x18a>
 800a276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a27a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a27c:	e001      	b.n	800a282 <UART_SetConfig+0x18e>
 800a27e:	2300      	movs	r3, #0
 800a280:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	4b19      	ldr	r3, [pc, #100]	; (800a2ec <UART_SetConfig+0x1f8>)
 800a288:	429a      	cmp	r2, r3
 800a28a:	d005      	beq.n	800a298 <UART_SetConfig+0x1a4>
 800a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	4b18      	ldr	r3, [pc, #96]	; (800a2f4 <UART_SetConfig+0x200>)
 800a292:	429a      	cmp	r2, r3
 800a294:	f040 8094 	bne.w	800a3c0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a29a:	2200      	movs	r2, #0
 800a29c:	623b      	str	r3, [r7, #32]
 800a29e:	627a      	str	r2, [r7, #36]	; 0x24
 800a2a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a2a4:	f7fc f8e8 	bl	8006478 <HAL_RCCEx_GetPeriphCLKFreq>
 800a2a8:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f000 80f7 	beq.w	800a4a0 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	4a1c      	ldr	r2, [pc, #112]	; (800a328 <UART_SetConfig+0x234>)
 800a2b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2c4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c8:	685a      	ldr	r2, [r3, #4]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	005b      	lsls	r3, r3, #1
 800a2ce:	4413      	add	r3, r2
 800a2d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d305      	bcc.n	800a2e2 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d924      	bls.n	800a32c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a2e8:	e069      	b.n	800a3be <UART_SetConfig+0x2ca>
 800a2ea:	bf00      	nop
 800a2ec:	44002400 	.word	0x44002400
 800a2f0:	cfff69f3 	.word	0xcfff69f3
 800a2f4:	54002400 	.word	0x54002400
 800a2f8:	40013800 	.word	0x40013800
 800a2fc:	40004400 	.word	0x40004400
 800a300:	40004800 	.word	0x40004800
 800a304:	40004c00 	.word	0x40004c00
 800a308:	40005000 	.word	0x40005000
 800a30c:	40006400 	.word	0x40006400
 800a310:	40007800 	.word	0x40007800
 800a314:	40007c00 	.word	0x40007c00
 800a318:	40008000 	.word	0x40008000
 800a31c:	40006800 	.word	0x40006800
 800a320:	40006c00 	.word	0x40006c00
 800a324:	40008400 	.word	0x40008400
 800a328:	0800fef4 	.word	0x0800fef4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a32c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a32e:	2200      	movs	r2, #0
 800a330:	61bb      	str	r3, [r7, #24]
 800a332:	61fa      	str	r2, [r7, #28]
 800a334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	4a64      	ldr	r2, [pc, #400]	; (800a4cc <UART_SetConfig+0x3d8>)
 800a33a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	2200      	movs	r2, #0
 800a342:	613b      	str	r3, [r7, #16]
 800a344:	617a      	str	r2, [r7, #20]
 800a346:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a34a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a34e:	f7f5 ffb1 	bl	80002b4 <__aeabi_uldivmod>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	4610      	mov	r0, r2
 800a358:	4619      	mov	r1, r3
 800a35a:	f04f 0200 	mov.w	r2, #0
 800a35e:	f04f 0300 	mov.w	r3, #0
 800a362:	020b      	lsls	r3, r1, #8
 800a364:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a368:	0202      	lsls	r2, r0, #8
 800a36a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a36c:	6849      	ldr	r1, [r1, #4]
 800a36e:	0849      	lsrs	r1, r1, #1
 800a370:	2000      	movs	r0, #0
 800a372:	460c      	mov	r4, r1
 800a374:	4605      	mov	r5, r0
 800a376:	eb12 0804 	adds.w	r8, r2, r4
 800a37a:	eb43 0905 	adc.w	r9, r3, r5
 800a37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	60bb      	str	r3, [r7, #8]
 800a386:	60fa      	str	r2, [r7, #12]
 800a388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a38c:	4640      	mov	r0, r8
 800a38e:	4649      	mov	r1, r9
 800a390:	f7f5 ff90 	bl	80002b4 <__aeabi_uldivmod>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4613      	mov	r3, r2
 800a39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a39c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a39e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3a2:	d308      	bcc.n	800a3b6 <UART_SetConfig+0x2c2>
 800a3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3aa:	d204      	bcs.n	800a3b6 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800a3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3b2:	60da      	str	r2, [r3, #12]
 800a3b4:	e003      	b.n	800a3be <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800a3bc:	e070      	b.n	800a4a0 <UART_SetConfig+0x3ac>
 800a3be:	e06f      	b.n	800a4a0 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c2:	69db      	ldr	r3, [r3, #28]
 800a3c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3c8:	d13c      	bne.n	800a444 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a3ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	603b      	str	r3, [r7, #0]
 800a3d0:	607a      	str	r2, [r7, #4]
 800a3d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3d6:	f7fc f84f 	bl	8006478 <HAL_RCCEx_GetPeriphCLKFreq>
 800a3da:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d05e      	beq.n	800a4a0 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	4a39      	ldr	r2, [pc, #228]	; (800a4cc <UART_SetConfig+0x3d8>)
 800a3e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3f4:	005a      	lsls	r2, r3, #1
 800a3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	085b      	lsrs	r3, r3, #1
 800a3fc:	441a      	add	r2, r3
 800a3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	fbb2 f3f3 	udiv	r3, r2, r3
 800a406:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a40a:	2b0f      	cmp	r3, #15
 800a40c:	d916      	bls.n	800a43c <UART_SetConfig+0x348>
 800a40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a414:	d212      	bcs.n	800a43c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a418:	b29b      	uxth	r3, r3
 800a41a:	f023 030f 	bic.w	r3, r3, #15
 800a41e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a422:	085b      	lsrs	r3, r3, #1
 800a424:	b29b      	uxth	r3, r3
 800a426:	f003 0307 	and.w	r3, r3, #7
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a42e:	4313      	orrs	r3, r2
 800a430:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a438:	60da      	str	r2, [r3, #12]
 800a43a:	e031      	b.n	800a4a0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a442:	e02d      	b.n	800a4a0 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a446:	2200      	movs	r2, #0
 800a448:	469a      	mov	sl, r3
 800a44a:	4693      	mov	fp, r2
 800a44c:	4650      	mov	r0, sl
 800a44e:	4659      	mov	r1, fp
 800a450:	f7fc f812 	bl	8006478 <HAL_RCCEx_GetPeriphCLKFreq>
 800a454:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800a456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d021      	beq.n	800a4a0 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a460:	4a1a      	ldr	r2, [pc, #104]	; (800a4cc <UART_SetConfig+0x3d8>)
 800a462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a466:	461a      	mov	r2, r3
 800a468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	085b      	lsrs	r3, r3, #1
 800a474:	441a      	add	r2, r3
 800a476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a47e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a482:	2b0f      	cmp	r3, #15
 800a484:	d909      	bls.n	800a49a <UART_SetConfig+0x3a6>
 800a486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a48c:	d205      	bcs.n	800a49a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a490:	b29a      	uxth	r2, r3
 800a492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	60da      	str	r2, [r3, #12]
 800a498:	e002      	b.n	800a4a0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a4bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3750      	adds	r7, #80	; 0x50
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4ca:	bf00      	nop
 800a4cc:	0800fef4 	.word	0x0800fef4

0800a4d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4dc:	f003 0308 	and.w	r3, r3, #8
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00a      	beq.n	800a4fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	430a      	orrs	r2, r1
 800a51a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a520:	f003 0302 	and.w	r3, r3, #2
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00a      	beq.n	800a53e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	430a      	orrs	r2, r1
 800a53c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a542:	f003 0304 	and.w	r3, r3, #4
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00a      	beq.n	800a560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	430a      	orrs	r2, r1
 800a55e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a564:	f003 0310 	and.w	r3, r3, #16
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00a      	beq.n	800a582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	430a      	orrs	r2, r1
 800a580:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a586:	f003 0320 	and.w	r3, r3, #32
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00a      	beq.n	800a5a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	430a      	orrs	r2, r1
 800a5a2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d01a      	beq.n	800a5e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5ce:	d10a      	bne.n	800a5e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00a      	beq.n	800a608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	430a      	orrs	r2, r1
 800a606:	605a      	str	r2, [r3, #4]
  }
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b098      	sub	sp, #96	; 0x60
 800a618:	af02      	add	r7, sp, #8
 800a61a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a624:	f7f7 fb1c 	bl	8001c60 <HAL_GetTick>
 800a628:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0308 	and.w	r3, r3, #8
 800a634:	2b08      	cmp	r3, #8
 800a636:	d12f      	bne.n	800a698 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a640:	2200      	movs	r2, #0
 800a642:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f88e 	bl	800a768 <UART_WaitOnFlagUntilTimeout>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d022      	beq.n	800a698 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65a:	e853 3f00 	ldrex	r3, [r3]
 800a65e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a666:	653b      	str	r3, [r7, #80]	; 0x50
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	461a      	mov	r2, r3
 800a66e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a670:	647b      	str	r3, [r7, #68]	; 0x44
 800a672:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a674:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a678:	e841 2300 	strex	r3, r2, [r1]
 800a67c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a67e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e6      	bne.n	800a652 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2220      	movs	r2, #32
 800a688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a694:	2303      	movs	r3, #3
 800a696:	e063      	b.n	800a760 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f003 0304 	and.w	r3, r3, #4
 800a6a2:	2b04      	cmp	r3, #4
 800a6a4:	d149      	bne.n	800a73a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f857 	bl	800a768 <UART_WaitOnFlagUntilTimeout>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d03c      	beq.n	800a73a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	e853 3f00 	ldrex	r3, [r3]
 800a6cc:	623b      	str	r3, [r7, #32]
   return(result);
 800a6ce:	6a3b      	ldr	r3, [r7, #32]
 800a6d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6de:	633b      	str	r3, [r7, #48]	; 0x30
 800a6e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6e6:	e841 2300 	strex	r3, r2, [r1]
 800a6ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1e6      	bne.n	800a6c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	60fb      	str	r3, [r7, #12]
   return(result);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f023 0301 	bic.w	r3, r3, #1
 800a708:	64bb      	str	r3, [r7, #72]	; 0x48
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3308      	adds	r3, #8
 800a710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a712:	61fa      	str	r2, [r7, #28]
 800a714:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	69b9      	ldr	r1, [r7, #24]
 800a718:	69fa      	ldr	r2, [r7, #28]
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	617b      	str	r3, [r7, #20]
   return(result);
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e5      	bne.n	800a6f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2220      	movs	r2, #32
 800a72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a736:	2303      	movs	r3, #3
 800a738:	e012      	b.n	800a760 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2220      	movs	r2, #32
 800a73e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2220      	movs	r2, #32
 800a746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3758      	adds	r7, #88	; 0x58
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	603b      	str	r3, [r7, #0]
 800a774:	4613      	mov	r3, r2
 800a776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a778:	e049      	b.n	800a80e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a780:	d045      	beq.n	800a80e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a782:	f7f7 fa6d 	bl	8001c60 <HAL_GetTick>
 800a786:	4602      	mov	r2, r0
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d302      	bcc.n	800a798 <UART_WaitOnFlagUntilTimeout+0x30>
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d101      	bne.n	800a79c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e048      	b.n	800a82e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 0304 	and.w	r3, r3, #4
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d031      	beq.n	800a80e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	69db      	ldr	r3, [r3, #28]
 800a7b0:	f003 0308 	and.w	r3, r3, #8
 800a7b4:	2b08      	cmp	r3, #8
 800a7b6:	d110      	bne.n	800a7da <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2208      	movs	r2, #8
 800a7be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f000 f95b 	bl	800aa7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2208      	movs	r2, #8
 800a7ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e029      	b.n	800a82e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	69db      	ldr	r3, [r3, #28]
 800a7e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7e8:	d111      	bne.n	800a80e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f000 f941 	bl	800aa7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2220      	movs	r2, #32
 800a7fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e00f      	b.n	800a82e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	69da      	ldr	r2, [r3, #28]
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	4013      	ands	r3, r2
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	bf0c      	ite	eq
 800a81e:	2301      	moveq	r3, #1
 800a820:	2300      	movne	r3, #0
 800a822:	b2db      	uxtb	r3, r3
 800a824:	461a      	mov	r2, r3
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d0a6      	beq.n	800a77a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
	...

0800a838 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a838:	b480      	push	{r7}
 800a83a:	b0a3      	sub	sp, #140	; 0x8c
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	4613      	mov	r3, r2
 800a844:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	88fa      	ldrh	r2, [r7, #6]
 800a850:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	88fa      	ldrh	r2, [r7, #6]
 800a858:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a86a:	d10e      	bne.n	800a88a <UART_Start_Receive_IT+0x52>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d105      	bne.n	800a880 <UART_Start_Receive_IT+0x48>
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a87a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a87e:	e02d      	b.n	800a8dc <UART_Start_Receive_IT+0xa4>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	22ff      	movs	r2, #255	; 0xff
 800a884:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a888:	e028      	b.n	800a8dc <UART_Start_Receive_IT+0xa4>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10d      	bne.n	800a8ae <UART_Start_Receive_IT+0x76>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d104      	bne.n	800a8a4 <UART_Start_Receive_IT+0x6c>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	22ff      	movs	r2, #255	; 0xff
 800a89e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8a2:	e01b      	b.n	800a8dc <UART_Start_Receive_IT+0xa4>
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	227f      	movs	r2, #127	; 0x7f
 800a8a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8ac:	e016      	b.n	800a8dc <UART_Start_Receive_IT+0xa4>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8b6:	d10d      	bne.n	800a8d4 <UART_Start_Receive_IT+0x9c>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d104      	bne.n	800a8ca <UART_Start_Receive_IT+0x92>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	227f      	movs	r2, #127	; 0x7f
 800a8c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8c8:	e008      	b.n	800a8dc <UART_Start_Receive_IT+0xa4>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	223f      	movs	r2, #63	; 0x3f
 800a8ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8d2:	e003      	b.n	800a8dc <UART_Start_Receive_IT+0xa4>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2222      	movs	r2, #34	; 0x22
 800a8e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3308      	adds	r3, #8
 800a8f2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8f6:	e853 3f00 	ldrex	r3, [r3]
 800a8fa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a8fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8fe:	f043 0301 	orr.w	r3, r3, #1
 800a902:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	3308      	adds	r3, #8
 800a90c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a910:	673a      	str	r2, [r7, #112]	; 0x70
 800a912:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a914:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a916:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a918:	e841 2300 	strex	r3, r2, [r1]
 800a91c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a91e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1e3      	bne.n	800a8ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a92c:	d14f      	bne.n	800a9ce <UART_Start_Receive_IT+0x196>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a934:	88fa      	ldrh	r2, [r7, #6]
 800a936:	429a      	cmp	r2, r3
 800a938:	d349      	bcc.n	800a9ce <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a942:	d107      	bne.n	800a954 <UART_Start_Receive_IT+0x11c>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d103      	bne.n	800a954 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	4a47      	ldr	r2, [pc, #284]	; (800aa6c <UART_Start_Receive_IT+0x234>)
 800a950:	675a      	str	r2, [r3, #116]	; 0x74
 800a952:	e002      	b.n	800a95a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	4a46      	ldr	r2, [pc, #280]	; (800aa70 <UART_Start_Receive_IT+0x238>)
 800a958:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d01a      	beq.n	800a998 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a96a:	e853 3f00 	ldrex	r3, [r3]
 800a96e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	461a      	mov	r2, r3
 800a980:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a984:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a986:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a988:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a98a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a98c:	e841 2300 	strex	r3, r2, [r1]
 800a990:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1e4      	bne.n	800a962 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3308      	adds	r3, #8
 800a99e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9a2:	e853 3f00 	ldrex	r3, [r3]
 800a9a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3308      	adds	r3, #8
 800a9b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a9b8:	64ba      	str	r2, [r7, #72]	; 0x48
 800a9ba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a9be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9c0:	e841 2300 	strex	r3, r2, [r1]
 800a9c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a9c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1e5      	bne.n	800a998 <UART_Start_Receive_IT+0x160>
 800a9cc:	e046      	b.n	800aa5c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9d6:	d107      	bne.n	800a9e8 <UART_Start_Receive_IT+0x1b0>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d103      	bne.n	800a9e8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	4a24      	ldr	r2, [pc, #144]	; (800aa74 <UART_Start_Receive_IT+0x23c>)
 800a9e4:	675a      	str	r2, [r3, #116]	; 0x74
 800a9e6:	e002      	b.n	800a9ee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4a23      	ldr	r2, [pc, #140]	; (800aa78 <UART_Start_Receive_IT+0x240>)
 800a9ec:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d019      	beq.n	800aa2a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	e853 3f00 	ldrex	r3, [r3]
 800aa02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800aa0a:	677b      	str	r3, [r7, #116]	; 0x74
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	461a      	mov	r2, r3
 800aa12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa14:	637b      	str	r3, [r7, #52]	; 0x34
 800aa16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa1c:	e841 2300 	strex	r3, r2, [r1]
 800aa20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1e6      	bne.n	800a9f6 <UART_Start_Receive_IT+0x1be>
 800aa28:	e018      	b.n	800aa5c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	e853 3f00 	ldrex	r3, [r3]
 800aa36:	613b      	str	r3, [r7, #16]
   return(result);
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	f043 0320 	orr.w	r3, r3, #32
 800aa3e:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	461a      	mov	r2, r3
 800aa46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa48:	623b      	str	r3, [r7, #32]
 800aa4a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4c:	69f9      	ldr	r1, [r7, #28]
 800aa4e:	6a3a      	ldr	r2, [r7, #32]
 800aa50:	e841 2300 	strex	r3, r2, [r1]
 800aa54:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1e6      	bne.n	800aa2a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	378c      	adds	r7, #140	; 0x8c
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	0800b2c5 	.word	0x0800b2c5
 800aa70:	0800af55 	.word	0x0800af55
 800aa74:	0800ad91 	.word	0x0800ad91
 800aa78:	0800abcd 	.word	0x0800abcd

0800aa7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b095      	sub	sp, #84	; 0x54
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa8c:	e853 3f00 	ldrex	r3, [r3]
 800aa90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaa2:	643b      	str	r3, [r7, #64]	; 0x40
 800aaa4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aaa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aaaa:	e841 2300 	strex	r3, r2, [r1]
 800aaae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1e6      	bne.n	800aa84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3308      	adds	r3, #8
 800aabc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabe:	6a3b      	ldr	r3, [r7, #32]
 800aac0:	e853 3f00 	ldrex	r3, [r3]
 800aac4:	61fb      	str	r3, [r7, #28]
   return(result);
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aacc:	f023 0301 	bic.w	r3, r3, #1
 800aad0:	64bb      	str	r3, [r7, #72]	; 0x48
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3308      	adds	r3, #8
 800aad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aada:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aadc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aade:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aae2:	e841 2300 	strex	r3, r2, [r1]
 800aae6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1e3      	bne.n	800aab6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d118      	bne.n	800ab28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	e853 3f00 	ldrex	r3, [r3]
 800ab02:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	f023 0310 	bic.w	r3, r3, #16
 800ab0a:	647b      	str	r3, [r7, #68]	; 0x44
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	461a      	mov	r2, r3
 800ab12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab14:	61bb      	str	r3, [r7, #24]
 800ab16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab18:	6979      	ldr	r1, [r7, #20]
 800ab1a:	69ba      	ldr	r2, [r7, #24]
 800ab1c:	e841 2300 	strex	r3, r2, [r1]
 800ab20:	613b      	str	r3, [r7, #16]
   return(result);
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1e6      	bne.n	800aaf6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2220      	movs	r2, #32
 800ab2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ab3c:	bf00      	nop
 800ab3e:	3754      	adds	r7, #84	; 0x54
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f7ff faae 	bl	800a0c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab6c:	bf00      	nop
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b088      	sub	sp, #32
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	e853 3f00 	ldrex	r3, [r3]
 800ab88:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab90:	61fb      	str	r3, [r7, #28]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	461a      	mov	r2, r3
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	61bb      	str	r3, [r7, #24]
 800ab9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9e:	6979      	ldr	r1, [r7, #20]
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	e841 2300 	strex	r3, r2, [r1]
 800aba6:	613b      	str	r3, [r7, #16]
   return(result);
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1e6      	bne.n	800ab7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2220      	movs	r2, #32
 800abb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f7ff fa79 	bl	800a0b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abc2:	bf00      	nop
 800abc4:	3720      	adds	r7, #32
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
	...

0800abcc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b09c      	sub	sp, #112	; 0x70
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800abda:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abe4:	2b22      	cmp	r3, #34	; 0x22
 800abe6:	f040 80c3 	bne.w	800ad70 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800abf4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800abf8:	b2d9      	uxtb	r1, r3
 800abfa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800abfe:	b2da      	uxtb	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac04:	400a      	ands	r2, r1
 800ac06:	b2d2      	uxtb	r2, r2
 800ac08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac0e:	1c5a      	adds	r2, r3, #1
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f040 80a6 	bne.w	800ad80 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac3c:	e853 3f00 	ldrex	r3, [r3]
 800ac40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac48:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac52:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac5a:	e841 2300 	strex	r3, r2, [r1]
 800ac5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1e6      	bne.n	800ac34 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac70:	e853 3f00 	ldrex	r3, [r3]
 800ac74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac78:	f023 0301 	bic.w	r3, r3, #1
 800ac7c:	667b      	str	r3, [r7, #100]	; 0x64
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3308      	adds	r3, #8
 800ac84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac86:	647a      	str	r2, [r7, #68]	; 0x44
 800ac88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac8e:	e841 2300 	strex	r3, r2, [r1]
 800ac92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1e5      	bne.n	800ac66 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2220      	movs	r2, #32
 800ac9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a35      	ldr	r2, [pc, #212]	; (800ad88 <UART_RxISR_8BIT+0x1bc>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d024      	beq.n	800ad02 <UART_RxISR_8BIT+0x136>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a33      	ldr	r2, [pc, #204]	; (800ad8c <UART_RxISR_8BIT+0x1c0>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d01f      	beq.n	800ad02 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d018      	beq.n	800ad02 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd8:	e853 3f00 	ldrex	r3, [r3]
 800acdc:	623b      	str	r3, [r7, #32]
   return(result);
 800acde:	6a3b      	ldr	r3, [r7, #32]
 800ace0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ace4:	663b      	str	r3, [r7, #96]	; 0x60
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	461a      	mov	r2, r3
 800acec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acee:	633b      	str	r3, [r7, #48]	; 0x30
 800acf0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acf6:	e841 2300 	strex	r3, r2, [r1]
 800acfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800acfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1e6      	bne.n	800acd0 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d12e      	bne.n	800ad68 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	e853 3f00 	ldrex	r3, [r3]
 800ad1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f023 0310 	bic.w	r3, r3, #16
 800ad24:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad2e:	61fb      	str	r3, [r7, #28]
 800ad30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad32:	69b9      	ldr	r1, [r7, #24]
 800ad34:	69fa      	ldr	r2, [r7, #28]
 800ad36:	e841 2300 	strex	r3, r2, [r1]
 800ad3a:	617b      	str	r3, [r7, #20]
   return(result);
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1e6      	bne.n	800ad10 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	69db      	ldr	r3, [r3, #28]
 800ad48:	f003 0310 	and.w	r3, r3, #16
 800ad4c:	2b10      	cmp	r3, #16
 800ad4e:	d103      	bne.n	800ad58 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2210      	movs	r2, #16
 800ad56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7ff f9bb 	bl	800a0dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad66:	e00b      	b.n	800ad80 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7f6 fe43 	bl	80019f4 <HAL_UART_RxCpltCallback>
}
 800ad6e:	e007      	b.n	800ad80 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	699a      	ldr	r2, [r3, #24]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f042 0208 	orr.w	r2, r2, #8
 800ad7e:	619a      	str	r2, [r3, #24]
}
 800ad80:	bf00      	nop
 800ad82:	3770      	adds	r7, #112	; 0x70
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	44002400 	.word	0x44002400
 800ad8c:	54002400 	.word	0x54002400

0800ad90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b09c      	sub	sp, #112	; 0x70
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad9e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ada8:	2b22      	cmp	r3, #34	; 0x22
 800adaa:	f040 80c3 	bne.w	800af34 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adbc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800adbe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800adc2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800adc6:	4013      	ands	r3, r2
 800adc8:	b29a      	uxth	r2, r3
 800adca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adcc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add2:	1c9a      	adds	r2, r3, #2
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800adde:	b29b      	uxth	r3, r3
 800ade0:	3b01      	subs	r3, #1
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f040 80a6 	bne.w	800af44 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae00:	e853 3f00 	ldrex	r3, [r3]
 800ae04:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ae06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae0c:	667b      	str	r3, [r7, #100]	; 0x64
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	461a      	mov	r2, r3
 800ae14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae16:	657b      	str	r3, [r7, #84]	; 0x54
 800ae18:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae1e:	e841 2300 	strex	r3, r2, [r1]
 800ae22:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ae24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1e6      	bne.n	800adf8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	3308      	adds	r3, #8
 800ae30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae34:	e853 3f00 	ldrex	r3, [r3]
 800ae38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	f023 0301 	bic.w	r3, r3, #1
 800ae40:	663b      	str	r3, [r7, #96]	; 0x60
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	3308      	adds	r3, #8
 800ae48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae4a:	643a      	str	r2, [r7, #64]	; 0x40
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae52:	e841 2300 	strex	r3, r2, [r1]
 800ae56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1e5      	bne.n	800ae2a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2220      	movs	r2, #32
 800ae62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a35      	ldr	r2, [pc, #212]	; (800af4c <UART_RxISR_16BIT+0x1bc>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d024      	beq.n	800aec6 <UART_RxISR_16BIT+0x136>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a33      	ldr	r2, [pc, #204]	; (800af50 <UART_RxISR_16BIT+0x1c0>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d01f      	beq.n	800aec6 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d018      	beq.n	800aec6 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9a:	6a3b      	ldr	r3, [r7, #32]
 800ae9c:	e853 3f00 	ldrex	r3, [r3]
 800aea0:	61fb      	str	r3, [r7, #28]
   return(result);
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aeb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aeb4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aeb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeba:	e841 2300 	strex	r3, r2, [r1]
 800aebe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1e6      	bne.n	800ae94 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d12e      	bne.n	800af2c <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	e853 3f00 	ldrex	r3, [r3]
 800aee0:	60bb      	str	r3, [r7, #8]
   return(result);
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	f023 0310 	bic.w	r3, r3, #16
 800aee8:	65bb      	str	r3, [r7, #88]	; 0x58
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	461a      	mov	r2, r3
 800aef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aef2:	61bb      	str	r3, [r7, #24]
 800aef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef6:	6979      	ldr	r1, [r7, #20]
 800aef8:	69ba      	ldr	r2, [r7, #24]
 800aefa:	e841 2300 	strex	r3, r2, [r1]
 800aefe:	613b      	str	r3, [r7, #16]
   return(result);
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1e6      	bne.n	800aed4 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	69db      	ldr	r3, [r3, #28]
 800af0c:	f003 0310 	and.w	r3, r3, #16
 800af10:	2b10      	cmp	r3, #16
 800af12:	d103      	bne.n	800af1c <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2210      	movs	r2, #16
 800af1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7ff f8d9 	bl	800a0dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800af2a:	e00b      	b.n	800af44 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7f6 fd61 	bl	80019f4 <HAL_UART_RxCpltCallback>
}
 800af32:	e007      	b.n	800af44 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	699a      	ldr	r2, [r3, #24]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f042 0208 	orr.w	r2, r2, #8
 800af42:	619a      	str	r2, [r3, #24]
}
 800af44:	bf00      	nop
 800af46:	3770      	adds	r7, #112	; 0x70
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	44002400 	.word	0x44002400
 800af50:	54002400 	.word	0x54002400

0800af54 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b0ac      	sub	sp, #176	; 0xb0
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af62:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	69db      	ldr	r3, [r3, #28]
 800af6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af8a:	2b22      	cmp	r3, #34	; 0x22
 800af8c:	f040 8187 	bne.w	800b29e <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800af96:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af9a:	e12a      	b.n	800b1f2 <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800afa6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800afaa:	b2d9      	uxtb	r1, r3
 800afac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afb6:	400a      	ands	r2, r1
 800afb8:	b2d2      	uxtb	r2, r2
 800afba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afc0:	1c5a      	adds	r2, r3, #1
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afcc:	b29b      	uxth	r3, r3
 800afce:	3b01      	subs	r3, #1
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	69db      	ldr	r3, [r3, #28]
 800afde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800afe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800afe6:	f003 0307 	and.w	r3, r3, #7
 800afea:	2b00      	cmp	r3, #0
 800afec:	d053      	beq.n	800b096 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800afee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aff2:	f003 0301 	and.w	r3, r3, #1
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d011      	beq.n	800b01e <UART_RxISR_8BIT_FIFOEN+0xca>
 800affa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800affe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00b      	beq.n	800b01e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2201      	movs	r2, #1
 800b00c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b014:	f043 0201 	orr.w	r2, r3, #1
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b01e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b022:	f003 0302 	and.w	r3, r3, #2
 800b026:	2b00      	cmp	r3, #0
 800b028:	d011      	beq.n	800b04e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b02a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b02e:	f003 0301 	and.w	r3, r3, #1
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00b      	beq.n	800b04e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2202      	movs	r2, #2
 800b03c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b044:	f043 0204 	orr.w	r2, r3, #4
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b04e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b052:	f003 0304 	and.w	r3, r3, #4
 800b056:	2b00      	cmp	r3, #0
 800b058:	d011      	beq.n	800b07e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b05a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b05e:	f003 0301 	and.w	r3, r3, #1
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00b      	beq.n	800b07e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2204      	movs	r2, #4
 800b06c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b074:	f043 0202 	orr.w	r2, r3, #2
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b084:	2b00      	cmp	r3, #0
 800b086:	d006      	beq.n	800b096 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff f81d 	bl	800a0c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f040 80a7 	bne.w	800b1f2 <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0ac:	e853 3f00 	ldrex	r3, [r3]
 800b0b0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b0b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b0c8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b0cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b0ce:	e841 2300 	strex	r3, r2, [r1]
 800b0d2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b0d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1e4      	bne.n	800b0a4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3308      	adds	r3, #8
 800b0e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0e4:	e853 3f00 	ldrex	r3, [r3]
 800b0e8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b0ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0f0:	f023 0301 	bic.w	r3, r3, #1
 800b0f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	3308      	adds	r3, #8
 800b0fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b102:	66ba      	str	r2, [r7, #104]	; 0x68
 800b104:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b106:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b108:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b10a:	e841 2300 	strex	r3, r2, [r1]
 800b10e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1e1      	bne.n	800b0da <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2220      	movs	r2, #32
 800b11a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4a62      	ldr	r2, [pc, #392]	; (800b2b8 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d026      	beq.n	800b182 <UART_RxISR_8BIT_FIFOEN+0x22e>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a60      	ldr	r2, [pc, #384]	; (800b2bc <UART_RxISR_8BIT_FIFOEN+0x368>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d021      	beq.n	800b182 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d01a      	beq.n	800b182 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b154:	e853 3f00 	ldrex	r3, [r3]
 800b158:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b15c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b160:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	461a      	mov	r2, r3
 800b16a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b16e:	657b      	str	r3, [r7, #84]	; 0x54
 800b170:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b172:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b174:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b176:	e841 2300 	strex	r3, r2, [r1]
 800b17a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b17c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1e4      	bne.n	800b14c <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b186:	2b01      	cmp	r3, #1
 800b188:	d130      	bne.n	800b1ec <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b198:	e853 3f00 	ldrex	r3, [r3]
 800b19c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	f023 0310 	bic.w	r3, r3, #16
 800b1a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1b2:	643b      	str	r3, [r7, #64]	; 0x40
 800b1b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1ba:	e841 2300 	strex	r3, r2, [r1]
 800b1be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1e4      	bne.n	800b190 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	f003 0310 	and.w	r3, r3, #16
 800b1d0:	2b10      	cmp	r3, #16
 800b1d2:	d103      	bne.n	800b1dc <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2210      	movs	r2, #16
 800b1da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7fe ff79 	bl	800a0dc <HAL_UARTEx_RxEventCallback>
 800b1ea:	e002      	b.n	800b1f2 <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7f6 fc01 	bl	80019f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b1f2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d006      	beq.n	800b208 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 800b1fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1fe:	f003 0320 	and.w	r3, r3, #32
 800b202:	2b00      	cmp	r3, #0
 800b204:	f47f aeca 	bne.w	800af9c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b20e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b212:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b216:	2b00      	cmp	r3, #0
 800b218:	d049      	beq.n	800b2ae <UART_RxISR_8BIT_FIFOEN+0x35a>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b220:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b224:	429a      	cmp	r2, r3
 800b226:	d242      	bcs.n	800b2ae <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	3308      	adds	r3, #8
 800b22e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b230:	6a3b      	ldr	r3, [r7, #32]
 800b232:	e853 3f00 	ldrex	r3, [r3]
 800b236:	61fb      	str	r3, [r7, #28]
   return(result);
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b23e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3308      	adds	r3, #8
 800b248:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b24c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b24e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b254:	e841 2300 	strex	r3, r2, [r1]
 800b258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1e3      	bne.n	800b228 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4a17      	ldr	r2, [pc, #92]	; (800b2c0 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800b264:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	e853 3f00 	ldrex	r3, [r3]
 800b272:	60bb      	str	r3, [r7, #8]
   return(result);
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	f043 0320 	orr.w	r3, r3, #32
 800b27a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	461a      	mov	r2, r3
 800b284:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b288:	61bb      	str	r3, [r7, #24]
 800b28a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28c:	6979      	ldr	r1, [r7, #20]
 800b28e:	69ba      	ldr	r2, [r7, #24]
 800b290:	e841 2300 	strex	r3, r2, [r1]
 800b294:	613b      	str	r3, [r7, #16]
   return(result);
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1e4      	bne.n	800b266 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b29c:	e007      	b.n	800b2ae <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	699a      	ldr	r2, [r3, #24]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f042 0208 	orr.w	r2, r2, #8
 800b2ac:	619a      	str	r2, [r3, #24]
}
 800b2ae:	bf00      	nop
 800b2b0:	37b0      	adds	r7, #176	; 0xb0
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	44002400 	.word	0x44002400
 800b2bc:	54002400 	.word	0x54002400
 800b2c0:	0800abcd 	.word	0x0800abcd

0800b2c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b0ae      	sub	sp, #184	; 0xb8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b2d2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	69db      	ldr	r3, [r3, #28]
 800b2dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2fa:	2b22      	cmp	r3, #34	; 0x22
 800b2fc:	f040 818b 	bne.w	800b616 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b306:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b30a:	e12e      	b.n	800b56a <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b312:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b31a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b31e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b322:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b326:	4013      	ands	r3, r2
 800b328:	b29a      	uxth	r2, r3
 800b32a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b32e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b334:	1c9a      	adds	r2, r3, #2
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b340:	b29b      	uxth	r3, r3
 800b342:	3b01      	subs	r3, #1
 800b344:	b29a      	uxth	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	69db      	ldr	r3, [r3, #28]
 800b352:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b35a:	f003 0307 	and.w	r3, r3, #7
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d053      	beq.n	800b40a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b362:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d011      	beq.n	800b392 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b36e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00b      	beq.n	800b392 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2201      	movs	r2, #1
 800b380:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b388:	f043 0201 	orr.w	r2, r3, #1
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b392:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b396:	f003 0302 	and.w	r3, r3, #2
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d011      	beq.n	800b3c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b39e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00b      	beq.n	800b3c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3b8:	f043 0204 	orr.w	r2, r3, #4
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b3c6:	f003 0304 	and.w	r3, r3, #4
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d011      	beq.n	800b3f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b3ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00b      	beq.n	800b3f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2204      	movs	r2, #4
 800b3e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3e8:	f043 0202 	orr.w	r2, r3, #2
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d006      	beq.n	800b40a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7fe fe63 	bl	800a0c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b410:	b29b      	uxth	r3, r3
 800b412:	2b00      	cmp	r3, #0
 800b414:	f040 80a9 	bne.w	800b56a <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b420:	e853 3f00 	ldrex	r3, [r3]
 800b424:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b42c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	461a      	mov	r2, r3
 800b436:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b43a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b43e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b440:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b442:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b446:	e841 2300 	strex	r3, r2, [r1]
 800b44a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b44c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1e2      	bne.n	800b418 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3308      	adds	r3, #8
 800b458:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b45c:	e853 3f00 	ldrex	r3, [r3]
 800b460:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b468:	f023 0301 	bic.w	r3, r3, #1
 800b46c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	3308      	adds	r3, #8
 800b476:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b47a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b47c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b480:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b482:	e841 2300 	strex	r3, r2, [r1]
 800b486:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1e1      	bne.n	800b452 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2220      	movs	r2, #32
 800b492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a62      	ldr	r2, [pc, #392]	; (800b630 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d026      	beq.n	800b4fa <UART_RxISR_16BIT_FIFOEN+0x236>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a60      	ldr	r2, [pc, #384]	; (800b634 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d021      	beq.n	800b4fa <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d01a      	beq.n	800b4fa <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4cc:	e853 3f00 	ldrex	r3, [r3]
 800b4d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b4d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b4e6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b4ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4ee:	e841 2300 	strex	r3, r2, [r1]
 800b4f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b4f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1e4      	bne.n	800b4c4 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d130      	bne.n	800b564 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b510:	e853 3f00 	ldrex	r3, [r3]
 800b514:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b518:	f023 0310 	bic.w	r3, r3, #16
 800b51c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	461a      	mov	r2, r3
 800b526:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b52a:	647b      	str	r3, [r7, #68]	; 0x44
 800b52c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b530:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b532:	e841 2300 	strex	r3, r2, [r1]
 800b536:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d1e4      	bne.n	800b508 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	69db      	ldr	r3, [r3, #28]
 800b544:	f003 0310 	and.w	r3, r3, #16
 800b548:	2b10      	cmp	r3, #16
 800b54a:	d103      	bne.n	800b554 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2210      	movs	r2, #16
 800b552:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b55a:	4619      	mov	r1, r3
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f7fe fdbd 	bl	800a0dc <HAL_UARTEx_RxEventCallback>
 800b562:	e002      	b.n	800b56a <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7f6 fa45 	bl	80019f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b56a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d006      	beq.n	800b580 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800b572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b576:	f003 0320 	and.w	r3, r3, #32
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f47f aec6 	bne.w	800b30c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b586:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b58a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d049      	beq.n	800b626 <UART_RxISR_16BIT_FIFOEN+0x362>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b598:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d242      	bcs.n	800b626 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3308      	adds	r3, #8
 800b5a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5aa:	e853 3f00 	ldrex	r3, [r3]
 800b5ae:	623b      	str	r3, [r7, #32]
   return(result);
 800b5b0:	6a3b      	ldr	r3, [r7, #32]
 800b5b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	3308      	adds	r3, #8
 800b5c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b5c4:	633a      	str	r2, [r7, #48]	; 0x30
 800b5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5cc:	e841 2300 	strex	r3, r2, [r1]
 800b5d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1e3      	bne.n	800b5a0 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4a17      	ldr	r2, [pc, #92]	; (800b638 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800b5dc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	e853 3f00 	ldrex	r3, [r3]
 800b5ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f043 0320 	orr.w	r3, r3, #32
 800b5f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b600:	61fb      	str	r3, [r7, #28]
 800b602:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b604:	69b9      	ldr	r1, [r7, #24]
 800b606:	69fa      	ldr	r2, [r7, #28]
 800b608:	e841 2300 	strex	r3, r2, [r1]
 800b60c:	617b      	str	r3, [r7, #20]
   return(result);
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1e4      	bne.n	800b5de <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b614:	e007      	b.n	800b626 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	699a      	ldr	r2, [r3, #24]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f042 0208 	orr.w	r2, r2, #8
 800b624:	619a      	str	r2, [r3, #24]
}
 800b626:	bf00      	nop
 800b628:	37b8      	adds	r7, #184	; 0xb8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	44002400 	.word	0x44002400
 800b634:	54002400 	.word	0x54002400
 800b638:	0800ad91 	.word	0x0800ad91

0800b63c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b644:	bf00      	nop
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b658:	bf00      	nop
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b66c:	bf00      	nop
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b686:	2b01      	cmp	r3, #1
 800b688:	d101      	bne.n	800b68e <HAL_UARTEx_DisableFifoMode+0x16>
 800b68a:	2302      	movs	r3, #2
 800b68c:	e027      	b.n	800b6de <HAL_UARTEx_DisableFifoMode+0x66>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2224      	movs	r2, #36	; 0x24
 800b69a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f022 0201 	bic.w	r2, r2, #1
 800b6b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b6bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2220      	movs	r2, #32
 800b6d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3714      	adds	r7, #20
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b084      	sub	sp, #16
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d101      	bne.n	800b702 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b6fe:	2302      	movs	r3, #2
 800b700:	e02d      	b.n	800b75e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2224      	movs	r2, #36	; 0x24
 800b70e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f022 0201 	bic.w	r2, r2, #1
 800b728:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	683a      	ldr	r2, [r7, #0]
 800b73a:	430a      	orrs	r2, r1
 800b73c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f850 	bl	800b7e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2220      	movs	r2, #32
 800b750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b084      	sub	sp, #16
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b776:	2b01      	cmp	r3, #1
 800b778:	d101      	bne.n	800b77e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b77a:	2302      	movs	r3, #2
 800b77c:	e02d      	b.n	800b7da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2224      	movs	r2, #36	; 0x24
 800b78a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f022 0201 	bic.w	r2, r2, #1
 800b7a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	430a      	orrs	r2, r1
 800b7b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f812 	bl	800b7e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2220      	movs	r2, #32
 800b7cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
	...

0800b7e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d108      	bne.n	800b806 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b804:	e031      	b.n	800b86a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b806:	2308      	movs	r3, #8
 800b808:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b80a:	2308      	movs	r3, #8
 800b80c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	0e5b      	lsrs	r3, r3, #25
 800b816:	b2db      	uxtb	r3, r3
 800b818:	f003 0307 	and.w	r3, r3, #7
 800b81c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	0f5b      	lsrs	r3, r3, #29
 800b826:	b2db      	uxtb	r3, r3
 800b828:	f003 0307 	and.w	r3, r3, #7
 800b82c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b82e:	7bbb      	ldrb	r3, [r7, #14]
 800b830:	7b3a      	ldrb	r2, [r7, #12]
 800b832:	4911      	ldr	r1, [pc, #68]	; (800b878 <UARTEx_SetNbDataToProcess+0x94>)
 800b834:	5c8a      	ldrb	r2, [r1, r2]
 800b836:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b83a:	7b3a      	ldrb	r2, [r7, #12]
 800b83c:	490f      	ldr	r1, [pc, #60]	; (800b87c <UARTEx_SetNbDataToProcess+0x98>)
 800b83e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b840:	fb93 f3f2 	sdiv	r3, r3, r2
 800b844:	b29a      	uxth	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
 800b84e:	7b7a      	ldrb	r2, [r7, #13]
 800b850:	4909      	ldr	r1, [pc, #36]	; (800b878 <UARTEx_SetNbDataToProcess+0x94>)
 800b852:	5c8a      	ldrb	r2, [r1, r2]
 800b854:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b858:	7b7a      	ldrb	r2, [r7, #13]
 800b85a:	4908      	ldr	r1, [pc, #32]	; (800b87c <UARTEx_SetNbDataToProcess+0x98>)
 800b85c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b85e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b862:	b29a      	uxth	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b86a:	bf00      	nop
 800b86c:	3714      	adds	r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	0800ff0c 	.word	0x0800ff0c
 800b87c:	0800ff14 	.word	0x0800ff14

0800b880 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800b880:	b480      	push	{r7}
 800b882:	b08b      	sub	sp, #44	; 0x2c
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	fa93 f3a3 	rbit	r3, r3
 800b89a:	613b      	str	r3, [r7, #16]
  return result;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d101      	bne.n	800b8aa <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800b8a6:	2320      	movs	r3, #32
 800b8a8:	e003      	b.n	800b8b2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	fab3 f383 	clz	r3, r3
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	005b      	lsls	r3, r3, #1
 800b8b4:	2103      	movs	r1, #3
 800b8b6:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ba:	43db      	mvns	r3, r3
 800b8bc:	401a      	ands	r2, r3
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8c2:	6a3b      	ldr	r3, [r7, #32]
 800b8c4:	fa93 f3a3 	rbit	r3, r3
 800b8c8:	61fb      	str	r3, [r7, #28]
  return result;
 800b8ca:	69fb      	ldr	r3, [r7, #28]
 800b8cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d101      	bne.n	800b8d8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800b8d4:	2320      	movs	r3, #32
 800b8d6:	e003      	b.n	800b8e0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	fab3 f383 	clz	r3, r3
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	6879      	ldr	r1, [r7, #4]
 800b8e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8e8:	431a      	orrs	r2, r3
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	601a      	str	r2, [r3, #0]
}
 800b8ee:	bf00      	nop
 800b8f0:	372c      	adds	r7, #44	; 0x2c
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	b085      	sub	sp, #20
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	60f8      	str	r0, [r7, #12]
 800b902:	60b9      	str	r1, [r7, #8]
 800b904:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	685a      	ldr	r2, [r3, #4]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	43db      	mvns	r3, r3
 800b90e:	401a      	ands	r2, r3
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	fb01 f303 	mul.w	r3, r1, r3
 800b918:	431a      	orrs	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	605a      	str	r2, [r3, #4]
}
 800b91e:	bf00      	nop
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800b92a:	b480      	push	{r7}
 800b92c:	b08b      	sub	sp, #44	; 0x2c
 800b92e:	af00      	add	r7, sp, #0
 800b930:	60f8      	str	r0, [r7, #12]
 800b932:	60b9      	str	r1, [r7, #8]
 800b934:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	689a      	ldr	r2, [r3, #8]
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	fa93 f3a3 	rbit	r3, r3
 800b944:	613b      	str	r3, [r7, #16]
  return result;
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d101      	bne.n	800b954 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800b950:	2320      	movs	r3, #32
 800b952:	e003      	b.n	800b95c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	fab3 f383 	clz	r3, r3
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	005b      	lsls	r3, r3, #1
 800b95e:	2103      	movs	r1, #3
 800b960:	fa01 f303 	lsl.w	r3, r1, r3
 800b964:	43db      	mvns	r3, r3
 800b966:	401a      	ands	r2, r3
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b96c:	6a3b      	ldr	r3, [r7, #32]
 800b96e:	fa93 f3a3 	rbit	r3, r3
 800b972:	61fb      	str	r3, [r7, #28]
  return result;
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d101      	bne.n	800b982 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b97e:	2320      	movs	r3, #32
 800b980:	e003      	b.n	800b98a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b984:	fab3 f383 	clz	r3, r3
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	005b      	lsls	r3, r3, #1
 800b98c:	6879      	ldr	r1, [r7, #4]
 800b98e:	fa01 f303 	lsl.w	r3, r1, r3
 800b992:	431a      	orrs	r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800b998:	bf00      	nop
 800b99a:	372c      	adds	r7, #44	; 0x2c
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b08b      	sub	sp, #44	; 0x2c
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	68da      	ldr	r2, [r3, #12]
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	fa93 f3a3 	rbit	r3, r3
 800b9be:	613b      	str	r3, [r7, #16]
  return result;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b9ca:	2320      	movs	r3, #32
 800b9cc:	e003      	b.n	800b9d6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	fab3 f383 	clz	r3, r3
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	005b      	lsls	r3, r3, #1
 800b9d8:	2103      	movs	r1, #3
 800b9da:	fa01 f303 	lsl.w	r3, r1, r3
 800b9de:	43db      	mvns	r3, r3
 800b9e0:	401a      	ands	r2, r3
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9e6:	6a3b      	ldr	r3, [r7, #32]
 800b9e8:	fa93 f3a3 	rbit	r3, r3
 800b9ec:	61fb      	str	r3, [r7, #28]
  return result;
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d101      	bne.n	800b9fc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b9f8:	2320      	movs	r3, #32
 800b9fa:	e003      	b.n	800ba04 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fe:	fab3 f383 	clz	r3, r3
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	005b      	lsls	r3, r3, #1
 800ba06:	6879      	ldr	r1, [r7, #4]
 800ba08:	fa01 f303 	lsl.w	r3, r1, r3
 800ba0c:	431a      	orrs	r2, r3
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	60da      	str	r2, [r3, #12]
}
 800ba12:	bf00      	nop
 800ba14:	372c      	adds	r7, #44	; 0x2c
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ba1e:	b480      	push	{r7}
 800ba20:	b08b      	sub	sp, #44	; 0x2c
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	60f8      	str	r0, [r7, #12]
 800ba26:	60b9      	str	r1, [r7, #8]
 800ba28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6a1a      	ldr	r2, [r3, #32]
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	fa93 f3a3 	rbit	r3, r3
 800ba38:	613b      	str	r3, [r7, #16]
  return result;
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800ba44:	2320      	movs	r3, #32
 800ba46:	e003      	b.n	800ba50 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	fab3 f383 	clz	r3, r3
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	210f      	movs	r1, #15
 800ba54:	fa01 f303 	lsl.w	r3, r1, r3
 800ba58:	43db      	mvns	r3, r3
 800ba5a:	401a      	ands	r2, r3
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba60:	6a3b      	ldr	r3, [r7, #32]
 800ba62:	fa93 f3a3 	rbit	r3, r3
 800ba66:	61fb      	str	r3, [r7, #28]
  return result;
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800ba72:	2320      	movs	r3, #32
 800ba74:	e003      	b.n	800ba7e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800ba76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba78:	fab3 f383 	clz	r3, r3
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	6879      	ldr	r1, [r7, #4]
 800ba82:	fa01 f303 	lsl.w	r3, r1, r3
 800ba86:	431a      	orrs	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800ba8c:	bf00      	nop
 800ba8e:	372c      	adds	r7, #44	; 0x2c
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b08b      	sub	sp, #44	; 0x2c
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	0a1b      	lsrs	r3, r3, #8
 800baac:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	fa93 f3a3 	rbit	r3, r3
 800bab4:	613b      	str	r3, [r7, #16]
  return result;
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d101      	bne.n	800bac4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800bac0:	2320      	movs	r3, #32
 800bac2:	e003      	b.n	800bacc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	fab3 f383 	clz	r3, r3
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	210f      	movs	r1, #15
 800bad0:	fa01 f303 	lsl.w	r3, r1, r3
 800bad4:	43db      	mvns	r3, r3
 800bad6:	401a      	ands	r2, r3
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	0a1b      	lsrs	r3, r3, #8
 800badc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bade:	6a3b      	ldr	r3, [r7, #32]
 800bae0:	fa93 f3a3 	rbit	r3, r3
 800bae4:	61fb      	str	r3, [r7, #28]
  return result;
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800baea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baec:	2b00      	cmp	r3, #0
 800baee:	d101      	bne.n	800baf4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800baf0:	2320      	movs	r3, #32
 800baf2:	e003      	b.n	800bafc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf6:	fab3 f383 	clz	r3, r3
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	6879      	ldr	r1, [r7, #4]
 800bb00:	fa01 f303 	lsl.w	r3, r1, r3
 800bb04:	431a      	orrs	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800bb0a:	bf00      	nop
 800bb0c:	372c      	adds	r7, #44	; 0x2c
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b08a      	sub	sp, #40	; 0x28
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	fa93 f3a3 	rbit	r3, r3
 800bb2c:	617b      	str	r3, [r7, #20]
  return result;
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d101      	bne.n	800bb3c <LL_GPIO_Init+0x26>
    return 32U;
 800bb38:	2320      	movs	r3, #32
 800bb3a:	e003      	b.n	800bb44 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	fab3 f383 	clz	r3, r3
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800bb46:	e058      	b.n	800bbfa <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	2101      	movs	r1, #1
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb50:	fa01 f303 	lsl.w	r3, r1, r3
 800bb54:	4013      	ands	r3, r2
 800bb56:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800bb58:	6a3b      	ldr	r3, [r7, #32]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d04a      	beq.n	800bbf4 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d003      	beq.n	800bb6e <LL_GPIO_Init+0x58>
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d10e      	bne.n	800bb8c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	461a      	mov	r2, r3
 800bb74:	6a39      	ldr	r1, [r7, #32]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7ff fed7 	bl	800b92a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	6819      	ldr	r1, [r3, #0]
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	461a      	mov	r2, r3
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7ff feb7 	bl	800b8fa <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	461a      	mov	r2, r3
 800bb92:	6a39      	ldr	r1, [r7, #32]
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7ff ff05 	bl	800b9a4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	d121      	bne.n	800bbe6 <LL_GPIO_Init+0xd0>
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	fa93 f3a3 	rbit	r3, r3
 800bbac:	60bb      	str	r3, [r7, #8]
  return result;
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d101      	bne.n	800bbbc <LL_GPIO_Init+0xa6>
    return 32U;
 800bbb8:	2320      	movs	r3, #32
 800bbba:	e003      	b.n	800bbc4 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	fab3 f383 	clz	r3, r3
 800bbc2:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800bbc4:	2b07      	cmp	r3, #7
 800bbc6:	d807      	bhi.n	800bbd8 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	695b      	ldr	r3, [r3, #20]
 800bbcc:	461a      	mov	r2, r3
 800bbce:	6a39      	ldr	r1, [r7, #32]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7ff ff24 	bl	800ba1e <LL_GPIO_SetAFPin_0_7>
 800bbd6:	e006      	b.n	800bbe6 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	695b      	ldr	r3, [r3, #20]
 800bbdc:	461a      	mov	r2, r3
 800bbde:	6a39      	ldr	r1, [r7, #32]
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f7ff ff59 	bl	800ba98 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	461a      	mov	r2, r3
 800bbec:	6a39      	ldr	r1, [r7, #32]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7ff fe46 	bl	800b880 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800bbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc00:	fa22 f303 	lsr.w	r3, r2, r3
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d19f      	bne.n	800bb48 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3728      	adds	r7, #40	; 0x28
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bc12:	b480      	push	{r7}
 800bc14:	b085      	sub	sp, #20
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bc1a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800bc1e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	43db      	mvns	r3, r3
 800bc28:	401a      	ands	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	460b      	mov	r3, r1
 800bc46:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800bc48:	78fb      	ldrb	r3, [r7, #3]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d106      	bne.n	800bc5c <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	641a      	str	r2, [r3, #64]	; 0x40
 800bc5a:	e00b      	b.n	800bc74 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800bc5c:	78fb      	ldrb	r3, [r7, #3]
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d106      	bne.n	800bc70 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	641a      	str	r2, [r3, #64]	; 0x40
 800bc6e:	e001      	b.n	800bc74 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	e000      	b.n	800bc76 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800bc82:	b084      	sub	sp, #16
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	f107 001c 	add.w	r0, r7, #28
 800bc90:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9e:	f023 0201 	bic.w	r2, r3, #1
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800bca6:	2100      	movs	r1, #0
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f7ff ffc7 	bl	800bc3c <USB_SetCurrentMode>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800bcb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bcc4:	b004      	add	sp, #16
 800bcc6:	4770      	bx	lr

0800bcc8 <svCLI_Init>:
// extern variables

// Functions
// svCLI_Init must be called before using CLI
void svCLI_Init(SVCLI_GET_CHAR_FUNC funcGetChar, SVCLI_PUT_CHAR_FUNC funcPutChar, SVCLI_COMMIT_FUNC funcCommit)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
	svGetChar = funcGetChar;
 800bcd4:	4a18      	ldr	r2, [pc, #96]	; (800bd38 <svCLI_Init+0x70>)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6013      	str	r3, [r2, #0]
	svPutChar = funcPutChar;
 800bcda:	4a18      	ldr	r2, [pc, #96]	; (800bd3c <svCLI_Init+0x74>)
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	6013      	str	r3, [r2, #0]
	svCommit = funcCommit;
 800bce0:	4a17      	ldr	r2, [pc, #92]	; (800bd40 <svCLI_Init+0x78>)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6013      	str	r3, [r2, #0]
	szCLIString[0] = 0;
 800bce6:	4b17      	ldr	r3, [pc, #92]	; (800bd44 <svCLI_Init+0x7c>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	701a      	strb	r2, [r3, #0]
#pragma section=".Table4CLI"
  sCLITableBegin = (SVCLI_t*)__section_begin(".Table4CLI");
  sCLITablEnd = (SVCLI_t*)__section_end(".Table4CLI");

#elif defined ( __GNUC__ )
  sCLITableBegin = (SVCLI_t*)Table4CLI_start;
 800bcec:	4b16      	ldr	r3, [pc, #88]	; (800bd48 <svCLI_Init+0x80>)
 800bcee:	4a17      	ldr	r2, [pc, #92]	; (800bd4c <svCLI_Init+0x84>)
 800bcf0:	601a      	str	r2, [r3, #0]
  sCLITablEnd = (SVCLI_t*)Table4CLI_end;
 800bcf2:	4b17      	ldr	r3, [pc, #92]	; (800bd50 <svCLI_Init+0x88>)
 800bcf4:	4a17      	ldr	r2, [pc, #92]	; (800bd54 <svCLI_Init+0x8c>)
 800bcf6:	601a      	str	r2, [r3, #0]
#endif

  if (s_bPwdOK) {
 800bcf8:	4b17      	ldr	r3, [pc, #92]	; (800bd58 <svCLI_Init+0x90>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00d      	beq.n	800bd1c <svCLI_Init+0x54>
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800bd00:	4b16      	ldr	r3, [pc, #88]	; (800bd5c <svCLI_Init+0x94>)
 800bd02:	4a17      	ldr	r2, [pc, #92]	; (800bd60 <svCLI_Init+0x98>)
 800bd04:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd08:	6018      	str	r0, [r3, #0]
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	8019      	strh	r1, [r3, #0]
 800bd0e:	3302      	adds	r3, #2
 800bd10:	0c0a      	lsrs	r2, r1, #16
 800bd12:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800bd14:	4b13      	ldr	r3, [pc, #76]	; (800bd64 <svCLI_Init+0x9c>)
 800bd16:	2206      	movs	r2, #6
 800bd18:	601a      	str	r2, [r3, #0]
  }
  else {
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
  }
}
 800bd1a:	e007      	b.n	800bd2c <svCLI_Init+0x64>
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
 800bd1c:	4b0f      	ldr	r3, [pc, #60]	; (800bd5c <svCLI_Init+0x94>)
 800bd1e:	4a12      	ldr	r2, [pc, #72]	; (800bd68 <svCLI_Init+0xa0>)
 800bd20:	ca07      	ldmia	r2, {r0, r1, r2}
 800bd22:	c303      	stmia	r3!, {r0, r1}
 800bd24:	801a      	strh	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
 800bd26:	4b0f      	ldr	r3, [pc, #60]	; (800bd64 <svCLI_Init+0x9c>)
 800bd28:	2209      	movs	r2, #9
 800bd2a:	601a      	str	r2, [r3, #0]
}
 800bd2c:	bf00      	nop
 800bd2e:	3714      	adds	r7, #20
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	20000d9c 	.word	0x20000d9c
 800bd3c:	20000da0 	.word	0x20000da0
 800bd40:	20000da4 	.word	0x20000da4
 800bd44:	20000b88 	.word	0x20000b88
 800bd48:	20000d94 	.word	0x20000d94
 800bd4c:	0800fd44 	.word	0x0800fd44
 800bd50:	20000d98 	.word	0x20000d98
 800bd54:	0800fd5c 	.word	0x0800fd5c
 800bd58:	20000034 	.word	0x20000034
 800bd5c:	20000038 	.word	0x20000038
 800bd60:	0800fdb0 	.word	0x0800fdb0
 800bd64:	20000044 	.word	0x20000044
 800bd68:	0800fdb8 	.word	0x0800fdb8

0800bd6c <svCLI_Printf>:

static int svCLI_Printf(char* fmt,...)
{
 800bd6c:	b40f      	push	{r0, r1, r2, r3}
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b084      	sub	sp, #16
 800bd72:	af00      	add	r7, sp, #0
static char msg[256];
	va_list ap;
	int len;

	va_start(ap, fmt);
 800bd74:	f107 031c 	add.w	r3, r7, #28
 800bd78:	607b      	str	r3, [r7, #4]
	len = vsprintf(msg, fmt, ap);
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	69b9      	ldr	r1, [r7, #24]
 800bd7e:	480f      	ldr	r0, [pc, #60]	; (800bdbc <svCLI_Printf+0x50>)
 800bd80:	f003 fbce 	bl	800f520 <vsiprintf>
 800bd84:	60b8      	str	r0, [r7, #8]
	va_end(ap);
	for (int i=0;i<len;i++) {
 800bd86:	2300      	movs	r3, #0
 800bd88:	60fb      	str	r3, [r7, #12]
 800bd8a:	e00a      	b.n	800bda2 <svCLI_Printf+0x36>
		svPutChar(msg[i]);
 800bd8c:	4b0c      	ldr	r3, [pc, #48]	; (800bdc0 <svCLI_Printf+0x54>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	490a      	ldr	r1, [pc, #40]	; (800bdbc <svCLI_Printf+0x50>)
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	440a      	add	r2, r1
 800bd96:	7812      	ldrb	r2, [r2, #0]
 800bd98:	4610      	mov	r0, r2
 800bd9a:	4798      	blx	r3
	for (int i=0;i<len;i++) {
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	60fb      	str	r3, [r7, #12]
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	dbf0      	blt.n	800bd8c <svCLI_Printf+0x20>
	}
	return len;
 800bdaa:	68bb      	ldr	r3, [r7, #8]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bdb6:	b004      	add	sp, #16
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	20000db4 	.word	0x20000db4
 800bdc0:	20000da0 	.word	0x20000da0

0800bdc4 <svCLI_ShowHelp>:

void svCLI_ShowHelp(void)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
	if (svPutChar) {
 800bdca:	4b2d      	ldr	r3, [pc, #180]	; (800be80 <svCLI_ShowHelp+0xbc>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d04a      	beq.n	800be68 <svCLI_ShowHelp+0xa4>
		if (sCLITableBegin != sCLITablEnd) {
 800bdd2:	4b2c      	ldr	r3, [pc, #176]	; (800be84 <svCLI_ShowHelp+0xc0>)
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	4b2c      	ldr	r3, [pc, #176]	; (800be88 <svCLI_ShowHelp+0xc4>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d03e      	beq.n	800be5c <svCLI_ShowHelp+0x98>
			for (unsigned int s=0;s<80;s++) svPutChar('=');
 800bdde:	2300      	movs	r3, #0
 800bde0:	60fb      	str	r3, [r7, #12]
 800bde2:	e006      	b.n	800bdf2 <svCLI_ShowHelp+0x2e>
 800bde4:	4b26      	ldr	r3, [pc, #152]	; (800be80 <svCLI_ShowHelp+0xbc>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	203d      	movs	r0, #61	; 0x3d
 800bdea:	4798      	blx	r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	60fb      	str	r3, [r7, #12]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2b4f      	cmp	r3, #79	; 0x4f
 800bdf6:	d9f5      	bls.n	800bde4 <svCLI_ShowHelp+0x20>
			svCLI_Printf("\r\n");
 800bdf8:	4824      	ldr	r0, [pc, #144]	; (800be8c <svCLI_ShowHelp+0xc8>)
 800bdfa:	f7ff ffb7 	bl	800bd6c <svCLI_Printf>
			SVCLI_t* pCLIEntry;
			int nCount = 1;
 800bdfe:	2301      	movs	r3, #1
 800be00:	607b      	str	r3, [r7, #4]
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800be02:	4b20      	ldr	r3, [pc, #128]	; (800be84 <svCLI_ShowHelp+0xc0>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	60bb      	str	r3, [r7, #8]
 800be08:	e012      	b.n	800be30 <svCLI_ShowHelp+0x6c>
				svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	1c4b      	adds	r3, r1, #1
 800be0e:	607b      	str	r3, [r7, #4]
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d002      	beq.n	800be22 <svCLI_ShowHelp+0x5e>
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	e000      	b.n	800be24 <svCLI_ShowHelp+0x60>
 800be22:	4b1b      	ldr	r3, [pc, #108]	; (800be90 <svCLI_ShowHelp+0xcc>)
 800be24:	481b      	ldr	r0, [pc, #108]	; (800be94 <svCLI_ShowHelp+0xd0>)
 800be26:	f7ff ffa1 	bl	800bd6c <svCLI_Printf>
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	330c      	adds	r3, #12
 800be2e:	60bb      	str	r3, [r7, #8]
 800be30:	4b15      	ldr	r3, [pc, #84]	; (800be88 <svCLI_ShowHelp+0xc4>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	68ba      	ldr	r2, [r7, #8]
 800be36:	429a      	cmp	r2, r3
 800be38:	d3e7      	bcc.n	800be0a <svCLI_ShowHelp+0x46>
			}
			svCLI_Printf(AES_RESET);
 800be3a:	4817      	ldr	r0, [pc, #92]	; (800be98 <svCLI_ShowHelp+0xd4>)
 800be3c:	f7ff ff96 	bl	800bd6c <svCLI_Printf>
			for (unsigned int s=0;s<80;s++) svPutChar('=');
 800be40:	2300      	movs	r3, #0
 800be42:	603b      	str	r3, [r7, #0]
 800be44:	e006      	b.n	800be54 <svCLI_ShowHelp+0x90>
 800be46:	4b0e      	ldr	r3, [pc, #56]	; (800be80 <svCLI_ShowHelp+0xbc>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	203d      	movs	r0, #61	; 0x3d
 800be4c:	4798      	blx	r3
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	3301      	adds	r3, #1
 800be52:	603b      	str	r3, [r7, #0]
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	2b4f      	cmp	r3, #79	; 0x4f
 800be58:	d9f5      	bls.n	800be46 <svCLI_ShowHelp+0x82>
 800be5a:	e002      	b.n	800be62 <svCLI_ShowHelp+0x9e>
		}
		else {	// No CLI Entry
			svCLI_Printf("No CLI Entries !!!");
 800be5c:	480f      	ldr	r0, [pc, #60]	; (800be9c <svCLI_ShowHelp+0xd8>)
 800be5e:	f7ff ff85 	bl	800bd6c <svCLI_Printf>
		}
		svCLI_Printf("\r\n");
 800be62:	480a      	ldr	r0, [pc, #40]	; (800be8c <svCLI_ShowHelp+0xc8>)
 800be64:	f7ff ff82 	bl	800bd6c <svCLI_Printf>
	}
	if (svCommit) {
 800be68:	4b0d      	ldr	r3, [pc, #52]	; (800bea0 <svCLI_ShowHelp+0xdc>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <svCLI_ShowHelp+0xb2>
		svCommit();
 800be70:	4b0b      	ldr	r3, [pc, #44]	; (800bea0 <svCLI_ShowHelp+0xdc>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4798      	blx	r3
	}
}
 800be76:	bf00      	nop
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	20000da0 	.word	0x20000da0
 800be84:	20000d94 	.word	0x20000d94
 800be88:	20000d98 	.word	0x20000d98
 800be8c:	0800fdc4 	.word	0x0800fdc4
 800be90:	0800fdc8 	.word	0x0800fdc8
 800be94:	0800fdcc 	.word	0x0800fdcc
 800be98:	0800fdec 	.word	0x0800fdec
 800be9c:	0800fdf4 	.word	0x0800fdf4
 800bea0:	20000da4 	.word	0x20000da4

0800bea4 <_strlenOffspace>:

// String length after stripped off space[0x20]
static int _strlenOffspace(const char* szString)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
	int nCount = 0;
 800beac:	2300      	movs	r3, #0
 800beae:	60fb      	str	r3, [r7, #12]
	if ((szString == NULL) || (*szString == 0))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <_strlenOffspace+0x1a>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d104      	bne.n	800bec8 <_strlenOffspace+0x24>
		return 0;
 800bebe:	2300      	movs	r3, #0
 800bec0:	e017      	b.n	800bef2 <_strlenOffspace+0x4e>
	// Strip off first spaces
	while (*szString == ' ') szString++;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	3301      	adds	r3, #1
 800bec6:	607b      	str	r3, [r7, #4]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	2b20      	cmp	r3, #32
 800bece:	d0f8      	beq.n	800bec2 <_strlenOffspace+0x1e>
	// Count
	while (*szString) {
 800bed0:	e008      	b.n	800bee4 <_strlenOffspace+0x40>
		if (*szString++ != ' ') {
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	1c5a      	adds	r2, r3, #1
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	2b20      	cmp	r3, #32
 800bedc:	d007      	beq.n	800beee <_strlenOffspace+0x4a>
			nCount++;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3301      	adds	r3, #1
 800bee2:	60fb      	str	r3, [r7, #12]
	while (*szString) {
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1f2      	bne.n	800bed2 <_strlenOffspace+0x2e>
 800beec:	e000      	b.n	800bef0 <_strlenOffspace+0x4c>
		}
		else
			break;
 800beee:	bf00      	nop
	}
	return nCount;
 800bef0:	68fb      	ldr	r3, [r7, #12]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3714      	adds	r7, #20
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr

0800befe <_toLower>:

static char _toLower(char c)
{
 800befe:	b480      	push	{r7}
 800bf00:	b083      	sub	sp, #12
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	4603      	mov	r3, r0
 800bf06:	71fb      	strb	r3, [r7, #7]
  if ((c >= 'A') && (c <= 'Z')) {
 800bf08:	79fb      	ldrb	r3, [r7, #7]
 800bf0a:	2b40      	cmp	r3, #64	; 0x40
 800bf0c:	d905      	bls.n	800bf1a <_toLower+0x1c>
 800bf0e:	79fb      	ldrb	r3, [r7, #7]
 800bf10:	2b5a      	cmp	r3, #90	; 0x5a
 800bf12:	d802      	bhi.n	800bf1a <_toLower+0x1c>
    c = (c - 'A') + 'a';
 800bf14:	79fb      	ldrb	r3, [r7, #7]
 800bf16:	3320      	adds	r3, #32
 800bf18:	71fb      	strb	r3, [r7, #7]
  }
  return c;
 800bf1a:	79fb      	ldrb	r3, [r7, #7]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <_isPrintable>:

static int _isPrintable(char c)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	4603      	mov	r3, r0
 800bf30:	71fb      	strb	r3, [r7, #7]
	if ((' ' <= c) && (c <= '~'))
 800bf32:	79fb      	ldrb	r3, [r7, #7]
 800bf34:	2b1f      	cmp	r3, #31
 800bf36:	d904      	bls.n	800bf42 <_isPrintable+0x1a>
 800bf38:	79fb      	ldrb	r3, [r7, #7]
 800bf3a:	2b7e      	cmp	r3, #126	; 0x7e
 800bf3c:	d801      	bhi.n	800bf42 <_isPrintable+0x1a>
		return 1;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e000      	b.n	800bf44 <_isPrintable+0x1c>
	return 0;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <_isHex>:

static int _isHex(char c)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	4603      	mov	r3, r0
 800bf58:	71fb      	strb	r3, [r7, #7]
  if (((c >= '0') && (c <= '9')) ||				\
 800bf5a:	79fb      	ldrb	r3, [r7, #7]
 800bf5c:	2b2f      	cmp	r3, #47	; 0x2f
 800bf5e:	d902      	bls.n	800bf66 <_isHex+0x16>
 800bf60:	79fb      	ldrb	r3, [r7, #7]
 800bf62:	2b39      	cmp	r3, #57	; 0x39
 800bf64:	d90b      	bls.n	800bf7e <_isHex+0x2e>
 800bf66:	79fb      	ldrb	r3, [r7, #7]
 800bf68:	2b40      	cmp	r3, #64	; 0x40
 800bf6a:	d902      	bls.n	800bf72 <_isHex+0x22>
      ((c >= 'A') && (c <= 'F')) ||  	\
 800bf6c:	79fb      	ldrb	r3, [r7, #7]
 800bf6e:	2b46      	cmp	r3, #70	; 0x46
 800bf70:	d905      	bls.n	800bf7e <_isHex+0x2e>
 800bf72:	79fb      	ldrb	r3, [r7, #7]
 800bf74:	2b60      	cmp	r3, #96	; 0x60
 800bf76:	d904      	bls.n	800bf82 <_isHex+0x32>
      ((c >= 'a') && (c <= 'f')))
 800bf78:	79fb      	ldrb	r3, [r7, #7]
 800bf7a:	2b66      	cmp	r3, #102	; 0x66
 800bf7c:	d801      	bhi.n	800bf82 <_isHex+0x32>
    return 1;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e000      	b.n	800bf84 <_isHex+0x34>
	return 0;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <_fromHex>:

static int _fromHex(char c) 
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	4603      	mov	r3, r0
 800bf98:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	60fb      	str	r3, [r7, #12]

  if ((c >= '0') && (c <= '9')) {
 800bf9e:	79fb      	ldrb	r3, [r7, #7]
 800bfa0:	2b2f      	cmp	r3, #47	; 0x2f
 800bfa2:	d906      	bls.n	800bfb2 <_fromHex+0x22>
 800bfa4:	79fb      	ldrb	r3, [r7, #7]
 800bfa6:	2b39      	cmp	r3, #57	; 0x39
 800bfa8:	d803      	bhi.n	800bfb2 <_fromHex+0x22>
    ret = (c - '0');
 800bfaa:	79fb      	ldrb	r3, [r7, #7]
 800bfac:	3b30      	subs	r3, #48	; 0x30
 800bfae:	60fb      	str	r3, [r7, #12]
 800bfb0:	e012      	b.n	800bfd8 <_fromHex+0x48>
  } 
	else if ((c >= 'a') && (c <= 'f')) {
 800bfb2:	79fb      	ldrb	r3, [r7, #7]
 800bfb4:	2b60      	cmp	r3, #96	; 0x60
 800bfb6:	d906      	bls.n	800bfc6 <_fromHex+0x36>
 800bfb8:	79fb      	ldrb	r3, [r7, #7]
 800bfba:	2b66      	cmp	r3, #102	; 0x66
 800bfbc:	d803      	bhi.n	800bfc6 <_fromHex+0x36>
    ret = (c - 'a' + 0x0a);
 800bfbe:	79fb      	ldrb	r3, [r7, #7]
 800bfc0:	3b57      	subs	r3, #87	; 0x57
 800bfc2:	60fb      	str	r3, [r7, #12]
 800bfc4:	e008      	b.n	800bfd8 <_fromHex+0x48>
  } 
	else if ((c >= 'A') && (c <= 'F')) {
 800bfc6:	79fb      	ldrb	r3, [r7, #7]
 800bfc8:	2b40      	cmp	r3, #64	; 0x40
 800bfca:	d905      	bls.n	800bfd8 <_fromHex+0x48>
 800bfcc:	79fb      	ldrb	r3, [r7, #7]
 800bfce:	2b46      	cmp	r3, #70	; 0x46
 800bfd0:	d802      	bhi.n	800bfd8 <_fromHex+0x48>
    ret = (c - 'A' + 0x0A);
 800bfd2:	79fb      	ldrb	r3, [r7, #7]
 800bfd4:	3b37      	subs	r3, #55	; 0x37
 800bfd6:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3714      	adds	r7, #20
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <_strNoCaseCmp>:

static int _strNoCaseCmp(const char *s1, const char *s2, int nLenghth)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b086      	sub	sp, #24
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	60f8      	str	r0, [r7, #12]
 800bfee:	60b9      	str	r1, [r7, #8]
 800bff0:	607a      	str	r2, [r7, #4]
  char c1, c2;

  if (nLenghth == 0)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d101      	bne.n	800bffc <_strNoCaseCmp+0x16>
    return 0;
 800bff8:	2300      	movs	r3, #0
 800bffa:	e026      	b.n	800c04a <_strNoCaseCmp+0x64>
  do {
		if ((c1 = _toLower(*s1++)) != (c2 = _toLower(*s2++))) {
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	1c5a      	adds	r2, r3, #1
 800c000:	60fa      	str	r2, [r7, #12]
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	4618      	mov	r0, r3
 800c006:	f7ff ff7a 	bl	800befe <_toLower>
 800c00a:	4603      	mov	r3, r0
 800c00c:	75fb      	strb	r3, [r7, #23]
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	1c5a      	adds	r2, r3, #1
 800c012:	60ba      	str	r2, [r7, #8]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	4618      	mov	r0, r3
 800c018:	f7ff ff71 	bl	800befe <_toLower>
 800c01c:	4603      	mov	r3, r0
 800c01e:	75bb      	strb	r3, [r7, #22]
 800c020:	7dfa      	ldrb	r2, [r7, #23]
 800c022:	7dbb      	ldrb	r3, [r7, #22]
 800c024:	429a      	cmp	r2, r3
 800c026:	d009      	beq.n	800c03c <_strNoCaseCmp+0x56>
			if ((c1 == 0) || (c2 == 0))
 800c028:	7dfb      	ldrb	r3, [r7, #23]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00c      	beq.n	800c048 <_strNoCaseCmp+0x62>
 800c02e:	7dbb      	ldrb	r3, [r7, #22]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d009      	beq.n	800c048 <_strNoCaseCmp+0x62>
					break;
			return ((unsigned char)c1 - (unsigned char)c2);
 800c034:	7dfa      	ldrb	r2, [r7, #23]
 800c036:	7dbb      	ldrb	r3, [r7, #22]
 800c038:	1ad3      	subs	r3, r2, r3
 800c03a:	e006      	b.n	800c04a <_strNoCaseCmp+0x64>
		}
  } while (--nLenghth != 0);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	3b01      	subs	r3, #1
 800c040:	607b      	str	r3, [r7, #4]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1d9      	bne.n	800bffc <_strNoCaseCmp+0x16>
  return 0;
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3718      	adds	r7, #24
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <_svMemCpy>:

static void _svMemCpy(char* dst, char *src, int nLength)
{
 800c052:	b480      	push	{r7}
 800c054:	b085      	sub	sp, #20
 800c056:	af00      	add	r7, sp, #0
 800c058:	60f8      	str	r0, [r7, #12]
 800c05a:	60b9      	str	r1, [r7, #8]
 800c05c:	607a      	str	r2, [r7, #4]
	while (nLength--) {
 800c05e:	e007      	b.n	800c070 <_svMemCpy+0x1e>
		*dst++=*src++;
 800c060:	68ba      	ldr	r2, [r7, #8]
 800c062:	1c53      	adds	r3, r2, #1
 800c064:	60bb      	str	r3, [r7, #8]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	1c59      	adds	r1, r3, #1
 800c06a:	60f9      	str	r1, [r7, #12]
 800c06c:	7812      	ldrb	r2, [r2, #0]
 800c06e:	701a      	strb	r2, [r3, #0]
	while (nLength--) {
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	1e5a      	subs	r2, r3, #1
 800c074:	607a      	str	r2, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d1f2      	bne.n	800c060 <_svMemCpy+0xe>
	}
}
 800c07a:	bf00      	nop
 800c07c:	bf00      	nop
 800c07e:	3714      	adds	r7, #20
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <_svClearLine>:

static void _svClearLine(void)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
	svPutChar('\r');
 800c08e:	4b16      	ldr	r3, [pc, #88]	; (800c0e8 <_svClearLine+0x60>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	200d      	movs	r0, #13
 800c094:	4798      	blx	r3
	// Remove Strings
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800c096:	2300      	movs	r3, #0
 800c098:	607b      	str	r3, [r7, #4]
 800c09a:	e006      	b.n	800c0aa <_svClearLine+0x22>
		svPutChar(' ');
 800c09c:	4b12      	ldr	r3, [pc, #72]	; (800c0e8 <_svClearLine+0x60>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2020      	movs	r0, #32
 800c0a2:	4798      	blx	r3
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	607b      	str	r3, [r7, #4]
 800c0aa:	4b10      	ldr	r3, [pc, #64]	; (800c0ec <_svClearLine+0x64>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a10      	ldr	r2, [pc, #64]	; (800c0f0 <_svClearLine+0x68>)
 800c0b0:	6812      	ldr	r2, [r2, #0]
 800c0b2:	441a      	add	r2, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d8f0      	bhi.n	800c09c <_svClearLine+0x14>
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	603b      	str	r3, [r7, #0]
 800c0be:	e006      	b.n	800c0ce <_svClearLine+0x46>
		svPutChar('\b');
 800c0c0:	4b09      	ldr	r3, [pc, #36]	; (800c0e8 <_svClearLine+0x60>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2008      	movs	r0, #8
 800c0c6:	4798      	blx	r3
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	603b      	str	r3, [r7, #0]
 800c0ce:	4b07      	ldr	r3, [pc, #28]	; (800c0ec <_svClearLine+0x64>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a07      	ldr	r2, [pc, #28]	; (800c0f0 <_svClearLine+0x68>)
 800c0d4:	6812      	ldr	r2, [r2, #0]
 800c0d6:	441a      	add	r2, r3
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d8f0      	bhi.n	800c0c0 <_svClearLine+0x38>
}
 800c0de:	bf00      	nop
 800c0e0:	bf00      	nop
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	20000da0 	.word	0x20000da0
 800c0ec:	20000d90 	.word	0x20000d90
 800c0f0:	20000044 	.word	0x20000044

0800c0f4 <svCLIHandleHistory>:

static void svCLIHandleHistory(CLI_HISTORY_CMD_e eHistoryCmd)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	71fb      	strb	r3, [r7, #7]
	switch (eHistoryCmd) {
 800c0fe:	79fb      	ldrb	r3, [r7, #7]
 800c100:	2b02      	cmp	r3, #2
 800c102:	d03f      	beq.n	800c184 <svCLIHandleHistory+0x90>
 800c104:	2b02      	cmp	r3, #2
 800c106:	dc6f      	bgt.n	800c1e8 <svCLIHandleHistory+0xf4>
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d002      	beq.n	800c112 <svCLIHandleHistory+0x1e>
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d052      	beq.n	800c1b6 <svCLIHandleHistory+0xc2>
			if (snCLIHistoryPos >= snCLIHistoryCount)
				snCLIHistoryPos = 0;
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
			break;
		default:
			break;
 800c110:	e06a      	b.n	800c1e8 <svCLIHandleHistory+0xf4>
			if (snCLIHistoryCount == MAX_CLI_HISTORY_BUFF_MAX) {	// Full
 800c112:	4b38      	ldr	r3, [pc, #224]	; (800c1f4 <svCLIHandleHistory+0x100>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2b03      	cmp	r3, #3
 800c118:	d11c      	bne.n	800c154 <svCLIHandleHistory+0x60>
				for (int i=1;i<snCLIHistoryCount;i++) {
 800c11a:	2301      	movs	r3, #1
 800c11c:	60fb      	str	r3, [r7, #12]
 800c11e:	e00f      	b.n	800c140 <svCLIHandleHistory+0x4c>
	        _svMemCpy(&szCLIHistoryBuffer[i-1][0],&szCLIHistoryBuffer[i][0],MAX_CLI_CHARS);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	3b01      	subs	r3, #1
 800c124:	01db      	lsls	r3, r3, #7
 800c126:	4a34      	ldr	r2, [pc, #208]	; (800c1f8 <svCLIHandleHistory+0x104>)
 800c128:	1898      	adds	r0, r3, r2
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	01db      	lsls	r3, r3, #7
 800c12e:	4a32      	ldr	r2, [pc, #200]	; (800c1f8 <svCLIHandleHistory+0x104>)
 800c130:	4413      	add	r3, r2
 800c132:	2280      	movs	r2, #128	; 0x80
 800c134:	4619      	mov	r1, r3
 800c136:	f7ff ff8c 	bl	800c052 <_svMemCpy>
				for (int i=1;i<snCLIHistoryCount;i++) {
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	3301      	adds	r3, #1
 800c13e:	60fb      	str	r3, [r7, #12]
 800c140:	4b2c      	ldr	r3, [pc, #176]	; (800c1f4 <svCLIHandleHistory+0x100>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	429a      	cmp	r2, r3
 800c148:	dbea      	blt.n	800c120 <svCLIHandleHistory+0x2c>
				snCLIHistoryCount--;
 800c14a:	4b2a      	ldr	r3, [pc, #168]	; (800c1f4 <svCLIHandleHistory+0x100>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	3b01      	subs	r3, #1
 800c150:	4a28      	ldr	r2, [pc, #160]	; (800c1f4 <svCLIHandleHistory+0x100>)
 800c152:	6013      	str	r3, [r2, #0]
			_svMemCpy(&szCLIHistoryBuffer[snCLIHistoryCount][0], &szCLIString[0],MAX_CLI_CHARS);
 800c154:	4b27      	ldr	r3, [pc, #156]	; (800c1f4 <svCLIHandleHistory+0x100>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	01db      	lsls	r3, r3, #7
 800c15a:	4a27      	ldr	r2, [pc, #156]	; (800c1f8 <svCLIHandleHistory+0x104>)
 800c15c:	4413      	add	r3, r2
 800c15e:	2280      	movs	r2, #128	; 0x80
 800c160:	4926      	ldr	r1, [pc, #152]	; (800c1fc <svCLIHandleHistory+0x108>)
 800c162:	4618      	mov	r0, r3
 800c164:	f7ff ff75 	bl	800c052 <_svMemCpy>
			if (snCLIHistoryCount < MAX_CLI_HISTORY_BUFF_MAX)
 800c168:	4b22      	ldr	r3, [pc, #136]	; (800c1f4 <svCLIHandleHistory+0x100>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	dc04      	bgt.n	800c17a <svCLIHandleHistory+0x86>
				snCLIHistoryCount++;
 800c170:	4b20      	ldr	r3, [pc, #128]	; (800c1f4 <svCLIHandleHistory+0x100>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	3301      	adds	r3, #1
 800c176:	4a1f      	ldr	r2, [pc, #124]	; (800c1f4 <svCLIHandleHistory+0x100>)
 800c178:	6013      	str	r3, [r2, #0]
			snCLIHistoryPos = snCLIHistoryCount;
 800c17a:	4b1e      	ldr	r3, [pc, #120]	; (800c1f4 <svCLIHandleHistory+0x100>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a20      	ldr	r2, [pc, #128]	; (800c200 <svCLIHandleHistory+0x10c>)
 800c180:	6013      	str	r3, [r2, #0]
			break;
 800c182:	e032      	b.n	800c1ea <svCLIHandleHistory+0xf6>
			snCLIHistoryPos--;
 800c184:	4b1e      	ldr	r3, [pc, #120]	; (800c200 <svCLIHandleHistory+0x10c>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	3b01      	subs	r3, #1
 800c18a:	4a1d      	ldr	r2, [pc, #116]	; (800c200 <svCLIHandleHistory+0x10c>)
 800c18c:	6013      	str	r3, [r2, #0]
			if (snCLIHistoryPos < 0)
 800c18e:	4b1c      	ldr	r3, [pc, #112]	; (800c200 <svCLIHandleHistory+0x10c>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	da04      	bge.n	800c1a0 <svCLIHandleHistory+0xac>
				snCLIHistoryPos = snCLIHistoryCount - 1;
 800c196:	4b17      	ldr	r3, [pc, #92]	; (800c1f4 <svCLIHandleHistory+0x100>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3b01      	subs	r3, #1
 800c19c:	4a18      	ldr	r2, [pc, #96]	; (800c200 <svCLIHandleHistory+0x10c>)
 800c19e:	6013      	str	r3, [r2, #0]
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800c1a0:	4b17      	ldr	r3, [pc, #92]	; (800c200 <svCLIHandleHistory+0x10c>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	01db      	lsls	r3, r3, #7
 800c1a6:	4a14      	ldr	r2, [pc, #80]	; (800c1f8 <svCLIHandleHistory+0x104>)
 800c1a8:	4413      	add	r3, r2
 800c1aa:	2280      	movs	r2, #128	; 0x80
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	4813      	ldr	r0, [pc, #76]	; (800c1fc <svCLIHandleHistory+0x108>)
 800c1b0:	f7ff ff4f 	bl	800c052 <_svMemCpy>
			break;
 800c1b4:	e019      	b.n	800c1ea <svCLIHandleHistory+0xf6>
			snCLIHistoryPos++;
 800c1b6:	4b12      	ldr	r3, [pc, #72]	; (800c200 <svCLIHandleHistory+0x10c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	4a10      	ldr	r2, [pc, #64]	; (800c200 <svCLIHandleHistory+0x10c>)
 800c1be:	6013      	str	r3, [r2, #0]
			if (snCLIHistoryPos >= snCLIHistoryCount)
 800c1c0:	4b0f      	ldr	r3, [pc, #60]	; (800c200 <svCLIHandleHistory+0x10c>)
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	4b0b      	ldr	r3, [pc, #44]	; (800c1f4 <svCLIHandleHistory+0x100>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	db02      	blt.n	800c1d2 <svCLIHandleHistory+0xde>
				snCLIHistoryPos = 0;
 800c1cc:	4b0c      	ldr	r3, [pc, #48]	; (800c200 <svCLIHandleHistory+0x10c>)
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	601a      	str	r2, [r3, #0]
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800c1d2:	4b0b      	ldr	r3, [pc, #44]	; (800c200 <svCLIHandleHistory+0x10c>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	01db      	lsls	r3, r3, #7
 800c1d8:	4a07      	ldr	r2, [pc, #28]	; (800c1f8 <svCLIHandleHistory+0x104>)
 800c1da:	4413      	add	r3, r2
 800c1dc:	2280      	movs	r2, #128	; 0x80
 800c1de:	4619      	mov	r1, r3
 800c1e0:	4806      	ldr	r0, [pc, #24]	; (800c1fc <svCLIHandleHistory+0x108>)
 800c1e2:	f7ff ff36 	bl	800c052 <_svMemCpy>
			break;
 800c1e6:	e000      	b.n	800c1ea <svCLIHandleHistory+0xf6>
			break;
 800c1e8:	bf00      	nop
	}
}
 800c1ea:	bf00      	nop
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	20000d88 	.word	0x20000d88
 800c1f8:	20000c08 	.word	0x20000c08
 800c1fc:	20000b88 	.word	0x20000b88
 800c200:	20000d8c 	.word	0x20000d8c

0800c204 <svCLI_Search>:

static SVCLI_t* svCLI_Search(char **line)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b086      	sub	sp, #24
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
	SVCLI_t* pCLIEntry;
	char* pCurrent = *line;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	613b      	str	r3, [r7, #16]
  // strip off leading spaces
  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 800c212:	e002      	b.n	800c21a <svCLI_Search+0x16>
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	3301      	adds	r3, #1
 800c218:	613b      	str	r3, [r7, #16]
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d003      	beq.n	800c22a <svCLI_Search+0x26>
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	2b20      	cmp	r3, #32
 800c228:	d0f4      	beq.n	800c214 <svCLI_Search+0x10>
	for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800c22a:	4b22      	ldr	r3, [pc, #136]	; (800c2b4 <svCLI_Search+0xb0>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	617b      	str	r3, [r7, #20]
 800c230:	e035      	b.n	800c29e <svCLI_Search+0x9a>
		int nCmdLength = _strlenOffspace(pCLIEntry->szCmd);
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4618      	mov	r0, r3
 800c238:	f7ff fe34 	bl	800bea4 <_strlenOffspace>
 800c23c:	60f8      	str	r0, [r7, #12]
		int nArgLength = _strlenOffspace(pCurrent);
 800c23e:	6938      	ldr	r0, [r7, #16]
 800c240:	f7ff fe30 	bl	800bea4 <_strlenOffspace>
 800c244:	60b8      	str	r0, [r7, #8]
		pCurrent[nArgLength] = 0;	// NULL termination just after command for comparing
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	4413      	add	r3, r2
 800c24c:	2200      	movs	r2, #0
 800c24e:	701a      	strb	r2, [r3, #0]
		if (nCmdLength >= nArgLength) {
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	429a      	cmp	r2, r3
 800c256:	db1f      	blt.n	800c298 <svCLI_Search+0x94>
			if (_strNoCaseCmp(pCurrent, pCLIEntry->szCmd, nCmdLength) == 0) {	// Partial Command OK !!
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	4619      	mov	r1, r3
 800c260:	6938      	ldr	r0, [r7, #16]
 800c262:	f7ff fec0 	bl	800bfe6 <_strNoCaseCmp>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d115      	bne.n	800c298 <svCLI_Search+0x94>
				pCurrent += (nArgLength + 1);
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	3301      	adds	r3, #1
 800c270:	693a      	ldr	r2, [r7, #16]
 800c272:	4413      	add	r3, r2
 800c274:	613b      	str	r3, [r7, #16]
			  // strip off trailing spaces
			  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 800c276:	e002      	b.n	800c27e <svCLI_Search+0x7a>
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	3301      	adds	r3, #1
 800c27c:	613b      	str	r3, [r7, #16]
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d003      	beq.n	800c28e <svCLI_Search+0x8a>
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	2b20      	cmp	r3, #32
 800c28c:	d0f4      	beq.n	800c278 <svCLI_Search+0x74>
				*line = pCurrent;		// remove command & return
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	601a      	str	r2, [r3, #0]
				
				return pCLIEntry;
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	e008      	b.n	800c2aa <svCLI_Search+0xa6>
	for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	330c      	adds	r3, #12
 800c29c:	617b      	str	r3, [r7, #20]
 800c29e:	4b06      	ldr	r3, [pc, #24]	; (800c2b8 <svCLI_Search+0xb4>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	697a      	ldr	r2, [r7, #20]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d3c4      	bcc.n	800c232 <svCLI_Search+0x2e>
			}
		}
	}
	return NULL;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3718      	adds	r7, #24
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20000d94 	.word	0x20000d94
 800c2b8:	20000d98 	.word	0x20000d98

0800c2bc <svCLI_ParseNumber>:

int svCLI_ParseNumber(char *s, unsigned int *val, char **res, char *delimiter)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b08a      	sub	sp, #40	; 0x28
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
 800c2c8:	603b      	str	r3, [r7, #0]
  int first = 1;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	627b      	str	r3, [r7, #36]	; 0x24
  int radix = 10;
 800c2ce:	230a      	movs	r3, #10
 800c2d0:	623b      	str	r3, [r7, #32]
  char c;
  unsigned long result = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	61fb      	str	r3, [r7, #28]
  int digit;
		// strip off leading spaces
    while (*s == ' ') s++;
 800c2d6:	e002      	b.n	800c2de <svCLI_ParseNumber+0x22>
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	60fb      	str	r3, [r7, #12]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	2b20      	cmp	r3, #32
 800c2e4:	d0f8      	beq.n	800c2d8 <svCLI_ParseNumber+0x1c>
		if (*s == 0)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d14d      	bne.n	800c38a <svCLI_ParseNumber+0xce>
			return 0;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	e05b      	b.n	800c3aa <svCLI_ParseNumber+0xee>
    while (*s) {
      if (first && (s[0] == '0') && (_toLower(s[1]) == 'x')) {
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d011      	beq.n	800c31c <svCLI_ParseNumber+0x60>
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	2b30      	cmp	r3, #48	; 0x30
 800c2fe:	d10d      	bne.n	800c31c <svCLI_ParseNumber+0x60>
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	3301      	adds	r3, #1
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	4618      	mov	r0, r3
 800c308:	f7ff fdf9 	bl	800befe <_toLower>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b78      	cmp	r3, #120	; 0x78
 800c310:	d104      	bne.n	800c31c <svCLI_ParseNumber+0x60>
        radix = 16;
 800c312:	2310      	movs	r3, #16
 800c314:	623b      	str	r3, [r7, #32]
        s += 2;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	3302      	adds	r3, #2
 800c31a:	60fb      	str	r3, [r7, #12]
      }
      first = 0;
 800c31c:	2300      	movs	r3, #0
 800c31e:	627b      	str	r3, [r7, #36]	; 0x24
      c = *s++;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	1c5a      	adds	r2, r3, #1
 800c324:	60fa      	str	r2, [r7, #12]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	75fb      	strb	r3, [r7, #23]
      if (_isHex(c) && ((digit = _fromHex(c)) < radix)) {
 800c32a:	7dfb      	ldrb	r3, [r7, #23]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7ff fe0f 	bl	800bf50 <_isHex>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d010      	beq.n	800c35a <svCLI_ParseNumber+0x9e>
 800c338:	7dfb      	ldrb	r3, [r7, #23]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7ff fe28 	bl	800bf90 <_fromHex>
 800c340:	6138      	str	r0, [r7, #16]
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	6a3b      	ldr	r3, [r7, #32]
 800c346:	429a      	cmp	r2, r3
 800c348:	da07      	bge.n	800c35a <svCLI_ParseNumber+0x9e>
        // Valid digit
        result = (result * radix) + digit;
 800c34a:	6a3b      	ldr	r3, [r7, #32]
 800c34c:	69fa      	ldr	r2, [r7, #28]
 800c34e:	fb03 f202 	mul.w	r2, r3, r2
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	4413      	add	r3, r2
 800c356:	61fb      	str	r3, [r7, #28]
 800c358:	e017      	b.n	800c38a <svCLI_ParseNumber+0xce>
      } 
			else {
        if (delimiter != (char *)0) {
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d012      	beq.n	800c386 <svCLI_ParseNumber+0xca>
          // See if this character is one of the delimiters
          char *dp = delimiter;
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	61bb      	str	r3, [r7, #24]
          while (*dp && (c != *dp)) dp++;
 800c364:	e002      	b.n	800c36c <svCLI_ParseNumber+0xb0>
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	3301      	adds	r3, #1
 800c36a:	61bb      	str	r3, [r7, #24]
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d004      	beq.n	800c37e <svCLI_ParseNumber+0xc2>
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	7dfa      	ldrb	r2, [r7, #23]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d1f3      	bne.n	800c366 <svCLI_ParseNumber+0xaa>
          if (*dp) break;  // Found a good delimiter
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d106      	bne.n	800c394 <svCLI_ParseNumber+0xd8>
        }
        return 0;  // invalid number
 800c386:	2300      	movs	r3, #0
 800c388:	e00f      	b.n	800c3aa <svCLI_ParseNumber+0xee>
    while (*s) {
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d1af      	bne.n	800c2f2 <svCLI_ParseNumber+0x36>
 800c392:	e000      	b.n	800c396 <svCLI_ParseNumber+0xda>
          if (*dp) break;  // Found a good delimiter
 800c394:	bf00      	nop
      }
    }
    *val = result;
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	69fa      	ldr	r2, [r7, #28]
 800c39a:	601a      	str	r2, [r3, #0]
    if (res != (char **)0) {
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d002      	beq.n	800c3a8 <svCLI_ParseNumber+0xec>
      *res = s;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800c3a8:	2301      	movs	r3, #1
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3728      	adds	r7, #40	; 0x28
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
	...

0800c3b4 <svCLI_ParsenExecute>:

static void svCLI_ParsenExecute()
{
 800c3b4:	b590      	push	{r4, r7, lr}
 800c3b6:	b089      	sub	sp, #36	; 0x24
 800c3b8:	af00      	add	r7, sp, #0
	if (s_bPwdOK == FALSE) {	// Input Password
 800c3ba:	4b3a      	ldr	r3, [pc, #232]	; (800c4a4 <svCLI_ParsenExecute+0xf0>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d120      	bne.n	800c404 <svCLI_ParsenExecute+0x50>
		if (strcmp(szCLIString, DEFAULT_PASSWORD) == 0) {
 800c3c2:	4939      	ldr	r1, [pc, #228]	; (800c4a8 <svCLI_ParsenExecute+0xf4>)
 800c3c4:	4839      	ldr	r0, [pc, #228]	; (800c4ac <svCLI_ParsenExecute+0xf8>)
 800c3c6:	f7f3 ff63 	bl	8000290 <strcmp>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d115      	bne.n	800c3fc <svCLI_ParsenExecute+0x48>
			s_bPwdOK = TRUE;
 800c3d0:	4b34      	ldr	r3, [pc, #208]	; (800c4a4 <svCLI_ParsenExecute+0xf0>)
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	601a      	str	r2, [r3, #0]
			svCLI_Printf("Welcome !!\r\n");
 800c3d6:	4836      	ldr	r0, [pc, #216]	; (800c4b0 <svCLI_ParsenExecute+0xfc>)
 800c3d8:	f7ff fcc8 	bl	800bd6c <svCLI_Printf>
			strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800c3dc:	4b35      	ldr	r3, [pc, #212]	; (800c4b4 <svCLI_ParsenExecute+0x100>)
 800c3de:	4a36      	ldr	r2, [pc, #216]	; (800c4b8 <svCLI_ParsenExecute+0x104>)
 800c3e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c3e4:	6018      	str	r0, [r3, #0]
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	8019      	strh	r1, [r3, #0]
 800c3ea:	3302      	adds	r3, #2
 800c3ec:	0c0a      	lsrs	r2, r1, #16
 800c3ee:	701a      	strb	r2, [r3, #0]
			snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800c3f0:	4b32      	ldr	r3, [pc, #200]	; (800c4bc <svCLI_ParsenExecute+0x108>)
 800c3f2:	2206      	movs	r2, #6
 800c3f4:	601a      	str	r2, [r3, #0]
			svCLI_ShowHelp();
 800c3f6:	f7ff fce5 	bl	800bdc4 <svCLI_ShowHelp>
		}
		else {
			svCLI_Printf("Invalid Password !!\r\n");
		}
		return;
 800c3fa:	e04f      	b.n	800c49c <svCLI_ParsenExecute+0xe8>
			svCLI_Printf("Invalid Password !!\r\n");
 800c3fc:	4830      	ldr	r0, [pc, #192]	; (800c4c0 <svCLI_ParsenExecute+0x10c>)
 800c3fe:	f7ff fcb5 	bl	800bd6c <svCLI_Printf>
		return;
 800c402:	e04b      	b.n	800c49c <svCLI_ParsenExecute+0xe8>
	}
	SVCLI_t* pCLIEntry;
	if (sCLITableBegin == sCLITablEnd) {
 800c404:	4b2f      	ldr	r3, [pc, #188]	; (800c4c4 <svCLI_ParsenExecute+0x110>)
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	4b2f      	ldr	r3, [pc, #188]	; (800c4c8 <svCLI_ParsenExecute+0x114>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d103      	bne.n	800c418 <svCLI_ParsenExecute+0x64>
		svCLI_Printf("No CLI Entries !!!\r\n");
 800c410:	482e      	ldr	r0, [pc, #184]	; (800c4cc <svCLI_ParsenExecute+0x118>)
 800c412:	f7ff fcab 	bl	800bd6c <svCLI_Printf>
		return;
 800c416:	e041      	b.n	800c49c <svCLI_ParsenExecute+0xe8>
	}
	char* pLine = szCLIString;
 800c418:	4b24      	ldr	r3, [pc, #144]	; (800c4ac <svCLI_ParsenExecute+0xf8>)
 800c41a:	613b      	str	r3, [r7, #16]
	pCLIEntry = svCLI_Search(&pLine);
 800c41c:	f107 0310 	add.w	r3, r7, #16
 800c420:	4618      	mov	r0, r3
 800c422:	f7ff feef 	bl	800c204 <svCLI_Search>
 800c426:	61b8      	str	r0, [r7, #24]
	if (pCLIEntry) {
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d033      	beq.n	800c496 <svCLI_ParsenExecute+0xe2>
		// Parse more for CLI function
		unsigned int nFirst, nSecond, nCount;
		nCount = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	61fb      	str	r3, [r7, #28]
		nFirst = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	60fb      	str	r3, [r7, #12]
		nSecond = 0;
 800c436:	2300      	movs	r3, #0
 800c438:	60bb      	str	r3, [r7, #8]
		char* pParseLine = pLine;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	617b      	str	r3, [r7, #20]
		char delim[3] = ", ";
 800c43e:	4a24      	ldr	r2, [pc, #144]	; (800c4d0 <svCLI_ParsenExecute+0x11c>)
 800c440:	1d3b      	adds	r3, r7, #4
 800c442:	6812      	ldr	r2, [r2, #0]
 800c444:	4611      	mov	r1, r2
 800c446:	8019      	strh	r1, [r3, #0]
 800c448:	3302      	adds	r3, #2
 800c44a:	0c12      	lsrs	r2, r2, #16
 800c44c:	701a      	strb	r2, [r3, #0]
		if (svCLI_ParseNumber(pLine, &nFirst, &pLine, delim)) {
 800c44e:	6938      	ldr	r0, [r7, #16]
 800c450:	1d3b      	adds	r3, r7, #4
 800c452:	f107 0210 	add.w	r2, r7, #16
 800c456:	f107 010c 	add.w	r1, r7, #12
 800c45a:	f7ff ff2f 	bl	800c2bc <svCLI_ParseNumber>
 800c45e:	4603      	mov	r3, r0
 800c460:	2b00      	cmp	r3, #0
 800c462:	d010      	beq.n	800c486 <svCLI_ParsenExecute+0xd2>
			nCount++;
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	3301      	adds	r3, #1
 800c468:	61fb      	str	r3, [r7, #28]
			if (svCLI_ParseNumber(pLine, &nSecond, &pLine, delim)) {
 800c46a:	6938      	ldr	r0, [r7, #16]
 800c46c:	1d3b      	adds	r3, r7, #4
 800c46e:	f107 0210 	add.w	r2, r7, #16
 800c472:	f107 0108 	add.w	r1, r7, #8
 800c476:	f7ff ff21 	bl	800c2bc <svCLI_ParseNumber>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d002      	beq.n	800c486 <svCLI_ParsenExecute+0xd2>
				nCount++;
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	3301      	adds	r3, #1
 800c484:	61fb      	str	r3, [r7, #28]
			}
		}
		pCLIEntry->func(pParseLine,nCount,nFirst,nSecond);
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	689c      	ldr	r4, [r3, #8]
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	69f9      	ldr	r1, [r7, #28]
 800c490:	6978      	ldr	r0, [r7, #20]
 800c492:	47a0      	blx	r4
 800c494:	e002      	b.n	800c49c <svCLI_ParsenExecute+0xe8>
	}
	else {
		svCLI_Printf("CLI command Not Found !! - Press Help\r\n");
 800c496:	480f      	ldr	r0, [pc, #60]	; (800c4d4 <svCLI_ParsenExecute+0x120>)
 800c498:	f7ff fc68 	bl	800bd6c <svCLI_Printf>
	}
}
 800c49c:	3724      	adds	r7, #36	; 0x24
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd90      	pop	{r4, r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	20000034 	.word	0x20000034
 800c4a8:	0800fe08 	.word	0x0800fe08
 800c4ac:	20000b88 	.word	0x20000b88
 800c4b0:	0800fe14 	.word	0x0800fe14
 800c4b4:	20000038 	.word	0x20000038
 800c4b8:	0800fdb0 	.word	0x0800fdb0
 800c4bc:	20000044 	.word	0x20000044
 800c4c0:	0800fe24 	.word	0x0800fe24
 800c4c4:	20000d94 	.word	0x20000d94
 800c4c8:	20000d98 	.word	0x20000d98
 800c4cc:	0800fe3c 	.word	0x0800fe3c
 800c4d0:	0800fe7c 	.word	0x0800fe7c
 800c4d4:	0800fe54 	.word	0x0800fe54

0800c4d8 <svCLI_SetBypassFtn>:

// hellosmk 210225 added
void svCLI_SetBypassFtn(SVCLI_BYPASS_FUNC pfnBypass, char* szPrompt, char szExit, BOOL bEnter)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	603b      	str	r3, [r7, #0]
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	71fb      	strb	r3, [r7, #7]
	if ((pfnBypass == NULL) || (szPrompt == NULL) || (szExit == NULL)) {
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d005      	beq.n	800c4fa <svCLI_SetBypassFtn+0x22>
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d002      	beq.n	800c4fa <svCLI_SetBypassFtn+0x22>
 800c4f4:	79fb      	ldrb	r3, [r7, #7]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d136      	bne.n	800c568 <svCLI_SetBypassFtn+0x90>
		if (svBypass == NULL) {
 800c4fa:	4b28      	ldr	r3, [pc, #160]	; (800c59c <svCLI_SetBypassFtn+0xc4>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d048      	beq.n	800c594 <svCLI_SetBypassFtn+0xbc>
			// Nothing to do..
			return;
		}
		strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800c502:	4b27      	ldr	r3, [pc, #156]	; (800c5a0 <svCLI_SetBypassFtn+0xc8>)
 800c504:	4a27      	ldr	r2, [pc, #156]	; (800c5a4 <svCLI_SetBypassFtn+0xcc>)
 800c506:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c50a:	6018      	str	r0, [r3, #0]
 800c50c:	3304      	adds	r3, #4
 800c50e:	8019      	strh	r1, [r3, #0]
 800c510:	3302      	adds	r3, #2
 800c512:	0c0a      	lsrs	r2, r1, #16
 800c514:	701a      	strb	r2, [r3, #0]
		snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800c516:	4b24      	ldr	r3, [pc, #144]	; (800c5a8 <svCLI_SetBypassFtn+0xd0>)
 800c518:	2206      	movs	r2, #6
 800c51a:	601a      	str	r2, [r3, #0]
		svBypass = NULL;
 800c51c:	4b1f      	ldr	r3, [pc, #124]	; (800c59c <svCLI_SetBypassFtn+0xc4>)
 800c51e:	2200      	movs	r2, #0
 800c520:	601a      	str	r2, [r3, #0]

		svExit = NULL;
 800c522:	4b22      	ldr	r3, [pc, #136]	; (800c5ac <svCLI_SetBypassFtn+0xd4>)
 800c524:	2200      	movs	r2, #0
 800c526:	701a      	strb	r2, [r3, #0]
		sbEnter = FALSE;
 800c528:	4b21      	ldr	r3, [pc, #132]	; (800c5b0 <svCLI_SetBypassFtn+0xd8>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	601a      	str	r2, [r3, #0]
		
		scntCLIString = 0;	// Clean Up Char
 800c52e:	4b21      	ldr	r3, [pc, #132]	; (800c5b4 <svCLI_SetBypassFtn+0xdc>)
 800c530:	2200      	movs	r2, #0
 800c532:	601a      	str	r2, [r3, #0]
		// clean up line string
		for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c534:	2300      	movs	r3, #0
 800c536:	617b      	str	r3, [r7, #20]
 800c538:	e007      	b.n	800c54a <svCLI_SetBypassFtn+0x72>
			szCLIString[i] = '\0';
 800c53a:	4a1f      	ldr	r2, [pc, #124]	; (800c5b8 <svCLI_SetBypassFtn+0xe0>)
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	4413      	add	r3, r2
 800c540:	2200      	movs	r2, #0
 800c542:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	3301      	adds	r3, #1
 800c548:	617b      	str	r3, [r7, #20]
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	2b7f      	cmp	r3, #127	; 0x7f
 800c54e:	ddf4      	ble.n	800c53a <svCLI_SetBypassFtn+0x62>
		}
		svCLI_Printf("\r\nExit Bypass Mode\r\n%s", szCLI_PROMPT);
 800c550:	4913      	ldr	r1, [pc, #76]	; (800c5a0 <svCLI_SetBypassFtn+0xc8>)
 800c552:	481a      	ldr	r0, [pc, #104]	; (800c5bc <svCLI_SetBypassFtn+0xe4>)
 800c554:	f7ff fc0a 	bl	800bd6c <svCLI_Printf>

		if (svCommit) {
 800c558:	4b19      	ldr	r3, [pc, #100]	; (800c5c0 <svCLI_SetBypassFtn+0xe8>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d01a      	beq.n	800c596 <svCLI_SetBypassFtn+0xbe>
			svCommit();
 800c560:	4b17      	ldr	r3, [pc, #92]	; (800c5c0 <svCLI_SetBypassFtn+0xe8>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4798      	blx	r3
		if (svCommit) {
 800c566:	e016      	b.n	800c596 <svCLI_SetBypassFtn+0xbe>
		}
	}
	else {
		strncpy(szCLI_PROMPT, szPrompt, sizeof(szCLI_PROMPT) - 1);
 800c568:	2209      	movs	r2, #9
 800c56a:	68b9      	ldr	r1, [r7, #8]
 800c56c:	480c      	ldr	r0, [pc, #48]	; (800c5a0 <svCLI_SetBypassFtn+0xc8>)
 800c56e:	f002 ffe9 	bl	800f544 <strncpy>
		snCLI_PROMPT_LENGTH = strlen(szCLI_PROMPT);
 800c572:	480b      	ldr	r0, [pc, #44]	; (800c5a0 <svCLI_SetBypassFtn+0xc8>)
 800c574:	f7f3 fe96 	bl	80002a4 <strlen>
 800c578:	4603      	mov	r3, r0
 800c57a:	461a      	mov	r2, r3
 800c57c:	4b0a      	ldr	r3, [pc, #40]	; (800c5a8 <svCLI_SetBypassFtn+0xd0>)
 800c57e:	601a      	str	r2, [r3, #0]
		svBypass = pfnBypass;
 800c580:	4a06      	ldr	r2, [pc, #24]	; (800c59c <svCLI_SetBypassFtn+0xc4>)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6013      	str	r3, [r2, #0]
		svExit = szExit;
 800c586:	4a09      	ldr	r2, [pc, #36]	; (800c5ac <svCLI_SetBypassFtn+0xd4>)
 800c588:	79fb      	ldrb	r3, [r7, #7]
 800c58a:	7013      	strb	r3, [r2, #0]
		sbEnter = bEnter;
 800c58c:	4a08      	ldr	r2, [pc, #32]	; (800c5b0 <svCLI_SetBypassFtn+0xd8>)
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	6013      	str	r3, [r2, #0]
 800c592:	e000      	b.n	800c596 <svCLI_SetBypassFtn+0xbe>
			return;
 800c594:	bf00      	nop
	}
}
 800c596:	3718      	adds	r7, #24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	20000da8 	.word	0x20000da8
 800c5a0:	20000038 	.word	0x20000038
 800c5a4:	0800fdb0 	.word	0x0800fdb0
 800c5a8:	20000044 	.word	0x20000044
 800c5ac:	20000dac 	.word	0x20000dac
 800c5b0:	20000db0 	.word	0x20000db0
 800c5b4:	20000d90 	.word	0x20000d90
 800c5b8:	20000b88 	.word	0x20000b88
 800c5bc:	0800fe80 	.word	0x0800fe80
 800c5c0:	20000da4 	.word	0x20000da4

0800c5c4 <svCLI_Handler>:

void svCLI_Handler(void)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
	if (sbFirst) {
		svCLI_Printf("\r\n%s", szCLI_PROMPT);
		sbFirst = 0;
	}
#endif	
	if (svGetChar) {
 800c5ca:	4b92      	ldr	r3, [pc, #584]	; (800c814 <svCLI_Handler+0x250>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f000 8114 	beq.w	800c7fc <svCLI_Handler+0x238>
		char bSkipPrompt = 0;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	73fb      	strb	r3, [r7, #15]
		char szChar = svGetChar();
 800c5d8:	4b8e      	ldr	r3, [pc, #568]	; (800c814 <svCLI_Handler+0x250>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4798      	blx	r3
 800c5de:	4603      	mov	r3, r0
 800c5e0:	71fb      	strb	r3, [r7, #7]
		if ((szChar != 0) && (szChar != '\n')) {
 800c5e2:	79fb      	ldrb	r3, [r7, #7]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f000 8109 	beq.w	800c7fc <svCLI_Handler+0x238>
 800c5ea:	79fb      	ldrb	r3, [r7, #7]
 800c5ec:	2b0a      	cmp	r3, #10
 800c5ee:	f000 8105 	beq.w	800c7fc <svCLI_Handler+0x238>
			if (szChar == '\r') {
 800c5f2:	79fb      	ldrb	r3, [r7, #7]
 800c5f4:	2b0d      	cmp	r3, #13
 800c5f6:	d154      	bne.n	800c6a2 <svCLI_Handler+0xde>
				sbInEsc = 0;
 800c5f8:	4b87      	ldr	r3, [pc, #540]	; (800c818 <svCLI_Handler+0x254>)
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	701a      	strb	r2, [r3, #0]
				svCLI_Printf("\r\n");
 800c5fe:	4887      	ldr	r0, [pc, #540]	; (800c81c <svCLI_Handler+0x258>)
 800c600:	f7ff fbb4 	bl	800bd6c <svCLI_Printf>
				if (scntCLIString > 0) {
 800c604:	4b86      	ldr	r3, [pc, #536]	; (800c820 <svCLI_Handler+0x25c>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d031      	beq.n	800c670 <svCLI_Handler+0xac>
					// Parse and Execute
					szCLIString[scntCLIString] = '\0';	// NULL Termination
 800c60c:	4b84      	ldr	r3, [pc, #528]	; (800c820 <svCLI_Handler+0x25c>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a84      	ldr	r2, [pc, #528]	; (800c824 <svCLI_Handler+0x260>)
 800c612:	2100      	movs	r1, #0
 800c614:	54d1      	strb	r1, [r2, r3]
					// Save to history Buffer
					svCLIHandleHistory(CLI_HISTORY_ADD);					
 800c616:	2000      	movs	r0, #0
 800c618:	f7ff fd6c 	bl	800c0f4 <svCLIHandleHistory>
					// Call Parser
					if (svBypass) {	// hellosmk 210225 added
 800c61c:	4b82      	ldr	r3, [pc, #520]	; (800c828 <svCLI_Handler+0x264>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d011      	beq.n	800c648 <svCLI_Handler+0x84>
						bSkipPrompt = 1;
 800c624:	2301      	movs	r3, #1
 800c626:	73fb      	strb	r3, [r7, #15]
						szCLIString[scntCLIString] = '\r';
 800c628:	4b7d      	ldr	r3, [pc, #500]	; (800c820 <svCLI_Handler+0x25c>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a7d      	ldr	r2, [pc, #500]	; (800c824 <svCLI_Handler+0x260>)
 800c62e:	210d      	movs	r1, #13
 800c630:	54d1      	strb	r1, [r2, r3]
						szCLIString[scntCLIString+1] = '\0';
 800c632:	4b7b      	ldr	r3, [pc, #492]	; (800c820 <svCLI_Handler+0x25c>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	3301      	adds	r3, #1
 800c638:	4a7a      	ldr	r2, [pc, #488]	; (800c824 <svCLI_Handler+0x260>)
 800c63a:	2100      	movs	r1, #0
 800c63c:	54d1      	strb	r1, [r2, r3]
						svBypass(szCLIString);
 800c63e:	4b7a      	ldr	r3, [pc, #488]	; (800c828 <svCLI_Handler+0x264>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4878      	ldr	r0, [pc, #480]	; (800c824 <svCLI_Handler+0x260>)
 800c644:	4798      	blx	r3
 800c646:	e001      	b.n	800c64c <svCLI_Handler+0x88>
					}
					else {
						svCLI_ParsenExecute();
 800c648:	f7ff feb4 	bl	800c3b4 <svCLI_ParsenExecute>
					}
					scntCLIString = 0;	// Clean Up Char
 800c64c:	4b74      	ldr	r3, [pc, #464]	; (800c820 <svCLI_Handler+0x25c>)
 800c64e:	2200      	movs	r2, #0
 800c650:	601a      	str	r2, [r3, #0]
					// clean up line string
					for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c652:	2300      	movs	r3, #0
 800c654:	60bb      	str	r3, [r7, #8]
 800c656:	e007      	b.n	800c668 <svCLI_Handler+0xa4>
						szCLIString[i] = '\0';
 800c658:	4a72      	ldr	r2, [pc, #456]	; (800c824 <svCLI_Handler+0x260>)
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	4413      	add	r3, r2
 800c65e:	2200      	movs	r2, #0
 800c660:	701a      	strb	r2, [r3, #0]
					for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	3301      	adds	r3, #1
 800c666:	60bb      	str	r3, [r7, #8]
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	2b7f      	cmp	r3, #127	; 0x7f
 800c66c:	ddf4      	ble.n	800c658 <svCLI_Handler+0x94>
 800c66e:	e010      	b.n	800c692 <svCLI_Handler+0xce>
					}
				}
				else if (sbEnter && svBypass) {
 800c670:	4b6e      	ldr	r3, [pc, #440]	; (800c82c <svCLI_Handler+0x268>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00c      	beq.n	800c692 <svCLI_Handler+0xce>
 800c678:	4b6b      	ldr	r3, [pc, #428]	; (800c828 <svCLI_Handler+0x264>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d008      	beq.n	800c692 <svCLI_Handler+0xce>
					const char cszRet[2] = {'\n',0};
 800c680:	230a      	movs	r3, #10
 800c682:	80bb      	strh	r3, [r7, #4]
					svBypass((char*)cszRet);
 800c684:	4b68      	ldr	r3, [pc, #416]	; (800c828 <svCLI_Handler+0x264>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	1d3a      	adds	r2, r7, #4
 800c68a:	4610      	mov	r0, r2
 800c68c:	4798      	blx	r3
					bSkipPrompt = 1;
 800c68e:	2301      	movs	r3, #1
 800c690:	73fb      	strb	r3, [r7, #15]
				}
				
				if (bSkipPrompt == 0) {
 800c692:	7bfb      	ldrb	r3, [r7, #15]
 800c694:	2b00      	cmp	r3, #0
 800c696:	f040 80b1 	bne.w	800c7fc <svCLI_Handler+0x238>
					svCLI_Printf(szCLI_PROMPT);
 800c69a:	4865      	ldr	r0, [pc, #404]	; (800c830 <svCLI_Handler+0x26c>)
 800c69c:	f7ff fb66 	bl	800bd6c <svCLI_Printf>
 800c6a0:	e0ac      	b.n	800c7fc <svCLI_Handler+0x238>
				}
			}
			else if (svBypass && (szChar == svExit)) {
 800c6a2:	4b61      	ldr	r3, [pc, #388]	; (800c828 <svCLI_Handler+0x264>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d019      	beq.n	800c6de <svCLI_Handler+0x11a>
 800c6aa:	4b62      	ldr	r3, [pc, #392]	; (800c834 <svCLI_Handler+0x270>)
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	79fa      	ldrb	r2, [r7, #7]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d114      	bne.n	800c6de <svCLI_Handler+0x11a>
				// Exit Bypass mode
				if (0x11 == svExit) {
 800c6b4:	4b5f      	ldr	r3, [pc, #380]	; (800c834 <svCLI_Handler+0x270>)
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	2b11      	cmp	r3, #17
 800c6ba:	d102      	bne.n	800c6c2 <svCLI_Handler+0xfe>
					svCLI_Printf("^Q");
 800c6bc:	485e      	ldr	r0, [pc, #376]	; (800c838 <svCLI_Handler+0x274>)
 800c6be:	f7ff fb55 	bl	800bd6c <svCLI_Printf>
				}
				svBypass(NULL);	// Notify Exit !!
 800c6c2:	4b59      	ldr	r3, [pc, #356]	; (800c828 <svCLI_Handler+0x264>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	4798      	blx	r3
				svCLI_SetBypassFtn(NULL,NULL,NULL,FALSE);
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	2000      	movs	r0, #0
 800c6d2:	f7ff ff01 	bl	800c4d8 <svCLI_SetBypassFtn>
				sbInEsc = 0;
 800c6d6:	4b50      	ldr	r3, [pc, #320]	; (800c818 <svCLI_Handler+0x254>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	701a      	strb	r2, [r3, #0]
 800c6dc:	e08e      	b.n	800c7fc <svCLI_Handler+0x238>
			}
			else if (svBypass && (szChar == 0X1A)) {		// Ctrl+Z
 800c6de:	4b52      	ldr	r3, [pc, #328]	; (800c828 <svCLI_Handler+0x264>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d014      	beq.n	800c710 <svCLI_Handler+0x14c>
 800c6e6:	79fb      	ldrb	r3, [r7, #7]
 800c6e8:	2b1a      	cmp	r3, #26
 800c6ea:	d111      	bne.n	800c710 <svCLI_Handler+0x14c>
				bSkipPrompt = 1;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	73fb      	strb	r3, [r7, #15]
				szCLIString[scntCLIString] = 0X1A;	//Ctrl+z
 800c6f0:	4b4b      	ldr	r3, [pc, #300]	; (800c820 <svCLI_Handler+0x25c>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a4b      	ldr	r2, [pc, #300]	; (800c824 <svCLI_Handler+0x260>)
 800c6f6:	211a      	movs	r1, #26
 800c6f8:	54d1      	strb	r1, [r2, r3]
				szCLIString[scntCLIString+1] = '\0';	// NULL Termination
 800c6fa:	4b49      	ldr	r3, [pc, #292]	; (800c820 <svCLI_Handler+0x25c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	3301      	adds	r3, #1
 800c700:	4a48      	ldr	r2, [pc, #288]	; (800c824 <svCLI_Handler+0x260>)
 800c702:	2100      	movs	r1, #0
 800c704:	54d1      	strb	r1, [r2, r3]
				svBypass(szCLIString);
 800c706:	4b48      	ldr	r3, [pc, #288]	; (800c828 <svCLI_Handler+0x264>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4846      	ldr	r0, [pc, #280]	; (800c824 <svCLI_Handler+0x260>)
 800c70c:	4798      	blx	r3
 800c70e:	e075      	b.n	800c7fc <svCLI_Handler+0x238>
			}
			else {
				if (szChar == '\b')	{ // Back space
 800c710:	79fb      	ldrb	r3, [r7, #7]
 800c712:	2b08      	cmp	r3, #8
 800c714:	d118      	bne.n	800c748 <svCLI_Handler+0x184>
					sbInEsc = 0;
 800c716:	4b40      	ldr	r3, [pc, #256]	; (800c818 <svCLI_Handler+0x254>)
 800c718:	2200      	movs	r2, #0
 800c71a:	701a      	strb	r2, [r3, #0]
					if (scntCLIString > 0) {
 800c71c:	4b40      	ldr	r3, [pc, #256]	; (800c820 <svCLI_Handler+0x25c>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d06b      	beq.n	800c7fc <svCLI_Handler+0x238>
						_svClearLine();
 800c724:	f7ff fcb0 	bl	800c088 <_svClearLine>
						scntCLIString--;
 800c728:	4b3d      	ldr	r3, [pc, #244]	; (800c820 <svCLI_Handler+0x25c>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3b01      	subs	r3, #1
 800c72e:	4a3c      	ldr	r2, [pc, #240]	; (800c820 <svCLI_Handler+0x25c>)
 800c730:	6013      	str	r3, [r2, #0]
						szCLIString[scntCLIString] = '\0';	// NULL Termination
 800c732:	4b3b      	ldr	r3, [pc, #236]	; (800c820 <svCLI_Handler+0x25c>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a3b      	ldr	r2, [pc, #236]	; (800c824 <svCLI_Handler+0x260>)
 800c738:	2100      	movs	r1, #0
 800c73a:	54d1      	strb	r1, [r2, r3]
						svCLI_Printf("%s%s", szCLI_PROMPT, szCLIString);
 800c73c:	4a39      	ldr	r2, [pc, #228]	; (800c824 <svCLI_Handler+0x260>)
 800c73e:	493c      	ldr	r1, [pc, #240]	; (800c830 <svCLI_Handler+0x26c>)
 800c740:	483e      	ldr	r0, [pc, #248]	; (800c83c <svCLI_Handler+0x278>)
 800c742:	f7ff fb13 	bl	800bd6c <svCLI_Printf>
 800c746:	e059      	b.n	800c7fc <svCLI_Handler+0x238>
					}
				}
				else if (szChar == '[') {	// ESC sequence started
 800c748:	79fb      	ldrb	r3, [r7, #7]
 800c74a:	2b5b      	cmp	r3, #91	; 0x5b
 800c74c:	d103      	bne.n	800c756 <svCLI_Handler+0x192>
					sbInEsc = 1;
 800c74e:	4b32      	ldr	r3, [pc, #200]	; (800c818 <svCLI_Handler+0x254>)
 800c750:	2201      	movs	r2, #1
 800c752:	701a      	strb	r2, [r3, #0]
 800c754:	e052      	b.n	800c7fc <svCLI_Handler+0x238>
				}
				else if (_isPrintable(szChar)) {
 800c756:	79fb      	ldrb	r3, [r7, #7]
 800c758:	4618      	mov	r0, r3
 800c75a:	f7ff fbe5 	bl	800bf28 <_isPrintable>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d04b      	beq.n	800c7fc <svCLI_Handler+0x238>
					if (sbInEsc) {
 800c764:	4b2c      	ldr	r3, [pc, #176]	; (800c818 <svCLI_Handler+0x254>)
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d036      	beq.n	800c7da <svCLI_Handler+0x216>
						sbInEsc = 0;
 800c76c:	4b2a      	ldr	r3, [pc, #168]	; (800c818 <svCLI_Handler+0x254>)
 800c76e:	2200      	movs	r2, #0
 800c770:	701a      	strb	r2, [r3, #0]
						if (snCLIHistoryCount > 0) {
 800c772:	4b33      	ldr	r3, [pc, #204]	; (800c840 <svCLI_Handler+0x27c>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	dd27      	ble.n	800c7ca <svCLI_Handler+0x206>
							switch (szChar) {
 800c77a:	79fb      	ldrb	r3, [r7, #7]
 800c77c:	2b41      	cmp	r3, #65	; 0x41
 800c77e:	d002      	beq.n	800c786 <svCLI_Handler+0x1c2>
 800c780:	2b42      	cmp	r3, #66	; 0x42
 800c782:	d011      	beq.n	800c7a8 <svCLI_Handler+0x1e4>
									// echo back
									scntCLIString = svCLI_Printf("%s", szCLIString);
									// echo back
									break;
								default:	// Do Nothing
									break;
 800c784:	e021      	b.n	800c7ca <svCLI_Handler+0x206>
									svCLIHandleHistory(CLI_HISTORY_PREV);
 800c786:	2002      	movs	r0, #2
 800c788:	f7ff fcb4 	bl	800c0f4 <svCLIHandleHistory>
									_svClearLine();
 800c78c:	f7ff fc7c 	bl	800c088 <_svClearLine>
									svCLI_Printf(szCLI_PROMPT);
 800c790:	4827      	ldr	r0, [pc, #156]	; (800c830 <svCLI_Handler+0x26c>)
 800c792:	f7ff faeb 	bl	800bd6c <svCLI_Printf>
									scntCLIString = svCLI_Printf("%s", szCLIString);
 800c796:	4923      	ldr	r1, [pc, #140]	; (800c824 <svCLI_Handler+0x260>)
 800c798:	482a      	ldr	r0, [pc, #168]	; (800c844 <svCLI_Handler+0x280>)
 800c79a:	f7ff fae7 	bl	800bd6c <svCLI_Printf>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	4b1f      	ldr	r3, [pc, #124]	; (800c820 <svCLI_Handler+0x25c>)
 800c7a4:	601a      	str	r2, [r3, #0]
									break;
 800c7a6:	e010      	b.n	800c7ca <svCLI_Handler+0x206>
									svCLIHandleHistory(CLI_HISTORY_NEXT);
 800c7a8:	2001      	movs	r0, #1
 800c7aa:	f7ff fca3 	bl	800c0f4 <svCLIHandleHistory>
									_svClearLine();
 800c7ae:	f7ff fc6b 	bl	800c088 <_svClearLine>
									svCLI_Printf(szCLI_PROMPT);
 800c7b2:	481f      	ldr	r0, [pc, #124]	; (800c830 <svCLI_Handler+0x26c>)
 800c7b4:	f7ff fada 	bl	800bd6c <svCLI_Printf>
									scntCLIString = svCLI_Printf("%s", szCLIString);
 800c7b8:	491a      	ldr	r1, [pc, #104]	; (800c824 <svCLI_Handler+0x260>)
 800c7ba:	4822      	ldr	r0, [pc, #136]	; (800c844 <svCLI_Handler+0x280>)
 800c7bc:	f7ff fad6 	bl	800bd6c <svCLI_Printf>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	4b16      	ldr	r3, [pc, #88]	; (800c820 <svCLI_Handler+0x25c>)
 800c7c6:	601a      	str	r2, [r3, #0]
									break;
 800c7c8:	bf00      	nop
							}
						}
						if (svCommit) {
 800c7ca:	4b1f      	ldr	r3, [pc, #124]	; (800c848 <svCLI_Handler+0x284>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d01c      	beq.n	800c80c <svCLI_Handler+0x248>
							svCommit();
 800c7d2:	4b1d      	ldr	r3, [pc, #116]	; (800c848 <svCLI_Handler+0x284>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4798      	blx	r3
						}
						return;
 800c7d8:	e018      	b.n	800c80c <svCLI_Handler+0x248>
					}
					if (scntCLIString < (MAX_CLI_CHARS-1)) {
 800c7da:	4b11      	ldr	r3, [pc, #68]	; (800c820 <svCLI_Handler+0x25c>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2b7e      	cmp	r3, #126	; 0x7e
 800c7e0:	d80c      	bhi.n	800c7fc <svCLI_Handler+0x238>
						// echo back
						svPutChar(szChar);
 800c7e2:	4b1a      	ldr	r3, [pc, #104]	; (800c84c <svCLI_Handler+0x288>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	79fa      	ldrb	r2, [r7, #7]
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	4798      	blx	r3
						szCLIString[scntCLIString++] = szChar;
 800c7ec:	4b0c      	ldr	r3, [pc, #48]	; (800c820 <svCLI_Handler+0x25c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	1c5a      	adds	r2, r3, #1
 800c7f2:	490b      	ldr	r1, [pc, #44]	; (800c820 <svCLI_Handler+0x25c>)
 800c7f4:	600a      	str	r2, [r1, #0]
 800c7f6:	490b      	ldr	r1, [pc, #44]	; (800c824 <svCLI_Handler+0x260>)
 800c7f8:	79fa      	ldrb	r2, [r7, #7]
 800c7fa:	54ca      	strb	r2, [r1, r3]
					}
				}
			}
		}
	}
	if (svCommit) {
 800c7fc:	4b12      	ldr	r3, [pc, #72]	; (800c848 <svCLI_Handler+0x284>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d004      	beq.n	800c80e <svCLI_Handler+0x24a>
		svCommit();
 800c804:	4b10      	ldr	r3, [pc, #64]	; (800c848 <svCLI_Handler+0x284>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4798      	blx	r3
 800c80a:	e000      	b.n	800c80e <svCLI_Handler+0x24a>
						return;
 800c80c:	bf00      	nop
	}
}
 800c80e:	3710      	adds	r7, #16
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	20000d9c 	.word	0x20000d9c
 800c818:	20000eb4 	.word	0x20000eb4
 800c81c:	0800fdc4 	.word	0x0800fdc4
 800c820:	20000d90 	.word	0x20000d90
 800c824:	20000b88 	.word	0x20000b88
 800c828:	20000da8 	.word	0x20000da8
 800c82c:	20000db0 	.word	0x20000db0
 800c830:	20000038 	.word	0x20000038
 800c834:	20000dac 	.word	0x20000dac
 800c838:	0800fe98 	.word	0x0800fe98
 800c83c:	0800fe9c 	.word	0x0800fe9c
 800c840:	20000d88 	.word	0x20000d88
 800c844:	0800fea4 	.word	0x0800fea4
 800c848:	20000da4 	.word	0x20000da4
 800c84c:	20000da0 	.word	0x20000da0

0800c850 <CLI_Help>:
// for CLI
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (HELP,"Help","Help : Show menu",CLI_Help);

static void CLI_Help(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
 800c85c:	603b      	str	r3, [r7, #0]
	svCLI_ShowHelp();
 800c85e:	f7ff fab1 	bl	800bdc4 <svCLI_ShowHelp>
}
 800c862:	bf00      	nop
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <svRingBuffer_GetCount>:
{
	return rb->size;
}

unsigned int svRingBuffer_GetCount(const svRingBuffer_t *rb)
{
 800c86a:	b480      	push	{r7}
 800c86c:	b085      	sub	sp, #20
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
	unsigned char *h, *t;
	// use temporal value to avoid corruption in between context-switching / Interrupt 
	h = rb->head;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	60fb      	str	r3, [r7, #12]
	t = rb->tail;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	689b      	ldr	r3, [r3, #8]
 800c87c:	60bb      	str	r3, [r7, #8]
	if (h >= t)
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	429a      	cmp	r2, r3
 800c884:	d303      	bcc.n	800c88e <svRingBuffer_GetCount+0x24>
	  return (h - t);
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	1ad3      	subs	r3, r2, r3
 800c88c:	e009      	b.n	800c8a2 <svRingBuffer_GetCount+0x38>
	else
	  return (unsigned int)(rb->bufend - t + h - rb->buf);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	68da      	ldr	r2, [r3, #12]
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	461a      	mov	r2, r3
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	441a      	add	r2, r3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	1ad3      	subs	r3, r2, r3
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3714      	adds	r7, #20
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr

0800c8ae <svRingBuffer_Reset>:

void svRingBuffer_Reset(svRingBuffer_t *rb)
{
 800c8ae:	b480      	push	{r7}
 800c8b0:	b083      	sub	sp, #12
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
	rb->head = rb->tail = rb->buf;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	609a      	str	r2, [r3, #8]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	689a      	ldr	r2, [r3, #8]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	605a      	str	r2, [r3, #4]
	rb->fOverflow = 0;		// Clear Flag
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	615a      	str	r2, [r3, #20]
	rb->fTurnAround = 0;	// Clear Flag
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	619a      	str	r2, [r3, #24]
}
 800c8d2:	bf00      	nop
 800c8d4:	370c      	adds	r7, #12
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr

0800c8de <svRingBuffer_Push>:
{
	rb->fOverflow = 0;
}

int svRingBuffer_Push(svRingBuffer_t *rb, unsigned char data)
{
 800c8de:	b480      	push	{r7}
 800c8e0:	b085      	sub	sp, #20
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	70fb      	strb	r3, [r7, #3]
	int nRet;
	nRet = 0;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	60fb      	str	r3, [r7, #12]
	*(rb->head) = data;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	78fa      	ldrb	r2, [r7, #3]
 800c8f4:	701a      	strb	r2, [r3, #0]
	rb->head++;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	1c5a      	adds	r2, r3, #1
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	605a      	str	r2, [r3, #4]
	if (rb->head == rb->bufend) {	// Wrap around
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685a      	ldr	r2, [r3, #4]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d109      	bne.n	800c920 <svRingBuffer_Push+0x42>
	  rb->head = rb->buf;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	605a      	str	r2, [r3, #4]
		rb->fTurnAround = 1;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	619a      	str	r2, [r3, #24]
		nRet = -1;
 800c91a:	f04f 33ff 	mov.w	r3, #4294967295
 800c91e:	60fb      	str	r3, [r7, #12]
		// return -1;	// -- hellosmk 210512 to check overflow
	}
	if (rb->head == rb->tail) {		// Over flowed
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	685a      	ldr	r2, [r3, #4]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d105      	bne.n	800c938 <svRingBuffer_Push+0x5a>
	  rb->fOverflow = 1;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2201      	movs	r2, #1
 800c930:	615a      	str	r2, [r3, #20]
		nRet = -2;
 800c932:	f06f 0301 	mvn.w	r3, #1
 800c936:	60fb      	str	r3, [r7, #12]
	}
	return nRet;
 800c938:	68fb      	ldr	r3, [r7, #12]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3714      	adds	r7, #20
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr

0800c946 <svRingBuffer_Pop>:

unsigned char svRingBuffer_Pop(svRingBuffer_t *rb)
{
 800c946:	b480      	push	{r7}
 800c948:	b085      	sub	sp, #20
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
	unsigned char byData;
	byData = *(rb->tail);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	73fb      	strb	r3, [r7, #15]
	rb->tail++;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	1c5a      	adds	r2, r3, #1
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	609a      	str	r2, [r3, #8]
	if (rb->tail == rb->bufend)	// Wrap around
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	689a      	ldr	r2, [r3, #8]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d103      	bne.n	800c974 <svRingBuffer_Pop+0x2e>
	  rb->tail = rb->buf;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	609a      	str	r2, [r3, #8]
	return byData;
 800c974:	7bfb      	ldrb	r3, [r7, #15]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3714      	adds	r7, #20
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <svTaskTimer_InitTimers>:

// Global variables
// Static Variables
// Functions
void svTaskTimer_InitTimers(svTaskTimer_t* pTaskTimer, SVUTIL_TIMETICK_FUNC_t pfnTimeTick)
{
 800c982:	b480      	push	{r7}
 800c984:	b085      	sub	sp, #20
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	6039      	str	r1, [r7, #0]
	// Note. Argument Integrity Not Check !!!
	pTaskTimer->pfnTimeTick = pfnTimeTick;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	683a      	ldr	r2, [r7, #0]
 800c990:	605a      	str	r2, [r3, #4]
	for (int i=SV_TIMER_1;i<pTaskTimer->uNumOfTimers;i++) {
 800c992:	2300      	movs	r3, #0
 800c994:	60fb      	str	r3, [r7, #12]
 800c996:	e03f      	b.n	800ca18 <svTaskTimer_InitTimers+0x96>
		pTaskTimer->psvUtilTimer[i].dwDuration = 0;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6899      	ldr	r1, [r3, #8]
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	005b      	lsls	r3, r3, #1
 800c9a2:	4413      	add	r3, r2
 800c9a4:	00db      	lsls	r3, r3, #3
 800c9a6:	440b      	add	r3, r1
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	601a      	str	r2, [r3, #0]
		pTaskTimer->psvUtilTimer[i].dwTimeOut = 0;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6899      	ldr	r1, [r3, #8]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	4413      	add	r3, r2
 800c9b8:	00db      	lsls	r3, r3, #3
 800c9ba:	440b      	add	r3, r1
 800c9bc:	2200      	movs	r2, #0
 800c9be:	605a      	str	r2, [r3, #4]
		pTaskTimer->psvUtilTimer[i].bLive = FALSE;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6899      	ldr	r1, [r3, #8]
 800c9c4:	68fa      	ldr	r2, [r7, #12]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	005b      	lsls	r3, r3, #1
 800c9ca:	4413      	add	r3, r2
 800c9cc:	00db      	lsls	r3, r3, #3
 800c9ce:	440b      	add	r3, r1
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	615a      	str	r2, [r3, #20]
		pTaskTimer->psvUtilTimer[i].dwWrapAroundTick = 0;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6899      	ldr	r1, [r3, #8]
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	005b      	lsls	r3, r3, #1
 800c9de:	4413      	add	r3, r2
 800c9e0:	00db      	lsls	r3, r3, #3
 800c9e2:	440b      	add	r3, r1
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	609a      	str	r2, [r3, #8]
		pTaskTimer->psvUtilTimer[i].eTimerID = (svTimer_e)i;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6899      	ldr	r1, [r3, #8]
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	005b      	lsls	r3, r3, #1
 800c9f2:	4413      	add	r3, r2
 800c9f4:	00db      	lsls	r3, r3, #3
 800c9f6:	440b      	add	r3, r1
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	b2d2      	uxtb	r2, r2
 800c9fc:	741a      	strb	r2, [r3, #16]
		pTaskTimer->psvUtilTimer[i].pfnCallback = 0;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6899      	ldr	r1, [r3, #8]
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	4613      	mov	r3, r2
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	4413      	add	r3, r2
 800ca0a:	00db      	lsls	r3, r3, #3
 800ca0c:	440b      	add	r3, r1
 800ca0e:	2200      	movs	r2, #0
 800ca10:	60da      	str	r2, [r3, #12]
	for (int i=SV_TIMER_1;i<pTaskTimer->uNumOfTimers;i++) {
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	3301      	adds	r3, #1
 800ca16:	60fb      	str	r3, [r7, #12]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d8ba      	bhi.n	800c998 <svTaskTimer_InitTimers+0x16>
	}
}
 800ca22:	bf00      	nop
 800ca24:	bf00      	nop
 800ca26:	3714      	adds	r7, #20
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <svTaskTimer_SetTimer>:
		pTaskTimer->psvUtilTimer[i].bLive = FALSE;
	}
}

BOOL svTaskTimer_SetTimer(svTaskTimer_t* pTaskTimer, svTimer_e eTimerID, unsigned int dwDuration, svTimerSet_e eTimerSet, pfnUtilTimerCallback pfnCallback)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	607a      	str	r2, [r7, #4]
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	72fb      	strb	r3, [r7, #11]
 800ca40:	4613      	mov	r3, r2
 800ca42:	72bb      	strb	r3, [r7, #10]
	if (dwDuration == 0) {
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d106      	bne.n	800ca58 <svTaskTimer_SetTimer+0x28>
		return svTaskTimer_KillTimer(pTaskTimer, eTimerID);
 800ca4a:	7afb      	ldrb	r3, [r7, #11]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	f000 f86b 	bl	800cb2a <svTaskTimer_KillTimer>
 800ca54:	4603      	mov	r3, r0
 800ca56:	e064      	b.n	800cb22 <svTaskTimer_SetTimer+0xf2>
	}
	if (eTimerID >= pTaskTimer->uNumOfTimers) {
 800ca58:	7afa      	ldrb	r2, [r7, #11]
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d301      	bcc.n	800ca66 <svTaskTimer_SetTimer+0x36>
		return FALSE;
 800ca62:	2300      	movs	r3, #0
 800ca64:	e05d      	b.n	800cb22 <svTaskTimer_SetTimer+0xf2>
	}
	// Check Wrap around !!!
	unsigned int dwCurrentTick = pTaskTimer->pfnTimeTick();
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	4798      	blx	r3
 800ca6c:	6178      	str	r0, [r7, #20]
	pTaskTimer->psvUtilTimer[eTimerID].dwTimeOut = dwCurrentTick + dwDuration;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6899      	ldr	r1, [r3, #8]
 800ca72:	7afa      	ldrb	r2, [r7, #11]
 800ca74:	4613      	mov	r3, r2
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	4413      	add	r3, r2
 800ca7a:	00db      	lsls	r3, r3, #3
 800ca7c:	440b      	add	r3, r1
 800ca7e:	6979      	ldr	r1, [r7, #20]
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	440a      	add	r2, r1
 800ca84:	605a      	str	r2, [r3, #4]

	if (pTaskTimer->psvUtilTimer[eTimerID].dwTimeOut < dwCurrentTick) {	// Wrap around
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6899      	ldr	r1, [r3, #8]
 800ca8a:	7afa      	ldrb	r2, [r7, #11]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	005b      	lsls	r3, r3, #1
 800ca90:	4413      	add	r3, r2
 800ca92:	00db      	lsls	r3, r3, #3
 800ca94:	440b      	add	r3, r1
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	697a      	ldr	r2, [r7, #20]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d90a      	bls.n	800cab4 <svTaskTimer_SetTimer+0x84>
			pTaskTimer->psvUtilTimer[eTimerID].dwWrapAroundTick = dwCurrentTick;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	6899      	ldr	r1, [r3, #8]
 800caa2:	7afa      	ldrb	r2, [r7, #11]
 800caa4:	4613      	mov	r3, r2
 800caa6:	005b      	lsls	r3, r3, #1
 800caa8:	4413      	add	r3, r2
 800caaa:	00db      	lsls	r3, r3, #3
 800caac:	440b      	add	r3, r1
 800caae:	697a      	ldr	r2, [r7, #20]
 800cab0:	609a      	str	r2, [r3, #8]
 800cab2:	e009      	b.n	800cac8 <svTaskTimer_SetTimer+0x98>
	}
	else {
			pTaskTimer->psvUtilTimer[eTimerID].dwWrapAroundTick = 0;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6899      	ldr	r1, [r3, #8]
 800cab8:	7afa      	ldrb	r2, [r7, #11]
 800caba:	4613      	mov	r3, r2
 800cabc:	005b      	lsls	r3, r3, #1
 800cabe:	4413      	add	r3, r2
 800cac0:	00db      	lsls	r3, r3, #3
 800cac2:	440b      	add	r3, r1
 800cac4:	2200      	movs	r2, #0
 800cac6:	609a      	str	r2, [r3, #8]
	}
	if (eTimerSet == SV_TIMER_REPEAT) {
 800cac8:	7abb      	ldrb	r3, [r7, #10]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d10a      	bne.n	800cae4 <svTaskTimer_SetTimer+0xb4>
		pTaskTimer->psvUtilTimer[eTimerID].dwDuration = dwDuration;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	6899      	ldr	r1, [r3, #8]
 800cad2:	7afa      	ldrb	r2, [r7, #11]
 800cad4:	4613      	mov	r3, r2
 800cad6:	005b      	lsls	r3, r3, #1
 800cad8:	4413      	add	r3, r2
 800cada:	00db      	lsls	r3, r3, #3
 800cadc:	440b      	add	r3, r1
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	601a      	str	r2, [r3, #0]
 800cae2:	e009      	b.n	800caf8 <svTaskTimer_SetTimer+0xc8>
	}
	else {
		pTaskTimer->psvUtilTimer[eTimerID].dwDuration = 0;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6899      	ldr	r1, [r3, #8]
 800cae8:	7afa      	ldrb	r2, [r7, #11]
 800caea:	4613      	mov	r3, r2
 800caec:	005b      	lsls	r3, r3, #1
 800caee:	4413      	add	r3, r2
 800caf0:	00db      	lsls	r3, r3, #3
 800caf2:	440b      	add	r3, r1
 800caf4:	2200      	movs	r2, #0
 800caf6:	601a      	str	r2, [r3, #0]
	}
	pTaskTimer->psvUtilTimer[eTimerID].pfnCallback = pfnCallback;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6899      	ldr	r1, [r3, #8]
 800cafc:	7afa      	ldrb	r2, [r7, #11]
 800cafe:	4613      	mov	r3, r2
 800cb00:	005b      	lsls	r3, r3, #1
 800cb02:	4413      	add	r3, r2
 800cb04:	00db      	lsls	r3, r3, #3
 800cb06:	440b      	add	r3, r1
 800cb08:	6a3a      	ldr	r2, [r7, #32]
 800cb0a:	60da      	str	r2, [r3, #12]
	pTaskTimer->psvUtilTimer[eTimerID].bLive = TRUE;		// Set Running
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6899      	ldr	r1, [r3, #8]
 800cb10:	7afa      	ldrb	r2, [r7, #11]
 800cb12:	4613      	mov	r3, r2
 800cb14:	005b      	lsls	r3, r3, #1
 800cb16:	4413      	add	r3, r2
 800cb18:	00db      	lsls	r3, r3, #3
 800cb1a:	440b      	add	r3, r1
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	615a      	str	r2, [r3, #20]
	return TRUE;
 800cb20:	2301      	movs	r3, #1
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3718      	adds	r7, #24
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <svTaskTimer_KillTimer>:

BOOL svTaskTimer_KillTimer(svTaskTimer_t* pTaskTimer, svTimer_e eTimerID)
{
 800cb2a:	b480      	push	{r7}
 800cb2c:	b083      	sub	sp, #12
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	460b      	mov	r3, r1
 800cb34:	70fb      	strb	r3, [r7, #3]
	if (eTimerID >= pTaskTimer->uNumOfTimers) {
 800cb36:	78fa      	ldrb	r2, [r7, #3]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d301      	bcc.n	800cb44 <svTaskTimer_KillTimer+0x1a>
		return FALSE;
 800cb40:	2300      	movs	r3, #0
 800cb42:	e00a      	b.n	800cb5a <svTaskTimer_KillTimer+0x30>
	}
	pTaskTimer->psvUtilTimer[eTimerID].bLive = FALSE;		// Set Non-Running
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6899      	ldr	r1, [r3, #8]
 800cb48:	78fa      	ldrb	r2, [r7, #3]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	4413      	add	r3, r2
 800cb50:	00db      	lsls	r3, r3, #3
 800cb52:	440b      	add	r3, r1
 800cb54:	2200      	movs	r2, #0
 800cb56:	615a      	str	r2, [r3, #20]
	return TRUE;
 800cb58:	2301      	movs	r3, #1
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	370c      	adds	r7, #12
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr

0800cb66 <svTaskTimer_CheckTimers>:
	}
	return FALSE;
}

BOOL svTaskTimer_CheckTimers(svTaskTimer_t* pTaskTimer)
{
 800cb66:	b590      	push	{r4, r7, lr}
 800cb68:	b087      	sub	sp, #28
 800cb6a:	af02      	add	r7, sp, #8
 800cb6c:	6078      	str	r0, [r7, #4]
	unsigned int dwCurrentTick = pTaskTimer->pfnTimeTick();
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	4798      	blx	r3
 800cb74:	60b8      	str	r0, [r7, #8]
	for (int i=SV_TIMER_1;i<pTaskTimer->uNumOfTimers;i++) {
 800cb76:	2300      	movs	r3, #0
 800cb78:	60fb      	str	r3, [r7, #12]
 800cb7a:	e07b      	b.n	800cc74 <svTaskTimer_CheckTimers+0x10e>
		// Check Running Timer
		if (pTaskTimer->psvUtilTimer[i].bLive) {
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6899      	ldr	r1, [r3, #8]
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	4613      	mov	r3, r2
 800cb84:	005b      	lsls	r3, r3, #1
 800cb86:	4413      	add	r3, r2
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	440b      	add	r3, r1
 800cb8c:	695b      	ldr	r3, [r3, #20]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d06d      	beq.n	800cc6e <svTaskTimer_CheckTimers+0x108>
			if (pTaskTimer->psvUtilTimer[i].dwWrapAroundTick > 0) {	// Wrap around
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6899      	ldr	r1, [r3, #8]
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	4613      	mov	r3, r2
 800cb9a:	005b      	lsls	r3, r3, #1
 800cb9c:	4413      	add	r3, r2
 800cb9e:	00db      	lsls	r3, r3, #3
 800cba0:	440b      	add	r3, r1
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d00b      	beq.n	800cbc0 <svTaskTimer_CheckTimers+0x5a>
				if (dwCurrentTick >= pTaskTimer->psvUtilTimer[i].dwWrapAroundTick)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6899      	ldr	r1, [r3, #8]
 800cbac:	68fa      	ldr	r2, [r7, #12]
 800cbae:	4613      	mov	r3, r2
 800cbb0:	005b      	lsls	r3, r3, #1
 800cbb2:	4413      	add	r3, r2
 800cbb4:	00db      	lsls	r3, r3, #3
 800cbb6:	440b      	add	r3, r1
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	68ba      	ldr	r2, [r7, #8]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d255      	bcs.n	800cc6c <svTaskTimer_CheckTimers+0x106>
					continue;
			}
			if (pTaskTimer->psvUtilTimer[i].dwTimeOut <= dwCurrentTick) {	// Expired !!!
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6899      	ldr	r1, [r3, #8]
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	005b      	lsls	r3, r3, #1
 800cbca:	4413      	add	r3, r2
 800cbcc:	00db      	lsls	r3, r3, #3
 800cbce:	440b      	add	r3, r1
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d34a      	bcc.n	800cc6e <svTaskTimer_CheckTimers+0x108>
				if (pTaskTimer->psvUtilTimer[i].dwDuration > 0) {	// Repeat timer
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6899      	ldr	r1, [r3, #8]
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	005b      	lsls	r3, r3, #1
 800cbe2:	4413      	add	r3, r2
 800cbe4:	00db      	lsls	r3, r3, #3
 800cbe6:	440b      	add	r3, r1
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d01b      	beq.n	800cc26 <svTaskTimer_CheckTimers+0xc0>
					svTaskTimer_SetTimer(pTaskTimer, (svTimer_e)i, pTaskTimer->psvUtilTimer[i].dwDuration, SV_TIMER_REPEAT, pTaskTimer->psvUtilTimer[i].pfnCallback); 				
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	b2d8      	uxtb	r0, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6899      	ldr	r1, [r3, #8]
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	005b      	lsls	r3, r3, #1
 800cbfc:	4413      	add	r3, r2
 800cbfe:	00db      	lsls	r3, r3, #3
 800cc00:	440b      	add	r3, r1
 800cc02:	681c      	ldr	r4, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6899      	ldr	r1, [r3, #8]
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	4413      	add	r3, r2
 800cc10:	00db      	lsls	r3, r3, #3
 800cc12:	440b      	add	r3, r1
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	2301      	movs	r3, #1
 800cc1a:	4622      	mov	r2, r4
 800cc1c:	4601      	mov	r1, r0
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f7ff ff06 	bl	800ca30 <svTaskTimer_SetTimer>
 800cc24:	e009      	b.n	800cc3a <svTaskTimer_CheckTimers+0xd4>
				}
				else {	// Stop Timer
					pTaskTimer->psvUtilTimer[i].bLive = FALSE;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6899      	ldr	r1, [r3, #8]
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	005b      	lsls	r3, r3, #1
 800cc30:	4413      	add	r3, r2
 800cc32:	00db      	lsls	r3, r3, #3
 800cc34:	440b      	add	r3, r1
 800cc36:	2200      	movs	r2, #0
 800cc38:	615a      	str	r2, [r3, #20]
				}
				// Call Callback function !!
				if (pTaskTimer->psvUtilTimer[i].pfnCallback) {
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6899      	ldr	r1, [r3, #8]
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	4613      	mov	r3, r2
 800cc42:	005b      	lsls	r3, r3, #1
 800cc44:	4413      	add	r3, r2
 800cc46:	00db      	lsls	r3, r3, #3
 800cc48:	440b      	add	r3, r1
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d00e      	beq.n	800cc6e <svTaskTimer_CheckTimers+0x108>
					pTaskTimer->psvUtilTimer[i].pfnCallback((svTimer_e)i);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6899      	ldr	r1, [r3, #8]
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	4613      	mov	r3, r2
 800cc58:	005b      	lsls	r3, r3, #1
 800cc5a:	4413      	add	r3, r2
 800cc5c:	00db      	lsls	r3, r3, #3
 800cc5e:	440b      	add	r3, r1
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	b2d2      	uxtb	r2, r2
 800cc66:	4610      	mov	r0, r2
 800cc68:	4798      	blx	r3
 800cc6a:	e000      	b.n	800cc6e <svTaskTimer_CheckTimers+0x108>
					continue;
 800cc6c:	bf00      	nop
	for (int i=SV_TIMER_1;i<pTaskTimer->uNumOfTimers;i++) {
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	3301      	adds	r3, #1
 800cc72:	60fb      	str	r3, [r7, #12]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	f63f af7e 	bhi.w	800cb7c <svTaskTimer_CheckTimers+0x16>
				}
			}
		}
	}
	return TRUE;
 800cc80:	2301      	movs	r3, #1
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3714      	adds	r7, #20
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd90      	pop	{r4, r7, pc}
	...

0800cc8c <__NVIC_SetPriority>:
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	4603      	mov	r3, r0
 800cc94:	6039      	str	r1, [r7, #0]
 800cc96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cc98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	db0a      	blt.n	800ccb6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	490c      	ldr	r1, [pc, #48]	; (800ccd8 <__NVIC_SetPriority+0x4c>)
 800cca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ccaa:	0112      	lsls	r2, r2, #4
 800ccac:	b2d2      	uxtb	r2, r2
 800ccae:	440b      	add	r3, r1
 800ccb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ccb4:	e00a      	b.n	800cccc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	b2da      	uxtb	r2, r3
 800ccba:	4908      	ldr	r1, [pc, #32]	; (800ccdc <__NVIC_SetPriority+0x50>)
 800ccbc:	88fb      	ldrh	r3, [r7, #6]
 800ccbe:	f003 030f 	and.w	r3, r3, #15
 800ccc2:	3b04      	subs	r3, #4
 800ccc4:	0112      	lsls	r2, r2, #4
 800ccc6:	b2d2      	uxtb	r2, r2
 800ccc8:	440b      	add	r3, r1
 800ccca:	761a      	strb	r2, [r3, #24]
}
 800cccc:	bf00      	nop
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr
 800ccd8:	e000e100 	.word	0xe000e100
 800ccdc:	e000ed00 	.word	0xe000ed00

0800cce0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cce0:	b580      	push	{r7, lr}
 800cce2:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800cce4:	4b05      	ldr	r3, [pc, #20]	; (800ccfc <SysTick_Handler+0x1c>)
 800cce6:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cce8:	f001 faf0 	bl	800e2cc <xTaskGetSchedulerState>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d001      	beq.n	800ccf6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ccf2:	f001 fe93 	bl	800ea1c <xPortSysTickHandler>
  }
}
 800ccf6:	bf00      	nop
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	e000e010 	.word	0xe000e010

0800cd00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cd00:	b580      	push	{r7, lr}
 800cd02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800cd04:	2100      	movs	r1, #0
 800cd06:	f06f 0004 	mvn.w	r0, #4
 800cd0a:	f7ff ffbf 	bl	800cc8c <__NVIC_SetPriority>
#endif
}
 800cd0e:	bf00      	nop
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b086      	sub	sp, #24
 800cd16:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd1c:	f3ef 8305 	mrs	r3, IPSR
 800cd20:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd22:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d002      	beq.n	800cd2e <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	617b      	str	r3, [r7, #20]
 800cd2c:	e013      	b.n	800cd56 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800cd2e:	f001 facd 	bl	800e2cc <xTaskGetSchedulerState>
 800cd32:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d00d      	beq.n	800cd56 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800cd3a:	f3ef 8310 	mrs	r3, PRIMASK
 800cd3e:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd40:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d105      	bne.n	800cd52 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd46:	f3ef 8311 	mrs	r3, BASEPRI
 800cd4a:	607b      	str	r3, [r7, #4]
  return(result);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d001      	beq.n	800cd56 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800cd52:	2301      	movs	r3, #1
 800cd54:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800cd56:	697b      	ldr	r3, [r7, #20]
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3718      	adds	r7, #24
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800cd66:	f7ff ffd4 	bl	800cd12 <IRQ_Context>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d003      	beq.n	800cd78 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800cd70:	f06f 0305 	mvn.w	r3, #5
 800cd74:	607b      	str	r3, [r7, #4]
 800cd76:	e012      	b.n	800cd9e <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800cd78:	f001 faa8 	bl	800e2cc <xTaskGetSchedulerState>
 800cd7c:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d109      	bne.n	800cd98 <osKernelInitialize+0x38>
 800cd84:	4b08      	ldr	r3, [pc, #32]	; (800cda8 <osKernelInitialize+0x48>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d105      	bne.n	800cd98 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cd8c:	4b06      	ldr	r3, [pc, #24]	; (800cda8 <osKernelInitialize+0x48>)
 800cd8e:	2201      	movs	r2, #1
 800cd90:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cd92:	2300      	movs	r3, #0
 800cd94:	607b      	str	r3, [r7, #4]
 800cd96:	e002      	b.n	800cd9e <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800cd98:	f04f 33ff 	mov.w	r3, #4294967295
 800cd9c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800cd9e:	687b      	ldr	r3, [r7, #4]
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	20000eb8 	.word	0x20000eb8

0800cdac <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800cdb2:	f7ff ffae 	bl	800cd12 <IRQ_Context>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d003      	beq.n	800cdc4 <osKernelStart+0x18>
    stat = osErrorISR;
 800cdbc:	f06f 0305 	mvn.w	r3, #5
 800cdc0:	607b      	str	r3, [r7, #4]
 800cdc2:	e016      	b.n	800cdf2 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800cdc4:	f001 fa82 	bl	800e2cc <xTaskGetSchedulerState>
 800cdc8:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d10d      	bne.n	800cdec <osKernelStart+0x40>
 800cdd0:	4b0a      	ldr	r3, [pc, #40]	; (800cdfc <osKernelStart+0x50>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d109      	bne.n	800cdec <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cdd8:	f7ff ff92 	bl	800cd00 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800cddc:	4b07      	ldr	r3, [pc, #28]	; (800cdfc <osKernelStart+0x50>)
 800cdde:	2202      	movs	r2, #2
 800cde0:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cde2:	f000 fd41 	bl	800d868 <vTaskStartScheduler>
      stat = osOK;
 800cde6:	2300      	movs	r3, #0
 800cde8:	607b      	str	r3, [r7, #4]
 800cdea:	e002      	b.n	800cdf2 <osKernelStart+0x46>
    } else {
      stat = osError;
 800cdec:	f04f 33ff 	mov.w	r3, #4294967295
 800cdf0:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800cdf2:	687b      	ldr	r3, [r7, #4]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	20000eb8 	.word	0x20000eb8

0800ce00 <vApplicationTickHook>:

/**
  Dummy implementation of the callback function vApplicationTickHook().
*/
#if (configUSE_TICK_HOOK == 1)
 __WEAK void vApplicationTickHook (void){}
 800ce00:	b480      	push	{r7}
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	bf00      	nop
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr
	...

0800ce10 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	4a07      	ldr	r2, [pc, #28]	; (800ce3c <vApplicationGetIdleTaskMemory+0x2c>)
 800ce20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	4a06      	ldr	r2, [pc, #24]	; (800ce40 <vApplicationGetIdleTaskMemory+0x30>)
 800ce26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2280      	movs	r2, #128	; 0x80
 800ce2c:	601a      	str	r2, [r3, #0]
}
 800ce2e:	bf00      	nop
 800ce30:	3714      	adds	r7, #20
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	20000ebc 	.word	0x20000ebc
 800ce40:	20000f18 	.word	0x20000f18

0800ce44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	60b9      	str	r1, [r7, #8]
 800ce4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	4a07      	ldr	r2, [pc, #28]	; (800ce70 <vApplicationGetTimerTaskMemory+0x2c>)
 800ce54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	4a06      	ldr	r2, [pc, #24]	; (800ce74 <vApplicationGetTimerTaskMemory+0x30>)
 800ce5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2280      	movs	r2, #128	; 0x80
 800ce60:	601a      	str	r2, [r3, #0]
}
 800ce62:	bf00      	nop
 800ce64:	3714      	adds	r7, #20
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	20001118 	.word	0x20001118
 800ce74:	20001174 	.word	0x20001174

0800ce78 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f103 0208 	add.w	r2, r3, #8
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce90:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f103 0208 	add.w	r2, r3, #8
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f103 0208 	add.w	r2, r3, #8
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ceac:	bf00      	nop
 800ceae:	370c      	adds	r7, #12
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cec6:	bf00      	nop
 800cec8:	370c      	adds	r7, #12
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr

0800ced2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800ced2:	b480      	push	{r7}
 800ced4:	b085      	sub	sp, #20
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee8:	d103      	bne.n	800cef2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	691b      	ldr	r3, [r3, #16]
 800ceee:	60fb      	str	r3, [r7, #12]
 800cef0:	e00c      	b.n	800cf0c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	3308      	adds	r3, #8
 800cef6:	60fb      	str	r3, [r7, #12]
 800cef8:	e002      	b.n	800cf00 <vListInsert+0x2e>
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	60fb      	str	r3, [r7, #12]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	68ba      	ldr	r2, [r7, #8]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d2f6      	bcs.n	800cefa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	685a      	ldr	r2, [r3, #4]
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	683a      	ldr	r2, [r7, #0]
 800cf1a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	683a      	ldr	r2, [r7, #0]
 800cf26:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	1c5a      	adds	r2, r3, #1
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	601a      	str	r2, [r3, #0]
}
 800cf38:	bf00      	nop
 800cf3a:	3714      	adds	r7, #20
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	691b      	ldr	r3, [r3, #16]
 800cf50:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	6892      	ldr	r2, [r2, #8]
 800cf5a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	6852      	ldr	r2, [r2, #4]
 800cf64:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d103      	bne.n	800cf78 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	689a      	ldr	r2, [r3, #8]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	1e5a      	subs	r2, r3, #1
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3714      	adds	r7, #20
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr

0800cf98 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d102      	bne.n	800cfb6 <xQueueGenericReset+0x1e>
 800cfb0:	f001 fe42 	bl	800ec38 <ulSetInterruptMask>
 800cfb4:	e7fe      	b.n	800cfb4 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d057      	beq.n	800d06c <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d053      	beq.n	800d06c <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfcc:	2100      	movs	r1, #0
 800cfce:	fba3 2302 	umull	r2, r3, r3, r2
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d000      	beq.n	800cfd8 <xQueueGenericReset+0x40>
 800cfd6:	2101      	movs	r1, #1
 800cfd8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d146      	bne.n	800d06c <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800cfde:	f001 fcf1 	bl	800e9c4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfea:	68b9      	ldr	r1, [r7, #8]
 800cfec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cfee:	fb01 f303 	mul.w	r3, r1, r3
 800cff2:	441a      	add	r2, r3
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	2200      	movs	r2, #0
 800cffc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d00e:	3b01      	subs	r3, #1
 800d010:	68b9      	ldr	r1, [r7, #8]
 800d012:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d014:	fb01 f303 	mul.w	r3, r1, r3
 800d018:	441a      	add	r2, r3
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	22ff      	movs	r2, #255	; 0xff
 800d022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	22ff      	movs	r2, #255	; 0xff
 800d02a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d10e      	bne.n	800d052 <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	691b      	ldr	r3, [r3, #16]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d014      	beq.n	800d066 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	3310      	adds	r3, #16
 800d040:	4618      	mov	r0, r3
 800d042:	f000 ff3b 	bl	800debc <xTaskRemoveFromEventList>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00c      	beq.n	800d066 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800d04c:	f001 fca8 	bl	800e9a0 <vPortYield>
 800d050:	e009      	b.n	800d066 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	3310      	adds	r3, #16
 800d056:	4618      	mov	r0, r3
 800d058:	f7ff ff0e 	bl	800ce78 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	3324      	adds	r3, #36	; 0x24
 800d060:	4618      	mov	r0, r3
 800d062:	f7ff ff09 	bl	800ce78 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800d066:	f001 fcbf 	bl	800e9e8 <vPortExitCritical>
 800d06a:	e001      	b.n	800d070 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 800d06c:	2300      	movs	r3, #0
 800d06e:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d102      	bne.n	800d07c <xQueueGenericReset+0xe4>
 800d076:	f001 fddf 	bl	800ec38 <ulSetInterruptMask>
 800d07a:	e7fe      	b.n	800d07a <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800d07c:	68fb      	ldr	r3, [r7, #12]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800d086:	b580      	push	{r7, lr}
 800d088:	b088      	sub	sp, #32
 800d08a:	af02      	add	r7, sp, #8
 800d08c:	60f8      	str	r0, [r7, #12]
 800d08e:	60b9      	str	r1, [r7, #8]
 800d090:	607a      	str	r2, [r7, #4]
 800d092:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800d094:	2300      	movs	r3, #0
 800d096:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d102      	bne.n	800d0a4 <xQueueGenericCreateStatic+0x1e>
 800d09e:	f001 fdcb 	bl	800ec38 <ulSetInterruptMask>
 800d0a2:	e7fe      	b.n	800d0a2 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d028      	beq.n	800d0fc <xQueueGenericCreateStatic+0x76>
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d025      	beq.n	800d0fc <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d002      	beq.n	800d0bc <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d01f      	beq.n	800d0fc <xQueueGenericCreateStatic+0x76>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d102      	bne.n	800d0c8 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d119      	bne.n	800d0fc <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800d0c8:	2350      	movs	r3, #80	; 0x50
 800d0ca:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	2b50      	cmp	r3, #80	; 0x50
 800d0d0:	d002      	beq.n	800d0d8 <xQueueGenericCreateStatic+0x52>
 800d0d2:	f001 fdb1 	bl	800ec38 <ulSetInterruptMask>
 800d0d6:	e7fe      	b.n	800d0d6 <xQueueGenericCreateStatic+0x50>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800d0d8:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d0e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	9300      	str	r3, [sp, #0]
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	68b9      	ldr	r1, [r7, #8]
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f000 f80c 	bl	800d112 <prvInitialiseNewQueue>
 800d0fa:	e005      	b.n	800d108 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d102      	bne.n	800d108 <xQueueGenericCreateStatic+0x82>
 800d102:	f001 fd99 	bl	800ec38 <ulSetInterruptMask>
 800d106:	e7fe      	b.n	800d106 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800d108:	697b      	ldr	r3, [r7, #20]
    }
 800d10a:	4618      	mov	r0, r3
 800d10c:	3718      	adds	r7, #24
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b084      	sub	sp, #16
 800d116:	af00      	add	r7, sp, #0
 800d118:	60f8      	str	r0, [r7, #12]
 800d11a:	60b9      	str	r1, [r7, #8]
 800d11c:	607a      	str	r2, [r7, #4]
 800d11e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d103      	bne.n	800d12e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	69ba      	ldr	r2, [r7, #24]
 800d12a:	601a      	str	r2, [r3, #0]
 800d12c:	e002      	b.n	800d134 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d12e:	69bb      	ldr	r3, [r7, #24]
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800d134:	69bb      	ldr	r3, [r7, #24]
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	68ba      	ldr	r2, [r7, #8]
 800d13e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d140:	2101      	movs	r1, #1
 800d142:	69b8      	ldr	r0, [r7, #24]
 800d144:	f7ff ff28 	bl	800cf98 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	78fa      	ldrb	r2, [r7, #3]
 800d14c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800d150:	bf00      	nop
 800d152:	3710      	adds	r7, #16
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b08a      	sub	sp, #40	; 0x28
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800d164:	2300      	movs	r3, #0
 800d166:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800d16c:	6a3b      	ldr	r3, [r7, #32]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d102      	bne.n	800d178 <xQueueReceive+0x20>
 800d172:	f001 fd61 	bl	800ec38 <ulSetInterruptMask>
 800d176:	e7fe      	b.n	800d176 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d103      	bne.n	800d186 <xQueueReceive+0x2e>
 800d17e:	6a3b      	ldr	r3, [r7, #32]
 800d180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <xQueueReceive+0x32>
 800d186:	2301      	movs	r3, #1
 800d188:	e000      	b.n	800d18c <xQueueReceive+0x34>
 800d18a:	2300      	movs	r3, #0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d102      	bne.n	800d196 <xQueueReceive+0x3e>
 800d190:	f001 fd52 	bl	800ec38 <ulSetInterruptMask>
 800d194:	e7fe      	b.n	800d194 <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d196:	f001 f899 	bl	800e2cc <xTaskGetSchedulerState>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d102      	bne.n	800d1a6 <xQueueReceive+0x4e>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <xQueueReceive+0x52>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e000      	b.n	800d1ac <xQueueReceive+0x54>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d102      	bne.n	800d1b6 <xQueueReceive+0x5e>
 800d1b0:	f001 fd42 	bl	800ec38 <ulSetInterruptMask>
 800d1b4:	e7fe      	b.n	800d1b4 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800d1b6:	f001 fc05 	bl	800e9c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1ba:	6a3b      	ldr	r3, [r7, #32]
 800d1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1be:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d019      	beq.n	800d1fa <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1c6:	68b9      	ldr	r1, [r7, #8]
 800d1c8:	6a38      	ldr	r0, [r7, #32]
 800d1ca:	f000 f87e 	bl	800d2ca <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	1e5a      	subs	r2, r3, #1
 800d1d2:	6a3b      	ldr	r3, [r7, #32]
 800d1d4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1d6:	6a3b      	ldr	r3, [r7, #32]
 800d1d8:	691b      	ldr	r3, [r3, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d009      	beq.n	800d1f2 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1de:	6a3b      	ldr	r3, [r7, #32]
 800d1e0:	3310      	adds	r3, #16
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f000 fe6a 	bl	800debc <xTaskRemoveFromEventList>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d001      	beq.n	800d1f2 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800d1ee:	f001 fbd7 	bl	800e9a0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800d1f2:	f001 fbf9 	bl	800e9e8 <vPortExitCritical>
                return pdPASS;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e063      	b.n	800d2c2 <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d103      	bne.n	800d208 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800d200:	f001 fbf2 	bl	800e9e8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800d204:	2300      	movs	r3, #0
 800d206:	e05c      	b.n	800d2c2 <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800d208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d106      	bne.n	800d21c <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800d20e:	f107 0314 	add.w	r3, r7, #20
 800d212:	4618      	mov	r0, r3
 800d214:	f000 ff20 	bl	800e058 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800d218:	2301      	movs	r3, #1
 800d21a:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800d21c:	f001 fbe4 	bl	800e9e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800d220:	f000 fb7c 	bl	800d91c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800d224:	f001 fbce 	bl	800e9c4 <vPortEnterCritical>
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d22e:	b25b      	sxtb	r3, r3
 800d230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d234:	d103      	bne.n	800d23e <xQueueReceive+0xe6>
 800d236:	6a3b      	ldr	r3, [r7, #32]
 800d238:	2200      	movs	r2, #0
 800d23a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d23e:	6a3b      	ldr	r3, [r7, #32]
 800d240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d244:	b25b      	sxtb	r3, r3
 800d246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d24a:	d103      	bne.n	800d254 <xQueueReceive+0xfc>
 800d24c:	6a3b      	ldr	r3, [r7, #32]
 800d24e:	2200      	movs	r2, #0
 800d250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d254:	f001 fbc8 	bl	800e9e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d258:	1d3a      	adds	r2, r7, #4
 800d25a:	f107 0314 	add.w	r3, r7, #20
 800d25e:	4611      	mov	r1, r2
 800d260:	4618      	mov	r0, r3
 800d262:	f000 ff0f 	bl	800e084 <xTaskCheckForTimeOut>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d11d      	bne.n	800d2a8 <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d26c:	6a38      	ldr	r0, [r7, #32]
 800d26e:	f000 f8a4 	bl	800d3ba <prvIsQueueEmpty>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	d011      	beq.n	800d29c <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d278:	6a3b      	ldr	r3, [r7, #32]
 800d27a:	3324      	adds	r3, #36	; 0x24
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	4611      	mov	r1, r2
 800d280:	4618      	mov	r0, r3
 800d282:	f000 fdc1 	bl	800de08 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800d286:	6a38      	ldr	r0, [r7, #32]
 800d288:	f000 f845 	bl	800d316 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800d28c:	f000 fb54 	bl	800d938 <xTaskResumeAll>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d18f      	bne.n	800d1b6 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 800d296:	f001 fb83 	bl	800e9a0 <vPortYield>
 800d29a:	e78c      	b.n	800d1b6 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800d29c:	6a38      	ldr	r0, [r7, #32]
 800d29e:	f000 f83a 	bl	800d316 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800d2a2:	f000 fb49 	bl	800d938 <xTaskResumeAll>
 800d2a6:	e786      	b.n	800d1b6 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800d2a8:	6a38      	ldr	r0, [r7, #32]
 800d2aa:	f000 f834 	bl	800d316 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800d2ae:	f000 fb43 	bl	800d938 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2b2:	6a38      	ldr	r0, [r7, #32]
 800d2b4:	f000 f881 	bl	800d3ba <prvIsQueueEmpty>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f43f af7b 	beq.w	800d1b6 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800d2c0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3728      	adds	r7, #40	; 0x28
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b082      	sub	sp, #8
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d018      	beq.n	800d30e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	68da      	ldr	r2, [r3, #12]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e4:	441a      	add	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	68da      	ldr	r2, [r3, #12]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d303      	bcc.n	800d2fe <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	68d9      	ldr	r1, [r3, #12]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d306:	461a      	mov	r2, r3
 800d308:	6838      	ldr	r0, [r7, #0]
 800d30a:	f002 f96b 	bl	800f5e4 <memcpy>
    }
}
 800d30e:	bf00      	nop
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b084      	sub	sp, #16
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800d31e:	f001 fb51 	bl	800e9c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d328:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800d32a:	e011      	b.n	800d350 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d330:	2b00      	cmp	r3, #0
 800d332:	d012      	beq.n	800d35a <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	3324      	adds	r3, #36	; 0x24
 800d338:	4618      	mov	r0, r3
 800d33a:	f000 fdbf 	bl	800debc <xTaskRemoveFromEventList>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d001      	beq.n	800d348 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800d344:	f000 fef4 	bl	800e130 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800d348:	7bfb      	ldrb	r3, [r7, #15]
 800d34a:	3b01      	subs	r3, #1
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800d350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d354:	2b00      	cmp	r3, #0
 800d356:	dce9      	bgt.n	800d32c <prvUnlockQueue+0x16>
 800d358:	e000      	b.n	800d35c <prvUnlockQueue+0x46>
                    break;
 800d35a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	22ff      	movs	r2, #255	; 0xff
 800d360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800d364:	f001 fb40 	bl	800e9e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800d368:	f001 fb2c 	bl	800e9c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d372:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800d374:	e011      	b.n	800d39a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	691b      	ldr	r3, [r3, #16]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d012      	beq.n	800d3a4 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	3310      	adds	r3, #16
 800d382:	4618      	mov	r0, r3
 800d384:	f000 fd9a 	bl	800debc <xTaskRemoveFromEventList>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d001      	beq.n	800d392 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800d38e:	f000 fecf 	bl	800e130 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800d392:	7bbb      	ldrb	r3, [r7, #14]
 800d394:	3b01      	subs	r3, #1
 800d396:	b2db      	uxtb	r3, r3
 800d398:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800d39a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	dce9      	bgt.n	800d376 <prvUnlockQueue+0x60>
 800d3a2:	e000      	b.n	800d3a6 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800d3a4:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	22ff      	movs	r2, #255	; 0xff
 800d3aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800d3ae:	f001 fb1b 	bl	800e9e8 <vPortExitCritical>
}
 800d3b2:	bf00      	nop
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b084      	sub	sp, #16
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800d3c2:	f001 faff 	bl	800e9c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d102      	bne.n	800d3d4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	60fb      	str	r3, [r7, #12]
 800d3d2:	e001      	b.n	800d3d8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800d3d8:	f001 fb06 	bl	800e9e8 <vPortExitCritical>

    return xReturn;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
	...

0800d3e8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d102      	bne.n	800d402 <vQueueAddToRegistry+0x1a>
 800d3fc:	f001 fc1c 	bl	800ec38 <ulSetInterruptMask>
 800d400:	e7fe      	b.n	800d400 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d024      	beq.n	800d452 <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d408:	2300      	movs	r3, #0
 800d40a:	60fb      	str	r3, [r7, #12]
 800d40c:	e01e      	b.n	800d44c <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800d40e:	4a17      	ldr	r2, [pc, #92]	; (800d46c <vQueueAddToRegistry+0x84>)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	00db      	lsls	r3, r3, #3
 800d414:	4413      	add	r3, r2
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d105      	bne.n	800d42a <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	00db      	lsls	r3, r3, #3
 800d422:	4a12      	ldr	r2, [pc, #72]	; (800d46c <vQueueAddToRegistry+0x84>)
 800d424:	4413      	add	r3, r2
 800d426:	60bb      	str	r3, [r7, #8]
                    break;
 800d428:	e013      	b.n	800d452 <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d10a      	bne.n	800d446 <vQueueAddToRegistry+0x5e>
 800d430:	4a0e      	ldr	r2, [pc, #56]	; (800d46c <vQueueAddToRegistry+0x84>)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d104      	bne.n	800d446 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	4a0a      	ldr	r2, [pc, #40]	; (800d46c <vQueueAddToRegistry+0x84>)
 800d442:	4413      	add	r3, r2
 800d444:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	3301      	adds	r3, #1
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2b07      	cmp	r3, #7
 800d450:	d9dd      	bls.n	800d40e <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d005      	beq.n	800d464 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	683a      	ldr	r2, [r7, #0]
 800d45c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800d464:	bf00      	nop
 800d466:	3710      	adds	r7, #16
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	20001374 	.word	0x20001374

0800d470 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800d470:	b580      	push	{r7, lr}
 800d472:	b086      	sub	sp, #24
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800d480:	f001 faa0 	bl	800e9c4 <vPortEnterCritical>
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d48a:	b25b      	sxtb	r3, r3
 800d48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d490:	d103      	bne.n	800d49a <vQueueWaitForMessageRestricted+0x2a>
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	2200      	movs	r2, #0
 800d496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4a0:	b25b      	sxtb	r3, r3
 800d4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a6:	d103      	bne.n	800d4b0 <vQueueWaitForMessageRestricted+0x40>
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4b0:	f001 fa9a 	bl	800e9e8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d106      	bne.n	800d4ca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	3324      	adds	r3, #36	; 0x24
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	68b9      	ldr	r1, [r7, #8]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 fcbb 	bl	800de40 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800d4ca:	6978      	ldr	r0, [r7, #20]
 800d4cc:	f7ff ff23 	bl	800d316 <prvUnlockQueue>
    }
 800d4d0:	bf00      	nop
 800d4d2:	3718      	adds	r7, #24
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b08c      	sub	sp, #48	; 0x30
 800d4dc:	af04      	add	r7, sp, #16
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
 800d4e4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800d4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d102      	bne.n	800d4f2 <xTaskCreateStatic+0x1a>
 800d4ec:	f001 fba4 	bl	800ec38 <ulSetInterruptMask>
 800d4f0:	e7fe      	b.n	800d4f0 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d102      	bne.n	800d4fe <xTaskCreateStatic+0x26>
 800d4f8:	f001 fb9e 	bl	800ec38 <ulSetInterruptMask>
 800d4fc:	e7fe      	b.n	800d4fc <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800d4fe:	235c      	movs	r3, #92	; 0x5c
 800d500:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	2b5c      	cmp	r3, #92	; 0x5c
 800d506:	d002      	beq.n	800d50e <xTaskCreateStatic+0x36>
 800d508:	f001 fb96 	bl	800ec38 <ulSetInterruptMask>
 800d50c:	e7fe      	b.n	800d50c <xTaskCreateStatic+0x34>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d50e:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d512:	2b00      	cmp	r3, #0
 800d514:	d023      	beq.n	800d55e <xTaskCreateStatic+0x86>
 800d516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d020      	beq.n	800d55e <xTaskCreateStatic+0x86>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51e:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d520:	225c      	movs	r2, #92	; 0x5c
 800d522:	2100      	movs	r1, #0
 800d524:	69f8      	ldr	r0, [r7, #28]
 800d526:	f002 f805 	bl	800f534 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d52e:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d530:	69fb      	ldr	r3, [r7, #28]
 800d532:	2202      	movs	r2, #2
 800d534:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d538:	2300      	movs	r3, #0
 800d53a:	9303      	str	r3, [sp, #12]
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	9302      	str	r3, [sp, #8]
 800d540:	f107 0318 	add.w	r3, r7, #24
 800d544:	9301      	str	r3, [sp, #4]
 800d546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d548:	9300      	str	r3, [sp, #0]
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	68b9      	ldr	r1, [r7, #8]
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f000 f855 	bl	800d600 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d556:	69f8      	ldr	r0, [r7, #28]
 800d558:	f000 f8d2 	bl	800d700 <prvAddNewTaskToReadyList>
 800d55c:	e001      	b.n	800d562 <xTaskCreateStatic+0x8a>
        }
        else
        {
            xReturn = NULL;
 800d55e:	2300      	movs	r3, #0
 800d560:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d562:	69bb      	ldr	r3, [r7, #24]
    }
 800d564:	4618      	mov	r0, r3
 800d566:	3720      	adds	r7, #32
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b08c      	sub	sp, #48	; 0x30
 800d570:	af04      	add	r7, sp, #16
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	603b      	str	r3, [r7, #0]
 800d578:	4613      	mov	r3, r2
 800d57a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d57c:	88fb      	ldrh	r3, [r7, #6]
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	4618      	mov	r0, r3
 800d582:	f001 fbb9 	bl	800ecf8 <pvPortMalloc>
 800d586:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d013      	beq.n	800d5b6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d58e:	205c      	movs	r0, #92	; 0x5c
 800d590:	f001 fbb2 	bl	800ecf8 <pvPortMalloc>
 800d594:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d008      	beq.n	800d5ae <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d59c:	225c      	movs	r2, #92	; 0x5c
 800d59e:	2100      	movs	r1, #0
 800d5a0:	69f8      	ldr	r0, [r7, #28]
 800d5a2:	f001 ffc7 	bl	800f534 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	697a      	ldr	r2, [r7, #20]
 800d5aa:	631a      	str	r2, [r3, #48]	; 0x30
 800d5ac:	e005      	b.n	800d5ba <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800d5ae:	6978      	ldr	r0, [r7, #20]
 800d5b0:	f001 fc4c 	bl	800ee4c <vPortFree>
 800d5b4:	e001      	b.n	800d5ba <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d017      	beq.n	800d5f0 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d5c8:	88fa      	ldrh	r2, [r7, #6]
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	9303      	str	r3, [sp, #12]
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	9302      	str	r3, [sp, #8]
 800d5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d4:	9301      	str	r3, [sp, #4]
 800d5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	68b9      	ldr	r1, [r7, #8]
 800d5de:	68f8      	ldr	r0, [r7, #12]
 800d5e0:	f000 f80e 	bl	800d600 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d5e4:	69f8      	ldr	r0, [r7, #28]
 800d5e6:	f000 f88b 	bl	800d700 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	61bb      	str	r3, [r7, #24]
 800d5ee:	e002      	b.n	800d5f6 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d5f4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d5f6:	69bb      	ldr	r3, [r7, #24]
    }
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3720      	adds	r7, #32
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	60b9      	str	r1, [r7, #8]
 800d60a:	607a      	str	r2, [r7, #4]
 800d60c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d610:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	461a      	mov	r2, r3
 800d618:	21a5      	movs	r1, #165	; 0xa5
 800d61a:	f001 ff8b 	bl	800f534 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d628:	3b01      	subs	r3, #1
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	4413      	add	r3, r2
 800d62e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	f023 0307 	bic.w	r3, r3, #7
 800d636:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	f003 0307 	and.w	r3, r3, #7
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d002      	beq.n	800d648 <prvInitialiseNewTask+0x48>
 800d642:	f001 faf9 	bl	800ec38 <ulSetInterruptMask>
 800d646:	e7fe      	b.n	800d646 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d01e      	beq.n	800d68c <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d64e:	2300      	movs	r3, #0
 800d650:	617b      	str	r3, [r7, #20]
 800d652:	e012      	b.n	800d67a <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d654:	68ba      	ldr	r2, [r7, #8]
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	4413      	add	r3, r2
 800d65a:	7819      	ldrb	r1, [r3, #0]
 800d65c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	4413      	add	r3, r2
 800d662:	3334      	adds	r3, #52	; 0x34
 800d664:	460a      	mov	r2, r1
 800d666:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800d668:	68ba      	ldr	r2, [r7, #8]
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	4413      	add	r3, r2
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d006      	beq.n	800d682 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	3301      	adds	r3, #1
 800d678:	617b      	str	r3, [r7, #20]
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	2b0f      	cmp	r3, #15
 800d67e:	d9e9      	bls.n	800d654 <prvInitialiseNewTask+0x54>
 800d680:	e000      	b.n	800d684 <prvInitialiseNewTask+0x84>
            {
                break;
 800d682:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d686:	2200      	movs	r2, #0
 800d688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	2b37      	cmp	r3, #55	; 0x37
 800d690:	d902      	bls.n	800d698 <prvInitialiseNewTask+0x98>
 800d692:	f001 fad1 	bl	800ec38 <ulSetInterruptMask>
 800d696:	e7fe      	b.n	800d696 <prvInitialiseNewTask+0x96>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	2b37      	cmp	r3, #55	; 0x37
 800d69c:	d901      	bls.n	800d6a2 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d69e:	2337      	movs	r3, #55	; 0x37
 800d6a0:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800d6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a4:	6a3a      	ldr	r2, [r7, #32]
 800d6a6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6aa:	6a3a      	ldr	r2, [r7, #32]
 800d6ac:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b0:	3304      	adds	r3, #4
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7ff fc00 	bl	800ceb8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ba:	3318      	adds	r3, #24
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7ff fbfb 	bl	800ceb8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6c6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6c8:	6a3b      	ldr	r3, [r7, #32]
 800d6ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6d6:	625a      	str	r2, [r3, #36]	; 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800d6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	6938      	ldr	r0, [r7, #16]
 800d6e2:	f001 f9cb 	bl	800ea7c <pxPortInitialiseStack>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ea:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800d6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d002      	beq.n	800d6f8 <prvInitialiseNewTask+0xf8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6f6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d6f8:	bf00      	nop
 800d6fa:	3718      	adds	r7, #24
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800d708:	f001 f95c 	bl	800e9c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800d70c:	4b3e      	ldr	r3, [pc, #248]	; (800d808 <prvAddNewTaskToReadyList+0x108>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	3301      	adds	r3, #1
 800d712:	4a3d      	ldr	r2, [pc, #244]	; (800d808 <prvAddNewTaskToReadyList+0x108>)
 800d714:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800d716:	4b3d      	ldr	r3, [pc, #244]	; (800d80c <prvAddNewTaskToReadyList+0x10c>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d109      	bne.n	800d732 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800d71e:	4a3b      	ldr	r2, [pc, #236]	; (800d80c <prvAddNewTaskToReadyList+0x10c>)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d724:	4b38      	ldr	r3, [pc, #224]	; (800d808 <prvAddNewTaskToReadyList+0x108>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d110      	bne.n	800d74e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800d72c:	f000 fd1c 	bl	800e168 <prvInitialiseTaskLists>
 800d730:	e00d      	b.n	800d74e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800d732:	4b37      	ldr	r3, [pc, #220]	; (800d810 <prvAddNewTaskToReadyList+0x110>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d109      	bne.n	800d74e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d73a:	4b34      	ldr	r3, [pc, #208]	; (800d80c <prvAddNewTaskToReadyList+0x10c>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d744:	429a      	cmp	r2, r3
 800d746:	d802      	bhi.n	800d74e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800d748:	4a30      	ldr	r2, [pc, #192]	; (800d80c <prvAddNewTaskToReadyList+0x10c>)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800d74e:	4b31      	ldr	r3, [pc, #196]	; (800d814 <prvAddNewTaskToReadyList+0x114>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	3301      	adds	r3, #1
 800d754:	4a2f      	ldr	r2, [pc, #188]	; (800d814 <prvAddNewTaskToReadyList+0x114>)
 800d756:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d758:	4b2e      	ldr	r3, [pc, #184]	; (800d814 <prvAddNewTaskToReadyList+0x114>)
 800d75a:	681a      	ldr	r2, [r3, #0]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d764:	4b2c      	ldr	r3, [pc, #176]	; (800d818 <prvAddNewTaskToReadyList+0x118>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d903      	bls.n	800d774 <prvAddNewTaskToReadyList+0x74>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d770:	4a29      	ldr	r2, [pc, #164]	; (800d818 <prvAddNewTaskToReadyList+0x118>)
 800d772:	6013      	str	r3, [r2, #0]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d778:	4928      	ldr	r1, [pc, #160]	; (800d81c <prvAddNewTaskToReadyList+0x11c>)
 800d77a:	4613      	mov	r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	4413      	add	r3, r2
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	440b      	add	r3, r1
 800d784:	3304      	adds	r3, #4
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	60fb      	str	r3, [r7, #12]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	609a      	str	r2, [r3, #8]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	689a      	ldr	r2, [r3, #8]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	60da      	str	r2, [r3, #12]
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	3204      	adds	r2, #4
 800d7a0:	605a      	str	r2, [r3, #4]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	1d1a      	adds	r2, r3, #4
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	609a      	str	r2, [r3, #8]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	4413      	add	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	4a19      	ldr	r2, [pc, #100]	; (800d81c <prvAddNewTaskToReadyList+0x11c>)
 800d7b8:	441a      	add	r2, r3
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	615a      	str	r2, [r3, #20]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c2:	4916      	ldr	r1, [pc, #88]	; (800d81c <prvAddNewTaskToReadyList+0x11c>)
 800d7c4:	4613      	mov	r3, r2
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	4413      	add	r3, r2
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	440b      	add	r3, r1
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	1c59      	adds	r1, r3, #1
 800d7d2:	4812      	ldr	r0, [pc, #72]	; (800d81c <prvAddNewTaskToReadyList+0x11c>)
 800d7d4:	4613      	mov	r3, r2
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	4413      	add	r3, r2
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	4403      	add	r3, r0
 800d7de:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800d7e0:	f001 f902 	bl	800e9e8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800d7e4:	4b0a      	ldr	r3, [pc, #40]	; (800d810 <prvAddNewTaskToReadyList+0x110>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d008      	beq.n	800d7fe <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d7ec:	4b07      	ldr	r3, [pc, #28]	; (800d80c <prvAddNewTaskToReadyList+0x10c>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d201      	bcs.n	800d7fe <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800d7fa:	f001 f8d1 	bl	800e9a0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d7fe:	bf00      	nop
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	20001888 	.word	0x20001888
 800d80c:	200013b4 	.word	0x200013b4
 800d810:	20001894 	.word	0x20001894
 800d814:	200018a4 	.word	0x200018a4
 800d818:	20001890 	.word	0x20001890
 800d81c:	200013b8 	.word	0x200013b8

0800d820 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800d828:	2300      	movs	r3, #0
 800d82a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00f      	beq.n	800d852 <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800d832:	4b0c      	ldr	r3, [pc, #48]	; (800d864 <vTaskDelay+0x44>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d002      	beq.n	800d840 <vTaskDelay+0x20>
 800d83a:	f001 f9fd 	bl	800ec38 <ulSetInterruptMask>
 800d83e:	e7fe      	b.n	800d83e <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800d840:	f000 f86c 	bl	800d91c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d844:	2100      	movs	r1, #0
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 fd5e 	bl	800e308 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800d84c:	f000 f874 	bl	800d938 <xTaskResumeAll>
 800d850:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d101      	bne.n	800d85c <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 800d858:	f001 f8a2 	bl	800e9a0 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d85c:	bf00      	nop
 800d85e:	3710      	adds	r7, #16
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	200018b0 	.word	0x200018b0

0800d868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b088      	sub	sp, #32
 800d86c:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800d86e:	2300      	movs	r3, #0
 800d870:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800d872:	2300      	movs	r3, #0
 800d874:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d876:	463a      	mov	r2, r7
 800d878:	1d39      	adds	r1, r7, #4
 800d87a:	f107 0308 	add.w	r3, r7, #8
 800d87e:	4618      	mov	r0, r3
 800d880:	f7ff fac6 	bl	800ce10 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800d884:	6839      	ldr	r1, [r7, #0]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	68ba      	ldr	r2, [r7, #8]
 800d88a:	9202      	str	r2, [sp, #8]
 800d88c:	9301      	str	r3, [sp, #4]
 800d88e:	2300      	movs	r3, #0
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	2300      	movs	r3, #0
 800d894:	460a      	mov	r2, r1
 800d896:	491a      	ldr	r1, [pc, #104]	; (800d900 <vTaskStartScheduler+0x98>)
 800d898:	481a      	ldr	r0, [pc, #104]	; (800d904 <vTaskStartScheduler+0x9c>)
 800d89a:	f7ff fe1d 	bl	800d4d8 <xTaskCreateStatic>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	4a19      	ldr	r2, [pc, #100]	; (800d908 <vTaskStartScheduler+0xa0>)
 800d8a2:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800d8a4:	4b18      	ldr	r3, [pc, #96]	; (800d908 <vTaskStartScheduler+0xa0>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d002      	beq.n	800d8b2 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	60fb      	str	r3, [r7, #12]
 800d8b0:	e001      	b.n	800d8b6 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d102      	bne.n	800d8c2 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800d8bc:	f000 fd92 	bl	800e3e4 <xTimerCreateTimerTask>
 800d8c0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d10e      	bne.n	800d8e6 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800d8c8:	f001 f9b6 	bl	800ec38 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800d8cc:	4b0f      	ldr	r3, [pc, #60]	; (800d90c <vTaskStartScheduler+0xa4>)
 800d8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d8d2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d8d4:	4b0e      	ldr	r3, [pc, #56]	; (800d910 <vTaskStartScheduler+0xa8>)
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d8da:	4b0e      	ldr	r3, [pc, #56]	; (800d914 <vTaskStartScheduler+0xac>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800d8e0:	f001 f956 	bl	800eb90 <xPortStartScheduler>
 800d8e4:	e006      	b.n	800d8f4 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ec:	d102      	bne.n	800d8f4 <vTaskStartScheduler+0x8c>
 800d8ee:	f001 f9a3 	bl	800ec38 <ulSetInterruptMask>
 800d8f2:	e7fe      	b.n	800d8f2 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800d8f4:	4b08      	ldr	r3, [pc, #32]	; (800d918 <vTaskStartScheduler+0xb0>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
}
 800d8f8:	bf00      	nop
 800d8fa:	3710      	adds	r7, #16
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	0800fec4 	.word	0x0800fec4
 800d904:	0800e149 	.word	0x0800e149
 800d908:	200018ac 	.word	0x200018ac
 800d90c:	200018a8 	.word	0x200018a8
 800d910:	20001894 	.word	0x20001894
 800d914:	2000188c 	.word	0x2000188c
 800d918:	20000048 	.word	0x20000048

0800d91c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d91c:	b480      	push	{r7}
 800d91e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d920:	4b04      	ldr	r3, [pc, #16]	; (800d934 <vTaskSuspendAll+0x18>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	3301      	adds	r3, #1
 800d926:	4a03      	ldr	r2, [pc, #12]	; (800d934 <vTaskSuspendAll+0x18>)
 800d928:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d92a:	bf00      	nop
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr
 800d934:	200018b0 	.word	0x200018b0

0800d938 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b086      	sub	sp, #24
 800d93c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d93e:	2300      	movs	r3, #0
 800d940:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d942:	2300      	movs	r3, #0
 800d944:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800d946:	4b6a      	ldr	r3, [pc, #424]	; (800daf0 <xTaskResumeAll+0x1b8>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d102      	bne.n	800d954 <xTaskResumeAll+0x1c>
 800d94e:	f001 f973 	bl	800ec38 <ulSetInterruptMask>
 800d952:	e7fe      	b.n	800d952 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d954:	f001 f836 	bl	800e9c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d958:	4b65      	ldr	r3, [pc, #404]	; (800daf0 <xTaskResumeAll+0x1b8>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	3b01      	subs	r3, #1
 800d95e:	4a64      	ldr	r2, [pc, #400]	; (800daf0 <xTaskResumeAll+0x1b8>)
 800d960:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d962:	4b63      	ldr	r3, [pc, #396]	; (800daf0 <xTaskResumeAll+0x1b8>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	f040 80bb 	bne.w	800dae2 <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d96c:	4b61      	ldr	r3, [pc, #388]	; (800daf4 <xTaskResumeAll+0x1bc>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	f000 80b6 	beq.w	800dae2 <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d976:	e08b      	b.n	800da90 <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d978:	4b5f      	ldr	r3, [pc, #380]	; (800daf8 <xTaskResumeAll+0x1c0>)
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d984:	60bb      	str	r3, [r7, #8]
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	69db      	ldr	r3, [r3, #28]
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	6a12      	ldr	r2, [r2, #32]
 800d98e:	609a      	str	r2, [r3, #8]
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	6a1b      	ldr	r3, [r3, #32]
 800d994:	697a      	ldr	r2, [r7, #20]
 800d996:	69d2      	ldr	r2, [r2, #28]
 800d998:	605a      	str	r2, [r3, #4]
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	685a      	ldr	r2, [r3, #4]
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	3318      	adds	r3, #24
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d103      	bne.n	800d9ae <xTaskResumeAll+0x76>
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	6a1a      	ldr	r2, [r3, #32]
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	605a      	str	r2, [r3, #4]
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	629a      	str	r2, [r3, #40]	; 0x28
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	1e5a      	subs	r2, r3, #1
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	695b      	ldr	r3, [r3, #20]
 800d9c2:	607b      	str	r3, [r7, #4]
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	697a      	ldr	r2, [r7, #20]
 800d9ca:	68d2      	ldr	r2, [r2, #12]
 800d9cc:	609a      	str	r2, [r3, #8]
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	697a      	ldr	r2, [r7, #20]
 800d9d4:	6892      	ldr	r2, [r2, #8]
 800d9d6:	605a      	str	r2, [r3, #4]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	685a      	ldr	r2, [r3, #4]
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	3304      	adds	r3, #4
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d103      	bne.n	800d9ec <xTaskResumeAll+0xb4>
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	68da      	ldr	r2, [r3, #12]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	605a      	str	r2, [r3, #4]
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	615a      	str	r2, [r3, #20]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	1e5a      	subs	r2, r3, #1
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da00:	4b3e      	ldr	r3, [pc, #248]	; (800dafc <xTaskResumeAll+0x1c4>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	429a      	cmp	r2, r3
 800da06:	d903      	bls.n	800da10 <xTaskResumeAll+0xd8>
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da0c:	4a3b      	ldr	r2, [pc, #236]	; (800dafc <xTaskResumeAll+0x1c4>)
 800da0e:	6013      	str	r3, [r2, #0]
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da14:	493a      	ldr	r1, [pc, #232]	; (800db00 <xTaskResumeAll+0x1c8>)
 800da16:	4613      	mov	r3, r2
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	4413      	add	r3, r2
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	440b      	add	r3, r1
 800da20:	3304      	adds	r3, #4
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	603b      	str	r3, [r7, #0]
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	683a      	ldr	r2, [r7, #0]
 800da2a:	609a      	str	r2, [r3, #8]
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	689a      	ldr	r2, [r3, #8]
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	60da      	str	r2, [r3, #12]
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	697a      	ldr	r2, [r7, #20]
 800da3a:	3204      	adds	r2, #4
 800da3c:	605a      	str	r2, [r3, #4]
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	1d1a      	adds	r2, r3, #4
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	609a      	str	r2, [r3, #8]
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da4a:	4613      	mov	r3, r2
 800da4c:	009b      	lsls	r3, r3, #2
 800da4e:	4413      	add	r3, r2
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	4a2b      	ldr	r2, [pc, #172]	; (800db00 <xTaskResumeAll+0x1c8>)
 800da54:	441a      	add	r2, r3
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	615a      	str	r2, [r3, #20]
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da5e:	4928      	ldr	r1, [pc, #160]	; (800db00 <xTaskResumeAll+0x1c8>)
 800da60:	4613      	mov	r3, r2
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	4413      	add	r3, r2
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	440b      	add	r3, r1
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	1c59      	adds	r1, r3, #1
 800da6e:	4824      	ldr	r0, [pc, #144]	; (800db00 <xTaskResumeAll+0x1c8>)
 800da70:	4613      	mov	r3, r2
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	4413      	add	r3, r2
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	4403      	add	r3, r0
 800da7a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da80:	4b20      	ldr	r3, [pc, #128]	; (800db04 <xTaskResumeAll+0x1cc>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da86:	429a      	cmp	r2, r3
 800da88:	d302      	bcc.n	800da90 <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 800da8a:	4b1f      	ldr	r3, [pc, #124]	; (800db08 <xTaskResumeAll+0x1d0>)
 800da8c:	2201      	movs	r2, #1
 800da8e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da90:	4b19      	ldr	r3, [pc, #100]	; (800daf8 <xTaskResumeAll+0x1c0>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	f47f af6f 	bne.w	800d978 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d001      	beq.n	800daa4 <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800daa0:	f000 fbf8 	bl	800e294 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800daa4:	4b19      	ldr	r3, [pc, #100]	; (800db0c <xTaskResumeAll+0x1d4>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d010      	beq.n	800dad2 <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800dab0:	f000 f83e 	bl	800db30 <xTaskIncrementTick>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d002      	beq.n	800dac0 <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 800daba:	4b13      	ldr	r3, [pc, #76]	; (800db08 <xTaskResumeAll+0x1d0>)
 800dabc:	2201      	movs	r2, #1
 800dabe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	3b01      	subs	r3, #1
 800dac4:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d1f1      	bne.n	800dab0 <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 800dacc:	4b0f      	ldr	r3, [pc, #60]	; (800db0c <xTaskResumeAll+0x1d4>)
 800dace:	2200      	movs	r2, #0
 800dad0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800dad2:	4b0d      	ldr	r3, [pc, #52]	; (800db08 <xTaskResumeAll+0x1d0>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d003      	beq.n	800dae2 <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800dada:	2301      	movs	r3, #1
 800dadc:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800dade:	f000 ff5f 	bl	800e9a0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800dae2:	f000 ff81 	bl	800e9e8 <vPortExitCritical>

    return xAlreadyYielded;
 800dae6:	693b      	ldr	r3, [r7, #16]
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3718      	adds	r7, #24
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	200018b0 	.word	0x200018b0
 800daf4:	20001888 	.word	0x20001888
 800daf8:	20001848 	.word	0x20001848
 800dafc:	20001890 	.word	0x20001890
 800db00:	200013b8 	.word	0x200013b8
 800db04:	200013b4 	.word	0x200013b4
 800db08:	2000189c 	.word	0x2000189c
 800db0c:	20001898 	.word	0x20001898

0800db10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800db16:	4b05      	ldr	r3, [pc, #20]	; (800db2c <xTaskGetTickCount+0x1c>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800db1c:	687b      	ldr	r3, [r7, #4]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	370c      	adds	r7, #12
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	2000188c 	.word	0x2000188c

0800db30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b088      	sub	sp, #32
 800db34:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800db36:	2300      	movs	r3, #0
 800db38:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db3a:	4b7e      	ldr	r3, [pc, #504]	; (800dd34 <xTaskIncrementTick+0x204>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	f040 80eb 	bne.w	800dd1a <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db44:	4b7c      	ldr	r3, [pc, #496]	; (800dd38 <xTaskIncrementTick+0x208>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	3301      	adds	r3, #1
 800db4a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800db4c:	4a7a      	ldr	r2, [pc, #488]	; (800dd38 <xTaskIncrementTick+0x208>)
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d118      	bne.n	800db8a <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 800db58:	4b78      	ldr	r3, [pc, #480]	; (800dd3c <xTaskIncrementTick+0x20c>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d002      	beq.n	800db68 <xTaskIncrementTick+0x38>
 800db62:	f001 f869 	bl	800ec38 <ulSetInterruptMask>
 800db66:	e7fe      	b.n	800db66 <xTaskIncrementTick+0x36>
 800db68:	4b74      	ldr	r3, [pc, #464]	; (800dd3c <xTaskIncrementTick+0x20c>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	617b      	str	r3, [r7, #20]
 800db6e:	4b74      	ldr	r3, [pc, #464]	; (800dd40 <xTaskIncrementTick+0x210>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4a72      	ldr	r2, [pc, #456]	; (800dd3c <xTaskIncrementTick+0x20c>)
 800db74:	6013      	str	r3, [r2, #0]
 800db76:	4a72      	ldr	r2, [pc, #456]	; (800dd40 <xTaskIncrementTick+0x210>)
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	6013      	str	r3, [r2, #0]
 800db7c:	4b71      	ldr	r3, [pc, #452]	; (800dd44 <xTaskIncrementTick+0x214>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	3301      	adds	r3, #1
 800db82:	4a70      	ldr	r2, [pc, #448]	; (800dd44 <xTaskIncrementTick+0x214>)
 800db84:	6013      	str	r3, [r2, #0]
 800db86:	f000 fb85 	bl	800e294 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800db8a:	4b6f      	ldr	r3, [pc, #444]	; (800dd48 <xTaskIncrementTick+0x218>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	69ba      	ldr	r2, [r7, #24]
 800db90:	429a      	cmp	r2, r3
 800db92:	f0c0 80a7 	bcc.w	800dce4 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db96:	4b69      	ldr	r3, [pc, #420]	; (800dd3c <xTaskIncrementTick+0x20c>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d104      	bne.n	800dbaa <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dba0:	4b69      	ldr	r3, [pc, #420]	; (800dd48 <xTaskIncrementTick+0x218>)
 800dba2:	f04f 32ff 	mov.w	r2, #4294967295
 800dba6:	601a      	str	r2, [r3, #0]
                    break;
 800dba8:	e09c      	b.n	800dce4 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbaa:	4b64      	ldr	r3, [pc, #400]	; (800dd3c <xTaskIncrementTick+0x20c>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	68db      	ldr	r3, [r3, #12]
 800dbb2:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800dbba:	69ba      	ldr	r2, [r7, #24]
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d203      	bcs.n	800dbca <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800dbc2:	4a61      	ldr	r2, [pc, #388]	; (800dd48 <xTaskIncrementTick+0x218>)
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800dbc8:	e08c      	b.n	800dce4 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	695b      	ldr	r3, [r3, #20]
 800dbce:	60bb      	str	r3, [r7, #8]
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	693a      	ldr	r2, [r7, #16]
 800dbd6:	68d2      	ldr	r2, [r2, #12]
 800dbd8:	609a      	str	r2, [r3, #8]
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	693a      	ldr	r2, [r7, #16]
 800dbe0:	6892      	ldr	r2, [r2, #8]
 800dbe2:	605a      	str	r2, [r3, #4]
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	685a      	ldr	r2, [r3, #4]
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	3304      	adds	r3, #4
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d103      	bne.n	800dbf8 <xTaskIncrementTick+0xc8>
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	68da      	ldr	r2, [r3, #12]
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	605a      	str	r2, [r3, #4]
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	615a      	str	r2, [r3, #20]
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	1e5a      	subs	r2, r3, #1
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d01e      	beq.n	800dc4e <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc14:	607b      	str	r3, [r7, #4]
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	69db      	ldr	r3, [r3, #28]
 800dc1a:	693a      	ldr	r2, [r7, #16]
 800dc1c:	6a12      	ldr	r2, [r2, #32]
 800dc1e:	609a      	str	r2, [r3, #8]
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	6a1b      	ldr	r3, [r3, #32]
 800dc24:	693a      	ldr	r2, [r7, #16]
 800dc26:	69d2      	ldr	r2, [r2, #28]
 800dc28:	605a      	str	r2, [r3, #4]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	685a      	ldr	r2, [r3, #4]
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	3318      	adds	r3, #24
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d103      	bne.n	800dc3e <xTaskIncrementTick+0x10e>
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	6a1a      	ldr	r2, [r3, #32]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	605a      	str	r2, [r3, #4]
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	2200      	movs	r2, #0
 800dc42:	629a      	str	r2, [r3, #40]	; 0x28
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	1e5a      	subs	r2, r3, #1
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc52:	4b3e      	ldr	r3, [pc, #248]	; (800dd4c <xTaskIncrementTick+0x21c>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d903      	bls.n	800dc62 <xTaskIncrementTick+0x132>
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc5e:	4a3b      	ldr	r2, [pc, #236]	; (800dd4c <xTaskIncrementTick+0x21c>)
 800dc60:	6013      	str	r3, [r2, #0]
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc66:	493a      	ldr	r1, [pc, #232]	; (800dd50 <xTaskIncrementTick+0x220>)
 800dc68:	4613      	mov	r3, r2
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	4413      	add	r3, r2
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	440b      	add	r3, r1
 800dc72:	3304      	adds	r3, #4
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	603b      	str	r3, [r7, #0]
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	609a      	str	r2, [r3, #8]
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	689a      	ldr	r2, [r3, #8]
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	60da      	str	r2, [r3, #12]
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	693a      	ldr	r2, [r7, #16]
 800dc8c:	3204      	adds	r2, #4
 800dc8e:	605a      	str	r2, [r3, #4]
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	1d1a      	adds	r2, r3, #4
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	609a      	str	r2, [r3, #8]
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc9c:	4613      	mov	r3, r2
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4413      	add	r3, r2
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	4a2a      	ldr	r2, [pc, #168]	; (800dd50 <xTaskIncrementTick+0x220>)
 800dca6:	441a      	add	r2, r3
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	615a      	str	r2, [r3, #20]
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb0:	4927      	ldr	r1, [pc, #156]	; (800dd50 <xTaskIncrementTick+0x220>)
 800dcb2:	4613      	mov	r3, r2
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	4413      	add	r3, r2
 800dcb8:	009b      	lsls	r3, r3, #2
 800dcba:	440b      	add	r3, r1
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	1c59      	adds	r1, r3, #1
 800dcc0:	4823      	ldr	r0, [pc, #140]	; (800dd50 <xTaskIncrementTick+0x220>)
 800dcc2:	4613      	mov	r3, r2
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	4413      	add	r3, r2
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	4403      	add	r3, r0
 800dccc:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcd2:	4b20      	ldr	r3, [pc, #128]	; (800dd54 <xTaskIncrementTick+0x224>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	f67f af5c 	bls.w	800db96 <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 800dcde:	2301      	movs	r3, #1
 800dce0:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dce2:	e758      	b.n	800db96 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dce4:	4b1b      	ldr	r3, [pc, #108]	; (800dd54 <xTaskIncrementTick+0x224>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcea:	4919      	ldr	r1, [pc, #100]	; (800dd50 <xTaskIncrementTick+0x220>)
 800dcec:	4613      	mov	r3, r2
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	4413      	add	r3, r2
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	440b      	add	r3, r1
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d901      	bls.n	800dd00 <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	61fb      	str	r3, [r7, #28]

        #if ( configUSE_TICK_HOOK == 1 )
        {
            /* Guard against the tick hook being called when the pended tick
             * count is being unwound (when the scheduler is being unlocked). */
            if( xPendedTicks == ( TickType_t ) 0 )
 800dd00:	4b15      	ldr	r3, [pc, #84]	; (800dd58 <xTaskIncrementTick+0x228>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d101      	bne.n	800dd0c <xTaskIncrementTick+0x1dc>
            {
                vApplicationTickHook();
 800dd08:	f7ff f87a 	bl	800ce00 <vApplicationTickHook>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800dd0c:	4b13      	ldr	r3, [pc, #76]	; (800dd5c <xTaskIncrementTick+0x22c>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d009      	beq.n	800dd28 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 800dd14:	2301      	movs	r3, #1
 800dd16:	61fb      	str	r3, [r7, #28]
 800dd18:	e006      	b.n	800dd28 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800dd1a:	4b0f      	ldr	r3, [pc, #60]	; (800dd58 <xTaskIncrementTick+0x228>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	3301      	adds	r3, #1
 800dd20:	4a0d      	ldr	r2, [pc, #52]	; (800dd58 <xTaskIncrementTick+0x228>)
 800dd22:	6013      	str	r3, [r2, #0]

        /* The tick hook gets called at regular intervals, even if the
         * scheduler is locked. */
        #if ( configUSE_TICK_HOOK == 1 )
        {
            vApplicationTickHook();
 800dd24:	f7ff f86c 	bl	800ce00 <vApplicationTickHook>
        }
        #endif
    }

    return xSwitchRequired;
 800dd28:	69fb      	ldr	r3, [r7, #28]
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3720      	adds	r7, #32
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	200018b0 	.word	0x200018b0
 800dd38:	2000188c 	.word	0x2000188c
 800dd3c:	20001840 	.word	0x20001840
 800dd40:	20001844 	.word	0x20001844
 800dd44:	200018a0 	.word	0x200018a0
 800dd48:	200018a8 	.word	0x200018a8
 800dd4c:	20001890 	.word	0x20001890
 800dd50:	200013b8 	.word	0x200013b8
 800dd54:	200013b4 	.word	0x200013b4
 800dd58:	20001898 	.word	0x20001898
 800dd5c:	2000189c 	.word	0x2000189c

0800dd60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dd66:	4b23      	ldr	r3, [pc, #140]	; (800ddf4 <vTaskSwitchContext+0x94>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d003      	beq.n	800dd76 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800dd6e:	4b22      	ldr	r3, [pc, #136]	; (800ddf8 <vTaskSwitchContext+0x98>)
 800dd70:	2201      	movs	r2, #1
 800dd72:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800dd74:	e039      	b.n	800ddea <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800dd76:	4b20      	ldr	r3, [pc, #128]	; (800ddf8 <vTaskSwitchContext+0x98>)
 800dd78:	2200      	movs	r2, #0
 800dd7a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd7c:	4b1f      	ldr	r3, [pc, #124]	; (800ddfc <vTaskSwitchContext+0x9c>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	607b      	str	r3, [r7, #4]
 800dd82:	e008      	b.n	800dd96 <vTaskSwitchContext+0x36>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d102      	bne.n	800dd90 <vTaskSwitchContext+0x30>
 800dd8a:	f000 ff55 	bl	800ec38 <ulSetInterruptMask>
 800dd8e:	e7fe      	b.n	800dd8e <vTaskSwitchContext+0x2e>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	3b01      	subs	r3, #1
 800dd94:	607b      	str	r3, [r7, #4]
 800dd96:	491a      	ldr	r1, [pc, #104]	; (800de00 <vTaskSwitchContext+0xa0>)
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	4613      	mov	r3, r2
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	4413      	add	r3, r2
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	440b      	add	r3, r1
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d0ec      	beq.n	800dd84 <vTaskSwitchContext+0x24>
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	4613      	mov	r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	4413      	add	r3, r2
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	4a12      	ldr	r2, [pc, #72]	; (800de00 <vTaskSwitchContext+0xa0>)
 800ddb6:	4413      	add	r3, r2
 800ddb8:	603b      	str	r3, [r7, #0]
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	685a      	ldr	r2, [r3, #4]
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	605a      	str	r2, [r3, #4]
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	685a      	ldr	r2, [r3, #4]
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	3308      	adds	r3, #8
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d104      	bne.n	800ddda <vTaskSwitchContext+0x7a>
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	685a      	ldr	r2, [r3, #4]
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	605a      	str	r2, [r3, #4]
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	4a08      	ldr	r2, [pc, #32]	; (800de04 <vTaskSwitchContext+0xa4>)
 800dde2:	6013      	str	r3, [r2, #0]
 800dde4:	4a05      	ldr	r2, [pc, #20]	; (800ddfc <vTaskSwitchContext+0x9c>)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6013      	str	r3, [r2, #0]
}
 800ddea:	bf00      	nop
 800ddec:	3708      	adds	r7, #8
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	200018b0 	.word	0x200018b0
 800ddf8:	2000189c 	.word	0x2000189c
 800ddfc:	20001890 	.word	0x20001890
 800de00:	200013b8 	.word	0x200013b8
 800de04:	200013b4 	.word	0x200013b4

0800de08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d102      	bne.n	800de1e <vTaskPlaceOnEventList+0x16>
 800de18:	f000 ff0e 	bl	800ec38 <ulSetInterruptMask>
 800de1c:	e7fe      	b.n	800de1c <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de1e:	4b07      	ldr	r3, [pc, #28]	; (800de3c <vTaskPlaceOnEventList+0x34>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	3318      	adds	r3, #24
 800de24:	4619      	mov	r1, r3
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f7ff f853 	bl	800ced2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800de2c:	2101      	movs	r1, #1
 800de2e:	6838      	ldr	r0, [r7, #0]
 800de30:	f000 fa6a 	bl	800e308 <prvAddCurrentTaskToDelayedList>
}
 800de34:	bf00      	nop
 800de36:	3708      	adds	r7, #8
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	200013b4 	.word	0x200013b4

0800de40 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	60b9      	str	r1, [r7, #8]
 800de4a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d102      	bne.n	800de58 <vTaskPlaceOnEventListRestricted+0x18>
 800de52:	f000 fef1 	bl	800ec38 <ulSetInterruptMask>
 800de56:	e7fe      	b.n	800de56 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	617b      	str	r3, [r7, #20]
 800de5e:	4b16      	ldr	r3, [pc, #88]	; (800deb8 <vTaskPlaceOnEventListRestricted+0x78>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	697a      	ldr	r2, [r7, #20]
 800de64:	61da      	str	r2, [r3, #28]
 800de66:	4b14      	ldr	r3, [pc, #80]	; (800deb8 <vTaskPlaceOnEventListRestricted+0x78>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	697a      	ldr	r2, [r7, #20]
 800de6c:	6892      	ldr	r2, [r2, #8]
 800de6e:	621a      	str	r2, [r3, #32]
 800de70:	4b11      	ldr	r3, [pc, #68]	; (800deb8 <vTaskPlaceOnEventListRestricted+0x78>)
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	689b      	ldr	r3, [r3, #8]
 800de78:	3218      	adds	r2, #24
 800de7a:	605a      	str	r2, [r3, #4]
 800de7c:	4b0e      	ldr	r3, [pc, #56]	; (800deb8 <vTaskPlaceOnEventListRestricted+0x78>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f103 0218 	add.w	r2, r3, #24
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	609a      	str	r2, [r3, #8]
 800de88:	4b0b      	ldr	r3, [pc, #44]	; (800deb8 <vTaskPlaceOnEventListRestricted+0x78>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	629a      	str	r2, [r3, #40]	; 0x28
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	1c5a      	adds	r2, r3, #1
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d002      	beq.n	800dea6 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 800dea0:	f04f 33ff 	mov.w	r3, #4294967295
 800dea4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dea6:	6879      	ldr	r1, [r7, #4]
 800dea8:	68b8      	ldr	r0, [r7, #8]
 800deaa:	f000 fa2d 	bl	800e308 <prvAddCurrentTaskToDelayedList>
    }
 800deae:	bf00      	nop
 800deb0:	3718      	adds	r7, #24
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	200013b4 	.word	0x200013b4

0800debc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b088      	sub	sp, #32
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800decc:	69bb      	ldr	r3, [r7, #24]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d102      	bne.n	800ded8 <xTaskRemoveFromEventList+0x1c>
 800ded2:	f000 feb1 	bl	800ec38 <ulSetInterruptMask>
 800ded6:	e7fe      	b.n	800ded6 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dedc:	617b      	str	r3, [r7, #20]
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	69db      	ldr	r3, [r3, #28]
 800dee2:	69ba      	ldr	r2, [r7, #24]
 800dee4:	6a12      	ldr	r2, [r2, #32]
 800dee6:	609a      	str	r2, [r3, #8]
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	6a1b      	ldr	r3, [r3, #32]
 800deec:	69ba      	ldr	r2, [r7, #24]
 800deee:	69d2      	ldr	r2, [r2, #28]
 800def0:	605a      	str	r2, [r3, #4]
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	685a      	ldr	r2, [r3, #4]
 800def6:	69bb      	ldr	r3, [r7, #24]
 800def8:	3318      	adds	r3, #24
 800defa:	429a      	cmp	r2, r3
 800defc:	d103      	bne.n	800df06 <xTaskRemoveFromEventList+0x4a>
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	6a1a      	ldr	r2, [r3, #32]
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	605a      	str	r2, [r3, #4]
 800df06:	69bb      	ldr	r3, [r7, #24]
 800df08:	2200      	movs	r2, #0
 800df0a:	629a      	str	r2, [r3, #40]	; 0x28
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	1e5a      	subs	r2, r3, #1
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df16:	4b4a      	ldr	r3, [pc, #296]	; (800e040 <xTaskRemoveFromEventList+0x184>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d15f      	bne.n	800dfde <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	60fb      	str	r3, [r7, #12]
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	69ba      	ldr	r2, [r7, #24]
 800df2a:	68d2      	ldr	r2, [r2, #12]
 800df2c:	609a      	str	r2, [r3, #8]
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	68db      	ldr	r3, [r3, #12]
 800df32:	69ba      	ldr	r2, [r7, #24]
 800df34:	6892      	ldr	r2, [r2, #8]
 800df36:	605a      	str	r2, [r3, #4]
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	685a      	ldr	r2, [r3, #4]
 800df3c:	69bb      	ldr	r3, [r7, #24]
 800df3e:	3304      	adds	r3, #4
 800df40:	429a      	cmp	r2, r3
 800df42:	d103      	bne.n	800df4c <xTaskRemoveFromEventList+0x90>
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	68da      	ldr	r2, [r3, #12]
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	605a      	str	r2, [r3, #4]
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	2200      	movs	r2, #0
 800df50:	615a      	str	r2, [r3, #20]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	1e5a      	subs	r2, r3, #1
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df60:	4b38      	ldr	r3, [pc, #224]	; (800e044 <xTaskRemoveFromEventList+0x188>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	429a      	cmp	r2, r3
 800df66:	d903      	bls.n	800df70 <xTaskRemoveFromEventList+0xb4>
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df6c:	4a35      	ldr	r2, [pc, #212]	; (800e044 <xTaskRemoveFromEventList+0x188>)
 800df6e:	6013      	str	r3, [r2, #0]
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df74:	4934      	ldr	r1, [pc, #208]	; (800e048 <xTaskRemoveFromEventList+0x18c>)
 800df76:	4613      	mov	r3, r2
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	4413      	add	r3, r2
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	440b      	add	r3, r1
 800df80:	3304      	adds	r3, #4
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	60bb      	str	r3, [r7, #8]
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	68ba      	ldr	r2, [r7, #8]
 800df8a:	609a      	str	r2, [r3, #8]
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	689a      	ldr	r2, [r3, #8]
 800df90:	69bb      	ldr	r3, [r7, #24]
 800df92:	60da      	str	r2, [r3, #12]
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	69ba      	ldr	r2, [r7, #24]
 800df9a:	3204      	adds	r2, #4
 800df9c:	605a      	str	r2, [r3, #4]
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	1d1a      	adds	r2, r3, #4
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	609a      	str	r2, [r3, #8]
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfaa:	4613      	mov	r3, r2
 800dfac:	009b      	lsls	r3, r3, #2
 800dfae:	4413      	add	r3, r2
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	4a25      	ldr	r2, [pc, #148]	; (800e048 <xTaskRemoveFromEventList+0x18c>)
 800dfb4:	441a      	add	r2, r3
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	615a      	str	r2, [r3, #20]
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfbe:	4922      	ldr	r1, [pc, #136]	; (800e048 <xTaskRemoveFromEventList+0x18c>)
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	009b      	lsls	r3, r3, #2
 800dfc4:	4413      	add	r3, r2
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	440b      	add	r3, r1
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	1c59      	adds	r1, r3, #1
 800dfce:	481e      	ldr	r0, [pc, #120]	; (800e048 <xTaskRemoveFromEventList+0x18c>)
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	009b      	lsls	r3, r3, #2
 800dfd4:	4413      	add	r3, r2
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	4403      	add	r3, r0
 800dfda:	6019      	str	r1, [r3, #0]
 800dfdc:	e01b      	b.n	800e016 <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dfde:	4b1b      	ldr	r3, [pc, #108]	; (800e04c <xTaskRemoveFromEventList+0x190>)
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	613b      	str	r3, [r7, #16]
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	693a      	ldr	r2, [r7, #16]
 800dfe8:	61da      	str	r2, [r3, #28]
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	689a      	ldr	r2, [r3, #8]
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	621a      	str	r2, [r3, #32]
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	69ba      	ldr	r2, [r7, #24]
 800dff8:	3218      	adds	r2, #24
 800dffa:	605a      	str	r2, [r3, #4]
 800dffc:	69bb      	ldr	r3, [r7, #24]
 800dffe:	f103 0218 	add.w	r2, r3, #24
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	609a      	str	r2, [r3, #8]
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	4a10      	ldr	r2, [pc, #64]	; (800e04c <xTaskRemoveFromEventList+0x190>)
 800e00a:	629a      	str	r2, [r3, #40]	; 0x28
 800e00c:	4b0f      	ldr	r3, [pc, #60]	; (800e04c <xTaskRemoveFromEventList+0x190>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	3301      	adds	r3, #1
 800e012:	4a0e      	ldr	r2, [pc, #56]	; (800e04c <xTaskRemoveFromEventList+0x190>)
 800e014:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01a:	4b0d      	ldr	r3, [pc, #52]	; (800e050 <xTaskRemoveFromEventList+0x194>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e020:	429a      	cmp	r2, r3
 800e022:	d905      	bls.n	800e030 <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800e024:	2301      	movs	r3, #1
 800e026:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800e028:	4b0a      	ldr	r3, [pc, #40]	; (800e054 <xTaskRemoveFromEventList+0x198>)
 800e02a:	2201      	movs	r2, #1
 800e02c:	601a      	str	r2, [r3, #0]
 800e02e:	e001      	b.n	800e034 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 800e030:	2300      	movs	r3, #0
 800e032:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800e034:	69fb      	ldr	r3, [r7, #28]
}
 800e036:	4618      	mov	r0, r3
 800e038:	3720      	adds	r7, #32
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	200018b0 	.word	0x200018b0
 800e044:	20001890 	.word	0x20001890
 800e048:	200013b8 	.word	0x200013b8
 800e04c:	20001848 	.word	0x20001848
 800e050:	200013b4 	.word	0x200013b4
 800e054:	2000189c 	.word	0x2000189c

0800e058 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e060:	4b06      	ldr	r3, [pc, #24]	; (800e07c <vTaskInternalSetTimeOutState+0x24>)
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800e068:	4b05      	ldr	r3, [pc, #20]	; (800e080 <vTaskInternalSetTimeOutState+0x28>)
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	605a      	str	r2, [r3, #4]
}
 800e070:	bf00      	nop
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr
 800e07c:	200018a0 	.word	0x200018a0
 800e080:	2000188c 	.word	0x2000188c

0800e084 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b086      	sub	sp, #24
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d102      	bne.n	800e09a <xTaskCheckForTimeOut+0x16>
 800e094:	f000 fdd0 	bl	800ec38 <ulSetInterruptMask>
 800e098:	e7fe      	b.n	800e098 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d102      	bne.n	800e0a6 <xTaskCheckForTimeOut+0x22>
 800e0a0:	f000 fdca 	bl	800ec38 <ulSetInterruptMask>
 800e0a4:	e7fe      	b.n	800e0a4 <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 800e0a6:	f000 fc8d 	bl	800e9c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800e0aa:	4b1f      	ldr	r3, [pc, #124]	; (800e128 <xTaskCheckForTimeOut+0xa4>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	693a      	ldr	r2, [r7, #16]
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0c2:	d102      	bne.n	800e0ca <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	617b      	str	r3, [r7, #20]
 800e0c8:	e026      	b.n	800e118 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	4b17      	ldr	r3, [pc, #92]	; (800e12c <xTaskCheckForTimeOut+0xa8>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d00a      	beq.n	800e0ec <xTaskCheckForTimeOut+0x68>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	693a      	ldr	r2, [r7, #16]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d305      	bcc.n	800e0ec <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	601a      	str	r2, [r3, #0]
 800e0ea:	e015      	b.n	800e118 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	68fa      	ldr	r2, [r7, #12]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d20b      	bcs.n	800e10e <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	1ad2      	subs	r2, r2, r3
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f7ff ffa8 	bl	800e058 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800e108:	2300      	movs	r3, #0
 800e10a:	617b      	str	r3, [r7, #20]
 800e10c:	e004      	b.n	800e118 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	2200      	movs	r2, #0
 800e112:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800e114:	2301      	movs	r3, #1
 800e116:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800e118:	f000 fc66 	bl	800e9e8 <vPortExitCritical>

    return xReturn;
 800e11c:	697b      	ldr	r3, [r7, #20]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3718      	adds	r7, #24
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	2000188c 	.word	0x2000188c
 800e12c:	200018a0 	.word	0x200018a0

0800e130 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e130:	b480      	push	{r7}
 800e132:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800e134:	4b03      	ldr	r3, [pc, #12]	; (800e144 <vTaskMissedYield+0x14>)
 800e136:	2201      	movs	r2, #1
 800e138:	601a      	str	r2, [r3, #0]
}
 800e13a:	bf00      	nop
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr
 800e144:	2000189c 	.word	0x2000189c

0800e148 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800e150:	f000 f84a 	bl	800e1e8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e154:	4b03      	ldr	r3, [pc, #12]	; (800e164 <prvIdleTask+0x1c>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d9f9      	bls.n	800e150 <prvIdleTask+0x8>
            {
                taskYIELD();
 800e15c:	f000 fc20 	bl	800e9a0 <vPortYield>
        prvCheckTasksWaitingTermination();
 800e160:	e7f6      	b.n	800e150 <prvIdleTask+0x8>
 800e162:	bf00      	nop
 800e164:	200013b8 	.word	0x200013b8

0800e168 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e16e:	2300      	movs	r3, #0
 800e170:	607b      	str	r3, [r7, #4]
 800e172:	e00c      	b.n	800e18e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e174:	687a      	ldr	r2, [r7, #4]
 800e176:	4613      	mov	r3, r2
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	4413      	add	r3, r2
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	4a12      	ldr	r2, [pc, #72]	; (800e1c8 <prvInitialiseTaskLists+0x60>)
 800e180:	4413      	add	r3, r2
 800e182:	4618      	mov	r0, r3
 800e184:	f7fe fe78 	bl	800ce78 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	3301      	adds	r3, #1
 800e18c:	607b      	str	r3, [r7, #4]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2b37      	cmp	r3, #55	; 0x37
 800e192:	d9ef      	bls.n	800e174 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800e194:	480d      	ldr	r0, [pc, #52]	; (800e1cc <prvInitialiseTaskLists+0x64>)
 800e196:	f7fe fe6f 	bl	800ce78 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800e19a:	480d      	ldr	r0, [pc, #52]	; (800e1d0 <prvInitialiseTaskLists+0x68>)
 800e19c:	f7fe fe6c 	bl	800ce78 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800e1a0:	480c      	ldr	r0, [pc, #48]	; (800e1d4 <prvInitialiseTaskLists+0x6c>)
 800e1a2:	f7fe fe69 	bl	800ce78 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800e1a6:	480c      	ldr	r0, [pc, #48]	; (800e1d8 <prvInitialiseTaskLists+0x70>)
 800e1a8:	f7fe fe66 	bl	800ce78 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800e1ac:	480b      	ldr	r0, [pc, #44]	; (800e1dc <prvInitialiseTaskLists+0x74>)
 800e1ae:	f7fe fe63 	bl	800ce78 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800e1b2:	4b0b      	ldr	r3, [pc, #44]	; (800e1e0 <prvInitialiseTaskLists+0x78>)
 800e1b4:	4a05      	ldr	r2, [pc, #20]	; (800e1cc <prvInitialiseTaskLists+0x64>)
 800e1b6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e1b8:	4b0a      	ldr	r3, [pc, #40]	; (800e1e4 <prvInitialiseTaskLists+0x7c>)
 800e1ba:	4a05      	ldr	r2, [pc, #20]	; (800e1d0 <prvInitialiseTaskLists+0x68>)
 800e1bc:	601a      	str	r2, [r3, #0]
}
 800e1be:	bf00      	nop
 800e1c0:	3708      	adds	r7, #8
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	200013b8 	.word	0x200013b8
 800e1cc:	20001818 	.word	0x20001818
 800e1d0:	2000182c 	.word	0x2000182c
 800e1d4:	20001848 	.word	0x20001848
 800e1d8:	2000185c 	.word	0x2000185c
 800e1dc:	20001874 	.word	0x20001874
 800e1e0:	20001840 	.word	0x20001840
 800e1e4:	20001844 	.word	0x20001844

0800e1e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e1ee:	e019      	b.n	800e224 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800e1f0:	f000 fbe8 	bl	800e9c4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1f4:	4b10      	ldr	r3, [pc, #64]	; (800e238 <prvCheckTasksWaitingTermination+0x50>)
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	68db      	ldr	r3, [r3, #12]
 800e1fa:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	3304      	adds	r3, #4
 800e200:	4618      	mov	r0, r3
 800e202:	f7fe fe9f 	bl	800cf44 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800e206:	4b0d      	ldr	r3, [pc, #52]	; (800e23c <prvCheckTasksWaitingTermination+0x54>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3b01      	subs	r3, #1
 800e20c:	4a0b      	ldr	r2, [pc, #44]	; (800e23c <prvCheckTasksWaitingTermination+0x54>)
 800e20e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800e210:	4b0b      	ldr	r3, [pc, #44]	; (800e240 <prvCheckTasksWaitingTermination+0x58>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	3b01      	subs	r3, #1
 800e216:	4a0a      	ldr	r2, [pc, #40]	; (800e240 <prvCheckTasksWaitingTermination+0x58>)
 800e218:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800e21a:	f000 fbe5 	bl	800e9e8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 f810 	bl	800e244 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e224:	4b06      	ldr	r3, [pc, #24]	; (800e240 <prvCheckTasksWaitingTermination+0x58>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d1e1      	bne.n	800e1f0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800e22c:	bf00      	nop
 800e22e:	bf00      	nop
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	2000185c 	.word	0x2000185c
 800e23c:	20001888 	.word	0x20001888
 800e240:	20001870 	.word	0x20001870

0800e244 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e252:	2b00      	cmp	r3, #0
 800e254:	d108      	bne.n	800e268 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e25a:	4618      	mov	r0, r3
 800e25c:	f000 fdf6 	bl	800ee4c <vPortFree>
                vPortFree( pxTCB );
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f000 fdf3 	bl	800ee4c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800e266:	e010      	b.n	800e28a <prvDeleteTCB+0x46>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d103      	bne.n	800e27a <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 fdea 	bl	800ee4c <vPortFree>
    }
 800e278:	e007      	b.n	800e28a <prvDeleteTCB+0x46>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e280:	2b02      	cmp	r3, #2
 800e282:	d002      	beq.n	800e28a <prvDeleteTCB+0x46>
 800e284:	f000 fcd8 	bl	800ec38 <ulSetInterruptMask>
 800e288:	e7fe      	b.n	800e288 <prvDeleteTCB+0x44>
    }
 800e28a:	bf00      	nop
 800e28c:	3708      	adds	r7, #8
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
	...

0800e294 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e294:	b480      	push	{r7}
 800e296:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e298:	4b0a      	ldr	r3, [pc, #40]	; (800e2c4 <prvResetNextTaskUnblockTime+0x30>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d104      	bne.n	800e2ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800e2a2:	4b09      	ldr	r3, [pc, #36]	; (800e2c8 <prvResetNextTaskUnblockTime+0x34>)
 800e2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800e2aa:	e005      	b.n	800e2b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e2ac:	4b05      	ldr	r3, [pc, #20]	; (800e2c4 <prvResetNextTaskUnblockTime+0x30>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	68db      	ldr	r3, [r3, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4a04      	ldr	r2, [pc, #16]	; (800e2c8 <prvResetNextTaskUnblockTime+0x34>)
 800e2b6:	6013      	str	r3, [r2, #0]
}
 800e2b8:	bf00      	nop
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr
 800e2c2:	bf00      	nop
 800e2c4:	20001840 	.word	0x20001840
 800e2c8:	200018a8 	.word	0x200018a8

0800e2cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800e2d2:	4b0b      	ldr	r3, [pc, #44]	; (800e300 <xTaskGetSchedulerState+0x34>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d102      	bne.n	800e2e0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	607b      	str	r3, [r7, #4]
 800e2de:	e008      	b.n	800e2f2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2e0:	4b08      	ldr	r3, [pc, #32]	; (800e304 <xTaskGetSchedulerState+0x38>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d102      	bne.n	800e2ee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800e2e8:	2302      	movs	r3, #2
 800e2ea:	607b      	str	r3, [r7, #4]
 800e2ec:	e001      	b.n	800e2f2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800e2f2:	687b      	ldr	r3, [r7, #4]
    }
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	20001894 	.word	0x20001894
 800e304:	200018b0 	.word	0x200018b0

0800e308 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b086      	sub	sp, #24
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800e312:	4b2e      	ldr	r3, [pc, #184]	; (800e3cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e318:	4b2d      	ldr	r3, [pc, #180]	; (800e3d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	3304      	adds	r3, #4
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fe fe10 	bl	800cf44 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e32a:	d124      	bne.n	800e376 <prvAddCurrentTaskToDelayedList+0x6e>
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d021      	beq.n	800e376 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e332:	4b28      	ldr	r3, [pc, #160]	; (800e3d4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	613b      	str	r3, [r7, #16]
 800e338:	4b25      	ldr	r3, [pc, #148]	; (800e3d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	693a      	ldr	r2, [r7, #16]
 800e33e:	609a      	str	r2, [r3, #8]
 800e340:	4b23      	ldr	r3, [pc, #140]	; (800e3d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	693a      	ldr	r2, [r7, #16]
 800e346:	6892      	ldr	r2, [r2, #8]
 800e348:	60da      	str	r2, [r3, #12]
 800e34a:	4b21      	ldr	r3, [pc, #132]	; (800e3d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e34c:	681a      	ldr	r2, [r3, #0]
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	3204      	adds	r2, #4
 800e354:	605a      	str	r2, [r3, #4]
 800e356:	4b1e      	ldr	r3, [pc, #120]	; (800e3d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	1d1a      	adds	r2, r3, #4
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	609a      	str	r2, [r3, #8]
 800e360:	4b1b      	ldr	r3, [pc, #108]	; (800e3d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4a1b      	ldr	r2, [pc, #108]	; (800e3d4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e366:	615a      	str	r2, [r3, #20]
 800e368:	4b1a      	ldr	r3, [pc, #104]	; (800e3d4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	3301      	adds	r3, #1
 800e36e:	4a19      	ldr	r2, [pc, #100]	; (800e3d4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e370:	6013      	str	r3, [r2, #0]
 800e372:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800e374:	e026      	b.n	800e3c4 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	4413      	add	r3, r2
 800e37c:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e37e:	4b14      	ldr	r3, [pc, #80]	; (800e3d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	68fa      	ldr	r2, [r7, #12]
 800e384:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d209      	bcs.n	800e3a2 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e38e:	4b12      	ldr	r3, [pc, #72]	; (800e3d8 <prvAddCurrentTaskToDelayedList+0xd0>)
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	4b0f      	ldr	r3, [pc, #60]	; (800e3d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	3304      	adds	r3, #4
 800e398:	4619      	mov	r1, r3
 800e39a:	4610      	mov	r0, r2
 800e39c:	f7fe fd99 	bl	800ced2 <vListInsert>
}
 800e3a0:	e010      	b.n	800e3c4 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3a2:	4b0e      	ldr	r3, [pc, #56]	; (800e3dc <prvAddCurrentTaskToDelayedList+0xd4>)
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	4b0a      	ldr	r3, [pc, #40]	; (800e3d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	3304      	adds	r3, #4
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	4610      	mov	r0, r2
 800e3b0:	f7fe fd8f 	bl	800ced2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800e3b4:	4b0a      	ldr	r3, [pc, #40]	; (800e3e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	68fa      	ldr	r2, [r7, #12]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d202      	bcs.n	800e3c4 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800e3be:	4a08      	ldr	r2, [pc, #32]	; (800e3e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6013      	str	r3, [r2, #0]
}
 800e3c4:	bf00      	nop
 800e3c6:	3718      	adds	r7, #24
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	2000188c 	.word	0x2000188c
 800e3d0:	200013b4 	.word	0x200013b4
 800e3d4:	20001874 	.word	0x20001874
 800e3d8:	20001844 	.word	0x20001844
 800e3dc:	20001840 	.word	0x20001840
 800e3e0:	200018a8 	.word	0x200018a8

0800e3e4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b088      	sub	sp, #32
 800e3e8:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800e3ee:	f000 fa59 	bl	800e8a4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800e3f2:	4b18      	ldr	r3, [pc, #96]	; (800e454 <xTimerCreateTimerTask+0x70>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d020      	beq.n	800e43c <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800e3fe:	2300      	movs	r3, #0
 800e400:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e402:	463a      	mov	r2, r7
 800e404:	1d39      	adds	r1, r7, #4
 800e406:	f107 0308 	add.w	r3, r7, #8
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fe fd1a 	bl	800ce44 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800e410:	6839      	ldr	r1, [r7, #0]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	9202      	str	r2, [sp, #8]
 800e418:	9301      	str	r3, [sp, #4]
 800e41a:	2302      	movs	r3, #2
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	2300      	movs	r3, #0
 800e420:	460a      	mov	r2, r1
 800e422:	490d      	ldr	r1, [pc, #52]	; (800e458 <xTimerCreateTimerTask+0x74>)
 800e424:	480d      	ldr	r0, [pc, #52]	; (800e45c <xTimerCreateTimerTask+0x78>)
 800e426:	f7ff f857 	bl	800d4d8 <xTaskCreateStatic>
 800e42a:	4603      	mov	r3, r0
 800e42c:	4a0c      	ldr	r2, [pc, #48]	; (800e460 <xTimerCreateTimerTask+0x7c>)
 800e42e:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800e430:	4b0b      	ldr	r3, [pc, #44]	; (800e460 <xTimerCreateTimerTask+0x7c>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800e438:	2301      	movs	r3, #1
 800e43a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d102      	bne.n	800e448 <xTimerCreateTimerTask+0x64>
 800e442:	f000 fbf9 	bl	800ec38 <ulSetInterruptMask>
 800e446:	e7fe      	b.n	800e446 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800e448:	68fb      	ldr	r3, [r7, #12]
    }
 800e44a:	4618      	mov	r0, r3
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	200018e4 	.word	0x200018e4
 800e458:	0800fecc 	.word	0x0800fecc
 800e45c:	0800e509 	.word	0x0800e509
 800e460:	200018e8 	.word	0x200018e8

0800e464 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e470:	e008      	b.n	800e484 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	699b      	ldr	r3, [r3, #24]
 800e476:	68ba      	ldr	r2, [r7, #8]
 800e478:	4413      	add	r3, r2
 800e47a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	6a1b      	ldr	r3, [r3, #32]
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	699a      	ldr	r2, [r3, #24]
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	18d1      	adds	r1, r2, r3
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	68f8      	ldr	r0, [r7, #12]
 800e492:	f000 f8d5 	bl	800e640 <prvInsertTimerInActiveList>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d1ea      	bne.n	800e472 <prvReloadTimer+0xe>
        }
    }
 800e49c:	bf00      	nop
 800e49e:	bf00      	nop
 800e4a0:	3710      	adds	r7, #16
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
	...

0800e4a8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4b2:	4b14      	ldr	r3, [pc, #80]	; (800e504 <prvProcessExpiredTimer+0x5c>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	3304      	adds	r3, #4
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7fe fd3f 	bl	800cf44 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4cc:	f003 0304 	and.w	r3, r3, #4
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d005      	beq.n	800e4e0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800e4d4:	683a      	ldr	r2, [r7, #0]
 800e4d6:	6879      	ldr	r1, [r7, #4]
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f7ff ffc3 	bl	800e464 <prvReloadTimer>
 800e4de:	e008      	b.n	800e4f2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4e6:	f023 0301 	bic.w	r3, r3, #1
 800e4ea:	b2da      	uxtb	r2, r3
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	6a1b      	ldr	r3, [r3, #32]
 800e4f6:	68f8      	ldr	r0, [r7, #12]
 800e4f8:	4798      	blx	r3
    }
 800e4fa:	bf00      	nop
 800e4fc:	3710      	adds	r7, #16
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	200018dc 	.word	0x200018dc

0800e508 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e510:	f107 0308 	add.w	r3, r7, #8
 800e514:	4618      	mov	r0, r3
 800e516:	f000 f84f 	bl	800e5b8 <prvGetNextExpireTime>
 800e51a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	4619      	mov	r1, r3
 800e520:	68f8      	ldr	r0, [r7, #12]
 800e522:	f000 f803 	bl	800e52c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800e526:	f000 f8cd 	bl	800e6c4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e52a:	e7f1      	b.n	800e510 <prvTimerTask+0x8>

0800e52c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800e536:	f7ff f9f1 	bl	800d91c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e53a:	f107 0308 	add.w	r3, r7, #8
 800e53e:	4618      	mov	r0, r3
 800e540:	f000 f85e 	bl	800e600 <prvSampleTimeNow>
 800e544:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d12a      	bne.n	800e5a2 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d10a      	bne.n	800e568 <prvProcessTimerOrBlockTask+0x3c>
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	429a      	cmp	r2, r3
 800e558:	d806      	bhi.n	800e568 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800e55a:	f7ff f9ed 	bl	800d938 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e55e:	68f9      	ldr	r1, [r7, #12]
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f7ff ffa1 	bl	800e4a8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800e566:	e01e      	b.n	800e5a6 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d008      	beq.n	800e580 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e56e:	4b10      	ldr	r3, [pc, #64]	; (800e5b0 <prvProcessTimerOrBlockTask+0x84>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d101      	bne.n	800e57c <prvProcessTimerOrBlockTask+0x50>
 800e578:	2301      	movs	r3, #1
 800e57a:	e000      	b.n	800e57e <prvProcessTimerOrBlockTask+0x52>
 800e57c:	2300      	movs	r3, #0
 800e57e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e580:	4b0c      	ldr	r3, [pc, #48]	; (800e5b4 <prvProcessTimerOrBlockTask+0x88>)
 800e582:	6818      	ldr	r0, [r3, #0]
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	1ad3      	subs	r3, r2, r3
 800e58a:	683a      	ldr	r2, [r7, #0]
 800e58c:	4619      	mov	r1, r3
 800e58e:	f7fe ff6f 	bl	800d470 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800e592:	f7ff f9d1 	bl	800d938 <xTaskResumeAll>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d104      	bne.n	800e5a6 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800e59c:	f000 fa00 	bl	800e9a0 <vPortYield>
    }
 800e5a0:	e001      	b.n	800e5a6 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800e5a2:	f7ff f9c9 	bl	800d938 <xTaskResumeAll>
    }
 800e5a6:	bf00      	nop
 800e5a8:	3710      	adds	r7, #16
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}
 800e5ae:	bf00      	nop
 800e5b0:	200018e0 	.word	0x200018e0
 800e5b4:	200018e4 	.word	0x200018e4

0800e5b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800e5b8:	b480      	push	{r7}
 800e5ba:	b085      	sub	sp, #20
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e5c0:	4b0e      	ldr	r3, [pc, #56]	; (800e5fc <prvGetNextExpireTime+0x44>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d101      	bne.n	800e5ce <prvGetNextExpireTime+0x16>
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	e000      	b.n	800e5d0 <prvGetNextExpireTime+0x18>
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d105      	bne.n	800e5e8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5dc:	4b07      	ldr	r3, [pc, #28]	; (800e5fc <prvGetNextExpireTime+0x44>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	60fb      	str	r3, [r7, #12]
 800e5e6:	e001      	b.n	800e5ec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
    }
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3714      	adds	r7, #20
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop
 800e5fc:	200018dc 	.word	0x200018dc

0800e600 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800e608:	f7ff fa82 	bl	800db10 <xTaskGetTickCount>
 800e60c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800e60e:	4b0b      	ldr	r3, [pc, #44]	; (800e63c <prvSampleTimeNow+0x3c>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	68fa      	ldr	r2, [r7, #12]
 800e614:	429a      	cmp	r2, r3
 800e616:	d205      	bcs.n	800e624 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800e618:	f000 f91e 	bl	800e858 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2201      	movs	r2, #1
 800e620:	601a      	str	r2, [r3, #0]
 800e622:	e002      	b.n	800e62a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800e62a:	4a04      	ldr	r2, [pc, #16]	; (800e63c <prvSampleTimeNow+0x3c>)
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800e630:	68fb      	ldr	r3, [r7, #12]
    }
 800e632:	4618      	mov	r0, r3
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	200018ec 	.word	0x200018ec

0800e640 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800e640:	b580      	push	{r7, lr}
 800e642:	b086      	sub	sp, #24
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	607a      	str	r2, [r7, #4]
 800e64c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800e64e:	2300      	movs	r3, #0
 800e650:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	68ba      	ldr	r2, [r7, #8]
 800e656:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	68fa      	ldr	r2, [r7, #12]
 800e65c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800e65e:	68ba      	ldr	r2, [r7, #8]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	429a      	cmp	r2, r3
 800e664:	d812      	bhi.n	800e68c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	1ad2      	subs	r2, r2, r3
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	699b      	ldr	r3, [r3, #24]
 800e670:	429a      	cmp	r2, r3
 800e672:	d302      	bcc.n	800e67a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800e674:	2301      	movs	r3, #1
 800e676:	617b      	str	r3, [r7, #20]
 800e678:	e01b      	b.n	800e6b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e67a:	4b10      	ldr	r3, [pc, #64]	; (800e6bc <prvInsertTimerInActiveList+0x7c>)
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	3304      	adds	r3, #4
 800e682:	4619      	mov	r1, r3
 800e684:	4610      	mov	r0, r2
 800e686:	f7fe fc24 	bl	800ced2 <vListInsert>
 800e68a:	e012      	b.n	800e6b2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	429a      	cmp	r2, r3
 800e692:	d206      	bcs.n	800e6a2 <prvInsertTimerInActiveList+0x62>
 800e694:	68ba      	ldr	r2, [r7, #8]
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d302      	bcc.n	800e6a2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800e69c:	2301      	movs	r3, #1
 800e69e:	617b      	str	r3, [r7, #20]
 800e6a0:	e007      	b.n	800e6b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e6a2:	4b07      	ldr	r3, [pc, #28]	; (800e6c0 <prvInsertTimerInActiveList+0x80>)
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	4610      	mov	r0, r2
 800e6ae:	f7fe fc10 	bl	800ced2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800e6b2:	697b      	ldr	r3, [r7, #20]
    }
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3718      	adds	r7, #24
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	200018e0 	.word	0x200018e0
 800e6c0:	200018dc 	.word	0x200018dc

0800e6c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b088      	sub	sp, #32
 800e6c8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6ca:	e0b2      	b.n	800e832 <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	da10      	bge.n	800e6f4 <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e6d2:	1d3b      	adds	r3, r7, #4
 800e6d4:	3304      	adds	r3, #4
 800e6d6:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d102      	bne.n	800e6e4 <prvProcessReceivedCommands+0x20>
 800e6de:	f000 faab 	bl	800ec38 <ulSetInterruptMask>
 800e6e2:	e7fe      	b.n	800e6e2 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	69fa      	ldr	r2, [r7, #28]
 800e6ea:	6850      	ldr	r0, [r2, #4]
 800e6ec:	69fa      	ldr	r2, [r7, #28]
 800e6ee:	6892      	ldr	r2, [r2, #8]
 800e6f0:	4611      	mov	r1, r2
 800e6f2:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	f2c0 809b 	blt.w	800e832 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	695b      	ldr	r3, [r3, #20]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d004      	beq.n	800e712 <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	3304      	adds	r3, #4
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7fe fc19 	bl	800cf44 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e712:	463b      	mov	r3, r7
 800e714:	4618      	mov	r0, r3
 800e716:	f7ff ff73 	bl	800e600 <prvSampleTimeNow>
 800e71a:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	3b01      	subs	r3, #1
 800e720:	2b08      	cmp	r3, #8
 800e722:	f200 8085 	bhi.w	800e830 <prvProcessReceivedCommands+0x16c>
 800e726:	a201      	add	r2, pc, #4	; (adr r2, 800e72c <prvProcessReceivedCommands+0x68>)
 800e728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e72c:	0800e751 	.word	0x0800e751
 800e730:	0800e751 	.word	0x0800e751
 800e734:	0800e7b9 	.word	0x0800e7b9
 800e738:	0800e7cd 	.word	0x0800e7cd
 800e73c:	0800e807 	.word	0x0800e807
 800e740:	0800e751 	.word	0x0800e751
 800e744:	0800e751 	.word	0x0800e751
 800e748:	0800e7b9 	.word	0x0800e7b9
 800e74c:	0800e7cd 	.word	0x0800e7cd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e750:	69bb      	ldr	r3, [r7, #24]
 800e752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e756:	f043 0301 	orr.w	r3, r3, #1
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	699b      	ldr	r3, [r3, #24]
 800e768:	18d1      	adds	r1, r2, r3
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	697a      	ldr	r2, [r7, #20]
 800e76e:	69b8      	ldr	r0, [r7, #24]
 800e770:	f7ff ff66 	bl	800e640 <prvInsertTimerInActiveList>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d05b      	beq.n	800e832 <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e780:	f003 0304 	and.w	r3, r3, #4
 800e784:	2b00      	cmp	r3, #0
 800e786:	d009      	beq.n	800e79c <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800e788:	68ba      	ldr	r2, [r7, #8]
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	699b      	ldr	r3, [r3, #24]
 800e78e:	4413      	add	r3, r2
 800e790:	697a      	ldr	r2, [r7, #20]
 800e792:	4619      	mov	r1, r3
 800e794:	69b8      	ldr	r0, [r7, #24]
 800e796:	f7ff fe65 	bl	800e464 <prvReloadTimer>
 800e79a:	e008      	b.n	800e7ae <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7a2:	f023 0301 	bic.w	r3, r3, #1
 800e7a6:	b2da      	uxtb	r2, r3
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7ae:	69bb      	ldr	r3, [r7, #24]
 800e7b0:	6a1b      	ldr	r3, [r3, #32]
 800e7b2:	69b8      	ldr	r0, [r7, #24]
 800e7b4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800e7b6:	e03c      	b.n	800e832 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e7b8:	69bb      	ldr	r3, [r7, #24]
 800e7ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7be:	f023 0301 	bic.w	r3, r3, #1
 800e7c2:	b2da      	uxtb	r2, r3
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800e7ca:	e032      	b.n	800e832 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7d2:	f043 0301 	orr.w	r3, r3, #1
 800e7d6:	b2da      	uxtb	r2, r3
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e7de:	68ba      	ldr	r2, [r7, #8]
 800e7e0:	69bb      	ldr	r3, [r7, #24]
 800e7e2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	699b      	ldr	r3, [r3, #24]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d102      	bne.n	800e7f2 <prvProcessReceivedCommands+0x12e>
 800e7ec:	f000 fa24 	bl	800ec38 <ulSetInterruptMask>
 800e7f0:	e7fe      	b.n	800e7f0 <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	699a      	ldr	r2, [r3, #24]
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	18d1      	adds	r1, r2, r3
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	697a      	ldr	r2, [r7, #20]
 800e7fe:	69b8      	ldr	r0, [r7, #24]
 800e800:	f7ff ff1e 	bl	800e640 <prvInsertTimerInActiveList>
                        break;
 800e804:	e015      	b.n	800e832 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e806:	69bb      	ldr	r3, [r7, #24]
 800e808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e80c:	f003 0302 	and.w	r3, r3, #2
 800e810:	2b00      	cmp	r3, #0
 800e812:	d103      	bne.n	800e81c <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 800e814:	69b8      	ldr	r0, [r7, #24]
 800e816:	f000 fb19 	bl	800ee4c <vPortFree>
 800e81a:	e00a      	b.n	800e832 <prvProcessReceivedCommands+0x16e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e81c:	69bb      	ldr	r3, [r7, #24]
 800e81e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e822:	f023 0301 	bic.w	r3, r3, #1
 800e826:	b2da      	uxtb	r2, r3
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800e82e:	e000      	b.n	800e832 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800e830:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e832:	4b08      	ldr	r3, [pc, #32]	; (800e854 <prvProcessReceivedCommands+0x190>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	1d39      	adds	r1, r7, #4
 800e838:	2200      	movs	r2, #0
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7fe fc8c 	bl	800d158 <xQueueReceive>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	f47f af42 	bne.w	800e6cc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800e848:	bf00      	nop
 800e84a:	bf00      	nop
 800e84c:	3720      	adds	r7, #32
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	200018e4 	.word	0x200018e4

0800e858 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e85e:	e009      	b.n	800e874 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e860:	4b0e      	ldr	r3, [pc, #56]	; (800e89c <prvSwitchTimerLists+0x44>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800e86a:	f04f 31ff 	mov.w	r1, #4294967295
 800e86e:	6838      	ldr	r0, [r7, #0]
 800e870:	f7ff fe1a 	bl	800e4a8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e874:	4b09      	ldr	r3, [pc, #36]	; (800e89c <prvSwitchTimerLists+0x44>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d1f0      	bne.n	800e860 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800e87e:	4b07      	ldr	r3, [pc, #28]	; (800e89c <prvSwitchTimerLists+0x44>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800e884:	4b06      	ldr	r3, [pc, #24]	; (800e8a0 <prvSwitchTimerLists+0x48>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a04      	ldr	r2, [pc, #16]	; (800e89c <prvSwitchTimerLists+0x44>)
 800e88a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800e88c:	4a04      	ldr	r2, [pc, #16]	; (800e8a0 <prvSwitchTimerLists+0x48>)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6013      	str	r3, [r2, #0]
    }
 800e892:	bf00      	nop
 800e894:	3708      	adds	r7, #8
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	200018dc 	.word	0x200018dc
 800e8a0:	200018e0 	.word	0x200018e0

0800e8a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800e8aa:	f000 f88b 	bl	800e9c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800e8ae:	4b15      	ldr	r3, [pc, #84]	; (800e904 <prvCheckForValidListAndQueue+0x60>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d120      	bne.n	800e8f8 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800e8b6:	4814      	ldr	r0, [pc, #80]	; (800e908 <prvCheckForValidListAndQueue+0x64>)
 800e8b8:	f7fe fade 	bl	800ce78 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800e8bc:	4813      	ldr	r0, [pc, #76]	; (800e90c <prvCheckForValidListAndQueue+0x68>)
 800e8be:	f7fe fadb 	bl	800ce78 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800e8c2:	4b13      	ldr	r3, [pc, #76]	; (800e910 <prvCheckForValidListAndQueue+0x6c>)
 800e8c4:	4a10      	ldr	r2, [pc, #64]	; (800e908 <prvCheckForValidListAndQueue+0x64>)
 800e8c6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800e8c8:	4b12      	ldr	r3, [pc, #72]	; (800e914 <prvCheckForValidListAndQueue+0x70>)
 800e8ca:	4a10      	ldr	r2, [pc, #64]	; (800e90c <prvCheckForValidListAndQueue+0x68>)
 800e8cc:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	9300      	str	r3, [sp, #0]
 800e8d2:	4b11      	ldr	r3, [pc, #68]	; (800e918 <prvCheckForValidListAndQueue+0x74>)
 800e8d4:	4a11      	ldr	r2, [pc, #68]	; (800e91c <prvCheckForValidListAndQueue+0x78>)
 800e8d6:	2110      	movs	r1, #16
 800e8d8:	200a      	movs	r0, #10
 800e8da:	f7fe fbd4 	bl	800d086 <xQueueGenericCreateStatic>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	4a08      	ldr	r2, [pc, #32]	; (800e904 <prvCheckForValidListAndQueue+0x60>)
 800e8e2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800e8e4:	4b07      	ldr	r3, [pc, #28]	; (800e904 <prvCheckForValidListAndQueue+0x60>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d005      	beq.n	800e8f8 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e8ec:	4b05      	ldr	r3, [pc, #20]	; (800e904 <prvCheckForValidListAndQueue+0x60>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	490b      	ldr	r1, [pc, #44]	; (800e920 <prvCheckForValidListAndQueue+0x7c>)
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fe fd78 	bl	800d3e8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800e8f8:	f000 f876 	bl	800e9e8 <vPortExitCritical>
    }
 800e8fc:	bf00      	nop
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	200018e4 	.word	0x200018e4
 800e908:	200018b4 	.word	0x200018b4
 800e90c:	200018c8 	.word	0x200018c8
 800e910:	200018dc 	.word	0x200018dc
 800e914:	200018e0 	.word	0x200018e0
 800e918:	20001990 	.word	0x20001990
 800e91c:	200018f0 	.word	0x200018f0
 800e920:	0800fed4 	.word	0x0800fed4

0800e924 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800e924:	b480      	push	{r7}
 800e926:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e928:	4b0b      	ldr	r3, [pc, #44]	; (800e958 <vPortSetupTimerInterrupt+0x34>)
 800e92a:	2200      	movs	r2, #0
 800e92c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e92e:	4b0b      	ldr	r3, [pc, #44]	; (800e95c <vPortSetupTimerInterrupt+0x38>)
 800e930:	2200      	movs	r2, #0
 800e932:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e934:	4b0a      	ldr	r3, [pc, #40]	; (800e960 <vPortSetupTimerInterrupt+0x3c>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a0a      	ldr	r2, [pc, #40]	; (800e964 <vPortSetupTimerInterrupt+0x40>)
 800e93a:	fba2 2303 	umull	r2, r3, r2, r3
 800e93e:	099b      	lsrs	r3, r3, #6
 800e940:	4a09      	ldr	r2, [pc, #36]	; (800e968 <vPortSetupTimerInterrupt+0x44>)
 800e942:	3b01      	subs	r3, #1
 800e944:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800e946:	4b04      	ldr	r3, [pc, #16]	; (800e958 <vPortSetupTimerInterrupt+0x34>)
 800e948:	2207      	movs	r2, #7
 800e94a:	601a      	str	r2, [r3, #0]
}
 800e94c:	bf00      	nop
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	e000e010 	.word	0xe000e010
 800e95c:	e000e018 	.word	0xe000e018
 800e960:	2000000c 	.word	0x2000000c
 800e964:	10624dd3 	.word	0x10624dd3
 800e968:	e000e014 	.word	0xe000e014

0800e96c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800e972:	2300      	movs	r3, #0
 800e974:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800e976:	4b09      	ldr	r3, [pc, #36]	; (800e99c <prvTaskExitError+0x30>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e97e:	d002      	beq.n	800e986 <prvTaskExitError+0x1a>
 800e980:	f000 f95a 	bl	800ec38 <ulSetInterruptMask>
 800e984:	e7fe      	b.n	800e984 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800e986:	f000 f957 	bl	800ec38 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800e98a:	bf00      	nop
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d0fc      	beq.n	800e98c <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800e992:	bf00      	nop
 800e994:	bf00      	nop
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	2000004c 	.word	0x2000004c

0800e9a0 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e9a4:	4b06      	ldr	r3, [pc, #24]	; (800e9c0 <vPortYield+0x20>)
 800e9a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9aa:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800e9ac:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800e9b0:	f3bf 8f6f 	isb	sy
}
 800e9b4:	bf00      	nop
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	e000ed04 	.word	0xe000ed04

0800e9c4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800e9c8:	f000 f936 	bl	800ec38 <ulSetInterruptMask>
    ulCriticalNesting++;
 800e9cc:	4b05      	ldr	r3, [pc, #20]	; (800e9e4 <vPortEnterCritical+0x20>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	4a04      	ldr	r2, [pc, #16]	; (800e9e4 <vPortEnterCritical+0x20>)
 800e9d4:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800e9d6:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800e9da:	f3bf 8f6f 	isb	sy
}
 800e9de:	bf00      	nop
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	2000004c 	.word	0x2000004c

0800e9e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800e9ec:	4b0a      	ldr	r3, [pc, #40]	; (800ea18 <vPortExitCritical+0x30>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d102      	bne.n	800e9fa <vPortExitCritical+0x12>
 800e9f4:	f000 f920 	bl	800ec38 <ulSetInterruptMask>
 800e9f8:	e7fe      	b.n	800e9f8 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800e9fa:	4b07      	ldr	r3, [pc, #28]	; (800ea18 <vPortExitCritical+0x30>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	3b01      	subs	r3, #1
 800ea00:	4a05      	ldr	r2, [pc, #20]	; (800ea18 <vPortExitCritical+0x30>)
 800ea02:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800ea04:	4b04      	ldr	r3, [pc, #16]	; (800ea18 <vPortExitCritical+0x30>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d102      	bne.n	800ea12 <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	f000 f920 	bl	800ec52 <vClearInterruptMask>
    }
}
 800ea12:	bf00      	nop
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	2000004c 	.word	0x2000004c

0800ea1c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea22:	f000 f909 	bl	800ec38 <ulSetInterruptMask>
 800ea26:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800ea28:	f7ff f882 	bl	800db30 <xTaskIncrementTick>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d003      	beq.n	800ea3a <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea32:	4b05      	ldr	r3, [pc, #20]	; (800ea48 <xPortSysTickHandler+0x2c>)
 800ea34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea38:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 f909 	bl	800ec52 <vClearInterruptMask>
}
 800ea40:	bf00      	nop
 800ea42:	3708      	adds	r7, #8
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	e000ed04 	.word	0xe000ed04

0800ea4c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	699b      	ldr	r3, [r3, #24]
 800ea58:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	3b02      	subs	r3, #2
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800ea62:	7afb      	ldrb	r3, [r7, #11]
 800ea64:	2b02      	cmp	r3, #2
 800ea66:	d102      	bne.n	800ea6e <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800ea68:	f000 f8b2 	bl	800ebd0 <vRestoreContextOfFirstTask>
            break;
 800ea6c:	e002      	b.n	800ea74 <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800ea6e:	f000 f8e3 	bl	800ec38 <ulSetInterruptMask>
 800ea72:	e7fe      	b.n	800ea72 <vPortSVCHandler_C+0x26>
    }
}
 800ea74:	bf00      	nop
 800ea76:	3710      	adds	r7, #16
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	60b9      	str	r1, [r7, #8]
 800ea86:	607a      	str	r2, [r7, #4]
 800ea88:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	3b04      	subs	r3, #4
 800ea8e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ea96:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	3b04      	subs	r3, #4
 800ea9c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	3b04      	subs	r3, #4
 800eaa8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800eaaa:	4a38      	ldr	r2, [pc, #224]	; (800eb8c <pxPortInitialiseStack+0x110>)
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	3b04      	subs	r3, #4
 800eab4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800eabc:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	3b04      	subs	r3, #4
 800eac2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800eaca:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	3b04      	subs	r3, #4
 800ead0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800ead8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	3b04      	subs	r3, #4
 800eade:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800eae6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	3b04      	subs	r3, #4
 800eaec:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800eaee:	683a      	ldr	r2, [r7, #0]
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	3b04      	subs	r3, #4
 800eaf8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800eb00:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	3b04      	subs	r3, #4
 800eb06:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800eb0e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	3b04      	subs	r3, #4
 800eb14:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800eb1c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	3b04      	subs	r3, #4
 800eb22:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800eb2a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	3b04      	subs	r3, #4
 800eb30:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800eb38:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	3b04      	subs	r3, #4
 800eb3e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800eb46:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	3b04      	subs	r3, #4
 800eb4c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800eb54:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	3b04      	subs	r3, #4
 800eb5a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800eb62:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	3b04      	subs	r3, #4
 800eb68:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800eb70:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	3b04      	subs	r3, #4
 800eb76:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800eb78:	68ba      	ldr	r2, [r7, #8]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3714      	adds	r7, #20
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr
 800eb8c:	0800e96d 	.word	0x0800e96d

0800eb90 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800eb94:	4b0c      	ldr	r3, [pc, #48]	; (800ebc8 <xPortStartScheduler+0x38>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4a0b      	ldr	r2, [pc, #44]	; (800ebc8 <xPortStartScheduler+0x38>)
 800eb9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb9e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800eba0:	4b09      	ldr	r3, [pc, #36]	; (800ebc8 <xPortStartScheduler+0x38>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4a08      	ldr	r2, [pc, #32]	; (800ebc8 <xPortStartScheduler+0x38>)
 800eba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ebaa:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800ebac:	f7ff feba 	bl	800e924 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800ebb0:	4b06      	ldr	r3, [pc, #24]	; (800ebcc <xPortStartScheduler+0x3c>)
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800ebb6:	f000 f82b 	bl	800ec10 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800ebba:	f7ff f8d1 	bl	800dd60 <vTaskSwitchContext>
    prvTaskExitError();
 800ebbe:	f7ff fed5 	bl	800e96c <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800ebc2:	2300      	movs	r3, #0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	e000ed20 	.word	0xe000ed20
 800ebcc:	2000004c 	.word	0x2000004c

0800ebd0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ebd0:	4a0b      	ldr	r2, [pc, #44]	; (800ec00 <pxCurrentTCBConst2>)
 800ebd2:	6811      	ldr	r1, [r2, #0]
 800ebd4:	6808      	ldr	r0, [r1, #0]
 800ebd6:	c806      	ldmia	r0!, {r1, r2}
 800ebd8:	f381 880b 	msr	PSPLIM, r1
 800ebdc:	2102      	movs	r1, #2
 800ebde:	f381 8814 	msr	CONTROL, r1
 800ebe2:	3020      	adds	r0, #32
 800ebe4:	f380 8809 	msr	PSP, r0
 800ebe8:	f3bf 8f6f 	isb	sy
 800ebec:	f04f 0000 	mov.w	r0, #0
 800ebf0:	f380 8811 	msr	BASEPRI, r0
 800ebf4:	4710      	bx	r2
 800ebf6:	bf00      	nop
 800ebf8:	f3af 8000 	nop.w
 800ebfc:	f3af 8000 	nop.w

0800ec00 <pxCurrentTCBConst2>:
 800ec00:	200013b4 	.word	0x200013b4
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800ec04:	bf00      	nop
 800ec06:	bf00      	nop
	...

0800ec10 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ec10:	4807      	ldr	r0, [pc, #28]	; (800ec30 <xVTORConst>)
 800ec12:	6800      	ldr	r0, [r0, #0]
 800ec14:	6800      	ldr	r0, [r0, #0]
 800ec16:	f380 8808 	msr	MSP, r0
 800ec1a:	b662      	cpsie	i
 800ec1c:	b661      	cpsie	f
 800ec1e:	f3bf 8f4f 	dsb	sy
 800ec22:	f3bf 8f6f 	isb	sy
 800ec26:	df02      	svc	2
 800ec28:	bf00      	nop
 800ec2a:	bf00      	nop
 800ec2c:	f3af 8000 	nop.w

0800ec30 <xVTORConst>:
 800ec30:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800ec34:	bf00      	nop
 800ec36:	bf00      	nop

0800ec38 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ec38:	f3ef 8011 	mrs	r0, BASEPRI
 800ec3c:	f04f 0150 	mov.w	r1, #80	; 0x50
 800ec40:	f381 8811 	msr	BASEPRI, r1
 800ec44:	f3bf 8f4f 	dsb	sy
 800ec48:	f3bf 8f6f 	isb	sy
 800ec4c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800ec4e:	bf00      	nop
 800ec50:	4618      	mov	r0, r3

0800ec52 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ec52:	f380 8811 	msr	BASEPRI, r0
 800ec56:	f3bf 8f4f 	dsb	sy
 800ec5a:	f3bf 8f6f 	isb	sy
 800ec5e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800ec60:	bf00      	nop
	...

0800ec70 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ec70:	f3ef 8009 	mrs	r0, PSP
 800ec74:	f3ef 820b 	mrs	r2, PSPLIM
 800ec78:	4673      	mov	r3, lr
 800ec7a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ec7e:	4a10      	ldr	r2, [pc, #64]	; (800ecc0 <pxCurrentTCBConst>)
 800ec80:	6811      	ldr	r1, [r2, #0]
 800ec82:	6008      	str	r0, [r1, #0]
 800ec84:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ec88:	f380 8811 	msr	BASEPRI, r0
 800ec8c:	f3bf 8f4f 	dsb	sy
 800ec90:	f3bf 8f6f 	isb	sy
 800ec94:	f7ff f864 	bl	800dd60 <vTaskSwitchContext>
 800ec98:	f04f 0000 	mov.w	r0, #0
 800ec9c:	f380 8811 	msr	BASEPRI, r0
 800eca0:	4a07      	ldr	r2, [pc, #28]	; (800ecc0 <pxCurrentTCBConst>)
 800eca2:	6811      	ldr	r1, [r2, #0]
 800eca4:	6808      	ldr	r0, [r1, #0]
 800eca6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ecaa:	f382 880b 	msr	PSPLIM, r2
 800ecae:	f380 8809 	msr	PSP, r0
 800ecb2:	4718      	bx	r3
 800ecb4:	f3af 8000 	nop.w
 800ecb8:	f3af 8000 	nop.w
 800ecbc:	f3af 8000 	nop.w

0800ecc0 <pxCurrentTCBConst>:
 800ecc0:	200013b4 	.word	0x200013b4
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800ecc4:	bf00      	nop
 800ecc6:	bf00      	nop
	...

0800ecd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ecd0:	f01e 0f04 	tst.w	lr, #4
 800ecd4:	bf0c      	ite	eq
 800ecd6:	f3ef 8008 	mrseq	r0, MSP
 800ecda:	f3ef 8009 	mrsne	r0, PSP
 800ecde:	4904      	ldr	r1, [pc, #16]	; (800ecf0 <svchandler_address_const>)
 800ece0:	4708      	bx	r1
 800ece2:	bf00      	nop
 800ece4:	f3af 8000 	nop.w
 800ece8:	f3af 8000 	nop.w
 800ecec:	f3af 8000 	nop.w

0800ecf0 <svchandler_address_const>:
 800ecf0:	0800ea4d 	.word	0x0800ea4d
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800ecf4:	bf00      	nop
 800ecf6:	bf00      	nop

0800ecf8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b088      	sub	sp, #32
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800ed00:	2300      	movs	r3, #0
 800ed02:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800ed04:	f7fe fe0a 	bl	800d91c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800ed08:	4b4b      	ldr	r3, [pc, #300]	; (800ee38 <pvPortMalloc+0x140>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d101      	bne.n	800ed14 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800ed10:	f000 f8e8 	bl	800eee4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d012      	beq.n	800ed40 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800ed1a:	2208      	movs	r2, #8
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f003 0307 	and.w	r3, r3, #7
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	3308      	adds	r3, #8
 800ed26:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	43db      	mvns	r3, r3
 800ed2c:	687a      	ldr	r2, [r7, #4]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d804      	bhi.n	800ed3c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	4413      	add	r3, r2
 800ed38:	607b      	str	r3, [r7, #4]
 800ed3a:	e001      	b.n	800ed40 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	db68      	blt.n	800ee18 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d065      	beq.n	800ee18 <pvPortMalloc+0x120>
 800ed4c:	4b3b      	ldr	r3, [pc, #236]	; (800ee3c <pvPortMalloc+0x144>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d860      	bhi.n	800ee18 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800ed56:	4b3a      	ldr	r3, [pc, #232]	; (800ee40 <pvPortMalloc+0x148>)
 800ed58:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800ed5a:	4b39      	ldr	r3, [pc, #228]	; (800ee40 <pvPortMalloc+0x148>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed60:	e004      	b.n	800ed6c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800ed66:	69fb      	ldr	r3, [r7, #28]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d903      	bls.n	800ed7e <pvPortMalloc+0x86>
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d1f1      	bne.n	800ed62 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800ed7e:	4b2e      	ldr	r3, [pc, #184]	; (800ee38 <pvPortMalloc+0x140>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	69fa      	ldr	r2, [r7, #28]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d047      	beq.n	800ee18 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2208      	movs	r2, #8
 800ed8e:	4413      	add	r3, r2
 800ed90:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed92:	69fb      	ldr	r3, [r7, #28]
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	69bb      	ldr	r3, [r7, #24]
 800ed98:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	685a      	ldr	r2, [r3, #4]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	1ad2      	subs	r2, r2, r3
 800eda2:	2308      	movs	r3, #8
 800eda4:	005b      	lsls	r3, r3, #1
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d917      	bls.n	800edda <pvPortMalloc+0xe2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800edaa:	69fa      	ldr	r2, [r7, #28]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	4413      	add	r3, r2
 800edb0:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f003 0307 	and.w	r3, r3, #7
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d002      	beq.n	800edc2 <pvPortMalloc+0xca>
 800edbc:	f7ff ff3c 	bl	800ec38 <ulSetInterruptMask>
 800edc0:	e7fe      	b.n	800edc0 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800edc2:	69fb      	ldr	r3, [r7, #28]
 800edc4:	685a      	ldr	r2, [r3, #4]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	1ad2      	subs	r2, r2, r3
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800edce:	69fb      	ldr	r3, [r7, #28]
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f000 f8e1 	bl	800ef9c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800edda:	4b18      	ldr	r3, [pc, #96]	; (800ee3c <pvPortMalloc+0x144>)
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	1ad3      	subs	r3, r2, r3
 800ede4:	4a15      	ldr	r2, [pc, #84]	; (800ee3c <pvPortMalloc+0x144>)
 800ede6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ede8:	4b14      	ldr	r3, [pc, #80]	; (800ee3c <pvPortMalloc+0x144>)
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	4b15      	ldr	r3, [pc, #84]	; (800ee44 <pvPortMalloc+0x14c>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d203      	bcs.n	800edfc <pvPortMalloc+0x104>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800edf4:	4b11      	ldr	r3, [pc, #68]	; (800ee3c <pvPortMalloc+0x144>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a12      	ldr	r2, [pc, #72]	; (800ee44 <pvPortMalloc+0x14c>)
 800edfa:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800edfc:	69fb      	ldr	r3, [r7, #28]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800ee0e:	4b0e      	ldr	r3, [pc, #56]	; (800ee48 <pvPortMalloc+0x150>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	3301      	adds	r3, #1
 800ee14:	4a0c      	ldr	r2, [pc, #48]	; (800ee48 <pvPortMalloc+0x150>)
 800ee16:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800ee18:	f7fe fd8e 	bl	800d938 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	f003 0307 	and.w	r3, r3, #7
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d002      	beq.n	800ee2c <pvPortMalloc+0x134>
 800ee26:	f7ff ff07 	bl	800ec38 <ulSetInterruptMask>
 800ee2a:	e7fe      	b.n	800ee2a <pvPortMalloc+0x132>
    return pvReturn;
 800ee2c:	697b      	ldr	r3, [r7, #20]
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3720      	adds	r7, #32
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	200039e8 	.word	0x200039e8
 800ee3c:	200039ec 	.word	0x200039ec
 800ee40:	200039e0 	.word	0x200039e0
 800ee44:	200039f0 	.word	0x200039f0
 800ee48:	200039f4 	.word	0x200039f4

0800ee4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d039      	beq.n	800eed2 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800ee5e:	2308      	movs	r3, #8
 800ee60:	425b      	negs	r3, r3
 800ee62:	68fa      	ldr	r2, [r7, #12]
 800ee64:	4413      	add	r3, r2
 800ee66:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	db02      	blt.n	800ee7a <vPortFree+0x2e>
 800ee74:	f7ff fee0 	bl	800ec38 <ulSetInterruptMask>
 800ee78:	e7fe      	b.n	800ee78 <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d002      	beq.n	800ee88 <vPortFree+0x3c>
 800ee82:	f7ff fed9 	bl	800ec38 <ulSetInterruptMask>
 800ee86:	e7fe      	b.n	800ee86 <vPortFree+0x3a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	0fdb      	lsrs	r3, r3, #31
 800ee8e:	f003 0301 	and.w	r3, r3, #1
 800ee92:	b2db      	uxtb	r3, r3
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d01c      	beq.n	800eed2 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d118      	bne.n	800eed2 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800eeac:	f7fe fd36 	bl	800d91c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	685a      	ldr	r2, [r3, #4]
 800eeb4:	4b09      	ldr	r3, [pc, #36]	; (800eedc <vPortFree+0x90>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4413      	add	r3, r2
 800eeba:	4a08      	ldr	r2, [pc, #32]	; (800eedc <vPortFree+0x90>)
 800eebc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eebe:	68b8      	ldr	r0, [r7, #8]
 800eec0:	f000 f86c 	bl	800ef9c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800eec4:	4b06      	ldr	r3, [pc, #24]	; (800eee0 <vPortFree+0x94>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	3301      	adds	r3, #1
 800eeca:	4a05      	ldr	r2, [pc, #20]	; (800eee0 <vPortFree+0x94>)
 800eecc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800eece:	f7fe fd33 	bl	800d938 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800eed2:	bf00      	nop
 800eed4:	3710      	adds	r7, #16
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	bf00      	nop
 800eedc:	200039ec 	.word	0x200039ec
 800eee0:	200039f8 	.word	0x200039f8

0800eee4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eeea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eeee:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800eef0:	4b25      	ldr	r3, [pc, #148]	; (800ef88 <prvHeapInit+0xa4>)
 800eef2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f003 0307 	and.w	r3, r3, #7
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d00c      	beq.n	800ef18 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	3307      	adds	r3, #7
 800ef02:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f023 0307 	bic.w	r3, r3, #7
 800ef0a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800ef0c:	68ba      	ldr	r2, [r7, #8]
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	1ad3      	subs	r3, r2, r3
 800ef12:	4a1d      	ldr	r2, [pc, #116]	; (800ef88 <prvHeapInit+0xa4>)
 800ef14:	4413      	add	r3, r2
 800ef16:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ef1c:	4a1b      	ldr	r2, [pc, #108]	; (800ef8c <prvHeapInit+0xa8>)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800ef22:	4b1a      	ldr	r3, [pc, #104]	; (800ef8c <prvHeapInit+0xa8>)
 800ef24:	2200      	movs	r2, #0
 800ef26:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	68ba      	ldr	r2, [r7, #8]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800ef30:	2208      	movs	r2, #8
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	1a9b      	subs	r3, r3, r2
 800ef36:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f023 0307 	bic.w	r3, r3, #7
 800ef3e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	4a13      	ldr	r2, [pc, #76]	; (800ef90 <prvHeapInit+0xac>)
 800ef44:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800ef46:	4b12      	ldr	r3, [pc, #72]	; (800ef90 <prvHeapInit+0xac>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800ef4e:	4b10      	ldr	r3, [pc, #64]	; (800ef90 <prvHeapInit+0xac>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	2200      	movs	r2, #0
 800ef54:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	68fa      	ldr	r2, [r7, #12]
 800ef5e:	1ad2      	subs	r2, r2, r3
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ef64:	4b0a      	ldr	r3, [pc, #40]	; (800ef90 <prvHeapInit+0xac>)
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	4a08      	ldr	r2, [pc, #32]	; (800ef94 <prvHeapInit+0xb0>)
 800ef72:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	4a07      	ldr	r2, [pc, #28]	; (800ef98 <prvHeapInit+0xb4>)
 800ef7a:	6013      	str	r3, [r2, #0]
}
 800ef7c:	bf00      	nop
 800ef7e:	3714      	adds	r7, #20
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr
 800ef88:	200019e0 	.word	0x200019e0
 800ef8c:	200039e0 	.word	0x200039e0
 800ef90:	200039e8 	.word	0x200039e8
 800ef94:	200039f0 	.word	0x200039f0
 800ef98:	200039ec 	.word	0x200039ec

0800ef9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800efa4:	4b28      	ldr	r3, [pc, #160]	; (800f048 <prvInsertBlockIntoFreeList+0xac>)
 800efa6:	60fb      	str	r3, [r7, #12]
 800efa8:	e002      	b.n	800efb0 <prvInsertBlockIntoFreeList+0x14>
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	60fb      	str	r3, [r7, #12]
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d8f7      	bhi.n	800efaa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	68ba      	ldr	r2, [r7, #8]
 800efc4:	4413      	add	r3, r2
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d108      	bne.n	800efde <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	685a      	ldr	r2, [r3, #4]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	441a      	add	r2, r3
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	68ba      	ldr	r2, [r7, #8]
 800efe8:	441a      	add	r2, r3
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d118      	bne.n	800f024 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	4b15      	ldr	r3, [pc, #84]	; (800f04c <prvInsertBlockIntoFreeList+0xb0>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	429a      	cmp	r2, r3
 800effc:	d00d      	beq.n	800f01a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	685a      	ldr	r2, [r3, #4]
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	441a      	add	r2, r3
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	681a      	ldr	r2, [r3, #0]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	601a      	str	r2, [r3, #0]
 800f018:	e008      	b.n	800f02c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f01a:	4b0c      	ldr	r3, [pc, #48]	; (800f04c <prvInsertBlockIntoFreeList+0xb0>)
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	601a      	str	r2, [r3, #0]
 800f022:	e003      	b.n	800f02c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	429a      	cmp	r2, r3
 800f032:	d002      	beq.n	800f03a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800f03a:	bf00      	nop
 800f03c:	3714      	adds	r7, #20
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop
 800f048:	200039e0 	.word	0x200039e0
 800f04c:	200039e8 	.word	0x200039e8

0800f050 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 800f050:	b580      	push	{r7, lr}
 800f052:	b084      	sub	sp, #16
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d005      	beq.n	800f06e <lwrb_init+0x1e>
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d002      	beq.n	800f06e <lwrb_init+0x1e>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d101      	bne.n	800f072 <lwrb_init+0x22>
        return 0;
 800f06e:	2300      	movs	r3, #0
 800f070:	e00b      	b.n	800f08a <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 800f072:	2214      	movs	r2, #20
 800f074:	2100      	movs	r1, #0
 800f076:	68f8      	ldr	r0, [r7, #12]
 800f078:	f000 fa5c 	bl	800f534 <memset>

    buff->size = size;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	68ba      	ldr	r2, [r7, #8]
 800f086:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 800f088:	2301      	movs	r3, #1
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3710      	adds	r7, #16
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}

0800f092 <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 800f092:	b480      	push	{r7}
 800f094:	b083      	sub	sp, #12
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
 800f09a:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d00a      	beq.n	800f0b8 <lwrb_set_evt_fn+0x26>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d006      	beq.n	800f0b8 <lwrb_set_evt_fn+0x26>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d002      	beq.n	800f0b8 <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	683a      	ldr	r2, [r7, #0]
 800f0b6:	611a      	str	r2, [r3, #16]
    }
}
 800f0b8:	bf00      	nop
 800f0ba:	370c      	adds	r7, #12
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr

0800f0c4 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b088      	sub	sp, #32
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60f8      	str	r0, [r7, #12]
 800f0cc:	60b9      	str	r1, [r7, #8]
 800f0ce:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	61bb      	str	r3, [r7, #24]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00d      	beq.n	800f0f6 <lwrb_write+0x32>
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d009      	beq.n	800f0f6 <lwrb_write+0x32>
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d005      	beq.n	800f0f6 <lwrb_write+0x32>
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d002      	beq.n	800f0f6 <lwrb_write+0x32>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d101      	bne.n	800f0fa <lwrb_write+0x36>
        return 0;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	e059      	b.n	800f1ae <lwrb_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 800f0fa:	68f8      	ldr	r0, [r7, #12]
 800f0fc:	f000 f85b 	bl	800f1b6 <lwrb_get_free>
 800f100:	61f8      	str	r0, [r7, #28]

		if (free < btw) {
 800f102:	69fa      	ldr	r2, [r7, #28]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	429a      	cmp	r2, r3
 800f108:	d20d      	bcs.n	800f126 <lwrb_write+0x62>
			BUF_SEND_EVT(buff, LWRB_EVT_FULL, free);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d005      	beq.n	800f11e <lwrb_write+0x5a>
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	691b      	ldr	r3, [r3, #16]
 800f116:	69fa      	ldr	r2, [r7, #28]
 800f118:	2102      	movs	r1, #2
 800f11a:	68f8      	ldr	r0, [r7, #12]
 800f11c:	4798      	blx	r3
			free = lwrb_get_free(buff);
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f000 f849 	bl	800f1b6 <lwrb_get_free>
 800f124:	61f8      	str	r0, [r7, #28]
		}
		
    btw = BUF_MIN(free, btw);
 800f126:	687a      	ldr	r2, [r7, #4]
 800f128:	69fb      	ldr	r3, [r7, #28]
 800f12a:	4293      	cmp	r3, r2
 800f12c:	bf28      	it	cs
 800f12e:	4613      	movcs	r3, r2
 800f130:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d101      	bne.n	800f13c <lwrb_write+0x78>
        return 0;
 800f138:	2300      	movs	r3, #0
 800f13a:	e038      	b.n	800f1ae <lwrb_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	685a      	ldr	r2, [r3, #4]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	68db      	ldr	r3, [r3, #12]
 800f144:	1ad3      	subs	r3, r2, r3
 800f146:	687a      	ldr	r2, [r7, #4]
 800f148:	4293      	cmp	r3, r2
 800f14a:	bf28      	it	cs
 800f14c:	4613      	movcs	r3, r2
 800f14e:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	4413      	add	r3, r2
 800f15a:	697a      	ldr	r2, [r7, #20]
 800f15c:	69b9      	ldr	r1, [r7, #24]
 800f15e:	4618      	mov	r0, r3
 800f160:	f000 fa40 	bl	800f5e4 <memcpy>
    buff->w += tocopy;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	68da      	ldr	r2, [r3, #12]
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	441a      	add	r2, r3
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	1ad3      	subs	r3, r2, r3
 800f176:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d00b      	beq.n	800f196 <lwrb_write+0xd2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6818      	ldr	r0, [r3, #0]
 800f182:	69ba      	ldr	r2, [r7, #24]
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	4413      	add	r3, r2
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	4619      	mov	r1, r3
 800f18c:	f000 fa2a 	bl	800f5e4 <memcpy>
        buff->w = btw;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	687a      	ldr	r2, [r7, #4]
 800f194:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	68da      	ldr	r2, [r3, #12]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d302      	bcc.n	800f1a8 <lwrb_write+0xe4>
        buff->w = 0;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	60da      	str	r2, [r3, #12]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
    return tocopy + btw;
 800f1a8:	697a      	ldr	r2, [r7, #20]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	4413      	add	r3, r2
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3720      	adds	r7, #32
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}

0800f1b6 <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 800f1b6:	b480      	push	{r7}
 800f1b8:	b087      	sub	sp, #28
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d007      	beq.n	800f1d4 <lwrb_get_free+0x1e>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d003      	beq.n	800f1d4 <lwrb_get_free+0x1e>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d101      	bne.n	800f1d8 <lwrb_get_free+0x22>
        return 0;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	e01f      	b.n	800f218 <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	68db      	ldr	r3, [r3, #12]
 800f1dc:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	689b      	ldr	r3, [r3, #8]
 800f1e2:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800f1e4:	693a      	ldr	r2, [r7, #16]
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d103      	bne.n	800f1f4 <lwrb_get_free+0x3e>
        size = buff->size;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	617b      	str	r3, [r7, #20]
 800f1f2:	e00f      	b.n	800f214 <lwrb_get_free+0x5e>
    } else if (r > w) {
 800f1f4:	68fa      	ldr	r2, [r7, #12]
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d904      	bls.n	800f206 <lwrb_get_free+0x50>
        size = r - w;
 800f1fc:	68fa      	ldr	r2, [r7, #12]
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	617b      	str	r3, [r7, #20]
 800f204:	e006      	b.n	800f214 <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	685a      	ldr	r2, [r3, #4]
 800f20a:	68f9      	ldr	r1, [r7, #12]
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	1acb      	subs	r3, r1, r3
 800f210:	4413      	add	r3, r2
 800f212:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	3b01      	subs	r3, #1
}
 800f218:	4618      	mov	r0, r3
 800f21a:	371c      	adds	r7, #28
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr

0800f224 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 800f224:	b480      	push	{r7}
 800f226:	b087      	sub	sp, #28
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d007      	beq.n	800f242 <lwrb_get_full+0x1e>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d003      	beq.n	800f242 <lwrb_get_full+0x1e>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d101      	bne.n	800f246 <lwrb_get_full+0x22>
        return 0;
 800f242:	2300      	movs	r3, #0
 800f244:	e01d      	b.n	800f282 <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	689b      	ldr	r3, [r3, #8]
 800f250:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800f252:	693a      	ldr	r2, [r7, #16]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	429a      	cmp	r2, r3
 800f258:	d102      	bne.n	800f260 <lwrb_get_full+0x3c>
        size = 0;
 800f25a:	2300      	movs	r3, #0
 800f25c:	617b      	str	r3, [r7, #20]
 800f25e:	e00f      	b.n	800f280 <lwrb_get_full+0x5c>
    } else if (w > r) {
 800f260:	693a      	ldr	r2, [r7, #16]
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	429a      	cmp	r2, r3
 800f266:	d904      	bls.n	800f272 <lwrb_get_full+0x4e>
        size = w - r;
 800f268:	693a      	ldr	r2, [r7, #16]
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	1ad3      	subs	r3, r2, r3
 800f26e:	617b      	str	r3, [r7, #20]
 800f270:	e006      	b.n	800f280 <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	685a      	ldr	r2, [r3, #4]
 800f276:	6939      	ldr	r1, [r7, #16]
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	1acb      	subs	r3, r1, r3
 800f27c:	4413      	add	r3, r2
 800f27e:	617b      	str	r3, [r7, #20]
    }
    return size;
 800f280:	697b      	ldr	r3, [r7, #20]
}
 800f282:	4618      	mov	r0, r3
 800f284:	371c      	adds	r7, #28
 800f286:	46bd      	mov	sp, r7
 800f288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28c:	4770      	bx	lr

0800f28e <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 800f28e:	b480      	push	{r7}
 800f290:	b083      	sub	sp, #12
 800f292:	af00      	add	r7, sp, #0
 800f294:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d007      	beq.n	800f2ac <lwrb_get_linear_block_read_address+0x1e>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d003      	beq.n	800f2ac <lwrb_get_linear_block_read_address+0x1e>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d101      	bne.n	800f2b0 <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	e004      	b.n	800f2ba <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	4413      	add	r3, r2
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	370c      	adds	r7, #12
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr

0800f2c6 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 800f2c6:	b480      	push	{r7}
 800f2c8:	b087      	sub	sp, #28
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d007      	beq.n	800f2e4 <lwrb_get_linear_block_read_length+0x1e>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d003      	beq.n	800f2e4 <lwrb_get_linear_block_read_length+0x1e>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d101      	bne.n	800f2e8 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	e01b      	b.n	800f320 <lwrb_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	689b      	ldr	r3, [r3, #8]
 800f2f2:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 800f2f4:	693a      	ldr	r2, [r7, #16]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d904      	bls.n	800f306 <lwrb_get_linear_block_read_length+0x40>
        len = w - r;
 800f2fc:	693a      	ldr	r2, [r7, #16]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	1ad3      	subs	r3, r2, r3
 800f302:	617b      	str	r3, [r7, #20]
 800f304:	e00b      	b.n	800f31e <lwrb_get_linear_block_read_length+0x58>
    } else if (r > w) {
 800f306:	68fa      	ldr	r2, [r7, #12]
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d905      	bls.n	800f31a <lwrb_get_linear_block_read_length+0x54>
        len = buff->size - r;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	685a      	ldr	r2, [r3, #4]
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	1ad3      	subs	r3, r2, r3
 800f316:	617b      	str	r3, [r7, #20]
 800f318:	e001      	b.n	800f31e <lwrb_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 800f31a:	2300      	movs	r3, #0
 800f31c:	617b      	str	r3, [r7, #20]
    }
    return len;
 800f31e:	697b      	ldr	r3, [r7, #20]
}
 800f320:	4618      	mov	r0, r3
 800f322:	371c      	adds	r7, #28
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d00a      	beq.n	800f352 <lwrb_skip+0x26>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d006      	beq.n	800f352 <lwrb_skip+0x26>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d002      	beq.n	800f352 <lwrb_skip+0x26>
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d101      	bne.n	800f356 <lwrb_skip+0x2a>
        return 0;
 800f352:	2300      	movs	r3, #0
 800f354:	e01d      	b.n	800f392 <lwrb_skip+0x66>
    }

    full = lwrb_get_full(buff);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f7ff ff64 	bl	800f224 <lwrb_get_full>
 800f35c:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 800f35e:	683a      	ldr	r2, [r7, #0]
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	4293      	cmp	r3, r2
 800f364:	bf28      	it	cs
 800f366:	4613      	movcs	r3, r2
 800f368:	603b      	str	r3, [r7, #0]
    buff->r += len;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	689a      	ldr	r2, [r3, #8]
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	441a      	add	r2, r3
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	689a      	ldr	r2, [r3, #8]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d306      	bcc.n	800f390 <lwrb_skip+0x64>
        buff->r -= buff->size;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	689a      	ldr	r2, [r3, #8]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	1ad2      	subs	r2, r2, r3
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	609a      	str	r2, [r3, #8]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
    return len;
 800f390:	683b      	ldr	r3, [r7, #0]
}
 800f392:	4618      	mov	r0, r3
 800f394:	3710      	adds	r7, #16
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
	...

0800f39c <sbrk_aligned>:
 800f39c:	b570      	push	{r4, r5, r6, lr}
 800f39e:	4e0e      	ldr	r6, [pc, #56]	; (800f3d8 <sbrk_aligned+0x3c>)
 800f3a0:	460c      	mov	r4, r1
 800f3a2:	4605      	mov	r5, r0
 800f3a4:	6831      	ldr	r1, [r6, #0]
 800f3a6:	b911      	cbnz	r1, 800f3ae <sbrk_aligned+0x12>
 800f3a8:	f000 f8e0 	bl	800f56c <_sbrk_r>
 800f3ac:	6030      	str	r0, [r6, #0]
 800f3ae:	4621      	mov	r1, r4
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	f000 f8db 	bl	800f56c <_sbrk_r>
 800f3b6:	1c43      	adds	r3, r0, #1
 800f3b8:	d00a      	beq.n	800f3d0 <sbrk_aligned+0x34>
 800f3ba:	1cc4      	adds	r4, r0, #3
 800f3bc:	f024 0403 	bic.w	r4, r4, #3
 800f3c0:	42a0      	cmp	r0, r4
 800f3c2:	d007      	beq.n	800f3d4 <sbrk_aligned+0x38>
 800f3c4:	1a21      	subs	r1, r4, r0
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	f000 f8d0 	bl	800f56c <_sbrk_r>
 800f3cc:	3001      	adds	r0, #1
 800f3ce:	d101      	bne.n	800f3d4 <sbrk_aligned+0x38>
 800f3d0:	f04f 34ff 	mov.w	r4, #4294967295
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	bd70      	pop	{r4, r5, r6, pc}
 800f3d8:	20003a00 	.word	0x20003a00

0800f3dc <_malloc_r>:
 800f3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e0:	1ccd      	adds	r5, r1, #3
 800f3e2:	4607      	mov	r7, r0
 800f3e4:	f025 0503 	bic.w	r5, r5, #3
 800f3e8:	3508      	adds	r5, #8
 800f3ea:	2d0c      	cmp	r5, #12
 800f3ec:	bf38      	it	cc
 800f3ee:	250c      	movcc	r5, #12
 800f3f0:	2d00      	cmp	r5, #0
 800f3f2:	db01      	blt.n	800f3f8 <_malloc_r+0x1c>
 800f3f4:	42a9      	cmp	r1, r5
 800f3f6:	d905      	bls.n	800f404 <_malloc_r+0x28>
 800f3f8:	230c      	movs	r3, #12
 800f3fa:	2600      	movs	r6, #0
 800f3fc:	603b      	str	r3, [r7, #0]
 800f3fe:	4630      	mov	r0, r6
 800f400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f404:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f4d8 <_malloc_r+0xfc>
 800f408:	f000 f868 	bl	800f4dc <__malloc_lock>
 800f40c:	f8d8 3000 	ldr.w	r3, [r8]
 800f410:	461c      	mov	r4, r3
 800f412:	bb5c      	cbnz	r4, 800f46c <_malloc_r+0x90>
 800f414:	4629      	mov	r1, r5
 800f416:	4638      	mov	r0, r7
 800f418:	f7ff ffc0 	bl	800f39c <sbrk_aligned>
 800f41c:	1c43      	adds	r3, r0, #1
 800f41e:	4604      	mov	r4, r0
 800f420:	d155      	bne.n	800f4ce <_malloc_r+0xf2>
 800f422:	f8d8 4000 	ldr.w	r4, [r8]
 800f426:	4626      	mov	r6, r4
 800f428:	2e00      	cmp	r6, #0
 800f42a:	d145      	bne.n	800f4b8 <_malloc_r+0xdc>
 800f42c:	2c00      	cmp	r4, #0
 800f42e:	d048      	beq.n	800f4c2 <_malloc_r+0xe6>
 800f430:	6823      	ldr	r3, [r4, #0]
 800f432:	4631      	mov	r1, r6
 800f434:	4638      	mov	r0, r7
 800f436:	eb04 0903 	add.w	r9, r4, r3
 800f43a:	f000 f897 	bl	800f56c <_sbrk_r>
 800f43e:	4581      	cmp	r9, r0
 800f440:	d13f      	bne.n	800f4c2 <_malloc_r+0xe6>
 800f442:	6821      	ldr	r1, [r4, #0]
 800f444:	4638      	mov	r0, r7
 800f446:	1a6d      	subs	r5, r5, r1
 800f448:	4629      	mov	r1, r5
 800f44a:	f7ff ffa7 	bl	800f39c <sbrk_aligned>
 800f44e:	3001      	adds	r0, #1
 800f450:	d037      	beq.n	800f4c2 <_malloc_r+0xe6>
 800f452:	6823      	ldr	r3, [r4, #0]
 800f454:	442b      	add	r3, r5
 800f456:	6023      	str	r3, [r4, #0]
 800f458:	f8d8 3000 	ldr.w	r3, [r8]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d038      	beq.n	800f4d2 <_malloc_r+0xf6>
 800f460:	685a      	ldr	r2, [r3, #4]
 800f462:	42a2      	cmp	r2, r4
 800f464:	d12b      	bne.n	800f4be <_malloc_r+0xe2>
 800f466:	2200      	movs	r2, #0
 800f468:	605a      	str	r2, [r3, #4]
 800f46a:	e00f      	b.n	800f48c <_malloc_r+0xb0>
 800f46c:	6822      	ldr	r2, [r4, #0]
 800f46e:	1b52      	subs	r2, r2, r5
 800f470:	d41f      	bmi.n	800f4b2 <_malloc_r+0xd6>
 800f472:	2a0b      	cmp	r2, #11
 800f474:	d917      	bls.n	800f4a6 <_malloc_r+0xca>
 800f476:	1961      	adds	r1, r4, r5
 800f478:	42a3      	cmp	r3, r4
 800f47a:	6025      	str	r5, [r4, #0]
 800f47c:	bf18      	it	ne
 800f47e:	6059      	strne	r1, [r3, #4]
 800f480:	6863      	ldr	r3, [r4, #4]
 800f482:	bf08      	it	eq
 800f484:	f8c8 1000 	streq.w	r1, [r8]
 800f488:	5162      	str	r2, [r4, r5]
 800f48a:	604b      	str	r3, [r1, #4]
 800f48c:	f104 060b 	add.w	r6, r4, #11
 800f490:	4638      	mov	r0, r7
 800f492:	f000 f829 	bl	800f4e8 <__malloc_unlock>
 800f496:	1d23      	adds	r3, r4, #4
 800f498:	f026 0607 	bic.w	r6, r6, #7
 800f49c:	1af2      	subs	r2, r6, r3
 800f49e:	d0ae      	beq.n	800f3fe <_malloc_r+0x22>
 800f4a0:	1b9b      	subs	r3, r3, r6
 800f4a2:	50a3      	str	r3, [r4, r2]
 800f4a4:	e7ab      	b.n	800f3fe <_malloc_r+0x22>
 800f4a6:	42a3      	cmp	r3, r4
 800f4a8:	6862      	ldr	r2, [r4, #4]
 800f4aa:	d1dd      	bne.n	800f468 <_malloc_r+0x8c>
 800f4ac:	f8c8 2000 	str.w	r2, [r8]
 800f4b0:	e7ec      	b.n	800f48c <_malloc_r+0xb0>
 800f4b2:	4623      	mov	r3, r4
 800f4b4:	6864      	ldr	r4, [r4, #4]
 800f4b6:	e7ac      	b.n	800f412 <_malloc_r+0x36>
 800f4b8:	4634      	mov	r4, r6
 800f4ba:	6876      	ldr	r6, [r6, #4]
 800f4bc:	e7b4      	b.n	800f428 <_malloc_r+0x4c>
 800f4be:	4613      	mov	r3, r2
 800f4c0:	e7cc      	b.n	800f45c <_malloc_r+0x80>
 800f4c2:	230c      	movs	r3, #12
 800f4c4:	4638      	mov	r0, r7
 800f4c6:	603b      	str	r3, [r7, #0]
 800f4c8:	f000 f80e 	bl	800f4e8 <__malloc_unlock>
 800f4cc:	e797      	b.n	800f3fe <_malloc_r+0x22>
 800f4ce:	6025      	str	r5, [r4, #0]
 800f4d0:	e7dc      	b.n	800f48c <_malloc_r+0xb0>
 800f4d2:	605b      	str	r3, [r3, #4]
 800f4d4:	deff      	udf	#255	; 0xff
 800f4d6:	bf00      	nop
 800f4d8:	200039fc 	.word	0x200039fc

0800f4dc <__malloc_lock>:
 800f4dc:	4801      	ldr	r0, [pc, #4]	; (800f4e4 <__malloc_lock+0x8>)
 800f4de:	f000 b87f 	b.w	800f5e0 <__retarget_lock_acquire_recursive>
 800f4e2:	bf00      	nop
 800f4e4:	20003b40 	.word	0x20003b40

0800f4e8 <__malloc_unlock>:
 800f4e8:	4801      	ldr	r0, [pc, #4]	; (800f4f0 <__malloc_unlock+0x8>)
 800f4ea:	f000 b87a 	b.w	800f5e2 <__retarget_lock_release_recursive>
 800f4ee:	bf00      	nop
 800f4f0:	20003b40 	.word	0x20003b40

0800f4f4 <_vsiprintf_r>:
 800f4f4:	b500      	push	{lr}
 800f4f6:	b09b      	sub	sp, #108	; 0x6c
 800f4f8:	9100      	str	r1, [sp, #0]
 800f4fa:	9104      	str	r1, [sp, #16]
 800f4fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f500:	9105      	str	r1, [sp, #20]
 800f502:	9102      	str	r1, [sp, #8]
 800f504:	4905      	ldr	r1, [pc, #20]	; (800f51c <_vsiprintf_r+0x28>)
 800f506:	9103      	str	r1, [sp, #12]
 800f508:	4669      	mov	r1, sp
 800f50a:	f000 f91f 	bl	800f74c <_svfiprintf_r>
 800f50e:	9b00      	ldr	r3, [sp, #0]
 800f510:	2200      	movs	r2, #0
 800f512:	701a      	strb	r2, [r3, #0]
 800f514:	b01b      	add	sp, #108	; 0x6c
 800f516:	f85d fb04 	ldr.w	pc, [sp], #4
 800f51a:	bf00      	nop
 800f51c:	ffff0208 	.word	0xffff0208

0800f520 <vsiprintf>:
 800f520:	4613      	mov	r3, r2
 800f522:	460a      	mov	r2, r1
 800f524:	4601      	mov	r1, r0
 800f526:	4802      	ldr	r0, [pc, #8]	; (800f530 <vsiprintf+0x10>)
 800f528:	6800      	ldr	r0, [r0, #0]
 800f52a:	f7ff bfe3 	b.w	800f4f4 <_vsiprintf_r>
 800f52e:	bf00      	nop
 800f530:	2000009c 	.word	0x2000009c

0800f534 <memset>:
 800f534:	4402      	add	r2, r0
 800f536:	4603      	mov	r3, r0
 800f538:	4293      	cmp	r3, r2
 800f53a:	d100      	bne.n	800f53e <memset+0xa>
 800f53c:	4770      	bx	lr
 800f53e:	f803 1b01 	strb.w	r1, [r3], #1
 800f542:	e7f9      	b.n	800f538 <memset+0x4>

0800f544 <strncpy>:
 800f544:	3901      	subs	r1, #1
 800f546:	4603      	mov	r3, r0
 800f548:	b510      	push	{r4, lr}
 800f54a:	b132      	cbz	r2, 800f55a <strncpy+0x16>
 800f54c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f550:	3a01      	subs	r2, #1
 800f552:	f803 4b01 	strb.w	r4, [r3], #1
 800f556:	2c00      	cmp	r4, #0
 800f558:	d1f7      	bne.n	800f54a <strncpy+0x6>
 800f55a:	441a      	add	r2, r3
 800f55c:	2100      	movs	r1, #0
 800f55e:	4293      	cmp	r3, r2
 800f560:	d100      	bne.n	800f564 <strncpy+0x20>
 800f562:	bd10      	pop	{r4, pc}
 800f564:	f803 1b01 	strb.w	r1, [r3], #1
 800f568:	e7f9      	b.n	800f55e <strncpy+0x1a>
	...

0800f56c <_sbrk_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	2300      	movs	r3, #0
 800f570:	4d05      	ldr	r5, [pc, #20]	; (800f588 <_sbrk_r+0x1c>)
 800f572:	4604      	mov	r4, r0
 800f574:	4608      	mov	r0, r1
 800f576:	602b      	str	r3, [r5, #0]
 800f578:	f7f1 fe7e 	bl	8001278 <_sbrk>
 800f57c:	1c43      	adds	r3, r0, #1
 800f57e:	d102      	bne.n	800f586 <_sbrk_r+0x1a>
 800f580:	682b      	ldr	r3, [r5, #0]
 800f582:	b103      	cbz	r3, 800f586 <_sbrk_r+0x1a>
 800f584:	6023      	str	r3, [r4, #0]
 800f586:	bd38      	pop	{r3, r4, r5, pc}
 800f588:	20003b3c 	.word	0x20003b3c

0800f58c <__errno>:
 800f58c:	4b01      	ldr	r3, [pc, #4]	; (800f594 <__errno+0x8>)
 800f58e:	6818      	ldr	r0, [r3, #0]
 800f590:	4770      	bx	lr
 800f592:	bf00      	nop
 800f594:	2000009c 	.word	0x2000009c

0800f598 <__libc_init_array>:
 800f598:	b570      	push	{r4, r5, r6, lr}
 800f59a:	4d0d      	ldr	r5, [pc, #52]	; (800f5d0 <__libc_init_array+0x38>)
 800f59c:	2600      	movs	r6, #0
 800f59e:	4c0d      	ldr	r4, [pc, #52]	; (800f5d4 <__libc_init_array+0x3c>)
 800f5a0:	1b64      	subs	r4, r4, r5
 800f5a2:	10a4      	asrs	r4, r4, #2
 800f5a4:	42a6      	cmp	r6, r4
 800f5a6:	d109      	bne.n	800f5bc <__libc_init_array+0x24>
 800f5a8:	4d0b      	ldr	r5, [pc, #44]	; (800f5d8 <__libc_init_array+0x40>)
 800f5aa:	2600      	movs	r6, #0
 800f5ac:	4c0b      	ldr	r4, [pc, #44]	; (800f5dc <__libc_init_array+0x44>)
 800f5ae:	f000 fbbd 	bl	800fd2c <_init>
 800f5b2:	1b64      	subs	r4, r4, r5
 800f5b4:	10a4      	asrs	r4, r4, #2
 800f5b6:	42a6      	cmp	r6, r4
 800f5b8:	d105      	bne.n	800f5c6 <__libc_init_array+0x2e>
 800f5ba:	bd70      	pop	{r4, r5, r6, pc}
 800f5bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5c0:	3601      	adds	r6, #1
 800f5c2:	4798      	blx	r3
 800f5c4:	e7ee      	b.n	800f5a4 <__libc_init_array+0xc>
 800f5c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5ca:	3601      	adds	r6, #1
 800f5cc:	4798      	blx	r3
 800f5ce:	e7f2      	b.n	800f5b6 <__libc_init_array+0x1e>
 800f5d0:	0800ff58 	.word	0x0800ff58
 800f5d4:	0800ff58 	.word	0x0800ff58
 800f5d8:	0800ff58 	.word	0x0800ff58
 800f5dc:	0800ff5c 	.word	0x0800ff5c

0800f5e0 <__retarget_lock_acquire_recursive>:
 800f5e0:	4770      	bx	lr

0800f5e2 <__retarget_lock_release_recursive>:
 800f5e2:	4770      	bx	lr

0800f5e4 <memcpy>:
 800f5e4:	440a      	add	r2, r1
 800f5e6:	1e43      	subs	r3, r0, #1
 800f5e8:	4291      	cmp	r1, r2
 800f5ea:	d100      	bne.n	800f5ee <memcpy+0xa>
 800f5ec:	4770      	bx	lr
 800f5ee:	b510      	push	{r4, lr}
 800f5f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5f4:	4291      	cmp	r1, r2
 800f5f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5fa:	d1f9      	bne.n	800f5f0 <memcpy+0xc>
 800f5fc:	bd10      	pop	{r4, pc}
	...

0800f600 <_free_r>:
 800f600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f602:	2900      	cmp	r1, #0
 800f604:	d043      	beq.n	800f68e <_free_r+0x8e>
 800f606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f60a:	1f0c      	subs	r4, r1, #4
 800f60c:	9001      	str	r0, [sp, #4]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	bfb8      	it	lt
 800f612:	18e4      	addlt	r4, r4, r3
 800f614:	f7ff ff62 	bl	800f4dc <__malloc_lock>
 800f618:	4a1e      	ldr	r2, [pc, #120]	; (800f694 <_free_r+0x94>)
 800f61a:	9801      	ldr	r0, [sp, #4]
 800f61c:	6813      	ldr	r3, [r2, #0]
 800f61e:	b933      	cbnz	r3, 800f62e <_free_r+0x2e>
 800f620:	6063      	str	r3, [r4, #4]
 800f622:	6014      	str	r4, [r2, #0]
 800f624:	b003      	add	sp, #12
 800f626:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f62a:	f7ff bf5d 	b.w	800f4e8 <__malloc_unlock>
 800f62e:	42a3      	cmp	r3, r4
 800f630:	d908      	bls.n	800f644 <_free_r+0x44>
 800f632:	6825      	ldr	r5, [r4, #0]
 800f634:	1961      	adds	r1, r4, r5
 800f636:	428b      	cmp	r3, r1
 800f638:	bf01      	itttt	eq
 800f63a:	6819      	ldreq	r1, [r3, #0]
 800f63c:	685b      	ldreq	r3, [r3, #4]
 800f63e:	1949      	addeq	r1, r1, r5
 800f640:	6021      	streq	r1, [r4, #0]
 800f642:	e7ed      	b.n	800f620 <_free_r+0x20>
 800f644:	461a      	mov	r2, r3
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	b10b      	cbz	r3, 800f64e <_free_r+0x4e>
 800f64a:	42a3      	cmp	r3, r4
 800f64c:	d9fa      	bls.n	800f644 <_free_r+0x44>
 800f64e:	6811      	ldr	r1, [r2, #0]
 800f650:	1855      	adds	r5, r2, r1
 800f652:	42a5      	cmp	r5, r4
 800f654:	d10b      	bne.n	800f66e <_free_r+0x6e>
 800f656:	6824      	ldr	r4, [r4, #0]
 800f658:	4421      	add	r1, r4
 800f65a:	1854      	adds	r4, r2, r1
 800f65c:	6011      	str	r1, [r2, #0]
 800f65e:	42a3      	cmp	r3, r4
 800f660:	d1e0      	bne.n	800f624 <_free_r+0x24>
 800f662:	681c      	ldr	r4, [r3, #0]
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	440c      	add	r4, r1
 800f668:	6053      	str	r3, [r2, #4]
 800f66a:	6014      	str	r4, [r2, #0]
 800f66c:	e7da      	b.n	800f624 <_free_r+0x24>
 800f66e:	d902      	bls.n	800f676 <_free_r+0x76>
 800f670:	230c      	movs	r3, #12
 800f672:	6003      	str	r3, [r0, #0]
 800f674:	e7d6      	b.n	800f624 <_free_r+0x24>
 800f676:	6825      	ldr	r5, [r4, #0]
 800f678:	1961      	adds	r1, r4, r5
 800f67a:	428b      	cmp	r3, r1
 800f67c:	bf02      	ittt	eq
 800f67e:	6819      	ldreq	r1, [r3, #0]
 800f680:	685b      	ldreq	r3, [r3, #4]
 800f682:	1949      	addeq	r1, r1, r5
 800f684:	6063      	str	r3, [r4, #4]
 800f686:	bf08      	it	eq
 800f688:	6021      	streq	r1, [r4, #0]
 800f68a:	6054      	str	r4, [r2, #4]
 800f68c:	e7ca      	b.n	800f624 <_free_r+0x24>
 800f68e:	b003      	add	sp, #12
 800f690:	bd30      	pop	{r4, r5, pc}
 800f692:	bf00      	nop
 800f694:	200039fc 	.word	0x200039fc

0800f698 <__ssputs_r>:
 800f698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f69c:	461f      	mov	r7, r3
 800f69e:	688e      	ldr	r6, [r1, #8]
 800f6a0:	4682      	mov	sl, r0
 800f6a2:	460c      	mov	r4, r1
 800f6a4:	42be      	cmp	r6, r7
 800f6a6:	4690      	mov	r8, r2
 800f6a8:	680b      	ldr	r3, [r1, #0]
 800f6aa:	d82c      	bhi.n	800f706 <__ssputs_r+0x6e>
 800f6ac:	898a      	ldrh	r2, [r1, #12]
 800f6ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f6b2:	d026      	beq.n	800f702 <__ssputs_r+0x6a>
 800f6b4:	6965      	ldr	r5, [r4, #20]
 800f6b6:	6909      	ldr	r1, [r1, #16]
 800f6b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f6bc:	eba3 0901 	sub.w	r9, r3, r1
 800f6c0:	1c7b      	adds	r3, r7, #1
 800f6c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f6c6:	444b      	add	r3, r9
 800f6c8:	106d      	asrs	r5, r5, #1
 800f6ca:	429d      	cmp	r5, r3
 800f6cc:	bf38      	it	cc
 800f6ce:	461d      	movcc	r5, r3
 800f6d0:	0553      	lsls	r3, r2, #21
 800f6d2:	d527      	bpl.n	800f724 <__ssputs_r+0x8c>
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	f7ff fe81 	bl	800f3dc <_malloc_r>
 800f6da:	4606      	mov	r6, r0
 800f6dc:	b360      	cbz	r0, 800f738 <__ssputs_r+0xa0>
 800f6de:	464a      	mov	r2, r9
 800f6e0:	6921      	ldr	r1, [r4, #16]
 800f6e2:	f7ff ff7f 	bl	800f5e4 <memcpy>
 800f6e6:	89a3      	ldrh	r3, [r4, #12]
 800f6e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6f0:	81a3      	strh	r3, [r4, #12]
 800f6f2:	6126      	str	r6, [r4, #16]
 800f6f4:	444e      	add	r6, r9
 800f6f6:	6165      	str	r5, [r4, #20]
 800f6f8:	eba5 0509 	sub.w	r5, r5, r9
 800f6fc:	6026      	str	r6, [r4, #0]
 800f6fe:	463e      	mov	r6, r7
 800f700:	60a5      	str	r5, [r4, #8]
 800f702:	42be      	cmp	r6, r7
 800f704:	d900      	bls.n	800f708 <__ssputs_r+0x70>
 800f706:	463e      	mov	r6, r7
 800f708:	4632      	mov	r2, r6
 800f70a:	4641      	mov	r1, r8
 800f70c:	6820      	ldr	r0, [r4, #0]
 800f70e:	f000 faad 	bl	800fc6c <memmove>
 800f712:	68a3      	ldr	r3, [r4, #8]
 800f714:	2000      	movs	r0, #0
 800f716:	1b9b      	subs	r3, r3, r6
 800f718:	60a3      	str	r3, [r4, #8]
 800f71a:	6823      	ldr	r3, [r4, #0]
 800f71c:	4433      	add	r3, r6
 800f71e:	6023      	str	r3, [r4, #0]
 800f720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f724:	462a      	mov	r2, r5
 800f726:	f000 fac9 	bl	800fcbc <_realloc_r>
 800f72a:	4606      	mov	r6, r0
 800f72c:	2800      	cmp	r0, #0
 800f72e:	d1e0      	bne.n	800f6f2 <__ssputs_r+0x5a>
 800f730:	6921      	ldr	r1, [r4, #16]
 800f732:	4650      	mov	r0, sl
 800f734:	f7ff ff64 	bl	800f600 <_free_r>
 800f738:	230c      	movs	r3, #12
 800f73a:	f04f 30ff 	mov.w	r0, #4294967295
 800f73e:	f8ca 3000 	str.w	r3, [sl]
 800f742:	89a3      	ldrh	r3, [r4, #12]
 800f744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f748:	81a3      	strh	r3, [r4, #12]
 800f74a:	e7e9      	b.n	800f720 <__ssputs_r+0x88>

0800f74c <_svfiprintf_r>:
 800f74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f750:	4698      	mov	r8, r3
 800f752:	898b      	ldrh	r3, [r1, #12]
 800f754:	b09d      	sub	sp, #116	; 0x74
 800f756:	4607      	mov	r7, r0
 800f758:	061b      	lsls	r3, r3, #24
 800f75a:	460d      	mov	r5, r1
 800f75c:	4614      	mov	r4, r2
 800f75e:	d50e      	bpl.n	800f77e <_svfiprintf_r+0x32>
 800f760:	690b      	ldr	r3, [r1, #16]
 800f762:	b963      	cbnz	r3, 800f77e <_svfiprintf_r+0x32>
 800f764:	2140      	movs	r1, #64	; 0x40
 800f766:	f7ff fe39 	bl	800f3dc <_malloc_r>
 800f76a:	6028      	str	r0, [r5, #0]
 800f76c:	6128      	str	r0, [r5, #16]
 800f76e:	b920      	cbnz	r0, 800f77a <_svfiprintf_r+0x2e>
 800f770:	230c      	movs	r3, #12
 800f772:	603b      	str	r3, [r7, #0]
 800f774:	f04f 30ff 	mov.w	r0, #4294967295
 800f778:	e0d0      	b.n	800f91c <_svfiprintf_r+0x1d0>
 800f77a:	2340      	movs	r3, #64	; 0x40
 800f77c:	616b      	str	r3, [r5, #20]
 800f77e:	2300      	movs	r3, #0
 800f780:	f8cd 800c 	str.w	r8, [sp, #12]
 800f784:	f04f 0901 	mov.w	r9, #1
 800f788:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f934 <_svfiprintf_r+0x1e8>
 800f78c:	9309      	str	r3, [sp, #36]	; 0x24
 800f78e:	2320      	movs	r3, #32
 800f790:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f794:	2330      	movs	r3, #48	; 0x30
 800f796:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f79a:	4623      	mov	r3, r4
 800f79c:	469a      	mov	sl, r3
 800f79e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7a2:	b10a      	cbz	r2, 800f7a8 <_svfiprintf_r+0x5c>
 800f7a4:	2a25      	cmp	r2, #37	; 0x25
 800f7a6:	d1f9      	bne.n	800f79c <_svfiprintf_r+0x50>
 800f7a8:	ebba 0b04 	subs.w	fp, sl, r4
 800f7ac:	d00b      	beq.n	800f7c6 <_svfiprintf_r+0x7a>
 800f7ae:	465b      	mov	r3, fp
 800f7b0:	4622      	mov	r2, r4
 800f7b2:	4629      	mov	r1, r5
 800f7b4:	4638      	mov	r0, r7
 800f7b6:	f7ff ff6f 	bl	800f698 <__ssputs_r>
 800f7ba:	3001      	adds	r0, #1
 800f7bc:	f000 80a9 	beq.w	800f912 <_svfiprintf_r+0x1c6>
 800f7c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7c2:	445a      	add	r2, fp
 800f7c4:	9209      	str	r2, [sp, #36]	; 0x24
 800f7c6:	f89a 3000 	ldrb.w	r3, [sl]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	f000 80a1 	beq.w	800f912 <_svfiprintf_r+0x1c6>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800f7d6:	f10a 0a01 	add.w	sl, sl, #1
 800f7da:	9304      	str	r3, [sp, #16]
 800f7dc:	9307      	str	r3, [sp, #28]
 800f7de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7e2:	931a      	str	r3, [sp, #104]	; 0x68
 800f7e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7e8:	4654      	mov	r4, sl
 800f7ea:	2205      	movs	r2, #5
 800f7ec:	4851      	ldr	r0, [pc, #324]	; (800f934 <_svfiprintf_r+0x1e8>)
 800f7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7f2:	f000 fa55 	bl	800fca0 <memchr>
 800f7f6:	9a04      	ldr	r2, [sp, #16]
 800f7f8:	b9d8      	cbnz	r0, 800f832 <_svfiprintf_r+0xe6>
 800f7fa:	06d0      	lsls	r0, r2, #27
 800f7fc:	bf44      	itt	mi
 800f7fe:	2320      	movmi	r3, #32
 800f800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f804:	0711      	lsls	r1, r2, #28
 800f806:	bf44      	itt	mi
 800f808:	232b      	movmi	r3, #43	; 0x2b
 800f80a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f80e:	f89a 3000 	ldrb.w	r3, [sl]
 800f812:	2b2a      	cmp	r3, #42	; 0x2a
 800f814:	d015      	beq.n	800f842 <_svfiprintf_r+0xf6>
 800f816:	9a07      	ldr	r2, [sp, #28]
 800f818:	4654      	mov	r4, sl
 800f81a:	2000      	movs	r0, #0
 800f81c:	f04f 0c0a 	mov.w	ip, #10
 800f820:	4621      	mov	r1, r4
 800f822:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f826:	3b30      	subs	r3, #48	; 0x30
 800f828:	2b09      	cmp	r3, #9
 800f82a:	d94d      	bls.n	800f8c8 <_svfiprintf_r+0x17c>
 800f82c:	b1b0      	cbz	r0, 800f85c <_svfiprintf_r+0x110>
 800f82e:	9207      	str	r2, [sp, #28]
 800f830:	e014      	b.n	800f85c <_svfiprintf_r+0x110>
 800f832:	eba0 0308 	sub.w	r3, r0, r8
 800f836:	46a2      	mov	sl, r4
 800f838:	fa09 f303 	lsl.w	r3, r9, r3
 800f83c:	4313      	orrs	r3, r2
 800f83e:	9304      	str	r3, [sp, #16]
 800f840:	e7d2      	b.n	800f7e8 <_svfiprintf_r+0x9c>
 800f842:	9b03      	ldr	r3, [sp, #12]
 800f844:	1d19      	adds	r1, r3, #4
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	9103      	str	r1, [sp, #12]
 800f84c:	bfbb      	ittet	lt
 800f84e:	425b      	neglt	r3, r3
 800f850:	f042 0202 	orrlt.w	r2, r2, #2
 800f854:	9307      	strge	r3, [sp, #28]
 800f856:	9307      	strlt	r3, [sp, #28]
 800f858:	bfb8      	it	lt
 800f85a:	9204      	strlt	r2, [sp, #16]
 800f85c:	7823      	ldrb	r3, [r4, #0]
 800f85e:	2b2e      	cmp	r3, #46	; 0x2e
 800f860:	d10c      	bne.n	800f87c <_svfiprintf_r+0x130>
 800f862:	7863      	ldrb	r3, [r4, #1]
 800f864:	2b2a      	cmp	r3, #42	; 0x2a
 800f866:	d134      	bne.n	800f8d2 <_svfiprintf_r+0x186>
 800f868:	9b03      	ldr	r3, [sp, #12]
 800f86a:	3402      	adds	r4, #2
 800f86c:	1d1a      	adds	r2, r3, #4
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	9203      	str	r2, [sp, #12]
 800f874:	bfb8      	it	lt
 800f876:	f04f 33ff 	movlt.w	r3, #4294967295
 800f87a:	9305      	str	r3, [sp, #20]
 800f87c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f944 <_svfiprintf_r+0x1f8>
 800f880:	2203      	movs	r2, #3
 800f882:	7821      	ldrb	r1, [r4, #0]
 800f884:	4650      	mov	r0, sl
 800f886:	f000 fa0b 	bl	800fca0 <memchr>
 800f88a:	b138      	cbz	r0, 800f89c <_svfiprintf_r+0x150>
 800f88c:	eba0 000a 	sub.w	r0, r0, sl
 800f890:	2240      	movs	r2, #64	; 0x40
 800f892:	9b04      	ldr	r3, [sp, #16]
 800f894:	3401      	adds	r4, #1
 800f896:	4082      	lsls	r2, r0
 800f898:	4313      	orrs	r3, r2
 800f89a:	9304      	str	r3, [sp, #16]
 800f89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8a0:	2206      	movs	r2, #6
 800f8a2:	4825      	ldr	r0, [pc, #148]	; (800f938 <_svfiprintf_r+0x1ec>)
 800f8a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8a8:	f000 f9fa 	bl	800fca0 <memchr>
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	d038      	beq.n	800f922 <_svfiprintf_r+0x1d6>
 800f8b0:	4b22      	ldr	r3, [pc, #136]	; (800f93c <_svfiprintf_r+0x1f0>)
 800f8b2:	bb1b      	cbnz	r3, 800f8fc <_svfiprintf_r+0x1b0>
 800f8b4:	9b03      	ldr	r3, [sp, #12]
 800f8b6:	3307      	adds	r3, #7
 800f8b8:	f023 0307 	bic.w	r3, r3, #7
 800f8bc:	3308      	adds	r3, #8
 800f8be:	9303      	str	r3, [sp, #12]
 800f8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8c2:	4433      	add	r3, r6
 800f8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800f8c6:	e768      	b.n	800f79a <_svfiprintf_r+0x4e>
 800f8c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8cc:	460c      	mov	r4, r1
 800f8ce:	2001      	movs	r0, #1
 800f8d0:	e7a6      	b.n	800f820 <_svfiprintf_r+0xd4>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	3401      	adds	r4, #1
 800f8d6:	f04f 0c0a 	mov.w	ip, #10
 800f8da:	4619      	mov	r1, r3
 800f8dc:	9305      	str	r3, [sp, #20]
 800f8de:	4620      	mov	r0, r4
 800f8e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8e4:	3a30      	subs	r2, #48	; 0x30
 800f8e6:	2a09      	cmp	r2, #9
 800f8e8:	d903      	bls.n	800f8f2 <_svfiprintf_r+0x1a6>
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d0c6      	beq.n	800f87c <_svfiprintf_r+0x130>
 800f8ee:	9105      	str	r1, [sp, #20]
 800f8f0:	e7c4      	b.n	800f87c <_svfiprintf_r+0x130>
 800f8f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8f6:	4604      	mov	r4, r0
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	e7f0      	b.n	800f8de <_svfiprintf_r+0x192>
 800f8fc:	ab03      	add	r3, sp, #12
 800f8fe:	462a      	mov	r2, r5
 800f900:	a904      	add	r1, sp, #16
 800f902:	4638      	mov	r0, r7
 800f904:	9300      	str	r3, [sp, #0]
 800f906:	4b0e      	ldr	r3, [pc, #56]	; (800f940 <_svfiprintf_r+0x1f4>)
 800f908:	f3af 8000 	nop.w
 800f90c:	1c42      	adds	r2, r0, #1
 800f90e:	4606      	mov	r6, r0
 800f910:	d1d6      	bne.n	800f8c0 <_svfiprintf_r+0x174>
 800f912:	89ab      	ldrh	r3, [r5, #12]
 800f914:	065b      	lsls	r3, r3, #25
 800f916:	f53f af2d 	bmi.w	800f774 <_svfiprintf_r+0x28>
 800f91a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f91c:	b01d      	add	sp, #116	; 0x74
 800f91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f922:	ab03      	add	r3, sp, #12
 800f924:	462a      	mov	r2, r5
 800f926:	a904      	add	r1, sp, #16
 800f928:	4638      	mov	r0, r7
 800f92a:	9300      	str	r3, [sp, #0]
 800f92c:	4b04      	ldr	r3, [pc, #16]	; (800f940 <_svfiprintf_r+0x1f4>)
 800f92e:	f000 f87d 	bl	800fa2c <_printf_i>
 800f932:	e7eb      	b.n	800f90c <_svfiprintf_r+0x1c0>
 800f934:	0800ff1c 	.word	0x0800ff1c
 800f938:	0800ff26 	.word	0x0800ff26
 800f93c:	00000000 	.word	0x00000000
 800f940:	0800f699 	.word	0x0800f699
 800f944:	0800ff22 	.word	0x0800ff22

0800f948 <_printf_common>:
 800f948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f94c:	4616      	mov	r6, r2
 800f94e:	4699      	mov	r9, r3
 800f950:	688a      	ldr	r2, [r1, #8]
 800f952:	4607      	mov	r7, r0
 800f954:	690b      	ldr	r3, [r1, #16]
 800f956:	460c      	mov	r4, r1
 800f958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f95c:	4293      	cmp	r3, r2
 800f95e:	bfb8      	it	lt
 800f960:	4613      	movlt	r3, r2
 800f962:	6033      	str	r3, [r6, #0]
 800f964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f968:	b10a      	cbz	r2, 800f96e <_printf_common+0x26>
 800f96a:	3301      	adds	r3, #1
 800f96c:	6033      	str	r3, [r6, #0]
 800f96e:	6823      	ldr	r3, [r4, #0]
 800f970:	0699      	lsls	r1, r3, #26
 800f972:	bf42      	ittt	mi
 800f974:	6833      	ldrmi	r3, [r6, #0]
 800f976:	3302      	addmi	r3, #2
 800f978:	6033      	strmi	r3, [r6, #0]
 800f97a:	6825      	ldr	r5, [r4, #0]
 800f97c:	f015 0506 	ands.w	r5, r5, #6
 800f980:	d106      	bne.n	800f990 <_printf_common+0x48>
 800f982:	f104 0a19 	add.w	sl, r4, #25
 800f986:	68e3      	ldr	r3, [r4, #12]
 800f988:	6832      	ldr	r2, [r6, #0]
 800f98a:	1a9b      	subs	r3, r3, r2
 800f98c:	42ab      	cmp	r3, r5
 800f98e:	dc2b      	bgt.n	800f9e8 <_printf_common+0xa0>
 800f990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f994:	1e13      	subs	r3, r2, #0
 800f996:	6822      	ldr	r2, [r4, #0]
 800f998:	bf18      	it	ne
 800f99a:	2301      	movne	r3, #1
 800f99c:	0692      	lsls	r2, r2, #26
 800f99e:	d430      	bmi.n	800fa02 <_printf_common+0xba>
 800f9a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9a4:	4649      	mov	r1, r9
 800f9a6:	4638      	mov	r0, r7
 800f9a8:	47c0      	blx	r8
 800f9aa:	3001      	adds	r0, #1
 800f9ac:	d023      	beq.n	800f9f6 <_printf_common+0xae>
 800f9ae:	6823      	ldr	r3, [r4, #0]
 800f9b0:	341a      	adds	r4, #26
 800f9b2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f9b6:	f003 0306 	and.w	r3, r3, #6
 800f9ba:	2b04      	cmp	r3, #4
 800f9bc:	bf0a      	itet	eq
 800f9be:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800f9c2:	2500      	movne	r5, #0
 800f9c4:	6833      	ldreq	r3, [r6, #0]
 800f9c6:	f04f 0600 	mov.w	r6, #0
 800f9ca:	bf08      	it	eq
 800f9cc:	1aed      	subeq	r5, r5, r3
 800f9ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f9d2:	bf08      	it	eq
 800f9d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	bfc4      	itt	gt
 800f9dc:	1a9b      	subgt	r3, r3, r2
 800f9de:	18ed      	addgt	r5, r5, r3
 800f9e0:	42b5      	cmp	r5, r6
 800f9e2:	d11a      	bne.n	800fa1a <_printf_common+0xd2>
 800f9e4:	2000      	movs	r0, #0
 800f9e6:	e008      	b.n	800f9fa <_printf_common+0xb2>
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	4652      	mov	r2, sl
 800f9ec:	4649      	mov	r1, r9
 800f9ee:	4638      	mov	r0, r7
 800f9f0:	47c0      	blx	r8
 800f9f2:	3001      	adds	r0, #1
 800f9f4:	d103      	bne.n	800f9fe <_printf_common+0xb6>
 800f9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9fe:	3501      	adds	r5, #1
 800fa00:	e7c1      	b.n	800f986 <_printf_common+0x3e>
 800fa02:	18e1      	adds	r1, r4, r3
 800fa04:	1c5a      	adds	r2, r3, #1
 800fa06:	2030      	movs	r0, #48	; 0x30
 800fa08:	3302      	adds	r3, #2
 800fa0a:	4422      	add	r2, r4
 800fa0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa18:	e7c2      	b.n	800f9a0 <_printf_common+0x58>
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	4622      	mov	r2, r4
 800fa1e:	4649      	mov	r1, r9
 800fa20:	4638      	mov	r0, r7
 800fa22:	47c0      	blx	r8
 800fa24:	3001      	adds	r0, #1
 800fa26:	d0e6      	beq.n	800f9f6 <_printf_common+0xae>
 800fa28:	3601      	adds	r6, #1
 800fa2a:	e7d9      	b.n	800f9e0 <_printf_common+0x98>

0800fa2c <_printf_i>:
 800fa2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa30:	7e0f      	ldrb	r7, [r1, #24]
 800fa32:	4691      	mov	r9, r2
 800fa34:	4680      	mov	r8, r0
 800fa36:	460c      	mov	r4, r1
 800fa38:	2f78      	cmp	r7, #120	; 0x78
 800fa3a:	469a      	mov	sl, r3
 800fa3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa42:	d807      	bhi.n	800fa54 <_printf_i+0x28>
 800fa44:	2f62      	cmp	r7, #98	; 0x62
 800fa46:	d80a      	bhi.n	800fa5e <_printf_i+0x32>
 800fa48:	2f00      	cmp	r7, #0
 800fa4a:	f000 80d3 	beq.w	800fbf4 <_printf_i+0x1c8>
 800fa4e:	2f58      	cmp	r7, #88	; 0x58
 800fa50:	f000 80bf 	beq.w	800fbd2 <_printf_i+0x1a6>
 800fa54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa5c:	e03a      	b.n	800fad4 <_printf_i+0xa8>
 800fa5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa62:	2b15      	cmp	r3, #21
 800fa64:	d8f6      	bhi.n	800fa54 <_printf_i+0x28>
 800fa66:	a101      	add	r1, pc, #4	; (adr r1, 800fa6c <_printf_i+0x40>)
 800fa68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa6c:	0800fac5 	.word	0x0800fac5
 800fa70:	0800fad9 	.word	0x0800fad9
 800fa74:	0800fa55 	.word	0x0800fa55
 800fa78:	0800fa55 	.word	0x0800fa55
 800fa7c:	0800fa55 	.word	0x0800fa55
 800fa80:	0800fa55 	.word	0x0800fa55
 800fa84:	0800fad9 	.word	0x0800fad9
 800fa88:	0800fa55 	.word	0x0800fa55
 800fa8c:	0800fa55 	.word	0x0800fa55
 800fa90:	0800fa55 	.word	0x0800fa55
 800fa94:	0800fa55 	.word	0x0800fa55
 800fa98:	0800fbdb 	.word	0x0800fbdb
 800fa9c:	0800fb05 	.word	0x0800fb05
 800faa0:	0800fb97 	.word	0x0800fb97
 800faa4:	0800fa55 	.word	0x0800fa55
 800faa8:	0800fa55 	.word	0x0800fa55
 800faac:	0800fbfd 	.word	0x0800fbfd
 800fab0:	0800fa55 	.word	0x0800fa55
 800fab4:	0800fb05 	.word	0x0800fb05
 800fab8:	0800fa55 	.word	0x0800fa55
 800fabc:	0800fa55 	.word	0x0800fa55
 800fac0:	0800fb9f 	.word	0x0800fb9f
 800fac4:	682b      	ldr	r3, [r5, #0]
 800fac6:	1d1a      	adds	r2, r3, #4
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	602a      	str	r2, [r5, #0]
 800facc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fad4:	2301      	movs	r3, #1
 800fad6:	e09e      	b.n	800fc16 <_printf_i+0x1ea>
 800fad8:	6820      	ldr	r0, [r4, #0]
 800fada:	682b      	ldr	r3, [r5, #0]
 800fadc:	0607      	lsls	r7, r0, #24
 800fade:	f103 0104 	add.w	r1, r3, #4
 800fae2:	6029      	str	r1, [r5, #0]
 800fae4:	d501      	bpl.n	800faea <_printf_i+0xbe>
 800fae6:	681e      	ldr	r6, [r3, #0]
 800fae8:	e003      	b.n	800faf2 <_printf_i+0xc6>
 800faea:	0646      	lsls	r6, r0, #25
 800faec:	d5fb      	bpl.n	800fae6 <_printf_i+0xba>
 800faee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800faf2:	2e00      	cmp	r6, #0
 800faf4:	da03      	bge.n	800fafe <_printf_i+0xd2>
 800faf6:	232d      	movs	r3, #45	; 0x2d
 800faf8:	4276      	negs	r6, r6
 800fafa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fafe:	4859      	ldr	r0, [pc, #356]	; (800fc64 <_printf_i+0x238>)
 800fb00:	230a      	movs	r3, #10
 800fb02:	e012      	b.n	800fb2a <_printf_i+0xfe>
 800fb04:	682b      	ldr	r3, [r5, #0]
 800fb06:	6820      	ldr	r0, [r4, #0]
 800fb08:	1d19      	adds	r1, r3, #4
 800fb0a:	6029      	str	r1, [r5, #0]
 800fb0c:	0605      	lsls	r5, r0, #24
 800fb0e:	d501      	bpl.n	800fb14 <_printf_i+0xe8>
 800fb10:	681e      	ldr	r6, [r3, #0]
 800fb12:	e002      	b.n	800fb1a <_printf_i+0xee>
 800fb14:	0641      	lsls	r1, r0, #25
 800fb16:	d5fb      	bpl.n	800fb10 <_printf_i+0xe4>
 800fb18:	881e      	ldrh	r6, [r3, #0]
 800fb1a:	2f6f      	cmp	r7, #111	; 0x6f
 800fb1c:	4851      	ldr	r0, [pc, #324]	; (800fc64 <_printf_i+0x238>)
 800fb1e:	bf0c      	ite	eq
 800fb20:	2308      	moveq	r3, #8
 800fb22:	230a      	movne	r3, #10
 800fb24:	2100      	movs	r1, #0
 800fb26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb2a:	6865      	ldr	r5, [r4, #4]
 800fb2c:	2d00      	cmp	r5, #0
 800fb2e:	60a5      	str	r5, [r4, #8]
 800fb30:	bfa2      	ittt	ge
 800fb32:	6821      	ldrge	r1, [r4, #0]
 800fb34:	f021 0104 	bicge.w	r1, r1, #4
 800fb38:	6021      	strge	r1, [r4, #0]
 800fb3a:	b90e      	cbnz	r6, 800fb40 <_printf_i+0x114>
 800fb3c:	2d00      	cmp	r5, #0
 800fb3e:	d04a      	beq.n	800fbd6 <_printf_i+0x1aa>
 800fb40:	4615      	mov	r5, r2
 800fb42:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb46:	fb03 6711 	mls	r7, r3, r1, r6
 800fb4a:	5dc7      	ldrb	r7, [r0, r7]
 800fb4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb50:	4637      	mov	r7, r6
 800fb52:	460e      	mov	r6, r1
 800fb54:	42bb      	cmp	r3, r7
 800fb56:	d9f4      	bls.n	800fb42 <_printf_i+0x116>
 800fb58:	2b08      	cmp	r3, #8
 800fb5a:	d10b      	bne.n	800fb74 <_printf_i+0x148>
 800fb5c:	6823      	ldr	r3, [r4, #0]
 800fb5e:	07de      	lsls	r6, r3, #31
 800fb60:	d508      	bpl.n	800fb74 <_printf_i+0x148>
 800fb62:	6923      	ldr	r3, [r4, #16]
 800fb64:	6861      	ldr	r1, [r4, #4]
 800fb66:	4299      	cmp	r1, r3
 800fb68:	bfde      	ittt	le
 800fb6a:	2330      	movle	r3, #48	; 0x30
 800fb6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb70:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb74:	1b52      	subs	r2, r2, r5
 800fb76:	6122      	str	r2, [r4, #16]
 800fb78:	464b      	mov	r3, r9
 800fb7a:	aa03      	add	r2, sp, #12
 800fb7c:	4621      	mov	r1, r4
 800fb7e:	4640      	mov	r0, r8
 800fb80:	f8cd a000 	str.w	sl, [sp]
 800fb84:	f7ff fee0 	bl	800f948 <_printf_common>
 800fb88:	3001      	adds	r0, #1
 800fb8a:	d149      	bne.n	800fc20 <_printf_i+0x1f4>
 800fb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb90:	b004      	add	sp, #16
 800fb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb96:	6823      	ldr	r3, [r4, #0]
 800fb98:	f043 0320 	orr.w	r3, r3, #32
 800fb9c:	6023      	str	r3, [r4, #0]
 800fb9e:	2778      	movs	r7, #120	; 0x78
 800fba0:	4831      	ldr	r0, [pc, #196]	; (800fc68 <_printf_i+0x23c>)
 800fba2:	6823      	ldr	r3, [r4, #0]
 800fba4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fba8:	061f      	lsls	r7, r3, #24
 800fbaa:	6829      	ldr	r1, [r5, #0]
 800fbac:	f851 6b04 	ldr.w	r6, [r1], #4
 800fbb0:	d402      	bmi.n	800fbb8 <_printf_i+0x18c>
 800fbb2:	065f      	lsls	r7, r3, #25
 800fbb4:	bf48      	it	mi
 800fbb6:	b2b6      	uxthmi	r6, r6
 800fbb8:	07df      	lsls	r7, r3, #31
 800fbba:	6029      	str	r1, [r5, #0]
 800fbbc:	bf44      	itt	mi
 800fbbe:	f043 0320 	orrmi.w	r3, r3, #32
 800fbc2:	6023      	strmi	r3, [r4, #0]
 800fbc4:	b91e      	cbnz	r6, 800fbce <_printf_i+0x1a2>
 800fbc6:	6823      	ldr	r3, [r4, #0]
 800fbc8:	f023 0320 	bic.w	r3, r3, #32
 800fbcc:	6023      	str	r3, [r4, #0]
 800fbce:	2310      	movs	r3, #16
 800fbd0:	e7a8      	b.n	800fb24 <_printf_i+0xf8>
 800fbd2:	4824      	ldr	r0, [pc, #144]	; (800fc64 <_printf_i+0x238>)
 800fbd4:	e7e5      	b.n	800fba2 <_printf_i+0x176>
 800fbd6:	4615      	mov	r5, r2
 800fbd8:	e7be      	b.n	800fb58 <_printf_i+0x12c>
 800fbda:	682b      	ldr	r3, [r5, #0]
 800fbdc:	6826      	ldr	r6, [r4, #0]
 800fbde:	1d18      	adds	r0, r3, #4
 800fbe0:	6961      	ldr	r1, [r4, #20]
 800fbe2:	6028      	str	r0, [r5, #0]
 800fbe4:	0635      	lsls	r5, r6, #24
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	d501      	bpl.n	800fbee <_printf_i+0x1c2>
 800fbea:	6019      	str	r1, [r3, #0]
 800fbec:	e002      	b.n	800fbf4 <_printf_i+0x1c8>
 800fbee:	0670      	lsls	r0, r6, #25
 800fbf0:	d5fb      	bpl.n	800fbea <_printf_i+0x1be>
 800fbf2:	8019      	strh	r1, [r3, #0]
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	4615      	mov	r5, r2
 800fbf8:	6123      	str	r3, [r4, #16]
 800fbfa:	e7bd      	b.n	800fb78 <_printf_i+0x14c>
 800fbfc:	682b      	ldr	r3, [r5, #0]
 800fbfe:	2100      	movs	r1, #0
 800fc00:	1d1a      	adds	r2, r3, #4
 800fc02:	602a      	str	r2, [r5, #0]
 800fc04:	681d      	ldr	r5, [r3, #0]
 800fc06:	6862      	ldr	r2, [r4, #4]
 800fc08:	4628      	mov	r0, r5
 800fc0a:	f000 f849 	bl	800fca0 <memchr>
 800fc0e:	b108      	cbz	r0, 800fc14 <_printf_i+0x1e8>
 800fc10:	1b40      	subs	r0, r0, r5
 800fc12:	6060      	str	r0, [r4, #4]
 800fc14:	6863      	ldr	r3, [r4, #4]
 800fc16:	6123      	str	r3, [r4, #16]
 800fc18:	2300      	movs	r3, #0
 800fc1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc1e:	e7ab      	b.n	800fb78 <_printf_i+0x14c>
 800fc20:	6923      	ldr	r3, [r4, #16]
 800fc22:	462a      	mov	r2, r5
 800fc24:	4649      	mov	r1, r9
 800fc26:	4640      	mov	r0, r8
 800fc28:	47d0      	blx	sl
 800fc2a:	3001      	adds	r0, #1
 800fc2c:	d0ae      	beq.n	800fb8c <_printf_i+0x160>
 800fc2e:	6823      	ldr	r3, [r4, #0]
 800fc30:	079b      	lsls	r3, r3, #30
 800fc32:	d413      	bmi.n	800fc5c <_printf_i+0x230>
 800fc34:	68e0      	ldr	r0, [r4, #12]
 800fc36:	9b03      	ldr	r3, [sp, #12]
 800fc38:	4298      	cmp	r0, r3
 800fc3a:	bfb8      	it	lt
 800fc3c:	4618      	movlt	r0, r3
 800fc3e:	e7a7      	b.n	800fb90 <_printf_i+0x164>
 800fc40:	2301      	movs	r3, #1
 800fc42:	4632      	mov	r2, r6
 800fc44:	4649      	mov	r1, r9
 800fc46:	4640      	mov	r0, r8
 800fc48:	47d0      	blx	sl
 800fc4a:	3001      	adds	r0, #1
 800fc4c:	d09e      	beq.n	800fb8c <_printf_i+0x160>
 800fc4e:	3501      	adds	r5, #1
 800fc50:	68e3      	ldr	r3, [r4, #12]
 800fc52:	9903      	ldr	r1, [sp, #12]
 800fc54:	1a5b      	subs	r3, r3, r1
 800fc56:	42ab      	cmp	r3, r5
 800fc58:	dcf2      	bgt.n	800fc40 <_printf_i+0x214>
 800fc5a:	e7eb      	b.n	800fc34 <_printf_i+0x208>
 800fc5c:	2500      	movs	r5, #0
 800fc5e:	f104 0619 	add.w	r6, r4, #25
 800fc62:	e7f5      	b.n	800fc50 <_printf_i+0x224>
 800fc64:	0800ff2d 	.word	0x0800ff2d
 800fc68:	0800ff3e 	.word	0x0800ff3e

0800fc6c <memmove>:
 800fc6c:	4288      	cmp	r0, r1
 800fc6e:	b510      	push	{r4, lr}
 800fc70:	eb01 0402 	add.w	r4, r1, r2
 800fc74:	d902      	bls.n	800fc7c <memmove+0x10>
 800fc76:	4284      	cmp	r4, r0
 800fc78:	4623      	mov	r3, r4
 800fc7a:	d807      	bhi.n	800fc8c <memmove+0x20>
 800fc7c:	1e43      	subs	r3, r0, #1
 800fc7e:	42a1      	cmp	r1, r4
 800fc80:	d008      	beq.n	800fc94 <memmove+0x28>
 800fc82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc8a:	e7f8      	b.n	800fc7e <memmove+0x12>
 800fc8c:	4402      	add	r2, r0
 800fc8e:	4601      	mov	r1, r0
 800fc90:	428a      	cmp	r2, r1
 800fc92:	d100      	bne.n	800fc96 <memmove+0x2a>
 800fc94:	bd10      	pop	{r4, pc}
 800fc96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc9e:	e7f7      	b.n	800fc90 <memmove+0x24>

0800fca0 <memchr>:
 800fca0:	b2c9      	uxtb	r1, r1
 800fca2:	4402      	add	r2, r0
 800fca4:	b510      	push	{r4, lr}
 800fca6:	4290      	cmp	r0, r2
 800fca8:	4603      	mov	r3, r0
 800fcaa:	d101      	bne.n	800fcb0 <memchr+0x10>
 800fcac:	2300      	movs	r3, #0
 800fcae:	e003      	b.n	800fcb8 <memchr+0x18>
 800fcb0:	781c      	ldrb	r4, [r3, #0]
 800fcb2:	3001      	adds	r0, #1
 800fcb4:	428c      	cmp	r4, r1
 800fcb6:	d1f6      	bne.n	800fca6 <memchr+0x6>
 800fcb8:	4618      	mov	r0, r3
 800fcba:	bd10      	pop	{r4, pc}

0800fcbc <_realloc_r>:
 800fcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcc0:	4680      	mov	r8, r0
 800fcc2:	4614      	mov	r4, r2
 800fcc4:	460e      	mov	r6, r1
 800fcc6:	b921      	cbnz	r1, 800fcd2 <_realloc_r+0x16>
 800fcc8:	4611      	mov	r1, r2
 800fcca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcce:	f7ff bb85 	b.w	800f3dc <_malloc_r>
 800fcd2:	b92a      	cbnz	r2, 800fce0 <_realloc_r+0x24>
 800fcd4:	4625      	mov	r5, r4
 800fcd6:	f7ff fc93 	bl	800f600 <_free_r>
 800fcda:	4628      	mov	r0, r5
 800fcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fce0:	f000 f81b 	bl	800fd1a <_malloc_usable_size_r>
 800fce4:	4284      	cmp	r4, r0
 800fce6:	4607      	mov	r7, r0
 800fce8:	d802      	bhi.n	800fcf0 <_realloc_r+0x34>
 800fcea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fcee:	d812      	bhi.n	800fd16 <_realloc_r+0x5a>
 800fcf0:	4621      	mov	r1, r4
 800fcf2:	4640      	mov	r0, r8
 800fcf4:	f7ff fb72 	bl	800f3dc <_malloc_r>
 800fcf8:	4605      	mov	r5, r0
 800fcfa:	2800      	cmp	r0, #0
 800fcfc:	d0ed      	beq.n	800fcda <_realloc_r+0x1e>
 800fcfe:	42bc      	cmp	r4, r7
 800fd00:	4622      	mov	r2, r4
 800fd02:	4631      	mov	r1, r6
 800fd04:	bf28      	it	cs
 800fd06:	463a      	movcs	r2, r7
 800fd08:	f7ff fc6c 	bl	800f5e4 <memcpy>
 800fd0c:	4631      	mov	r1, r6
 800fd0e:	4640      	mov	r0, r8
 800fd10:	f7ff fc76 	bl	800f600 <_free_r>
 800fd14:	e7e1      	b.n	800fcda <_realloc_r+0x1e>
 800fd16:	4635      	mov	r5, r6
 800fd18:	e7df      	b.n	800fcda <_realloc_r+0x1e>

0800fd1a <_malloc_usable_size_r>:
 800fd1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd1e:	1f18      	subs	r0, r3, #4
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	bfbc      	itt	lt
 800fd24:	580b      	ldrlt	r3, [r1, r0]
 800fd26:	18c0      	addlt	r0, r0, r3
 800fd28:	4770      	bx	lr
	...

0800fd2c <_init>:
 800fd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd2e:	bf00      	nop
 800fd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd32:	bc08      	pop	{r3}
 800fd34:	469e      	mov	lr, r3
 800fd36:	4770      	bx	lr

0800fd38 <_fini>:
 800fd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd3a:	bf00      	nop
 800fd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd3e:	bc08      	pop	{r3}
 800fd40:	469e      	mov	lr, r3
 800fd42:	4770      	bx	lr
