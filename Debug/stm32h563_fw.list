
stm32h563_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f768  08000250  08000250  00010250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .Table4CLI    00000018  0800f9b8  0800f9b8  0001f9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       000001d0  0800f9d0  0800f9d0  0001f9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800fba0  0800fba0  00020164  2**0
                  CONTENTS
  5 .ARM          00000008  0800fba0  0800fba0  0001fba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800fba8  0800fba8  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800fba8  0800fba8  0001fba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800fbac  0800fbac  0001fbac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000a4  20000000  0800fbb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RAMVectorTable 000000c0  200000a4  0800fc54  000200a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001a5c  20000164  0800fd14  00020164  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20001bc0  0800fd14  00021bc0  2**0
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002019a  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002f212  00000000  00000000  000201dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000063ee  00000000  00000000  0004f3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002688  00000000  00000000  000557e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001db4  00000000  00000000  00057e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003c2bf  00000000  00000000  00059c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000310af  00000000  00000000  00095edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00170613  00000000  00000000  000c6f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a85c  00000000  00000000  002375a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004b  00000000  00000000  00241dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000164 	.word	0x20000164
 800026c:	00000000 	.word	0x00000000
 8000270:	0800f9a0 	.word	0x0800f9a0

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000168 	.word	0x20000168
 800028c:	0800f9a0 	.word	0x0800f9a0

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b982 	b.w	80005d0 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ea:	460d      	mov	r5, r1
 80002ec:	4604      	mov	r4, r0
 80002ee:	460f      	mov	r7, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d146      	bne.n	8000382 <__udivmoddi4+0x9e>
 80002f4:	428a      	cmp	r2, r1
 80002f6:	4694      	mov	ip, r2
 80002f8:	d95e      	bls.n	80003b8 <__udivmoddi4+0xd4>
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	b143      	cbz	r3, 8000312 <__udivmoddi4+0x2e>
 8000300:	fa02 fc03 	lsl.w	ip, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	409c      	lsls	r4, r3
 800030c:	fa20 f202 	lsr.w	r2, r0, r2
 8000310:	4317      	orrs	r7, r2
 8000312:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000316:	fa1f f58c 	uxth.w	r5, ip
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fbb7 f1fe 	udiv	r1, r7, lr
 8000320:	fb0e 7711 	mls	r7, lr, r1, r7
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800032c:	4290      	cmp	r0, r2
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x5e>
 8000330:	eb1c 0202 	adds.w	r2, ip, r2
 8000334:	f101 37ff 	add.w	r7, r1, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x5c>
 800033a:	4290      	cmp	r0, r2
 800033c:	f200 8134 	bhi.w	80005a8 <__udivmoddi4+0x2c4>
 8000340:	4639      	mov	r1, r7
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	fb00 f505 	mul.w	r5, r0, r5
 8000352:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000356:	42a5      	cmp	r5, r4
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x88>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x86>
 8000364:	42a5      	cmp	r5, r4
 8000366:	f200 8119 	bhi.w	800059c <__udivmoddi4+0x2b8>
 800036a:	4610      	mov	r0, r2
 800036c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	2100      	movs	r1, #0
 8000374:	b11e      	cbz	r6, 800037e <__udivmoddi4+0x9a>
 8000376:	40dc      	lsrs	r4, r3
 8000378:	2300      	movs	r3, #0
 800037a:	e9c6 4300 	strd	r4, r3, [r6]
 800037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0xb4>
 8000386:	2e00      	cmp	r6, #0
 8000388:	f000 80fc 	beq.w	8000584 <__udivmoddi4+0x2a0>
 800038c:	2100      	movs	r1, #0
 800038e:	e9c6 0500 	strd	r0, r5, [r6]
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	d14c      	bne.n	800043a <__udivmoddi4+0x156>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f0c0 80f2 	bcc.w	800058a <__udivmoddi4+0x2a6>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f240 80ef 	bls.w	800058a <__udivmoddi4+0x2a6>
 80003ac:	4608      	mov	r0, r1
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e5      	beq.n	800037e <__udivmoddi4+0x9a>
 80003b2:	e9c6 4700 	strd	r4, r7, [r6]
 80003b6:	e7e2      	b.n	800037e <__udivmoddi4+0x9a>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xd8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f382 	clz	r3, r2
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 809f 	bne.w	8000504 <__udivmoddi4+0x220>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f5fe 	udiv	r5, r2, lr
 80003d6:	fb0e 2015 	mls	r0, lr, r5, r2
 80003da:	0c22      	lsrs	r2, r4, #16
 80003dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e0:	fb07 f005 	mul.w	r0, r7, r5
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d90f      	bls.n	8000408 <__udivmoddi4+0x124>
 80003e8:	eb1c 0202 	adds.w	r2, ip, r2
 80003ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f0:	bf2c      	ite	cs
 80003f2:	f04f 0901 	movcs.w	r9, #1
 80003f6:	f04f 0900 	movcc.w	r9, #0
 80003fa:	4290      	cmp	r0, r2
 80003fc:	d903      	bls.n	8000406 <__udivmoddi4+0x122>
 80003fe:	f1b9 0f00 	cmp.w	r9, #0
 8000402:	f000 80ce 	beq.w	80005a2 <__udivmoddi4+0x2be>
 8000406:	4645      	mov	r5, r8
 8000408:	1a12      	subs	r2, r2, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000410:	fb0e 2210 	mls	r2, lr, r0, r2
 8000414:	fb00 f707 	mul.w	r7, r0, r7
 8000418:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041c:	42a7      	cmp	r7, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x14e>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 32ff 	add.w	r2, r0, #4294967295
 8000428:	d202      	bcs.n	8000430 <__udivmoddi4+0x14c>
 800042a:	42a7      	cmp	r7, r4
 800042c:	f200 80b3 	bhi.w	8000596 <__udivmoddi4+0x2b2>
 8000430:	4610      	mov	r0, r2
 8000432:	1be4      	subs	r4, r4, r7
 8000434:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000438:	e79c      	b.n	8000374 <__udivmoddi4+0x90>
 800043a:	f1c1 0420 	rsb	r4, r1, #32
 800043e:	408b      	lsls	r3, r1
 8000440:	fa05 fc01 	lsl.w	ip, r5, r1
 8000444:	fa22 f704 	lsr.w	r7, r2, r4
 8000448:	40e5      	lsrs	r5, r4
 800044a:	408a      	lsls	r2, r1
 800044c:	431f      	orrs	r7, r3
 800044e:	fa20 f304 	lsr.w	r3, r0, r4
 8000452:	4088      	lsls	r0, r1
 8000454:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000458:	ea43 030c 	orr.w	r3, r3, ip
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb5 fef8 	udiv	lr, r5, r8
 8000468:	fb08 551e 	mls	r5, r8, lr, r5
 800046c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000470:	fb0e f90c 	mul.w	r9, lr, ip
 8000474:	45a9      	cmp	r9, r5
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1b2>
 8000478:	197d      	adds	r5, r7, r5
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a9      	cmp	r9, r5
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b0>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 808d 	beq.w	80005ae <__udivmoddi4+0x2ca>
 8000494:	46d6      	mov	lr, sl
 8000496:	eba5 0509 	sub.w	r5, r5, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb5 f3f8 	udiv	r3, r5, r8
 80004a2:	fb08 5513 	mls	r5, r8, r3, r5
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004ae:	45ac      	cmp	ip, r5
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1dc>
 80004b2:	197d      	adds	r5, r7, r5
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1da>
 80004ba:	45ac      	cmp	ip, r5
 80004bc:	d87e      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004c4:	eba5 050c 	sub.w	r5, r5, ip
 80004c8:	fba3 9802 	umull	r9, r8, r3, r2
 80004cc:	4545      	cmp	r5, r8
 80004ce:	46ce      	mov	lr, r9
 80004d0:	46c4      	mov	ip, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1f6>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x200>
 80004d6:	4548      	cmp	r0, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x200>
 80004da:	3b01      	subs	r3, #1
 80004dc:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e0:	eb68 0c07 	sbc.w	ip, r8, r7
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d06f      	beq.n	80005c8 <__udivmoddi4+0x2e4>
 80004e8:	ebb0 020e 	subs.w	r2, r0, lr
 80004ec:	eb65 050c 	sbc.w	r5, r5, ip
 80004f0:	40ca      	lsrs	r2, r1
 80004f2:	fa05 f404 	lsl.w	r4, r5, r4
 80004f6:	40cd      	lsrs	r5, r1
 80004f8:	4618      	mov	r0, r3
 80004fa:	4314      	orrs	r4, r2
 80004fc:	2100      	movs	r1, #0
 80004fe:	e9c6 4500 	strd	r4, r5, [r6]
 8000502:	e73c      	b.n	800037e <__udivmoddi4+0x9a>
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	f1c3 0220 	rsb	r2, r3, #32
 800050c:	4099      	lsls	r1, r3
 800050e:	409c      	lsls	r4, r3
 8000510:	40d5      	lsrs	r5, r2
 8000512:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000516:	fa20 f202 	lsr.w	r2, r0, r2
 800051a:	fa1f f78c 	uxth.w	r7, ip
 800051e:	fbb5 f0fe 	udiv	r0, r5, lr
 8000522:	430a      	orrs	r2, r1
 8000524:	fb0e 5510 	mls	r5, lr, r0, r5
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052e:	fb00 f507 	mul.w	r5, r0, r7
 8000532:	428d      	cmp	r5, r1
 8000534:	d90e      	bls.n	8000554 <__udivmoddi4+0x270>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	bf2c      	ite	cs
 8000540:	f04f 0901 	movcs.w	r9, #1
 8000544:	f04f 0900 	movcc.w	r9, #0
 8000548:	428d      	cmp	r5, r1
 800054a:	d902      	bls.n	8000552 <__udivmoddi4+0x26e>
 800054c:	f1b9 0f00 	cmp.w	r9, #0
 8000550:	d031      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 8000552:	4640      	mov	r0, r8
 8000554:	1b49      	subs	r1, r1, r5
 8000556:	b292      	uxth	r2, r2
 8000558:	fbb1 f5fe 	udiv	r5, r1, lr
 800055c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000560:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000564:	fb05 f107 	mul.w	r1, r5, r7
 8000568:	4291      	cmp	r1, r2
 800056a:	d907      	bls.n	800057c <__udivmoddi4+0x298>
 800056c:	eb1c 0202 	adds.w	r2, ip, r2
 8000570:	f105 38ff 	add.w	r8, r5, #4294967295
 8000574:	d201      	bcs.n	800057a <__udivmoddi4+0x296>
 8000576:	4291      	cmp	r1, r2
 8000578:	d823      	bhi.n	80005c2 <__udivmoddi4+0x2de>
 800057a:	4645      	mov	r5, r8
 800057c:	1a52      	subs	r2, r2, r1
 800057e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000582:	e726      	b.n	80003d2 <__udivmoddi4+0xee>
 8000584:	4631      	mov	r1, r6
 8000586:	4630      	mov	r0, r6
 8000588:	e6f9      	b.n	800037e <__udivmoddi4+0x9a>
 800058a:	1a84      	subs	r4, r0, r2
 800058c:	eb65 0203 	sbc.w	r2, r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	4617      	mov	r7, r2
 8000594:	e70b      	b.n	80003ae <__udivmoddi4+0xca>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74a      	b.n	8000432 <__udivmoddi4+0x14e>
 800059c:	4464      	add	r4, ip
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e4      	b.n	800036c <__udivmoddi4+0x88>
 80005a2:	3d02      	subs	r5, #2
 80005a4:	4462      	add	r2, ip
 80005a6:	e72f      	b.n	8000408 <__udivmoddi4+0x124>
 80005a8:	3902      	subs	r1, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e6c9      	b.n	8000342 <__udivmoddi4+0x5e>
 80005ae:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b2:	443d      	add	r5, r7
 80005b4:	e76f      	b.n	8000496 <__udivmoddi4+0x1b2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4461      	add	r1, ip
 80005ba:	e7cb      	b.n	8000554 <__udivmoddi4+0x270>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443d      	add	r5, r7
 80005c0:	e77e      	b.n	80004c0 <__udivmoddi4+0x1dc>
 80005c2:	3d02      	subs	r5, #2
 80005c4:	4462      	add	r2, ip
 80005c6:	e7d9      	b.n	800057c <__udivmoddi4+0x298>
 80005c8:	4618      	mov	r0, r3
 80005ca:	4631      	mov	r1, r6
 80005cc:	e6d7      	b.n	800037e <__udivmoddi4+0x9a>
 80005ce:	bf00      	nop

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AppMain>:
/* TaskTimer - Test*/
svTaskTimer_DEF(svTimer, 10);


void AppMain(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005d8:	b662      	cpsie	i
}
 80005da:	bf00      	nop
  __enable_irq();
  RTC_Init();
 80005dc:	f000 ff90 	bl	8001500 <RTC_Init>
  Reset_Init();
 80005e0:	f000 fffc 	bl	80015dc <Reset_Init>
  //Flash_Init();
  svTaskTimer_InitTimers(&svTimer, HAL_GetTick);
 80005e4:	490d      	ldr	r1, [pc, #52]	; (800061c <AppMain+0x48>)
 80005e6:	480e      	ldr	r0, [pc, #56]	; (8000620 <AppMain+0x4c>)
 80005e8:	f00c f987 	bl	800c8fa <svTaskTimer_InitTimers>
  UART_Init(_DEF_UART1, 115200);
 80005ec:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005f0:	2000      	movs	r0, #0
 80005f2:	f001 f83b 	bl	800166c <UART_Init>
  svDebugInit();
 80005f6:	f001 fa65 	bl	8001ac4 <svDebugInit>
  LED_Init();
 80005fa:	f000 fed1 	bl	80013a0 <LED_Init>
  LED_SimpleAnimation();
 80005fe:	f000 ff29 	bl	8001454 <LED_SimpleAnimation>
  DebugMsg(DEBUGMSG_APP, "\r\n<< svCLI TEST : >>\r\n");
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <AppMain+0x50>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d902      	bls.n	8000610 <AppMain+0x3c>
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <AppMain+0x54>)
 800060c:	f001 fa8e 	bl	8001b2c <svDebugMessage>
  //uint32_t pre_time = HAL_GetTick();
  while(1)
  {
    svDebugProcess();
 8000610:	f001 fa00 	bl	8001a14 <svDebugProcess>
    svTaskTimer_CheckTimers(&svTimer);
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <AppMain+0x4c>)
 8000616:	f00c fa62 	bl	800cade <svTaskTimer_CheckTimers>
    svDebugProcess();
 800061a:	e7f9      	b.n	8000610 <AppMain+0x3c>
 800061c:	08001c0d 	.word	0x08001c0d
 8000620:	20000000 	.word	0x20000000
 8000624:	2000002c 	.word	0x2000002c
 8000628:	0800f9d0 	.word	0x0800f9d0

0800062c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000646:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <LL_AHB2_GRP1_EnableClock+0x34>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4313      	orrs	r3, r2
 8000650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000656:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4013      	ands	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000660:	68fb      	ldr	r3, [r7, #12]
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	44020c00 	.word	0x44020c00

08000674 <LL_APB1_GRP2_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1HENR, Periphs);
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <LL_APB1_GRP2_EnableClock+0x34>)
 800067e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000682:	4909      	ldr	r1, [pc, #36]	; (80006a8 <LL_APB1_GRP2_EnableClock+0x34>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4313      	orrs	r3, r2
 8000688:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1HENR, Periphs);
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <LL_APB1_GRP2_EnableClock+0x34>)
 800068e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4013      	ands	r3, r2
 8000696:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000698:	68fb      	ldr	r3, [r7, #12]
}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	44020c00 	.word	0x44020c00

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  g_RCC_CSR = RCC->RSR;         // Get Boot Reason
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <main+0x68>)
 80006b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006b8:	4a17      	ldr	r2, [pc, #92]	; (8000718 <main+0x6c>)
 80006ba:	6013      	str	r3, [r2, #0]
  /* Copy the vector table from the Flash (mapped at the base of the application
    load address 0x08006000) to the base address of the SRAM at 0x20000000. */
  for(int i = 0; i < 48; i++)
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	e00d      	b.n	80006de <main+0x32>
  {
    VectorTable[i] = *(__IO uint32_t*)(APPLICATION_ADDRESS + (i<<2));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80006ca:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4912      	ldr	r1, [pc, #72]	; (800071c <main+0x70>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < 48; i++)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3301      	adds	r3, #1
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b2f      	cmp	r3, #47	; 0x2f
 80006e2:	ddee      	ble.n	80006c2 <main+0x16>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f001 fa58 	bl	8001b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f81a 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 f938 	bl	8000960 <MX_GPIO_Init>
  MX_ETH_Init();
 80006f0:	f000 f888 	bl	8000804 <MX_ETH_Init>
  MX_UCPD1_Init();
 80006f4:	f000 f8de 	bl	80008b4 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80006f8:	f000 f900 	bl	80008fc <MX_USB_PCD_Init>
  MX_ICACHE_Init();
 80006fc:	f000 f8ce 	bl	800089c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  AppMain();
 8000700:	f7ff ff68 	bl	80005d4 <AppMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000704:	f00c fae8 	bl	800ccd8 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000708:	f7ff ff90 	bl	800062c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800070c:	f00c fb0a 	bl	800cd24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000710:	e7fe      	b.n	8000710 <main+0x64>
 8000712:	bf00      	nop
 8000714:	44020c00 	.word	0x44020c00
 8000718:	20000720 	.word	0x20000720
 800071c:	200000a4 	.word	0x200000a4

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b09c      	sub	sp, #112	; 0x70
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2250      	movs	r2, #80	; 0x50
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f00e fd3a 	bl	800f1a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
 8000744:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000746:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <SystemClock_Config+0xe0>)
 8000748:	691b      	ldr	r3, [r3, #16]
 800074a:	4a2d      	ldr	r2, [pc, #180]	; (8000800 <SystemClock_Config+0xe0>)
 800074c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000750:	6113      	str	r3, [r2, #16]
 8000752:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <SystemClock_Config+0xe0>)
 8000754:	691b      	ldr	r3, [r3, #16]
 8000756:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800075e:	bf00      	nop
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <SystemClock_Config+0xe0>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	f003 0308 	and.w	r3, r3, #8
 8000768:	2b08      	cmp	r3, #8
 800076a:	d1f9      	bne.n	8000760 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800076c:	232b      	movs	r3, #43	; 0x2b
 800076e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000776:	2301      	movs	r3, #1
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800077a:	2308      	movs	r3, #8
 800077c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077e:	2340      	movs	r3, #64	; 0x40
 8000780:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000782:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000786:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000792:	2303      	movs	r3, #3
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 800079a:	2310      	movs	r3, #16
 800079c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80007aa:	230c      	movs	r3, #12
 80007ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fa9e 	bl	8002cfc <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007c6:	f000 f9b3 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	231f      	movs	r3, #31
 80007cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2303      	movs	r3, #3
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2103      	movs	r1, #3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 febf 	bl	800356c <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80007f4:	f000 f99c 	bl	8000b30 <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3770      	adds	r7, #112	; 0x70
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	44020800 	.word	0x44020800

08000804 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_ETH_Init+0x80>)
 800080a:	4a1f      	ldr	r2, [pc, #124]	; (8000888 <MX_ETH_Init+0x84>)
 800080c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_ETH_Init+0x88>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_ETH_Init+0x88>)
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_ETH_Init+0x88>)
 800081c:	22e1      	movs	r2, #225	; 0xe1
 800081e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_ETH_Init+0x88>)
 8000822:	2200      	movs	r2, #0
 8000824:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_ETH_Init+0x88>)
 8000828:	2200      	movs	r2, #0
 800082a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_ETH_Init+0x88>)
 800082e:	2200      	movs	r2, #0
 8000830:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_ETH_Init+0x80>)
 8000834:	4a15      	ldr	r2, [pc, #84]	; (800088c <MX_ETH_Init+0x88>)
 8000836:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_ETH_Init+0x80>)
 800083a:	2201      	movs	r2, #1
 800083c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_ETH_Init+0x80>)
 8000840:	4a13      	ldr	r2, [pc, #76]	; (8000890 <MX_ETH_Init+0x8c>)
 8000842:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_ETH_Init+0x80>)
 8000846:	4a13      	ldr	r2, [pc, #76]	; (8000894 <MX_ETH_Init+0x90>)
 8000848:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_ETH_Init+0x80>)
 800084c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000850:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_ETH_Init+0x80>)
 8000854:	f001 fba6 	bl	8001fa4 <HAL_ETH_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800085e:	f000 f967 	bl	8000b30 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000862:	2238      	movs	r2, #56	; 0x38
 8000864:	2100      	movs	r1, #0
 8000866:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_ETH_Init+0x94>)
 8000868:	f00e fc9e 	bl	800f1a8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_ETH_Init+0x94>)
 800086e:	2221      	movs	r2, #33	; 0x21
 8000870:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_ETH_Init+0x94>)
 8000874:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000878:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800087a:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_ETH_Init+0x94>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000368 	.word	0x20000368
 8000888:	40028000 	.word	0x40028000
 800088c:	20000724 	.word	0x20000724
 8000890:	20000308 	.word	0x20000308
 8000894:	200002a8 	.word	0x200002a8
 8000898:	20000270 	.word	0x20000270

0800089c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80008a0:	f002 f91e 	bl	8002ae0 <HAL_ICACHE_Enable>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80008aa:	f000 f941 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
 80008c8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80008ca:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80008ce:	f7ff fed1 	bl	8000674 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f7ff feb2 	bl	800063c <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB13   ------> UCPD1_CC1
  PB14   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 80008d8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80008dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008de:	2303      	movs	r3, #3
 80008e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	463b      	mov	r3, r7
 80008e8:	4619      	mov	r1, r3
 80008ea:	4803      	ldr	r0, [pc, #12]	; (80008f8 <MX_UCPD1_Init+0x44>)
 80008ec:	f00b f8cf 	bl	800ba8e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	42020400 	.word	0x42020400

080008fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_USB_PCD_Init+0x5c>)
 8000902:	4a16      	ldr	r2, [pc, #88]	; (800095c <MX_USB_PCD_Init+0x60>)
 8000904:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_USB_PCD_Init+0x5c>)
 8000908:	2208      	movs	r2, #8
 800090a:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_USB_PCD_Init+0x5c>)
 800090e:	2202      	movs	r2, #2
 8000910:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USB_PCD_Init+0x5c>)
 8000914:	2202      	movs	r2, #2
 8000916:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_USB_PCD_Init+0x5c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USB_PCD_Init+0x5c>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USB_PCD_Init+0x5c>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USB_PCD_Init+0x5c>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USB_PCD_Init+0x5c>)
 8000932:	2200      	movs	r2, #0
 8000934:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USB_PCD_Init+0x5c>)
 8000938:	2200      	movs	r2, #0
 800093a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USB_PCD_Init+0x5c>)
 800093e:	2200      	movs	r2, #0
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_USB_PCD_Init+0x5c>)
 8000944:	f002 f8dc 	bl	8002b00 <HAL_PCD_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 800094e:	f000 f8ef 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000418 	.word	0x20000418
 800095c:	40016000 	.word	0x40016000

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	; 0x30
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4b5f      	ldr	r3, [pc, #380]	; (8000af4 <MX_GPIO_Init+0x194>)
 8000978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800097c:	4a5d      	ldr	r2, [pc, #372]	; (8000af4 <MX_GPIO_Init+0x194>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000986:	4b5b      	ldr	r3, [pc, #364]	; (8000af4 <MX_GPIO_Init+0x194>)
 8000988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000994:	4b57      	ldr	r3, [pc, #348]	; (8000af4 <MX_GPIO_Init+0x194>)
 8000996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800099a:	4a56      	ldr	r2, [pc, #344]	; (8000af4 <MX_GPIO_Init+0x194>)
 800099c:	f043 0320 	orr.w	r3, r3, #32
 80009a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009a4:	4b53      	ldr	r3, [pc, #332]	; (8000af4 <MX_GPIO_Init+0x194>)
 80009a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009aa:	f003 0320 	and.w	r3, r3, #32
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	4b50      	ldr	r3, [pc, #320]	; (8000af4 <MX_GPIO_Init+0x194>)
 80009b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b8:	4a4e      	ldr	r2, [pc, #312]	; (8000af4 <MX_GPIO_Init+0x194>)
 80009ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009c2:	4b4c      	ldr	r3, [pc, #304]	; (8000af4 <MX_GPIO_Init+0x194>)
 80009c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <MX_GPIO_Init+0x194>)
 80009d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009d6:	4a47      	ldr	r2, [pc, #284]	; (8000af4 <MX_GPIO_Init+0x194>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009e0:	4b44      	ldr	r3, [pc, #272]	; (8000af4 <MX_GPIO_Init+0x194>)
 80009e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <MX_GPIO_Init+0x194>)
 80009f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009f4:	4a3f      	ldr	r2, [pc, #252]	; (8000af4 <MX_GPIO_Init+0x194>)
 80009f6:	f043 0302 	orr.w	r3, r3, #2
 80009fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009fe:	4b3d      	ldr	r3, [pc, #244]	; (8000af4 <MX_GPIO_Init+0x194>)
 8000a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0c:	4b39      	ldr	r3, [pc, #228]	; (8000af4 <MX_GPIO_Init+0x194>)
 8000a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a12:	4a38      	ldr	r2, [pc, #224]	; (8000af4 <MX_GPIO_Init+0x194>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a1c:	4b35      	ldr	r3, [pc, #212]	; (8000af4 <MX_GPIO_Init+0x194>)
 8000a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2a:	4b32      	ldr	r3, [pc, #200]	; (8000af4 <MX_GPIO_Init+0x194>)
 8000a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a30:	4a30      	ldr	r2, [pc, #192]	; (8000af4 <MX_GPIO_Init+0x194>)
 8000a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <MX_GPIO_Init+0x194>)
 8000a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	482a      	ldr	r0, [pc, #168]	; (8000af8 <MX_GPIO_Init+0x198>)
 8000a4e:	f002 f82f 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2101      	movs	r1, #1
 8000a56:	4829      	ldr	r0, [pc, #164]	; (8000afc <MX_GPIO_Init+0x19c>)
 8000a58:	f002 f82a 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2110      	movs	r1, #16
 8000a60:	4827      	ldr	r0, [pc, #156]	; (8000b00 <MX_GPIO_Init+0x1a0>)
 8000a62:	f002 f825 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6c:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <MX_GPIO_Init+0x1a4>)
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4823      	ldr	r0, [pc, #140]	; (8000b08 <MX_GPIO_Init+0x1a8>)
 8000a7c:	f001 fec6 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 8000a80:	2310      	movs	r3, #16
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4818      	ldr	r0, [pc, #96]	; (8000af8 <MX_GPIO_Init+0x198>)
 8000a98:	f001 feb8 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4812      	ldr	r0, [pc, #72]	; (8000afc <MX_GPIO_Init+0x19c>)
 8000ab4:	f001 feaa 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	480c      	ldr	r0, [pc, #48]	; (8000b00 <MX_GPIO_Init+0x1a0>)
 8000ad0:	f001 fe9c 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_GPIO_Init+0x1a4>)
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <MX_GPIO_Init+0x1a0>)
 8000ae8:	f001 fe90 	bl	800280c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	; 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	44020c00 	.word	0x44020c00
 8000af8:	42021400 	.word	0x42021400
 8000afc:	42020400 	.word	0x42020400
 8000b00:	42021800 	.word	0x42021800
 8000b04:	10110000 	.word	0x10110000
 8000b08:	42020800 	.word	0x42020800

08000b0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d101      	bne.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1e:	f001 f861 	bl	8001be4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40001000 	.word	0x40001000

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <Error_Handler+0x8>

08000b3a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	210f      	movs	r1, #15
 8000b42:	f06f 0001 	mvn.w	r0, #1
 8000b46:	f001 f95f 	bl	8001e08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a49      	ldr	r2, [pc, #292]	; (8000c94 <HAL_ETH_MspInit+0x144>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	f040 808b 	bne.w	8000c8a <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b74:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a47      	ldr	r2, [pc, #284]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000b7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000b84:	4b44      	ldr	r3, [pc, #272]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b8e:	623b      	str	r3, [r7, #32]
 8000b90:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8000b92:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b98:	4a3f      	ldr	r2, [pc, #252]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000ba2:	4b3d      	ldr	r3, [pc, #244]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8000bb0:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a38      	ldr	r2, [pc, #224]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000bc0:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bd4:	4a30      	ldr	r2, [pc, #192]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bde:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bf2:	4a29      	ldr	r2, [pc, #164]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bfc:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c10:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000c12:	f043 0302 	orr.w	r3, r3, #2
 8000c16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <HAL_ETH_MspInit+0x148>)
 8000c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB15     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c28:	2332      	movs	r3, #50	; 0x32
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c34:	2302      	movs	r3, #2
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c38:	230b      	movs	r3, #11
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	4816      	ldr	r0, [pc, #88]	; (8000c9c <HAL_ETH_MspInit+0x14c>)
 8000c44:	f001 fde2 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_7;
 8000c48:	23a6      	movs	r3, #166	; 0xa6
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c54:	2302      	movs	r3, #2
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c58:	230b      	movs	r3, #11
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	480f      	ldr	r0, [pc, #60]	; (8000ca0 <HAL_ETH_MspInit+0x150>)
 8000c64:	f001 fdd2 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8000c68:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c76:	2302      	movs	r3, #2
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7a:	230b      	movs	r3, #11
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <HAL_ETH_MspInit+0x154>)
 8000c86:	f001 fdc1 	bl	800280c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3738      	adds	r7, #56	; 0x38
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40028000 	.word	0x40028000
 8000c98:	44020c00 	.word	0x44020c00
 8000c9c:	42020800 	.word	0x42020800
 8000ca0:	42020000 	.word	0x42020000
 8000ca4:	42020400 	.word	0x42020400

08000ca8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0c6      	sub	sp, #280	; 0x118
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000cb2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000cb6:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	2100      	movs	r1, #0
 8000cca:	f00e fa6d 	bl	800f1a8 <memset>
  if(hrtc->Instance==RTC)
 8000cce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000cd2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a21      	ldr	r2, [pc, #132]	; (8000d60 <HAL_RTC_MspInit+0xb8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d13a      	bne.n	8000d56 <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ce0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ce4:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8000ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cf4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d00:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f002 ffa9 	bl	8003c60 <HAL_RCCEx_PeriphCLKConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8000d14:	f7ff ff0c 	bl	8000b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_RTC_MspInit+0xbc>)
 8000d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d1e:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <HAL_RTC_MspInit+0xbc>)
 8000d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_RTC_MspInit+0xbc>)
 8000d2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000d2e:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <HAL_RTC_MspInit+0xbc>)
 8000d30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d34:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_RTC_MspInit+0xbc>)
 8000d3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000d3e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8000d42:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000d50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d54:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	44007800 	.word	0x44007800
 8000d64:	44020c00 	.word	0x44020c00

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0ce      	sub	sp, #312	; 0x138
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d72:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000d76:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d8c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d90:	4618      	mov	r0, r3
 8000d92:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000d96:	461a      	mov	r2, r3
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f00e fa05 	bl	800f1a8 <memset>
  if(huart->Instance==USART1)
 8000d9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000da2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a6e      	ldr	r2, [pc, #440]	; (8000f64 <HAL_UART_MspInit+0x1fc>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d165      	bne.n	8000e7c <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000db0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000db4:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000db8:	f04f 0201 	mov.w	r2, #1
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000dc8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000dcc:	2200      	movs	r2, #0
 8000dce:	65da      	str	r2, [r3, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd0:	f107 0318 	add.w	r3, r7, #24
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 ff43 	bl	8003c60 <HAL_RCCEx_PeriphCLKConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8000de0:	f7ff fea6 	bl	8000b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de4:	4b60      	ldr	r3, [pc, #384]	; (8000f68 <HAL_UART_MspInit+0x200>)
 8000de6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000dea:	4a5f      	ldr	r2, [pc, #380]	; (8000f68 <HAL_UART_MspInit+0x200>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000df4:	4b5c      	ldr	r3, [pc, #368]	; (8000f68 <HAL_UART_MspInit+0x200>)
 8000df6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000dfa:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8000dfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e02:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000e10:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	4b55      	ldr	r3, [pc, #340]	; (8000f68 <HAL_UART_MspInit+0x200>)
 8000e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e18:	4a53      	ldr	r2, [pc, #332]	; (8000f68 <HAL_UART_MspInit+0x200>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e22:	4b51      	ldr	r3, [pc, #324]	; (8000f68 <HAL_UART_MspInit+0x200>)
 8000e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e28:	f003 0202 	and.w	r2, r3, #2
 8000e2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e30:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e3a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000e3e:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e40:	23c0      	movs	r3, #192	; 0xc0
 8000e42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000e62:	4619      	mov	r1, r3
 8000e64:	4841      	ldr	r0, [pc, #260]	; (8000f6c <HAL_UART_MspInit+0x204>)
 8000e66:	f001 fcd1 	bl	800280c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2105      	movs	r1, #5
 8000e6e:	203a      	movs	r0, #58	; 0x3a
 8000e70:	f000 ffca 	bl	8001e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e74:	203a      	movs	r0, #58	; 0x3a
 8000e76:	f000 ffe1 	bl	8001e3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e7a:	e06e      	b.n	8000f5a <HAL_UART_MspInit+0x1f2>
  else if(huart->Instance==USART3)
 8000e7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a39      	ldr	r2, [pc, #228]	; (8000f70 <HAL_UART_MspInit+0x208>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d165      	bne.n	8000f5a <HAL_UART_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e92:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000e96:	f04f 0204 	mov.w	r2, #4
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ea2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ea6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000eaa:	2200      	movs	r2, #0
 8000eac:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 fed4 	bl	8003c60 <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_UART_MspInit+0x15a>
      Error_Handler();
 8000ebe:	f7ff fe37 	bl	8000b30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ec2:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <HAL_UART_MspInit+0x200>)
 8000ec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ec8:	4a27      	ldr	r2, [pc, #156]	; (8000f68 <HAL_UART_MspInit+0x200>)
 8000eca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ece:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000ed2:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <HAL_UART_MspInit+0x200>)
 8000ed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ed8:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000edc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ee0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000eea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000eee:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_UART_MspInit+0x200>)
 8000ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <HAL_UART_MspInit+0x200>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0x200>)
 8000f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f06:	f003 0208 	and.w	r2, r3, #8
 8000f0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f1c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000f1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000f42:	4619      	mov	r1, r3
 8000f44:	480b      	ldr	r0, [pc, #44]	; (8000f74 <HAL_UART_MspInit+0x20c>)
 8000f46:	f001 fc61 	bl	800280c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2105      	movs	r1, #5
 8000f4e:	203c      	movs	r0, #60	; 0x3c
 8000f50:	f000 ff5a 	bl	8001e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f54:	203c      	movs	r0, #60	; 0x3c
 8000f56:	f000 ff71 	bl	8001e3c <HAL_NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40013800 	.word	0x40013800
 8000f68:	44020c00 	.word	0x44020c00
 8000f6c:	42020400 	.word	0x42020400
 8000f70:	40004800 	.word	0x40004800
 8000f74:	42020c00 	.word	0x42020c00

08000f78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0cc      	sub	sp, #304	; 0x130
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f86:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	2100      	movs	r1, #0
 8000faa:	f00e f8fd 	bl	800f1a8 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8000fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a33      	ldr	r2, [pc, #204]	; (8001088 <HAL_PCD_MspInit+0x110>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d15e      	bne.n	800107e <HAL_PCD_MspInit+0x106>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fc4:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	f04f 0310 	mov.w	r3, #16
 8000fd0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fd8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000fdc:	2230      	movs	r2, #48	; 0x30
 8000fde:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 fe3a 	bl	8003c60 <HAL_RCCEx_PeriphCLKConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_PCD_MspInit+0x7e>
    {
      Error_Handler();
 8000ff2:	f7ff fd9d 	bl	8000b30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <HAL_PCD_MspInit+0x114>)
 8000ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ffc:	4a23      	ldr	r2, [pc, #140]	; (800108c <HAL_PCD_MspInit+0x114>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <HAL_PCD_MspInit+0x114>)
 8001008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800100c:	f003 0201 	and.w	r2, r3, #1
 8001010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001014:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800101e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001022:	681b      	ldr	r3, [r3, #0]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001024:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001028:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800103e:	230a      	movs	r3, #10
 8001040:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001048:	4619      	mov	r1, r3
 800104a:	4811      	ldr	r0, [pc, #68]	; (8001090 <HAL_PCD_MspInit+0x118>)
 800104c:	f001 fbde 	bl	800280c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_PCD_MspInit+0x114>)
 8001052:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001056:	4a0d      	ldr	r2, [pc, #52]	; (800108c <HAL_PCD_MspInit+0x114>)
 8001058:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800105c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_PCD_MspInit+0x114>)
 8001062:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001066:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 800106a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800106e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001078:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800107c:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40016000 	.word	0x40016000
 800108c:	44020c00 	.word	0x44020c00
 8001090:	42020000 	.word	0x42020000

08001094 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800109c:	4b33      	ldr	r3, [pc, #204]	; (800116c <HAL_InitTick+0xd8>)
 800109e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010a2:	4a32      	ldr	r2, [pc, #200]	; (800116c <HAL_InitTick+0xd8>)
 80010a4:	f043 0310 	orr.w	r3, r3, #16
 80010a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_InitTick+0xd8>)
 80010ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010ba:	f107 020c 	add.w	r2, r7, #12
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 fd93 	bl	8003bf0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d103      	bne.n	80010dc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010d4:	f002 fd4a 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 80010d8:	6378      	str	r0, [r7, #52]	; 0x34
 80010da:	e004      	b.n	80010e6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010dc:	f002 fd46 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 80010e0:	4603      	mov	r3, r0
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 80010e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e8:	095b      	lsrs	r3, r3, #5
 80010ea:	4a21      	ldr	r2, [pc, #132]	; (8001170 <HAL_InitTick+0xdc>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	09db      	lsrs	r3, r3, #7
 80010f2:	3b01      	subs	r3, #1
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <HAL_InitTick+0xe0>)
 80010f8:	4a1f      	ldr	r2, [pc, #124]	; (8001178 <HAL_InitTick+0xe4>)
 80010fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <HAL_InitTick+0xe0>)
 80010fe:	2263      	movs	r2, #99	; 0x63
 8001100:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001102:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <HAL_InitTick+0xe0>)
 8001104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001106:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <HAL_InitTick+0xe0>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_InitTick+0xe0>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001114:	4817      	ldr	r0, [pc, #92]	; (8001174 <HAL_InitTick+0xe0>)
 8001116:	f007 ff7f 	bl	8009018 <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001120:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001124:	2b00      	cmp	r3, #0
 8001126:	d118      	bne.n	800115a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001128:	4812      	ldr	r0, [pc, #72]	; (8001174 <HAL_InitTick+0xe0>)
 800112a:	f007 ffd7 	bl	80090dc <HAL_TIM_Base_Start_IT>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001134:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10e      	bne.n	800115a <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	d808      	bhi.n	8001154 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001142:	2200      	movs	r2, #0
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	2031      	movs	r0, #49	; 0x31
 8001148:	f000 fe5e 	bl	8001e08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800114c:	4a0b      	ldr	r2, [pc, #44]	; (800117c <HAL_InitTick+0xe8>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e002      	b.n	800115a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800115a:	2031      	movs	r0, #49	; 0x31
 800115c:	f000 fe6e 	bl	8001e3c <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8001160:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001164:	4618      	mov	r0, r3
 8001166:	3738      	adds	r7, #56	; 0x38
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	44020c00 	.word	0x44020c00
 8001170:	0a7c5ac5 	.word	0x0a7c5ac5
 8001174:	2000072c 	.word	0x2000072c
 8001178:	40001000 	.word	0x40001000
 800117c:	20000030 	.word	0x20000030

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler+0x4>

08001186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <MemManage_Handler+0x4>

08001192 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <BusFault_Handler+0x4>

08001198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <UsageFault_Handler+0x4>

0800119e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <TIM6_IRQHandler+0x10>)
 80011b2:	f008 f841 	bl	8009238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000072c 	.word	0x2000072c

080011c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <USART1_IRQHandler+0x10>)
 80011c6:	f008 fc5d 	bl	8009a84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200007c4 	.word	0x200007c4

080011d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <USART3_IRQHandler+0x10>)
 80011da:	f008 fc53 	bl	8009a84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000858 	.word	0x20000858

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f00d fff2 	bl	800f200 <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200a0000 	.word	0x200a0000
 8001248:	00000400 	.word	0x00000400
 800124c:	20000778 	.word	0x20000778
 8001250:	20001bc0 	.word	0x20001bc0

08001254 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800125a:	4b35      	ldr	r3, [pc, #212]	; (8001330 <SystemInit+0xdc>)
 800125c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001260:	4a33      	ldr	r2, [pc, #204]	; (8001330 <SystemInit+0xdc>)
 8001262:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001266:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800126a:	4b32      	ldr	r3, [pc, #200]	; (8001334 <SystemInit+0xe0>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001270:	4b30      	ldr	r3, [pc, #192]	; (8001334 <SystemInit+0xe0>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001276:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <SystemInit+0xe0>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <SystemInit+0xe0>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	492c      	ldr	r1, [pc, #176]	; (8001334 <SystemInit+0xe0>)
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <SystemInit+0xe4>)
 8001284:	4013      	ands	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001288:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <SystemInit+0xe0>)
 800128a:	2200      	movs	r2, #0
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <SystemInit+0xe0>)
 8001290:	2200      	movs	r2, #0
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001294:	4b27      	ldr	r3, [pc, #156]	; (8001334 <SystemInit+0xe0>)
 8001296:	2200      	movs	r2, #0
 8001298:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <SystemInit+0xe0>)
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <SystemInit+0xe8>)
 800129e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80012a0:	4b24      	ldr	r3, [pc, #144]	; (8001334 <SystemInit+0xe0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <SystemInit+0xe0>)
 80012a8:	4a24      	ldr	r2, [pc, #144]	; (800133c <SystemInit+0xe8>)
 80012aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80012ac:	4b21      	ldr	r3, [pc, #132]	; (8001334 <SystemInit+0xe0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <SystemInit+0xe0>)
 80012b4:	4a21      	ldr	r2, [pc, #132]	; (800133c <SystemInit+0xe8>)
 80012b6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <SystemInit+0xe0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <SystemInit+0xe0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <SystemInit+0xe0>)
 80012c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <SystemInit+0xe0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <SystemInit+0xdc>)
 80012d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012d6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <SystemInit+0xec>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80012e0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80012e8:	d003      	beq.n	80012f2 <SystemInit+0x9e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80012f0:	d117      	bne.n	8001322 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <SystemInit+0xec>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <SystemInit+0xec>)
 8001300:	4a10      	ldr	r2, [pc, #64]	; (8001344 <SystemInit+0xf0>)
 8001302:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <SystemInit+0xec>)
 8001306:	4a10      	ldr	r2, [pc, #64]	; (8001348 <SystemInit+0xf4>)
 8001308:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <SystemInit+0xec>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <SystemInit+0xec>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <SystemInit+0xec>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a09      	ldr	r2, [pc, #36]	; (8001340 <SystemInit+0xec>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	61d3      	str	r3, [r2, #28]
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00
 8001334:	44020c00 	.word	0x44020c00
 8001338:	eae2eae3 	.word	0xeae2eae3
 800133c:	01010280 	.word	0x01010280
 8001340:	40022000 	.word	0x40022000
 8001344:	08192a3b 	.word	0x08192a3b
 8001348:	4c5d6e7f 	.word	0x4c5d6e7f

0800134c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800134e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001350:	f7ff ff80 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <LoopForever+0x6>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	; (800138c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <LoopForever+0xe>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	; (8001398 <LoopForever+0x16>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800137a:	f00d ff47 	bl	800f20c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137e:	f7ff f995 	bl	80006ac <main>

08001382 <LoopForever>:

LoopForever:
    b LoopForever
 8001382:	e7fe      	b.n	8001382 <LoopForever>
  ldr   r0, =_estack
 8001384:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001390:	0800fbb0 	.word	0x0800fbb0
  ldr r2, =_sbss
 8001394:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001398:	20001bc0 	.word	0x20001bc0

0800139c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_IRQHandler>
	...

080013a0 <LED_Init>:
static BOOL s_bLEDInit = FALSE;
static BOOL s_bLEDEnable = FALSE;

// Function Declarations
void LED_Init(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  s_bLEDInit = TRUE;
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <LED_Init+0x1c>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
  s_bLEDEnable = TRUE;
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <LED_Init+0x20>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	2000077c 	.word	0x2000077c
 80013c0:	20000780 	.word	0x20000780

080013c4 <LED_OnOff>:
{
  s_bLEDEnable = bEnable;
}

void LED_OnOff(LED_e eLED, BOOL bOn)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if(FALSE == s_bLEDEnable)
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <LED_OnOff+0x7c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d02d      	beq.n	8001434 <LED_OnOff+0x70>
    return;
  }

  GPIO_TypeDef* LED_GPIO_Port;
  uint16_t LED_GPIO_Pin;
  if(s_bLEDInit)
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <LED_OnOff+0x80>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d02c      	beq.n	800143a <LED_OnOff+0x76>
  {
    switch(eLED){
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d010      	beq.n	8001408 <LED_OnOff+0x44>
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	dc26      	bgt.n	8001438 <LED_OnOff+0x74>
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d002      	beq.n	80013f4 <LED_OnOff+0x30>
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d005      	beq.n	80013fe <LED_OnOff+0x3a>
      case LED_RED:
        LED_GPIO_Port = LED3_RED_GPIO_Port;
        LED_GPIO_Pin = LED3_RED_Pin;
        break;
      default:
        return;
 80013f2:	e021      	b.n	8001438 <LED_OnOff+0x74>
        LED_GPIO_Port = LED1_GREEN_GPIO_Port;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <LED_OnOff+0x84>)
 80013f6:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED1_GREEN_Pin;
 80013f8:	2301      	movs	r3, #1
 80013fa:	817b      	strh	r3, [r7, #10]
        break;
 80013fc:	e009      	b.n	8001412 <LED_OnOff+0x4e>
        LED_GPIO_Port = LED2_YELLOW_GPIO_Port;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <LED_OnOff+0x88>)
 8001400:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED2_YELLOW_Pin;
 8001402:	2310      	movs	r3, #16
 8001404:	817b      	strh	r3, [r7, #10]
        break;
 8001406:	e004      	b.n	8001412 <LED_OnOff+0x4e>
        LED_GPIO_Port = LED3_RED_GPIO_Port;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <LED_OnOff+0x8c>)
 800140a:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED3_RED_Pin;
 800140c:	2310      	movs	r3, #16
 800140e:	817b      	strh	r3, [r7, #10]
        break;
 8001410:	bf00      	nop
        break;
    }
    if(bOn)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <LED_OnOff+0x62>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
 8001418:	897b      	ldrh	r3, [r7, #10]
 800141a:	2201      	movs	r2, #1
 800141c:	4619      	mov	r1, r3
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f001 fb46 	bl	8002ab0 <HAL_GPIO_WritePin>
 8001424:	e009      	b.n	800143a <LED_OnOff+0x76>
    }
    else
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 8001426:	897b      	ldrh	r3, [r7, #10]
 8001428:	2200      	movs	r2, #0
 800142a:	4619      	mov	r1, r3
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f001 fb3f 	bl	8002ab0 <HAL_GPIO_WritePin>
 8001432:	e002      	b.n	800143a <LED_OnOff+0x76>
    return;
 8001434:	bf00      	nop
 8001436:	e000      	b.n	800143a <LED_OnOff+0x76>
        return;
 8001438:	bf00      	nop
    }
  }
}
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000780 	.word	0x20000780
 8001444:	2000077c 	.word	0x2000077c
 8001448:	42020400 	.word	0x42020400
 800144c:	42021400 	.word	0x42021400
 8001450:	42021800 	.word	0x42021800

08001454 <LED_SimpleAnimation>:
  LED_OnOff(LED_YELLOW, bOn);
  LED_OnOff(LED_RED, bOn);
}

void LED_SimpleAnimation(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  for(int i =0; i<3; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	e02c      	b.n	80014ba <LED_SimpleAnimation+0x66>
  {
    LED_OnOff(LED_GREEN, TRUE);
 8001460:	2101      	movs	r1, #1
 8001462:	2001      	movs	r0, #1
 8001464:	f7ff ffae 	bl	80013c4 <LED_OnOff>
    HAL_Delay(50);
 8001468:	2032      	movs	r0, #50	; 0x32
 800146a:	f000 fbdb 	bl	8001c24 <HAL_Delay>
    LED_OnOff(LED_YELLOW, TRUE);
 800146e:	2101      	movs	r1, #1
 8001470:	2002      	movs	r0, #2
 8001472:	f7ff ffa7 	bl	80013c4 <LED_OnOff>
    HAL_Delay(50);
 8001476:	2032      	movs	r0, #50	; 0x32
 8001478:	f000 fbd4 	bl	8001c24 <HAL_Delay>
    LED_OnOff(LED_RED, TRUE);
 800147c:	2101      	movs	r1, #1
 800147e:	2003      	movs	r0, #3
 8001480:	f7ff ffa0 	bl	80013c4 <LED_OnOff>
    HAL_Delay(50);
 8001484:	2032      	movs	r0, #50	; 0x32
 8001486:	f000 fbcd 	bl	8001c24 <HAL_Delay>
    LED_OnOff(LED_GREEN, FALSE);
 800148a:	2100      	movs	r1, #0
 800148c:	2001      	movs	r0, #1
 800148e:	f7ff ff99 	bl	80013c4 <LED_OnOff>
    HAL_Delay(50);
 8001492:	2032      	movs	r0, #50	; 0x32
 8001494:	f000 fbc6 	bl	8001c24 <HAL_Delay>
    LED_OnOff(LED_YELLOW, FALSE);
 8001498:	2100      	movs	r1, #0
 800149a:	2002      	movs	r0, #2
 800149c:	f7ff ff92 	bl	80013c4 <LED_OnOff>
    HAL_Delay(50);
 80014a0:	2032      	movs	r0, #50	; 0x32
 80014a2:	f000 fbbf 	bl	8001c24 <HAL_Delay>
    LED_OnOff(LED_RED, FALSE);
 80014a6:	2100      	movs	r1, #0
 80014a8:	2003      	movs	r0, #3
 80014aa:	f7ff ff8b 	bl	80013c4 <LED_OnOff>
    HAL_Delay(50);
 80014ae:	2032      	movs	r0, #50	; 0x32
 80014b0:	f000 fbb8 	bl	8001c24 <HAL_Delay>
  for(int i =0; i<3; i++)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3301      	adds	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	ddcf      	ble.n	8001460 <LED_SimpleAnimation+0xc>
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <CLI_LEDTest>:

#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (LED_TEST,"LED","LED [1~11] [0,1,2] ",CLI_LEDTest);

static void CLI_LEDTest(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b084      	sub	sp, #16
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	603b      	str	r3, [r7, #0]
  if (nCount == 2) {
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d10b      	bne.n	80014f6 <CLI_LEDTest+0x2c>
    LED_OnOff((LED_e)nFirst, (BOOL)(nSecond != 0));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf14      	ite	ne
 80014e8:	2301      	movne	r3, #1
 80014ea:	2300      	moveq	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4619      	mov	r1, r3
 80014f0:	4610      	mov	r0, r2
 80014f2:	f7ff ff67 	bl	80013c4 <LED_OnOff>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <RTC_Init>:
#include "RTC.h"

static RTC_HandleTypeDef hrtc;

BOOL RTC_Init()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 8001506:	2301      	movs	r3, #1
 8001508:	61fb      	str	r3, [r7, #28]
  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800150a:	463b      	mov	r3, r7
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	615a      	str	r2, [r3, #20]
 800151a:	619a      	str	r2, [r3, #24]

  hrtc.Instance = RTC;
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <RTC_Init+0x94>)
 800151e:	4a1e      	ldr	r2, [pc, #120]	; (8001598 <RTC_Init+0x98>)
 8001520:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <RTC_Init+0x94>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <RTC_Init+0x94>)
 800152a:	227f      	movs	r2, #127	; 0x7f
 800152c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <RTC_Init+0x94>)
 8001530:	22ff      	movs	r2, #255	; 0xff
 8001532:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <RTC_Init+0x94>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <RTC_Init+0x94>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <RTC_Init+0x94>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <RTC_Init+0x94>)
 8001548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800154c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <RTC_Init+0x94>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001554:	480f      	ldr	r0, [pc, #60]	; (8001594 <RTC_Init+0x94>)
 8001556:	f007 fbd5 	bl	8008d04 <HAL_RTC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <RTC_Init+0x64>
  {
    Error_Handler();
 8001560:	f7ff fae6 	bl	8000b30 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001564:	2300      	movs	r3, #0
 8001566:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4806      	ldr	r0, [pc, #24]	; (8001594 <RTC_Init+0x94>)
 800157a:	f007 fd1f 	bl	8008fbc <HAL_RTCEx_PrivilegeModeSet>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <RTC_Init+0x88>
  {
    Error_Handler();
 8001584:	f7ff fad4 	bl	8000b30 <Error_Handler>
  }

  return ret;
 8001588:	69fb      	ldr	r3, [r7, #28]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000784 	.word	0x20000784
 8001598:	44007800 	.word	0x44007800

0800159c <RTC_BackupRegRead>:

uint32_t RTC_BackupRegRead(uint32_t index)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4804      	ldr	r0, [pc, #16]	; (80015b8 <RTC_BackupRegRead+0x1c>)
 80015a8:	f007 fcf2 	bl	8008f90 <HAL_RTCEx_BKUPRead>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000784 	.word	0x20000784

080015bc <RTC_BackupRegWrite>:
void RTC_BackupRegWrite(uint32_t index, uint32_t data)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4803      	ldr	r0, [pc, #12]	; (80015d8 <RTC_BackupRegWrite+0x1c>)
 80015cc:	f007 fcc8 	bl	8008f60 <HAL_RTCEx_BKUPWrite>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000784 	.word	0x20000784

080015dc <Reset_Init>:
    }
  }
}

BOOL Reset_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	603b      	str	r3, [r7, #0]

  BOOL is_debug = FALSE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
  // 만약 디버거가 연결된 경우, Debug Flag True
  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <Reset_Init+0x80>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <Reset_Init+0x1e>
  {
    is_debug = TRUE;
 80015f6:	2301      	movs	r3, #1
 80015f8:	607b      	str	r3, [r7, #4]
  }
  RTC_BackupRegWrite(RESET_REG_COUNT+1, RESET_REG_MAGICNUMBER);
 80015fa:	4919      	ldr	r1, [pc, #100]	; (8001660 <Reset_Init+0x84>)
 80015fc:	2002      	movs	r0, #2
 80015fe:	f7ff ffdd 	bl	80015bc <RTC_BackupRegWrite>

  // Reset 핀이 눌리고 , Debug 모드가 아니라면
  // 0.5초 안에 누른 Reset만 증가
  if((RCC->RSR & (1<<26) && is_debug != TRUE) && RTC_BackupRegRead(RESET_REG_COUNT+1) == RESET_REG_MAGICNUMBER)
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <Reset_Init+0x88>)
 8001604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01c      	beq.n	800164a <Reset_Init+0x6e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d019      	beq.n	800164a <Reset_Init+0x6e>
 8001616:	2002      	movs	r0, #2
 8001618:	f7ff ffc0 	bl	800159c <RTC_BackupRegRead>
 800161c:	4603      	mov	r3, r0
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <Reset_Init+0x84>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d112      	bne.n	800164a <Reset_Init+0x6e>
  {
    RTC_BackupRegWrite(RESET_REG_COUNT, RTC_BackupRegRead(RESET_REG_COUNT) + 1);
 8001624:	2001      	movs	r0, #1
 8001626:	f7ff ffb9 	bl	800159c <RTC_BackupRegRead>
 800162a:	4603      	mov	r3, r0
 800162c:	3301      	adds	r3, #1
 800162e:	4619      	mov	r1, r3
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff ffc3 	bl	80015bc <RTC_BackupRegWrite>
    HAL_Delay(500);
 8001636:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800163a:	f000 faf3 	bl	8001c24 <HAL_Delay>
    s_ResetCount = RTC_BackupRegRead(RESET_REG_COUNT);   //For getting reset count
 800163e:	2001      	movs	r0, #1
 8001640:	f7ff ffac 	bl	800159c <RTC_BackupRegRead>
 8001644:	4603      	mov	r3, r0
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <Reset_Init+0x8c>)
 8001648:	6013      	str	r3, [r2, #0]
  }


  //clear 다시 0으로
  RTC_BackupRegWrite(RESET_REG_COUNT,0);
 800164a:	2100      	movs	r1, #0
 800164c:	2001      	movs	r0, #1
 800164e:	f7ff ffb5 	bl	80015bc <RTC_BackupRegWrite>

  return ret;
 8001652:	683b      	ldr	r3, [r7, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	e000edf0 	.word	0xe000edf0
 8001660:	20240215 	.word	0x20240215
 8001664:	44020c00 	.word	0x44020c00
 8001668:	200007b4 	.word	0x200007b4

0800166c <UART_Init>:

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

void  UART_Init(uint8_t ch, uint32_t baud)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  switch(ch)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <UART_Init+0x1a>
 800167e:	2b01      	cmp	r3, #1
 8001680:	f000 8085 	beq.w	800178e <UART_Init+0x122>
      {
        s_bUARTConnected[ch] = TRUE;
        g_bDebugTx = TRUE;
      }
    default:
      break;
 8001684:	e106      	b.n	8001894 <UART_Init+0x228>
      huart1.Instance = USART1;
 8001686:	4b86      	ldr	r3, [pc, #536]	; (80018a0 <UART_Init+0x234>)
 8001688:	4a86      	ldr	r2, [pc, #536]	; (80018a4 <UART_Init+0x238>)
 800168a:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 800168c:	4a84      	ldr	r2, [pc, #528]	; (80018a0 <UART_Init+0x234>)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b83      	ldr	r3, [pc, #524]	; (80018a0 <UART_Init+0x234>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b81      	ldr	r3, [pc, #516]	; (80018a0 <UART_Init+0x234>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 800169e:	4b80      	ldr	r3, [pc, #512]	; (80018a0 <UART_Init+0x234>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b7e      	ldr	r3, [pc, #504]	; (80018a0 <UART_Init+0x234>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b7d      	ldr	r3, [pc, #500]	; (80018a0 <UART_Init+0x234>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b7b      	ldr	r3, [pc, #492]	; (80018a0 <UART_Init+0x234>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b6:	4b7a      	ldr	r3, [pc, #488]	; (80018a0 <UART_Init+0x234>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016bc:	4b78      	ldr	r3, [pc, #480]	; (80018a0 <UART_Init+0x234>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c2:	4b77      	ldr	r3, [pc, #476]	; (80018a0 <UART_Init+0x234>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c8:	4875      	ldr	r0, [pc, #468]	; (80018a0 <UART_Init+0x234>)
 80016ca:	f008 f88b 	bl	80097e4 <HAL_UART_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00a      	beq.n	80016ea <UART_Init+0x7e>
        Error_Handler();
 80016d4:	f7ff fa2c 	bl	8000b30 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	4a73      	ldr	r2, [pc, #460]	; (80018a8 <UART_Init+0x23c>)
 80016dc:	2100      	movs	r1, #0
 80016de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 80016e2:	4b72      	ldr	r3, [pc, #456]	; (80018ac <UART_Init+0x240>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e037      	b.n	800175a <UART_Init+0xee>
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ea:	2100      	movs	r1, #0
 80016ec:	486c      	ldr	r0, [pc, #432]	; (80018a0 <UART_Init+0x234>)
 80016ee:	f009 ffb8 	bl	800b662 <HAL_UARTEx_SetTxFifoThreshold>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00a      	beq.n	800170e <UART_Init+0xa2>
        Error_Handler();
 80016f8:	f7ff fa1a 	bl	8000b30 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	4a6a      	ldr	r2, [pc, #424]	; (80018a8 <UART_Init+0x23c>)
 8001700:	2100      	movs	r1, #0
 8001702:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 8001706:	4b69      	ldr	r3, [pc, #420]	; (80018ac <UART_Init+0x240>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e025      	b.n	800175a <UART_Init+0xee>
      else if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170e:	2100      	movs	r1, #0
 8001710:	4863      	ldr	r0, [pc, #396]	; (80018a0 <UART_Init+0x234>)
 8001712:	f009 ffe4 	bl	800b6de <HAL_UARTEx_SetRxFifoThreshold>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00a      	beq.n	8001732 <UART_Init+0xc6>
        Error_Handler();
 800171c:	f7ff fa08 	bl	8000b30 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	4a61      	ldr	r2, [pc, #388]	; (80018a8 <UART_Init+0x23c>)
 8001724:	2100      	movs	r1, #0
 8001726:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 800172a:	4b60      	ldr	r3, [pc, #384]	; (80018ac <UART_Init+0x240>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	e013      	b.n	800175a <UART_Init+0xee>
      else if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001732:	485b      	ldr	r0, [pc, #364]	; (80018a0 <UART_Init+0x234>)
 8001734:	f009 ff5c 	bl	800b5f0 <HAL_UARTEx_DisableFifoMode>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00a      	beq.n	8001754 <UART_Init+0xe8>
        Error_Handler();
 800173e:	f7ff f9f7 	bl	8000b30 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	4a58      	ldr	r2, [pc, #352]	; (80018a8 <UART_Init+0x23c>)
 8001746:	2100      	movs	r1, #0
 8001748:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 800174c:	4b57      	ldr	r3, [pc, #348]	; (80018ac <UART_Init+0x240>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e002      	b.n	800175a <UART_Init+0xee>
        svRingBuffer_Reset(&g_uartRxBuff);
 8001754:	4856      	ldr	r0, [pc, #344]	; (80018b0 <UART_Init+0x244>)
 8001756:	f00b f866 	bl	800c826 <svRingBuffer_Reset>
      if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data,1) != HAL_OK)
 800175a:	2201      	movs	r2, #1
 800175c:	4955      	ldr	r1, [pc, #340]	; (80018b4 <UART_Init+0x248>)
 800175e:	4850      	ldr	r0, [pc, #320]	; (80018a0 <UART_Init+0x234>)
 8001760:	f008 f92e 	bl	80099c0 <HAL_UART_Receive_IT>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <UART_Init+0x110>
        s_bUARTConnected[ch] = FALSE;
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	4a4e      	ldr	r2, [pc, #312]	; (80018a8 <UART_Init+0x23c>)
 800176e:	2100      	movs	r1, #0
 8001770:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 8001774:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <UART_Init+0x240>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
      break;
 800177a:	e08c      	b.n	8001896 <UART_Init+0x22a>
        s_bUARTConnected[ch] = TRUE;
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4a4a      	ldr	r2, [pc, #296]	; (80018a8 <UART_Init+0x23c>)
 8001780:	2101      	movs	r1, #1
 8001782:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = TRUE;
 8001786:	4b49      	ldr	r3, [pc, #292]	; (80018ac <UART_Init+0x240>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]
      break;
 800178c:	e083      	b.n	8001896 <UART_Init+0x22a>
      huart3.Instance = USART3;
 800178e:	4b4a      	ldr	r3, [pc, #296]	; (80018b8 <UART_Init+0x24c>)
 8001790:	4a4a      	ldr	r2, [pc, #296]	; (80018bc <UART_Init+0x250>)
 8001792:	601a      	str	r2, [r3, #0]
      huart3.Init.BaudRate = baud;
 8001794:	4a48      	ldr	r2, [pc, #288]	; (80018b8 <UART_Init+0x24c>)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6053      	str	r3, [r2, #4]
      huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800179a:	4b47      	ldr	r3, [pc, #284]	; (80018b8 <UART_Init+0x24c>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
      huart3.Init.StopBits = UART_STOPBITS_1;
 80017a0:	4b45      	ldr	r3, [pc, #276]	; (80018b8 <UART_Init+0x24c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
      huart3.Init.Parity = UART_PARITY_NONE;
 80017a6:	4b44      	ldr	r3, [pc, #272]	; (80018b8 <UART_Init+0x24c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
      huart3.Init.Mode = UART_MODE_TX_RX;
 80017ac:	4b42      	ldr	r3, [pc, #264]	; (80018b8 <UART_Init+0x24c>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	615a      	str	r2, [r3, #20]
      huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b2:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <UART_Init+0x24c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
      huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <UART_Init+0x24c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
      huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017be:	4b3e      	ldr	r3, [pc, #248]	; (80018b8 <UART_Init+0x24c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
      huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017c4:	4b3c      	ldr	r3, [pc, #240]	; (80018b8 <UART_Init+0x24c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
      huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ca:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <UART_Init+0x24c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart3) != HAL_OK)
 80017d0:	4839      	ldr	r0, [pc, #228]	; (80018b8 <UART_Init+0x24c>)
 80017d2:	f008 f807 	bl	80097e4 <HAL_UART_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00a      	beq.n	80017f2 <UART_Init+0x186>
        Error_Handler();
 80017dc:	f7ff f9a8 	bl	8000b30 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4a31      	ldr	r2, [pc, #196]	; (80018a8 <UART_Init+0x23c>)
 80017e4:	2100      	movs	r1, #0
 80017e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 80017ea:	4b30      	ldr	r3, [pc, #192]	; (80018ac <UART_Init+0x240>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e037      	b.n	8001862 <UART_Init+0x1f6>
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f2:	2100      	movs	r1, #0
 80017f4:	4830      	ldr	r0, [pc, #192]	; (80018b8 <UART_Init+0x24c>)
 80017f6:	f009 ff34 	bl	800b662 <HAL_UARTEx_SetTxFifoThreshold>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00a      	beq.n	8001816 <UART_Init+0x1aa>
        Error_Handler();
 8001800:	f7ff f996 	bl	8000b30 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4a28      	ldr	r2, [pc, #160]	; (80018a8 <UART_Init+0x23c>)
 8001808:	2100      	movs	r1, #0
 800180a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <UART_Init+0x240>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e025      	b.n	8001862 <UART_Init+0x1f6>
      else if(HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001816:	2100      	movs	r1, #0
 8001818:	4827      	ldr	r0, [pc, #156]	; (80018b8 <UART_Init+0x24c>)
 800181a:	f009 ff60 	bl	800b6de <HAL_UARTEx_SetRxFifoThreshold>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00a      	beq.n	800183a <UART_Init+0x1ce>
        Error_Handler();
 8001824:	f7ff f984 	bl	8000b30 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	4a1f      	ldr	r2, [pc, #124]	; (80018a8 <UART_Init+0x23c>)
 800182c:	2100      	movs	r1, #0
 800182e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 8001832:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <UART_Init+0x240>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e013      	b.n	8001862 <UART_Init+0x1f6>
      else if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800183a:	481f      	ldr	r0, [pc, #124]	; (80018b8 <UART_Init+0x24c>)
 800183c:	f009 fed8 	bl	800b5f0 <HAL_UARTEx_DisableFifoMode>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00a      	beq.n	800185c <UART_Init+0x1f0>
        Error_Handler();
 8001846:	f7ff f973 	bl	8000b30 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	4a16      	ldr	r2, [pc, #88]	; (80018a8 <UART_Init+0x23c>)
 800184e:	2100      	movs	r1, #0
 8001850:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <UART_Init+0x240>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	e002      	b.n	8001862 <UART_Init+0x1f6>
        svRingBuffer_Reset(&g_uartRxBuff);
 800185c:	4814      	ldr	r0, [pc, #80]	; (80018b0 <UART_Init+0x244>)
 800185e:	f00a ffe2 	bl	800c826 <svRingBuffer_Reset>
      if(HAL_UART_Receive_IT(&huart3, (uint8_t*)&rx_data,1) != HAL_OK)
 8001862:	2201      	movs	r2, #1
 8001864:	4913      	ldr	r1, [pc, #76]	; (80018b4 <UART_Init+0x248>)
 8001866:	4814      	ldr	r0, [pc, #80]	; (80018b8 <UART_Init+0x24c>)
 8001868:	f008 f8aa 	bl	80099c0 <HAL_UART_Receive_IT>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <UART_Init+0x218>
        s_bUARTConnected[ch] = FALSE;
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <UART_Init+0x23c>)
 8001876:	2100      	movs	r1, #0
 8001878:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <UART_Init+0x240>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
      break;
 8001882:	e007      	b.n	8001894 <UART_Init+0x228>
        s_bUARTConnected[ch] = TRUE;
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <UART_Init+0x23c>)
 8001888:	2101      	movs	r1, #1
 800188a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = TRUE;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <UART_Init+0x240>)
 8001890:	2201      	movs	r2, #1
 8001892:	601a      	str	r2, [r3, #0]
      break;
 8001894:	bf00      	nop
  }
  return;
 8001896:	bf00      	nop
}
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200007c4 	.word	0x200007c4
 80018a4:	40013800 	.word	0x40013800
 80018a8:	200007bc 	.word	0x200007bc
 80018ac:	2000096c 	.word	0x2000096c
 80018b0:	20000010 	.word	0x20000010
 80018b4:	200007b8 	.word	0x200007b8
 80018b8:	20000858 	.word	0x20000858
 80018bc:	40004800 	.word	0x40004800

080018c0 <IsUartConnected>:

BOOL  IsUartConnected(uint8_t ch)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  return s_bUARTConnected[ch];
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <IsUartConnected+0x20>)
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200007bc 	.word	0x200007bc

080018e4 <UART_Write>:

uint32_t  UART_Write(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
 80018f0:	4613      	mov	r3, r2
 80018f2:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status;

  switch(ch)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <UART_Write+0x20>
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d011      	beq.n	8001926 <UART_Write+0x42>
        ret = Len;
        g_bDebugTx = TRUE;
      }
      break;
    default:
      break;
 8001902:	e024      	b.n	800194e <UART_Write+0x6a>
      status = HAL_UART_Transmit(&huart1, Buf, Len, 100);
 8001904:	88ba      	ldrh	r2, [r7, #4]
 8001906:	2364      	movs	r3, #100	; 0x64
 8001908:	6839      	ldr	r1, [r7, #0]
 800190a:	4813      	ldr	r0, [pc, #76]	; (8001958 <UART_Write+0x74>)
 800190c:	f007 ffba 	bl	8009884 <HAL_UART_Transmit>
 8001910:	4603      	mov	r3, r0
 8001912:	72fb      	strb	r3, [r7, #11]
      if(status == HAL_OK)
 8001914:	7afb      	ldrb	r3, [r7, #11]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <UART_Write+0x64>
        ret = Len;
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <UART_Write+0x78>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
      break;
 8001924:	e010      	b.n	8001948 <UART_Write+0x64>
      status = HAL_UART_Transmit(&huart3, Buf, Len, 100);
 8001926:	88ba      	ldrh	r2, [r7, #4]
 8001928:	2364      	movs	r3, #100	; 0x64
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <UART_Write+0x7c>)
 800192e:	f007 ffa9 	bl	8009884 <HAL_UART_Transmit>
 8001932:	4603      	mov	r3, r0
 8001934:	72fb      	strb	r3, [r7, #11]
      if(status == HAL_OK)
 8001936:	7afb      	ldrb	r3, [r7, #11]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d107      	bne.n	800194c <UART_Write+0x68>
        ret = Len;
 800193c:	88bb      	ldrh	r3, [r7, #4]
 800193e:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <UART_Write+0x78>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]
      break;
 8001946:	e001      	b.n	800194c <UART_Write+0x68>
      break;
 8001948:	bf00      	nop
 800194a:	e000      	b.n	800194e <UART_Write+0x6a>
      break;
 800194c:	bf00      	nop
  }
  return ret;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200007c4 	.word	0x200007c4
 800195c:	2000096c 	.word	0x2000096c
 8001960:	20000858 	.word	0x20000858

08001964 <HAL_UART_RxCpltCallback>:
  return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <HAL_UART_RxCpltCallback+0x74>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d113      	bne.n	800199e <HAL_UART_RxCpltCallback+0x3a>
  {
    // For UART Test
    // UART_Printf(_DEF_UART1, "RxData : 0x%X\n", rx_data);
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_UART_RxCpltCallback+0x78>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	4619      	mov	r1, r3
 800197c:	4818      	ldr	r0, [pc, #96]	; (80019e0 <HAL_UART_RxCpltCallback+0x7c>)
 800197e:	f00a ff6a 	bl	800c856 <svRingBuffer_Push>
 8001982:	60b8      	str	r0, [r7, #8]
    if(result == -2 )
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f113 0f02 	cmn.w	r3, #2
 800198a:	d102      	bne.n	8001992 <HAL_UART_RxCpltCallback+0x2e>
    {
      svRingBuffer_Reset(&g_uartRxBuff);
 800198c:	4814      	ldr	r0, [pc, #80]	; (80019e0 <HAL_UART_RxCpltCallback+0x7c>)
 800198e:	f00a ff4a 	bl	800c826 <svRingBuffer_Reset>
    }else
    {

    }
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data, 1);
 8001992:	2201      	movs	r2, #1
 8001994:	4911      	ldr	r1, [pc, #68]	; (80019dc <HAL_UART_RxCpltCallback+0x78>)
 8001996:	4813      	ldr	r0, [pc, #76]	; (80019e4 <HAL_UART_RxCpltCallback+0x80>)
 8001998:	f008 f812 	bl	80099c0 <HAL_UART_Receive_IT>
    {

    }
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
  }
}
 800199c:	e017      	b.n	80019ce <HAL_UART_RxCpltCallback+0x6a>
  else if(huart->Instance == USART3)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a11      	ldr	r2, [pc, #68]	; (80019e8 <HAL_UART_RxCpltCallback+0x84>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d112      	bne.n	80019ce <HAL_UART_RxCpltCallback+0x6a>
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_UART_RxCpltCallback+0x78>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	480c      	ldr	r0, [pc, #48]	; (80019e0 <HAL_UART_RxCpltCallback+0x7c>)
 80019b0:	f00a ff51 	bl	800c856 <svRingBuffer_Push>
 80019b4:	60f8      	str	r0, [r7, #12]
    if(result == -2 )
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f113 0f02 	cmn.w	r3, #2
 80019bc:	d102      	bne.n	80019c4 <HAL_UART_RxCpltCallback+0x60>
      svRingBuffer_Reset(&g_uartRxBuff);
 80019be:	4808      	ldr	r0, [pc, #32]	; (80019e0 <HAL_UART_RxCpltCallback+0x7c>)
 80019c0:	f00a ff31 	bl	800c826 <svRingBuffer_Reset>
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
 80019c4:	2201      	movs	r2, #1
 80019c6:	4905      	ldr	r1, [pc, #20]	; (80019dc <HAL_UART_RxCpltCallback+0x78>)
 80019c8:	4808      	ldr	r0, [pc, #32]	; (80019ec <HAL_UART_RxCpltCallback+0x88>)
 80019ca:	f007 fff9 	bl	80099c0 <HAL_UART_Receive_IT>
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40013800 	.word	0x40013800
 80019dc:	200007b8 	.word	0x200007b8
 80019e0:	20000010 	.word	0x20000010
 80019e4:	200007c4 	.word	0x200007c4
 80019e8:	40004800 	.word	0x40004800
 80019ec:	20000858 	.word	0x20000858

080019f0 <svDebugRxChar>:
  return ch;
}
#endif

char svDebugRxChar(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	if (svRingBuffer_GetCount(&g_rbDebugRx) > 0) {
 80019f4:	4806      	ldr	r0, [pc, #24]	; (8001a10 <svDebugRxChar+0x20>)
 80019f6:	f00a fef4 	bl	800c7e2 <svRingBuffer_GetCount>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <svDebugRxChar+0x1a>
		return svRingBuffer_Pop(&g_rbDebugRx);
 8001a00:	4803      	ldr	r0, [pc, #12]	; (8001a10 <svDebugRxChar+0x20>)
 8001a02:	f00a ff5c 	bl	800c8be <svRingBuffer_Pop>
 8001a06:	4603      	mov	r3, r0
 8001a08:	e000      	b.n	8001a0c <svDebugRxChar+0x1c>
	}
	else {
		return 0;
 8001a0a:	2300      	movs	r3, #0
	}
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000010 	.word	0x20000010

08001a14 <svDebugProcess>:

void svDebugProcess(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
	if (IsUartConnected(_DEF_UART1)) {
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff ff50 	bl	80018c0 <IsUartConnected>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d01a      	beq.n	8001a5c <svDebugProcess+0x48>
	  svCLI_Handler();
 8001a26:	f00a fd89 	bl	800c53c <svCLI_Handler>
		if (g_bDebugTx == TRUE) {
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <svDebugProcess+0x50>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d114      	bne.n	8001a5c <svDebugProcess+0x48>
			size_t nLength = lwrb_get_linear_block_read_length(&g_lwrbDebugTx);
 8001a32:	480d      	ldr	r0, [pc, #52]	; (8001a68 <svDebugProcess+0x54>)
 8001a34:	f00d fa81 	bl	800ef3a <lwrb_get_linear_block_read_length>
 8001a38:	6078      	str	r0, [r7, #4]
			if (nLength > 0) {
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00d      	beq.n	8001a5c <svDebugProcess+0x48>
			  /*
				if (nLength > UART_TX_DATA_SIZE) {
					nLength = UART_TX_DATA_SIZE;
				}
				*/
				UART_Write(_DEF_UART1, lwrb_get_linear_block_read_address(&g_lwrbDebugTx), nLength);
 8001a40:	4809      	ldr	r0, [pc, #36]	; (8001a68 <svDebugProcess+0x54>)
 8001a42:	f00d fa5e 	bl	800ef02 <lwrb_get_linear_block_read_address>
 8001a46:	4601      	mov	r1, r0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff ff48 	bl	80018e4 <UART_Write>
				lwrb_skip(&g_lwrbDebugTx, nLength);
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4804      	ldr	r0, [pc, #16]	; (8001a68 <svDebugProcess+0x54>)
 8001a58:	f00d faa2 	bl	800efa0 <lwrb_skip>
				g_bDebugTx = TRUE;
		  }
		}
		*/
	}
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000096c 	.word	0x2000096c
 8001a68:	20000970 	.word	0x20000970

08001a6c <svDebugCallback>:

void svDebugCallback(LWRB_VOLATILE struct lwrb* buff, lwrb_evt_type_t evt, size_t bp)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	460b      	mov	r3, r1
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	72fb      	strb	r3, [r7, #11]
	if (evt == LWRB_EVT_FULL) {
 8001a7a:	7afb      	ldrb	r3, [r7, #11]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d11a      	bne.n	8001ab6 <svDebugCallback+0x4a>
		if (IsUartConnected(_DEF_UART1)) {
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff ff1d 	bl	80018c0 <IsUartConnected>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d014      	beq.n	8001ab6 <svDebugCallback+0x4a>
			uint32_t uTick = HAL_GetTick();
 8001a8c:	f000 f8be 	bl	8001c0c <HAL_GetTick>
 8001a90:	6178      	str	r0, [r7, #20]
			while (GetElapsedTime(uTick) < 100) {
 8001a92:	e003      	b.n	8001a9c <svDebugCallback+0x30>
				if (g_bDebugTx == TRUE) {
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <svDebugCallback+0x54>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d006      	beq.n	8001aaa <svDebugCallback+0x3e>
			while (GetElapsedTime(uTick) < 100) {
 8001a9c:	6978      	ldr	r0, [r7, #20]
 8001a9e:	f000 f863 	bl	8001b68 <GetElapsedTime>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b63      	cmp	r3, #99	; 0x63
 8001aa6:	d9f5      	bls.n	8001a94 <svDebugCallback+0x28>
 8001aa8:	e000      	b.n	8001aac <svDebugCallback+0x40>
					break;
 8001aaa:	bf00      	nop
				}
				// HAL_Delay(1);
			}
      g_bDebugTx = TRUE;
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <svDebugCallback+0x54>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
			svDebugProcess();
 8001ab2:	f7ff ffaf 	bl	8001a14 <svDebugProcess>
		}
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2000096c 	.word	0x2000096c

08001ac4 <svDebugInit>:
{
	return lwrb_get_free(&g_lwrbDebugTx);
}

void svDebugInit(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	svRingBuffer_Reset(&g_rbDebugRx);
 8001ac8:	4809      	ldr	r0, [pc, #36]	; (8001af0 <svDebugInit+0x2c>)
 8001aca:	f00a feac 	bl	800c826 <svRingBuffer_Reset>
	svCLI_Init(&svDebugRxChar, &svDebugPutChar, NULL);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4908      	ldr	r1, [pc, #32]	; (8001af4 <svDebugInit+0x30>)
 8001ad2:	4809      	ldr	r0, [pc, #36]	; (8001af8 <svDebugInit+0x34>)
 8001ad4:	f00a f8b4 	bl	800bc40 <svCLI_Init>

  lwrb_init(&g_lwrbDebugTx, &s_byDebugTxRingBuffer[0], DEBUG_TX_BUFFER_SIZE);
 8001ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001adc:	4907      	ldr	r1, [pc, #28]	; (8001afc <svDebugInit+0x38>)
 8001ade:	4808      	ldr	r0, [pc, #32]	; (8001b00 <svDebugInit+0x3c>)
 8001ae0:	f00d f8f0 	bl	800ecc4 <lwrb_init>
	lwrb_set_evt_fn(&g_lwrbDebugTx, svDebugCallback);
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <svDebugInit+0x40>)
 8001ae6:	4806      	ldr	r0, [pc, #24]	; (8001b00 <svDebugInit+0x3c>)
 8001ae8:	f00d f90d 	bl	800ed06 <lwrb_set_evt_fn>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000010 	.word	0x20000010
 8001af4:	08001b09 	.word	0x08001b09
 8001af8:	080019f1 	.word	0x080019f1
 8001afc:	20000984 	.word	0x20000984
 8001b00:	20000970 	.word	0x20000970
 8001b04:	08001a6d 	.word	0x08001a6d

08001b08 <svDebugPutChar>:
		uDebugMsgLevel = DEBUG_VERBOSE;
	g_DebugMsgLevel = uDebugMsgLevel;
}

void svDebugPutChar(char cPut)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
	lwrb_write(&g_lwrbDebugTx, (const void*)(&cPut), 1);
 8001b12:	1dfb      	adds	r3, r7, #7
 8001b14:	2201      	movs	r2, #1
 8001b16:	4619      	mov	r1, r3
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <svDebugPutChar+0x20>)
 8001b1a:	f00d f90d 	bl	800ed38 <lwrb_write>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000970 	.word	0x20000970

08001b2c <svDebugMessage>:
#endif
	lwrb_write(&g_lwrbDebugTx, (const void*)szMsg, lenMax);
}

void svDebugMessage(char* fmt,...)
{
 8001b2c:	b40f      	push	{r0, r1, r2, r3}
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
	static char s_msg4Debug[DEBUG_MESSAGE_SIZE];
	va_list ap;
	int len;

	va_start(ap, fmt);
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	603b      	str	r3, [r7, #0]
	len = vsprintf(s_msg4Debug, fmt, ap);
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	6939      	ldr	r1, [r7, #16]
 8001b3e:	4808      	ldr	r0, [pc, #32]	; (8001b60 <svDebugMessage+0x34>)
 8001b40:	f00d fb28 	bl	800f194 <vsiprintf>
 8001b44:	6078      	str	r0, [r7, #4]
	va_end(ap);

	lwrb_write(&g_lwrbDebugTx, (const void*)s_msg4Debug, len);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4905      	ldr	r1, [pc, #20]	; (8001b60 <svDebugMessage+0x34>)
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <svDebugMessage+0x38>)
 8001b4e:	f00d f8f3 	bl	800ed38 <lwrb_write>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b5c:	b004      	add	sp, #16
 8001b5e:	4770      	bx	lr
 8001b60:	20000b88 	.word	0x20000b88
 8001b64:	20000970 	.word	0x20000970

08001b68 <GetElapsedTime>:
#include <math.h>


// Functions
uint32_t GetElapsedTime(uint32_t tickRef)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	uint32_t tickCurrent = HAL_GetTick();
 8001b70:	f000 f84c 	bl	8001c0c <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]
	// Check Wrap around
	if (tickCurrent < tickRef) {
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d204      	bcs.n	8001b88 <GetElapsedTime+0x20>
		return (0xffffffff - tickRef + tickCurrent);
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	3b01      	subs	r3, #1
 8001b86:	e002      	b.n	8001b8e <GetElapsedTime+0x26>
	}
	else {
		return tickCurrent - tickRef;
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	1ad3      	subs	r3, r2, r3
	}
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 f928 	bl	8001df2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ba2:	f001 fe9b 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_Init+0x40>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	490a      	ldr	r1, [pc, #40]	; (8001bdc <HAL_Init+0x44>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <HAL_Init+0x48>)
 8001bba:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bbc:	200f      	movs	r0, #15
 8001bbe:	f7ff fa69 	bl	8001094 <HAL_InitTick>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e002      	b.n	8001bd2 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bcc:	f7fe ffb5 	bl	8000b3a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	44020c00 	.word	0x44020c00
 8001bdc:	0800fb2c 	.word	0x0800fb2c
 8001be0:	2000000c 	.word	0x2000000c

08001be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000034 	.word	0x20000034
 8001c08:	20000c08 	.word	0x20000c08

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000c08 	.word	0x20000c08

08001c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff ffee 	bl	8001c0c <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d005      	beq.n	8001c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_Delay+0x44>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff ffde 	bl	8001c0c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8f7      	bhi.n	8001c4c <HAL_Delay+0x28>
  {
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000034 	.word	0x20000034

08001c6c <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001c76:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001c7a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001c7e:	4905      	ldr	r1, [pc, #20]	; (8001c94 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	44000400 	.word	0x44000400

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4907      	ldr	r1, [pc, #28]	; (8001d34 <__NVIC_EnableIRQ+0x38>)
 8001d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	; (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	; (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ff4c 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e16:	f7ff ff63 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	6978      	ldr	r0, [r7, #20]
 8001e22:	f7ff ffb3 	bl	8001d8c <NVIC_EncodePriority>
 8001e26:	4602      	mov	r2, r0
 8001e28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff82 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff56 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001e60:	f7ff fed4 	bl	8001c0c <HAL_GetTick>
 8001e64:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e06b      	b.n	8001f48 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d008      	beq.n	8001e8e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e05c      	b.n	8001f48 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0204 	orr.w	r2, r2, #4
 8001e9c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2205      	movs	r2, #5
 8001ea2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001ea6:	e020      	b.n	8001eea <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001ea8:	f7ff feb0 	bl	8001c0c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d919      	bls.n	8001eea <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	f043 0210 	orr.w	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eda:	2201      	movs	r2, #1
 8001edc:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e02e      	b.n	8001f48 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0d7      	beq.n	8001ea8 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0202 	orr.w	r2, r2, #2
 8001f06:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8001f18:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f32:	2201      	movs	r2, #1
 8001f34:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e019      	b.n	8001f96 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d004      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2220      	movs	r2, #32
 8001f72:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e00e      	b.n	8001f96 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0d2      	b.n	800215c <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d106      	bne.n	8001fce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2223      	movs	r2, #35	; 0x23
 8001fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7fe fdc1 	bl	8000b50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 8001fce:	4b65      	ldr	r3, [pc, #404]	; (8002164 <HAL_ETH_Init+0x1c0>)
 8001fd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001fd4:	4a63      	ldr	r2, [pc, #396]	; (8002164 <HAL_ETH_Init+0x1c0>)
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001fde:	4b61      	ldr	r3, [pc, #388]	; (8002164 <HAL_ETH_Init+0x1c0>)
 8001fe0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7a1b      	ldrb	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d103      	bne.n	8001ffc <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7ff fe39 	bl	8001c6c <HAL_SBS_ETHInterfaceSelect>
 8001ffa:	e003      	b.n	8002004 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8001ffc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002000:	f7ff fe34 	bl	8001c6c <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8002004:	4b58      	ldr	r3, [pc, #352]	; (8002168 <HAL_ETH_Init+0x1c4>)
 8002006:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002020:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002022:	f7ff fdf3 	bl	8001c0c <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002028:	e011      	b.n	800204e <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800202a:	f7ff fdef 	bl	8001c0c <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002038:	d909      	bls.n	800204e <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2204      	movs	r2, #4
 800203e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	22e0      	movs	r2, #224	; 0xe0
 8002046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e086      	b.n	800215c <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1e4      	bne.n	800202a <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f885 	bl	8002170 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002066:	f001 fd65 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 800206a:	4603      	mov	r3, r0
 800206c:	4a3f      	ldr	r2, [pc, #252]	; (800216c <HAL_ETH_Init+0x1c8>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0c9a      	lsrs	r2, r3, #18
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3a01      	subs	r2, #1
 800207a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fa80 	bl	8002584 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002090:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800209c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020a0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	22e0      	movs	r2, #224	; 0xe0
 80020bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e04b      	b.n	800215c <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020d0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80020d4:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6952      	ldr	r2, [r2, #20]
 80020dc:	0051      	lsls	r1, r2, #1
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	430b      	orrs	r3, r1
 80020e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020e8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fae6 	bl	80026be <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fb2c 	bl	8002750 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	3305      	adds	r3, #5
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	021a      	lsls	r2, r3, #8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	3304      	adds	r3, #4
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	4619      	mov	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	3303      	adds	r3, #3
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	061a      	lsls	r2, r3, #24
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	3302      	adds	r3, #2
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	041b      	lsls	r3, r3, #16
 800212a:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	3301      	adds	r3, #1
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002136:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002144:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002146:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2210      	movs	r2, #16
 8002156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	44020c00 	.word	0x44020c00
 8002168:	44000400 	.word	0x44000400
 800216c:	431bde83 	.word	0x431bde83

08002170 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002180:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002188:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800218a:	f001 fcd3 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 800218e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4a25      	ldr	r2, [pc, #148]	; (8002228 <HAL_ETH_SetMDIOClockRange+0xb8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d908      	bls.n	80021aa <HAL_ETH_SetMDIOClockRange+0x3a>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4a24      	ldr	r2, [pc, #144]	; (800222c <HAL_ETH_SetMDIOClockRange+0xbc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d804      	bhi.n	80021aa <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	e034      	b.n	8002214 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4a1f      	ldr	r2, [pc, #124]	; (800222c <HAL_ETH_SetMDIOClockRange+0xbc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d908      	bls.n	80021c4 <HAL_ETH_SetMDIOClockRange+0x54>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <HAL_ETH_SetMDIOClockRange+0xc0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d204      	bcs.n	80021c4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	e027      	b.n	8002214 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_ETH_SetMDIOClockRange+0xc0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d303      	bcc.n	80021d4 <HAL_ETH_SetMDIOClockRange+0x64>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4a19      	ldr	r2, [pc, #100]	; (8002234 <HAL_ETH_SetMDIOClockRange+0xc4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d91e      	bls.n	8002212 <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4a17      	ldr	r2, [pc, #92]	; (8002234 <HAL_ETH_SetMDIOClockRange+0xc4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d908      	bls.n	80021ee <HAL_ETH_SetMDIOClockRange+0x7e>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_ETH_SetMDIOClockRange+0xc8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d804      	bhi.n	80021ee <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e012      	b.n	8002214 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <HAL_ETH_SetMDIOClockRange+0xc8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d908      	bls.n	8002208 <HAL_ETH_SetMDIOClockRange+0x98>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4a10      	ldr	r2, [pc, #64]	; (800223c <HAL_ETH_SetMDIOClockRange+0xcc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d804      	bhi.n	8002208 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	e005      	b.n	8002214 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	e000      	b.n	8002214 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002212:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	01312cff 	.word	0x01312cff
 800222c:	02160ebf 	.word	0x02160ebf
 8002230:	03938700 	.word	0x03938700
 8002234:	05f5e0ff 	.word	0x05f5e0ff
 8002238:	08f0d17f 	.word	0x08f0d17f
 800223c:	0ee6b280 	.word	0x0ee6b280

08002240 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002252:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	791b      	ldrb	r3, [r3, #4]
 8002258:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800225a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	7b1b      	ldrb	r3, [r3, #12]
 8002260:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002262:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	7b5b      	ldrb	r3, [r3, #13]
 8002268:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800226a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	7b9b      	ldrb	r3, [r3, #14]
 8002270:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002272:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	7bdb      	ldrb	r3, [r3, #15]
 8002278:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800227a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	7c12      	ldrb	r2, [r2, #16]
 8002280:	2a00      	cmp	r2, #0
 8002282:	d102      	bne.n	800228a <ETH_SetMACConfig+0x4a>
 8002284:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002288:	e000      	b.n	800228c <ETH_SetMACConfig+0x4c>
 800228a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800228c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	7c52      	ldrb	r2, [r2, #17]
 8002292:	2a00      	cmp	r2, #0
 8002294:	d102      	bne.n	800229c <ETH_SetMACConfig+0x5c>
 8002296:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800229a:	e000      	b.n	800229e <ETH_SetMACConfig+0x5e>
 800229c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800229e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	7c9b      	ldrb	r3, [r3, #18]
 80022a4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80022a6:	431a      	orrs	r2, r3
               macconf->Speed |
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80022ac:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80022b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	7f1b      	ldrb	r3, [r3, #28]
 80022b8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80022ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	7f5b      	ldrb	r3, [r3, #29]
 80022c0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80022c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	7f92      	ldrb	r2, [r2, #30]
 80022c8:	2a00      	cmp	r2, #0
 80022ca:	d102      	bne.n	80022d2 <ETH_SetMACConfig+0x92>
 80022cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022d0:	e000      	b.n	80022d4 <ETH_SetMACConfig+0x94>
 80022d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80022d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	7fdb      	ldrb	r3, [r3, #31]
 80022da:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80022dc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022e4:	2a00      	cmp	r2, #0
 80022e6:	d102      	bne.n	80022ee <ETH_SetMACConfig+0xae>
 80022e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ec:	e000      	b.n	80022f0 <ETH_SetMACConfig+0xb0>
 80022ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022f0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022fe:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002300:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b57      	ldr	r3, [pc, #348]	; (8002470 <ETH_SetMACConfig+0x230>)
 8002312:	4013      	ands	r3, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	68f9      	ldr	r1, [r7, #12]
 800231a:	430b      	orrs	r3, r1
 800231c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002322:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800232a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800232c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002334:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002336:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800233e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002340:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002348:	2a00      	cmp	r2, #0
 800234a:	d102      	bne.n	8002352 <ETH_SetMACConfig+0x112>
 800234c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002350:	e000      	b.n	8002354 <ETH_SetMACConfig+0x114>
 8002352:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002354:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4b43      	ldr	r3, [pc, #268]	; (8002474 <ETH_SetMACConfig+0x234>)
 8002366:	4013      	ands	r3, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	430b      	orrs	r3, r1
 8002370:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002378:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	68f9      	ldr	r1, [r7, #12]
 8002396:	430b      	orrs	r3, r1
 8002398:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80023a0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80023a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80023ae:	2a00      	cmp	r2, #0
 80023b0:	d101      	bne.n	80023b6 <ETH_SetMACConfig+0x176>
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	e000      	b.n	80023b8 <ETH_SetMACConfig+0x178>
 80023b6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80023b8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023be:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023ca:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80023ce:	4013      	ands	r3, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	68f9      	ldr	r1, [r7, #12]
 80023d6:	430b      	orrs	r3, r1
 80023d8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80023e0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80023e8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	f023 0103 	bic.w	r1, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	430a      	orrs	r2, r1
 8002402:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800240e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800242a:	2a00      	cmp	r2, #0
 800242c:	d101      	bne.n	8002432 <ETH_SetMACConfig+0x1f2>
 800242e:	2240      	movs	r2, #64	; 0x40
 8002430:	e000      	b.n	8002434 <ETH_SetMACConfig+0x1f4>
 8002432:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002434:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800243c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800243e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002446:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002448:	4313      	orrs	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002454:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	430a      	orrs	r2, r1
 8002460:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	00048083 	.word	0x00048083
 8002474:	c0f88000 	.word	0xc0f88000

08002478 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002490:	f023 0302 	bic.w	r3, r3, #2
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	6811      	ldr	r1, [r2, #0]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	430b      	orrs	r3, r1
 800249e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024a2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	791b      	ldrb	r3, [r3, #4]
 80024a8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80024ae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	7b1b      	ldrb	r3, [r3, #12]
 80024b4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	68f9      	ldr	r1, [r7, #12]
 80024d2:	430b      	orrs	r3, r1
 80024d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024d8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	7b5b      	ldrb	r3, [r3, #13]
 80024de:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <ETH_SetDMAConfig+0x104>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	68f9      	ldr	r1, [r7, #12]
 80024fe:	430b      	orrs	r3, r1
 8002500:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002504:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	7d1b      	ldrb	r3, [r3, #20]
 8002510:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002512:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	7f5b      	ldrb	r3, [r3, #29]
 8002518:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002526:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800252a:	4b15      	ldr	r3, [pc, #84]	; (8002580 <ETH_SetDMAConfig+0x108>)
 800252c:	4013      	ands	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	68f9      	ldr	r1, [r7, #12]
 8002534:	430b      	orrs	r3, r1
 8002536:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800253a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	7f1b      	ldrb	r3, [r3, #28]
 8002542:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002554:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800255c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	430b      	orrs	r3, r1
 8002568:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800256c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	fffec000 	.word	0xfffec000
 8002580:	ffc0efef 	.word	0xffc0efef

08002584 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b0a4      	sub	sp, #144	; 0x90
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800258c:	2301      	movs	r3, #1
 800258e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002592:	2300      	movs	r3, #0
 8002594:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800259c:	2300      	movs	r3, #0
 800259e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80025ba:	2301      	movs	r3, #1
 80025bc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80025c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80025dc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80025e0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80025e8:	2300      	movs	r3, #0
 80025ea:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80025fe:	2300      	movs	r3, #0
 8002600:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002602:	2300      	movs	r3, #0
 8002604:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002606:	2300      	movs	r3, #0
 8002608:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002616:	2301      	movs	r3, #1
 8002618:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800261c:	2320      	movs	r3, #32
 800261e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002622:	2301      	movs	r3, #1
 8002624:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800262e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002638:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002640:	2302      	movs	r3, #2
 8002642:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002658:	2301      	movs	r3, #1
 800265a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800265e:	2300      	movs	r3, #0
 8002660:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002662:	2301      	movs	r3, #1
 8002664:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800266c:	4619      	mov	r1, r3
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fde6 	bl	8002240 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002674:	2301      	movs	r3, #1
 8002676:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002678:	2301      	movs	r3, #1
 800267a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800267c:	2300      	movs	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800268e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002692:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002698:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800269c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80026a4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026aa:	f107 0308 	add.w	r3, r7, #8
 80026ae:	4619      	mov	r1, r3
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff fee1 	bl	8002478 <ETH_SetDMAConfig>
}
 80026b6:	bf00      	nop
 80026b8:	3790      	adds	r7, #144	; 0x90
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	e01d      	b.n	8002708 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68d9      	ldr	r1, [r3, #12]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2200      	movs	r2, #0
 80026e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	3206      	adds	r2, #6
 80026fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3301      	adds	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d9de      	bls.n	80026cc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271c:	461a      	mov	r2, r3
 800271e:	2303      	movs	r3, #3
 8002720:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002730:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002740:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	e023      	b.n	80027a6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6919      	ldr	r1, [r3, #16]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2200      	movs	r2, #0
 800277a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2200      	movs	r2, #0
 8002786:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2200      	movs	r2, #0
 8002792:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	3212      	adds	r2, #18
 800279c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3301      	adds	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d9d8      	bls.n	800275e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d2:	461a      	mov	r2, r3
 80027d4:	2303      	movs	r3, #3
 80027d6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027fa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800281a:	e136      	b.n	8002a8a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2101      	movs	r1, #1
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	fa01 f303 	lsl.w	r3, r1, r3
 8002828:	4013      	ands	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8128 	beq.w	8002a84 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x38>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b12      	cmp	r3, #18
 8002842:	d125      	bne.n	8002890 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002850:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4013      	ands	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f003 020f 	and.w	r2, r3, #15
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	08da      	lsrs	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3208      	adds	r2, #8
 800288a:	6979      	ldr	r1, [r7, #20]
 800288c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2203      	movs	r2, #3
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4013      	ands	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0203 	and.w	r2, r3, #3
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d00b      	beq.n	80028e4 <HAL_GPIO_Init+0xd8>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d007      	beq.n	80028e4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028d8:	2b11      	cmp	r3, #17
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b12      	cmp	r3, #18
 80028e2:	d130      	bne.n	8002946 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2203      	movs	r2, #3
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4013      	ands	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800291a:	2201      	movs	r2, #1
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4013      	ands	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	091b      	lsrs	r3, r3, #4
 8002930:	f003 0201 	and.w	r2, r3, #1
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d017      	beq.n	800297e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2203      	movs	r2, #3
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4013      	ands	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d07c      	beq.n	8002a84 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800298a:	4a47      	ldr	r2, [pc, #284]	; (8002aa8 <HAL_GPIO_Init+0x29c>)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	3318      	adds	r3, #24
 8002992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002996:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	220f      	movs	r2, #15
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4013      	ands	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0a9a      	lsrs	r2, r3, #10
 80029b2:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <HAL_GPIO_Init+0x2a0>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	f002 0203 	and.w	r2, r2, #3
 80029bc:	00d2      	lsls	r2, r2, #3
 80029be:	4093      	lsls	r3, r2
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80029c6:	4938      	ldr	r1, [pc, #224]	; (8002aa8 <HAL_GPIO_Init+0x29c>)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	3318      	adds	r3, #24
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80029d4:	4b34      	ldr	r3, [pc, #208]	; (8002aa8 <HAL_GPIO_Init+0x29c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	43db      	mvns	r3, r3
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4013      	ands	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80029f8:	4a2b      	ldr	r2, [pc, #172]	; (8002aa8 <HAL_GPIO_Init+0x29c>)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80029fe:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <HAL_GPIO_Init+0x29c>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002a22:	4a21      	ldr	r2, [pc, #132]	; (8002aa8 <HAL_GPIO_Init+0x29c>)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002a28:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <HAL_GPIO_Init+0x29c>)
 8002a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a2e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4013      	ands	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002a4e:	4a16      	ldr	r2, [pc, #88]	; (8002aa8 <HAL_GPIO_Init+0x29c>)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002a56:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <HAL_GPIO_Init+0x29c>)
 8002a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a5c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4013      	ands	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_GPIO_Init+0x29c>)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	3301      	adds	r3, #1
 8002a88:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f47f aec1 	bne.w	800281c <HAL_GPIO_Init+0x10>
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	bf00      	nop
 8002a9e:	371c      	adds	r7, #28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	44022000 	.word	0x44022000
 8002aac:	002f7f7f 	.word	0x002f7f7f

08002ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
 8002abc:	4613      	mov	r3, r2
 8002abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac0:	787b      	ldrb	r3, [r7, #1]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002acc:	e002      	b.n	8002ad4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_ICACHE_Enable+0x1c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a04      	ldr	r2, [pc, #16]	; (8002afc <HAL_ICACHE_Enable+0x1c>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40030400 	.word	0x40030400

08002b00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b02:	b08f      	sub	sp, #60	; 0x3c
 8002b04:	af0a      	add	r7, sp, #40	; 0x28
 8002b06:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0cd      	b.n	8002cae <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe fa26 	bl	8000f78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2203      	movs	r2, #3
 8002b30:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f009 f826 	bl	800bb8a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	e03e      	b.n	8002bc2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	333d      	adds	r3, #61	; 0x3d
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	333c      	adds	r3, #60	; 0x3c
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	333f      	adds	r3, #63	; 0x3f
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	334c      	adds	r3, #76	; 0x4c
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3350      	adds	r3, #80	; 0x50
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3354      	adds	r3, #84	; 0x54
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d3bb      	bcc.n	8002b44 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	e044      	b.n	8002c5c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	440b      	add	r3, r1
 8002be0:	f203 137d 	addw	r3, r3, #381	; 0x17d
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002bfa:	7bfa      	ldrb	r2, [r7, #15]
 8002bfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	440b      	add	r3, r1
 8002c0c:	f203 137f 	addw	r3, r3, #383	; 0x17f
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d3b5      	bcc.n	8002bd2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	687e      	ldr	r6, [r7, #4]
 8002c6e:	466d      	mov	r5, sp
 8002c70:	f106 0410 	add.w	r4, r6, #16
 8002c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c80:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c84:	1d33      	adds	r3, r6, #4
 8002c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c88:	6838      	ldr	r0, [r7, #0]
 8002c8a:	f008 ffb6 	bl	800bbfa <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d102      	bne.n	8002cac <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f805 	bl	8002cb6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cb6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b085      	sub	sp, #20
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce4:	f043 0202 	orr.w	r2, r3, #2
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f000 bc28 	b.w	8003560 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d10:	4b94      	ldr	r3, [pc, #592]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f003 0318 	and.w	r3, r3, #24
 8002d18:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002d1a:	4b92      	ldr	r3, [pc, #584]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d05b      	beq.n	8002de8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d005      	beq.n	8002d42 <HAL_RCC_OscConfig+0x46>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	2b18      	cmp	r3, #24
 8002d3a:	d114      	bne.n	8002d66 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d111      	bne.n	8002d66 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d102      	bne.n	8002d50 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f000 bc08 	b.w	8003560 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002d50:	4b84      	ldr	r3, [pc, #528]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	041b      	lsls	r3, r3, #16
 8002d5e:	4981      	ldr	r1, [pc, #516]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002d64:	e040      	b.n	8002de8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d023      	beq.n	8002db6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d6e:	4b7d      	ldr	r3, [pc, #500]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a7c      	ldr	r2, [pc, #496]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7fe ff47 	bl	8001c0c <HAL_GetTick>
 8002d7e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002d82:	f7fe ff43 	bl	8001c0c <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e3e5      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002d94:	4b73      	ldr	r3, [pc, #460]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002da0:	4b70      	ldr	r3, [pc, #448]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	041b      	lsls	r3, r3, #16
 8002dae:	496d      	ldr	r1, [pc, #436]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	618b      	str	r3, [r1, #24]
 8002db4:	e018      	b.n	8002de8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002db6:	4b6b      	ldr	r3, [pc, #428]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a6a      	ldr	r2, [pc, #424]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe ff23 	bl	8001c0c <HAL_GetTick>
 8002dc6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002dca:	f7fe ff1f 	bl	8001c0c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e3c1      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002ddc:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f0      	bne.n	8002dca <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80a0 	beq.w	8002f36 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_OscConfig+0x10c>
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b18      	cmp	r3, #24
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d106      	bne.n	8002e16 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f040 8092 	bne.w	8002f36 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e3a4      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_OscConfig+0x132>
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	e058      	b.n	8002ee0 <HAL_RCC_OscConfig+0x1e4>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d112      	bne.n	8002e5c <HAL_RCC_OscConfig+0x160>
 8002e36:	4b4b      	ldr	r3, [pc, #300]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a4a      	ldr	r2, [pc, #296]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b48      	ldr	r3, [pc, #288]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a47      	ldr	r2, [pc, #284]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e48:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b45      	ldr	r3, [pc, #276]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a44      	ldr	r2, [pc, #272]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e041      	b.n	8002ee0 <HAL_RCC_OscConfig+0x1e4>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e64:	d112      	bne.n	8002e8c <HAL_RCC_OscConfig+0x190>
 8002e66:	4b3f      	ldr	r3, [pc, #252]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a3e      	ldr	r2, [pc, #248]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b3c      	ldr	r3, [pc, #240]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a3b      	ldr	r2, [pc, #236]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e78:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a38      	ldr	r2, [pc, #224]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e029      	b.n	8002ee0 <HAL_RCC_OscConfig+0x1e4>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002e94:	d112      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1c0>
 8002e96:	4b33      	ldr	r3, [pc, #204]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a32      	ldr	r2, [pc, #200]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4b30      	ldr	r3, [pc, #192]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2f      	ldr	r2, [pc, #188]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002ea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b2d      	ldr	r3, [pc, #180]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a2c      	ldr	r2, [pc, #176]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e011      	b.n	8002ee0 <HAL_RCC_OscConfig+0x1e4>
 8002ebc:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a28      	ldr	r2, [pc, #160]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002eda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d013      	beq.n	8002f10 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fe90 	bl	8001c0c <HAL_GetTick>
 8002eec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002ef0:	f7fe fe8c 	bl	8001c0c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	; 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e32e      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x1f4>
 8002f0e:	e012      	b.n	8002f36 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe fe7c 	bl	8001c0c <HAL_GetTick>
 8002f14:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002f18:	f7fe fe78 	bl	8001c0c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e31a      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_RCC_OscConfig+0x268>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 809a 	beq.w	8003078 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_RCC_OscConfig+0x25a>
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	2b18      	cmp	r3, #24
 8002f4e:	d149      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d146      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d104      	bne.n	8002f68 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e2fe      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
 8002f62:	bf00      	nop
 8002f64:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002f6e:	4b9a      	ldr	r3, [pc, #616]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0218 	and.w	r2, r3, #24
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d014      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002f7e:	4b96      	ldr	r3, [pc, #600]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 0218 	bic.w	r2, r3, #24
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	4993      	ldr	r1, [pc, #588]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002f90:	f000 fdd0 	bl	8003b34 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f94:	4b91      	ldr	r3, [pc, #580]	; (80031dc <HAL_RCC_OscConfig+0x4e0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe f87b 	bl	8001094 <HAL_InitTick>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e2db      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fe30 	bl	8001c0c <HAL_GetTick>
 8002fac:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002fb0:	f7fe fe2c 	bl	8001c0c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e2ce      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fc2:	4b85      	ldr	r3, [pc, #532]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002fce:	4b82      	ldr	r3, [pc, #520]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	041b      	lsls	r3, r3, #16
 8002fdc:	497e      	ldr	r1, [pc, #504]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002fe2:	e049      	b.n	8003078 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d02c      	beq.n	8003046 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002fec:	4b7a      	ldr	r3, [pc, #488]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 0218 	bic.w	r2, r3, #24
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	4977      	ldr	r1, [pc, #476]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002ffe:	4b76      	ldr	r3, [pc, #472]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a75      	ldr	r2, [pc, #468]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300a:	f7fe fdff 	bl	8001c0c <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003012:	f7fe fdfb 	bl	8001c0c <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e29d      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003024:	4b6c      	ldr	r3, [pc, #432]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003030:	4b69      	ldr	r3, [pc, #420]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	041b      	lsls	r3, r3, #16
 800303e:	4966      	ldr	r1, [pc, #408]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8003040:	4313      	orrs	r3, r2
 8003042:	610b      	str	r3, [r1, #16]
 8003044:	e018      	b.n	8003078 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003046:	4b64      	ldr	r3, [pc, #400]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a63      	ldr	r2, [pc, #396]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fe fddb 	bl	8001c0c <HAL_GetTick>
 8003056:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800305a:	f7fe fdd7 	bl	8001c0c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e279      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800306c:	4b5a      	ldr	r3, [pc, #360]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f0      	bne.n	800305a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d03c      	beq.n	80030fe <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01c      	beq.n	80030c6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308c:	4b52      	ldr	r3, [pc, #328]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 800308e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003092:	4a51      	ldr	r2, [pc, #324]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8003094:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003098:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fe fdb6 	bl	8001c0c <HAL_GetTick>
 80030a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80030a4:	f7fe fdb2 	bl	8001c0c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e254      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80030b6:	4b48      	ldr	r3, [pc, #288]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 80030b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0ef      	beq.n	80030a4 <HAL_RCC_OscConfig+0x3a8>
 80030c4:	e01b      	b.n	80030fe <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c6:	4b44      	ldr	r3, [pc, #272]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 80030c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030cc:	4a42      	ldr	r2, [pc, #264]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 80030ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d6:	f7fe fd99 	bl	8001c0c <HAL_GetTick>
 80030da:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80030de:	f7fe fd95 	bl	8001c0c <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e237      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80030f0:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 80030f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1ef      	bne.n	80030de <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80d2 	beq.w	80032b0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800310c:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <HAL_RCC_OscConfig+0x4e4>)
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d118      	bne.n	800314a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003118:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <HAL_RCC_OscConfig+0x4e4>)
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	4a30      	ldr	r2, [pc, #192]	; (80031e0 <HAL_RCC_OscConfig+0x4e4>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003124:	f7fe fd72 	bl	8001c0c <HAL_GetTick>
 8003128:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312c:	f7fe fd6e 	bl	8001c0c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e210      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800313e:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <HAL_RCC_OscConfig+0x4e4>)
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d108      	bne.n	8003164 <HAL_RCC_OscConfig+0x468>
 8003152:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8003154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003158:	4a1f      	ldr	r2, [pc, #124]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003162:	e074      	b.n	800324e <HAL_RCC_OscConfig+0x552>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d118      	bne.n	800319e <HAL_RCC_OscConfig+0x4a2>
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 800316e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003172:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800317c:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 800317e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003182:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8003184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003188:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800318c:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 800318e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003192:	4a11      	ldr	r2, [pc, #68]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 8003194:	f023 0304 	bic.w	r3, r3, #4
 8003198:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800319c:	e057      	b.n	800324e <HAL_RCC_OscConfig+0x552>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d11e      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4e8>
 80031a6:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 80031a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ac:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031b6:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 80031b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031bc:	4a06      	ldr	r2, [pc, #24]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 80031be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031c6:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 80031c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031cc:	4a02      	ldr	r2, [pc, #8]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031d6:	e03a      	b.n	800324e <HAL_RCC_OscConfig+0x552>
 80031d8:	44020c00 	.word	0x44020c00
 80031dc:	20000030 	.word	0x20000030
 80031e0:	44020800 	.word	0x44020800
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b85      	cmp	r3, #133	; 0x85
 80031ea:	d118      	bne.n	800321e <HAL_RCC_OscConfig+0x522>
 80031ec:	4ba2      	ldr	r3, [pc, #648]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80031ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031f2:	4aa1      	ldr	r2, [pc, #644]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80031f4:	f043 0304 	orr.w	r3, r3, #4
 80031f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031fc:	4b9e      	ldr	r3, [pc, #632]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80031fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003202:	4a9d      	ldr	r2, [pc, #628]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003208:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800320c:	4b9a      	ldr	r3, [pc, #616]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 800320e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003212:	4a99      	ldr	r2, [pc, #612]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800321c:	e017      	b.n	800324e <HAL_RCC_OscConfig+0x552>
 800321e:	4b96      	ldr	r3, [pc, #600]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003224:	4a94      	ldr	r2, [pc, #592]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800322e:	4b92      	ldr	r3, [pc, #584]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003234:	4a90      	ldr	r2, [pc, #576]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003236:	f023 0304 	bic.w	r3, r3, #4
 800323a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800323e:	4b8e      	ldr	r3, [pc, #568]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003244:	4a8c      	ldr	r2, [pc, #560]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d016      	beq.n	8003284 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003256:	f7fe fcd9 	bl	8001c0c <HAL_GetTick>
 800325a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800325c:	e00a      	b.n	8003274 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fe fcd5 	bl	8001c0c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	; 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e175      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003274:	4b80      	ldr	r3, [pc, #512]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ed      	beq.n	800325e <HAL_RCC_OscConfig+0x562>
 8003282:	e015      	b.n	80032b0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe fcc2 	bl	8001c0c <HAL_GetTick>
 8003288:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fe fcbe 	bl	8001c0c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e15e      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032a2:	4b75      	ldr	r3, [pc, #468]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80032a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ed      	bne.n	800328c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d036      	beq.n	800332a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d019      	beq.n	80032f8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032c4:	4b6c      	ldr	r3, [pc, #432]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a6b      	ldr	r2, [pc, #428]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80032ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7fe fc9c 	bl	8001c0c <HAL_GetTick>
 80032d4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80032d8:	f7fe fc98 	bl	8001c0c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e13a      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80032ea:	4b63      	ldr	r3, [pc, #396]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x5dc>
 80032f6:	e018      	b.n	800332a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032f8:	4b5f      	ldr	r3, [pc, #380]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a5e      	ldr	r2, [pc, #376]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80032fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003302:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fe fc82 	bl	8001c0c <HAL_GetTick>
 8003308:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800330c:	f7fe fc7e 	bl	8001c0c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e120      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800331e:	4b56      	ldr	r3, [pc, #344]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8115 	beq.w	800355e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b18      	cmp	r3, #24
 8003338:	f000 80af 	beq.w	800349a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	2b02      	cmp	r3, #2
 8003342:	f040 8086 	bne.w	8003452 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003346:	4b4c      	ldr	r3, [pc, #304]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a4b      	ldr	r2, [pc, #300]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 800334c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003352:	f7fe fc5b 	bl	8001c0c <HAL_GetTick>
 8003356:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800335a:	f7fe fc57 	bl	8001c0c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e0f9      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800336c:	4b42      	ldr	r3, [pc, #264]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f0      	bne.n	800335a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003378:	4b3f      	ldr	r3, [pc, #252]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003380:	f023 0303 	bic.w	r3, r3, #3
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800338c:	0212      	lsls	r2, r2, #8
 800338e:	430a      	orrs	r2, r1
 8003390:	4939      	ldr	r1, [pc, #228]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003392:	4313      	orrs	r3, r2
 8003394:	628b      	str	r3, [r1, #40]	; 0x28
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	3b01      	subs	r3, #1
 800339c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	3b01      	subs	r3, #1
 80033a6:	025b      	lsls	r3, r3, #9
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	3b01      	subs	r3, #1
 80033b2:	041b      	lsls	r3, r3, #16
 80033b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	3b01      	subs	r3, #1
 80033c0:	061b      	lsls	r3, r3, #24
 80033c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033c6:	492c      	ldr	r1, [pc, #176]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80033cc:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	4a29      	ldr	r2, [pc, #164]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80033d2:	f023 0310 	bic.w	r3, r3, #16
 80033d6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033dc:	4a26      	ldr	r2, [pc, #152]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80033e2:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	4a24      	ldr	r2, [pc, #144]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80033e8:	f043 0310 	orr.w	r3, r3, #16
 80033ec:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80033ee:	4b22      	ldr	r3, [pc, #136]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	f023 020c 	bic.w	r2, r3, #12
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	491f      	ldr	r1, [pc, #124]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	f023 0220 	bic.w	r2, r3, #32
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340c:	491a      	ldr	r1, [pc, #104]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 800340e:	4313      	orrs	r3, r2
 8003410:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003412:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a15      	ldr	r2, [pc, #84]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fe fbef 	bl	8001c0c <HAL_GetTick>
 800342e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003432:	f7fe fbeb 	bl	8001c0c <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e08d      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x736>
 8003450:	e085      	b.n	800355e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a08      	ldr	r2, [pc, #32]	; (8003478 <HAL_RCC_OscConfig+0x77c>)
 8003458:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800345c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fe fbd5 	bl	8001c0c <HAL_GetTick>
 8003462:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003464:	e00a      	b.n	800347c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003466:	f7fe fbd1 	bl	8001c0c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d903      	bls.n	800347c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e073      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
 8003478:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800347c:	4b3a      	ldr	r3, [pc, #232]	; (8003568 <HAL_RCC_OscConfig+0x86c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1ee      	bne.n	8003466 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003488:	4b37      	ldr	r3, [pc, #220]	; (8003568 <HAL_RCC_OscConfig+0x86c>)
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	4a36      	ldr	r2, [pc, #216]	; (8003568 <HAL_RCC_OscConfig+0x86c>)
 800348e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	6293      	str	r3, [r2, #40]	; 0x28
 8003498:	e061      	b.n	800355e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800349a:	4b33      	ldr	r3, [pc, #204]	; (8003568 <HAL_RCC_OscConfig+0x86c>)
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034a0:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_RCC_OscConfig+0x86c>)
 80034a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d031      	beq.n	8003512 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f003 0203 	and.w	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d12a      	bne.n	8003512 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d122      	bne.n	8003512 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d11a      	bne.n	8003512 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	0a5b      	lsrs	r3, r3, #9
 80034e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d111      	bne.n	8003512 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d108      	bne.n	8003512 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	0e1b      	lsrs	r3, r3, #24
 8003504:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d001      	beq.n	8003516 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e024      	b.n	8003560 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003516:	4b14      	ldr	r3, [pc, #80]	; (8003568 <HAL_RCC_OscConfig+0x86c>)
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	08db      	lsrs	r3, r3, #3
 800351c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003524:	429a      	cmp	r2, r3
 8003526:	d01a      	beq.n	800355e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003528:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <HAL_RCC_OscConfig+0x86c>)
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	4a0e      	ldr	r2, [pc, #56]	; (8003568 <HAL_RCC_OscConfig+0x86c>)
 800352e:	f023 0310 	bic.w	r3, r3, #16
 8003532:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe fb6a 	bl	8001c0c <HAL_GetTick>
 8003538:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800353a:	bf00      	nop
 800353c:	f7fe fb66 	bl	8001c0c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	4293      	cmp	r3, r2
 8003546:	d0f9      	beq.n	800353c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354c:	4a06      	ldr	r2, [pc, #24]	; (8003568 <HAL_RCC_OscConfig+0x86c>)
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_RCC_OscConfig+0x86c>)
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	4a04      	ldr	r2, [pc, #16]	; (8003568 <HAL_RCC_OscConfig+0x86c>)
 8003558:	f043 0310 	orr.w	r3, r3, #16
 800355c:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3720      	adds	r7, #32
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	44020c00 	.word	0x44020c00

0800356c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e19e      	b.n	80038be <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003580:	4b83      	ldr	r3, [pc, #524]	; (8003790 <HAL_RCC_ClockConfig+0x224>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d910      	bls.n	80035b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358e:	4b80      	ldr	r3, [pc, #512]	; (8003790 <HAL_RCC_ClockConfig+0x224>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 020f 	bic.w	r2, r3, #15
 8003596:	497e      	ldr	r1, [pc, #504]	; (8003790 <HAL_RCC_ClockConfig+0x224>)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359e:	4b7c      	ldr	r3, [pc, #496]	; (8003790 <HAL_RCC_ClockConfig+0x224>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e186      	b.n	80038be <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d012      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	4b74      	ldr	r3, [pc, #464]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d909      	bls.n	80035e2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80035ce:	4b71      	ldr	r3, [pc, #452]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	496d      	ldr	r1, [pc, #436]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d012      	beq.n	8003614 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	4b68      	ldr	r3, [pc, #416]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d909      	bls.n	8003614 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003600:	4b64      	ldr	r3, [pc, #400]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	4961      	ldr	r1, [pc, #388]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 8003610:	4313      	orrs	r3, r2
 8003612:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d010      	beq.n	8003642 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	4b5b      	ldr	r3, [pc, #364]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800362c:	429a      	cmp	r2, r3
 800362e:	d908      	bls.n	8003642 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003630:	4b58      	ldr	r3, [pc, #352]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4955      	ldr	r1, [pc, #340]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 800363e:	4313      	orrs	r3, r2
 8003640:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d010      	beq.n	8003670 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	4b50      	ldr	r3, [pc, #320]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	429a      	cmp	r2, r3
 800365c:	d908      	bls.n	8003670 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800365e:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f023 020f 	bic.w	r2, r3, #15
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	494a      	ldr	r1, [pc, #296]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 800366c:	4313      	orrs	r3, r2
 800366e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 8093 	beq.w	80037a4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003686:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d121      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e113      	b.n	80038be <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d107      	bne.n	80036ae <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800369e:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d115      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e107      	b.n	80038be <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80036b6:	4b37      	ldr	r3, [pc, #220]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0fb      	b.n	80038be <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c6:	4b33      	ldr	r3, [pc, #204]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0f3      	b.n	80038be <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f023 0203 	bic.w	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	492c      	ldr	r1, [pc, #176]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e8:	f7fe fa90 	bl	8001c0c <HAL_GetTick>
 80036ec:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d112      	bne.n	800371c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f6:	e00a      	b.n	800370e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80036f8:	f7fe fa88 	bl	8001c0c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	; 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e0d7      	b.n	80038be <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f003 0318 	and.w	r3, r3, #24
 8003716:	2b18      	cmp	r3, #24
 8003718:	d1ee      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x18c>
 800371a:	e043      	b.n	80037a4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d112      	bne.n	800374a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003724:	e00a      	b.n	800373c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003726:	f7fe fa71 	bl	8001c0c <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	f241 3288 	movw	r2, #5000	; 0x1388
 8003734:	4293      	cmp	r3, r2
 8003736:	d901      	bls.n	800373c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e0c0      	b.n	80038be <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800373c:	4b15      	ldr	r3, [pc, #84]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f003 0318 	and.w	r3, r3, #24
 8003744:	2b10      	cmp	r3, #16
 8003746:	d1ee      	bne.n	8003726 <HAL_RCC_ClockConfig+0x1ba>
 8003748:	e02c      	b.n	80037a4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d122      	bne.n	8003798 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003752:	e00a      	b.n	800376a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003754:	f7fe fa5a 	bl	8001c0c <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0a9      	b.n	80038be <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <HAL_RCC_ClockConfig+0x228>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f003 0318 	and.w	r3, r3, #24
 8003772:	2b08      	cmp	r3, #8
 8003774:	d1ee      	bne.n	8003754 <HAL_RCC_ClockConfig+0x1e8>
 8003776:	e015      	b.n	80037a4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003778:	f7fe fa48 	bl	8001c0c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d906      	bls.n	8003798 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e097      	b.n	80038be <HAL_RCC_ClockConfig+0x352>
 800378e:	bf00      	nop
 8003790:	40022000 	.word	0x40022000
 8003794:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003798:	4b4b      	ldr	r3, [pc, #300]	; (80038c8 <HAL_RCC_ClockConfig+0x35c>)
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	f003 0318 	and.w	r3, r3, #24
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e9      	bne.n	8003778 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d010      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	4b44      	ldr	r3, [pc, #272]	; (80038c8 <HAL_RCC_ClockConfig+0x35c>)
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	429a      	cmp	r2, r3
 80037be:	d208      	bcs.n	80037d2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80037c0:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <HAL_RCC_ClockConfig+0x35c>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f023 020f 	bic.w	r2, r3, #15
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	493e      	ldr	r1, [pc, #248]	; (80038c8 <HAL_RCC_ClockConfig+0x35c>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037d2:	4b3e      	ldr	r3, [pc, #248]	; (80038cc <HAL_RCC_ClockConfig+0x360>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d210      	bcs.n	8003802 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e0:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <HAL_RCC_ClockConfig+0x360>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f023 020f 	bic.w	r2, r3, #15
 80037e8:	4938      	ldr	r1, [pc, #224]	; (80038cc <HAL_RCC_ClockConfig+0x360>)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f0:	4b36      	ldr	r3, [pc, #216]	; (80038cc <HAL_RCC_ClockConfig+0x360>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d001      	beq.n	8003802 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e05d      	b.n	80038be <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d010      	beq.n	8003830 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <HAL_RCC_ClockConfig+0x35c>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800381a:	429a      	cmp	r2, r3
 800381c:	d208      	bcs.n	8003830 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800381e:	4b2a      	ldr	r3, [pc, #168]	; (80038c8 <HAL_RCC_ClockConfig+0x35c>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4927      	ldr	r1, [pc, #156]	; (80038c8 <HAL_RCC_ClockConfig+0x35c>)
 800382c:	4313      	orrs	r3, r2
 800382e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d012      	beq.n	8003862 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <HAL_RCC_ClockConfig+0x35c>)
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800384a:	429a      	cmp	r2, r3
 800384c:	d209      	bcs.n	8003862 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800384e:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <HAL_RCC_ClockConfig+0x35c>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	491a      	ldr	r1, [pc, #104]	; (80038c8 <HAL_RCC_ClockConfig+0x35c>)
 800385e:	4313      	orrs	r3, r2
 8003860:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d012      	beq.n	8003894 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695a      	ldr	r2, [r3, #20]
 8003872:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <HAL_RCC_ClockConfig+0x35c>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	0a1b      	lsrs	r3, r3, #8
 8003878:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800387c:	429a      	cmp	r2, r3
 800387e:	d209      	bcs.n	8003894 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <HAL_RCC_ClockConfig+0x35c>)
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	490e      	ldr	r1, [pc, #56]	; (80038c8 <HAL_RCC_ClockConfig+0x35c>)
 8003890:	4313      	orrs	r3, r2
 8003892:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003894:	f000 f822 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_RCC_ClockConfig+0x35c>)
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	490b      	ldr	r1, [pc, #44]	; (80038d0 <HAL_RCC_ClockConfig+0x364>)
 80038a4:	5ccb      	ldrb	r3, [r1, r3]
 80038a6:	fa22 f303 	lsr.w	r3, r2, r3
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <HAL_RCC_ClockConfig+0x368>)
 80038ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <HAL_RCC_ClockConfig+0x36c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd fbee 	bl	8001094 <HAL_InitTick>
 80038b8:	4603      	mov	r3, r0
 80038ba:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80038bc:	7afb      	ldrb	r3, [r7, #11]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	44020c00 	.word	0x44020c00
 80038cc:	40022000 	.word	0x40022000
 80038d0:	0800fb2c 	.word	0x0800fb2c
 80038d4:	2000000c 	.word	0x2000000c
 80038d8:	20000030 	.word	0x20000030

080038dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	b089      	sub	sp, #36	; 0x24
 80038e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80038e2:	4b8c      	ldr	r3, [pc, #560]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f003 0318 	and.w	r3, r3, #24
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d102      	bne.n	80038f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80038ee:	4b8a      	ldr	r3, [pc, #552]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x23c>)
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	e107      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038f4:	4b87      	ldr	r3, [pc, #540]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f003 0318 	and.w	r3, r3, #24
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d112      	bne.n	8003926 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003900:	4b84      	ldr	r3, [pc, #528]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b00      	cmp	r3, #0
 800390a:	d009      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800390c:	4b81      	ldr	r3, [pc, #516]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	08db      	lsrs	r3, r3, #3
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	4a81      	ldr	r2, [pc, #516]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x240>)
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	e0f1      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003920:	4b7e      	ldr	r3, [pc, #504]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x240>)
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	e0ee      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003926:	4b7b      	ldr	r3, [pc, #492]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f003 0318 	and.w	r3, r3, #24
 800392e:	2b10      	cmp	r3, #16
 8003930:	d102      	bne.n	8003938 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003932:	4b7b      	ldr	r3, [pc, #492]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x244>)
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	e0e5      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003938:	4b76      	ldr	r3, [pc, #472]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	f003 0318 	and.w	r3, r3, #24
 8003940:	2b18      	cmp	r3, #24
 8003942:	f040 80dd 	bne.w	8003b00 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003946:	4b73      	ldr	r3, [pc, #460]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003950:	4b70      	ldr	r3, [pc, #448]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800395a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800395c:	4b6d      	ldr	r3, [pc, #436]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003968:	4b6a      	ldr	r3, [pc, #424]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800396c:	08db      	lsrs	r3, r3, #3
 800396e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	fb02 f303 	mul.w	r3, r2, r3
 8003978:	ee07 3a90 	vmov	s15, r3
 800397c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003980:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80b7 	beq.w	8003afa <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d003      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0xbe>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b03      	cmp	r3, #3
 8003996:	d056      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x16a>
 8003998:	e077      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800399a:	4b5e      	ldr	r3, [pc, #376]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d02d      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80039a6:	4b5b      	ldr	r3, [pc, #364]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	08db      	lsrs	r3, r3, #3
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	4a5a      	ldr	r2, [pc, #360]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x240>)
 80039b2:	fa22 f303 	lsr.w	r3, r2, r3
 80039b6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d0:	4b50      	ldr	r3, [pc, #320]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80039e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80039e4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003b24 <HAL_RCC_GetSysClockFreq+0x248>
 80039e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80039f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003a00:	e065      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	ee07 3a90 	vmov	s15, r3
 8003a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003b28 <HAL_RCC_GetSysClockFreq+0x24c>
 8003a10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a14:	4b3f      	ldr	r3, [pc, #252]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 8003a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1c:	ee07 3a90 	vmov	s15, r3
 8003a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a24:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a28:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003b24 <HAL_RCC_GetSysClockFreq+0x248>
 8003a2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a30:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a40:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003a44:	e043      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a50:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003b2c <HAL_RCC_GetSysClockFreq+0x250>
 8003a54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a58:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a60:	ee07 3a90 	vmov	s15, r3
 8003a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a68:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a6c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003b24 <HAL_RCC_GetSysClockFreq+0x248>
 8003a70:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a84:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003a88:	e021      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	ee07 3a90 	vmov	s15, r3
 8003a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a94:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b30 <HAL_RCC_GetSysClockFreq+0x254>
 8003a98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aac:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ab0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003b24 <HAL_RCC_GetSysClockFreq+0x248>
 8003ab4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ab8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003abc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003acc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad2:	0a5b      	lsrs	r3, r3, #9
 8003ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad8:	3301      	adds	r3, #1
 8003ada:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ae6:	edd7 6a06 	vldr	s13, [r7, #24]
 8003aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003af2:	ee17 3a90 	vmov	r3, s15
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	e004      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	e001      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x240>)
 8003b02:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003b04:	69fb      	ldr	r3, [r7, #28]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3724      	adds	r7, #36	; 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	44020c00 	.word	0x44020c00
 8003b18:	003d0900 	.word	0x003d0900
 8003b1c:	03d09000 	.word	0x03d09000
 8003b20:	007a1200 	.word	0x007a1200
 8003b24:	46000000 	.word	0x46000000
 8003b28:	4c742400 	.word	0x4c742400
 8003b2c:	4af42400 	.word	0x4af42400
 8003b30:	4a742400 	.word	0x4a742400

08003b34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003b38:	f7ff fed0 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003b40:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003b42:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003b46:	4907      	ldr	r1, [pc, #28]	; (8003b64 <HAL_RCC_GetHCLKFreq+0x30>)
 8003b48:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003b4a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b52:	4a05      	ldr	r2, [pc, #20]	; (8003b68 <HAL_RCC_GetHCLKFreq+0x34>)
 8003b54:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003b56:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <HAL_RCC_GetHCLKFreq+0x34>)
 8003b58:	681b      	ldr	r3, [r3, #0]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	44020c00 	.word	0x44020c00
 8003b64:	0800fb2c 	.word	0x0800fb2c
 8003b68:	2000000c 	.word	0x2000000c

08003b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003b70:	f7ff ffe0 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	091b      	lsrs	r3, r3, #4
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	4904      	ldr	r1, [pc, #16]	; (8003b94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b82:	5ccb      	ldrb	r3, [r1, r3]
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	44020c00 	.word	0x44020c00
 8003b94:	0800fb3c 	.word	0x0800fb3c

08003b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003b9c:	f7ff ffca 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	4904      	ldr	r1, [pc, #16]	; (8003bc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bae:	5ccb      	ldrb	r3, [r1, r3]
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	44020c00 	.word	0x44020c00
 8003bc0:	0800fb3c 	.word	0x0800fb3c

08003bc4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003bc8:	f7ff ffb4 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	0b1b      	lsrs	r3, r3, #12
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4904      	ldr	r1, [pc, #16]	; (8003bec <HAL_RCC_GetPCLK3Freq+0x28>)
 8003bda:	5ccb      	ldrb	r3, [r1, r3]
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	44020c00 	.word	0x44020c00
 8003bec:	0800fb3c 	.word	0x0800fb3c

08003bf0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	221f      	movs	r2, #31
 8003bfe:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8003c00:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <HAL_RCC_GetClockConfig+0x68>)
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	f003 0203 	and.w	r2, r3, #3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8003c0c:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <HAL_RCC_GetClockConfig+0x68>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 020f 	and.w	r2, r3, #15
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <HAL_RCC_GetClockConfig+0x6c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 020f 	and.w	r2, r3, #15
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	601a      	str	r2, [r3, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	44020c00 	.word	0x44020c00
 8003c5c:	40022000 	.word	0x40022000

08003c60 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c64:	b0d8      	sub	sp, #352	; 0x160
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c72:	2300      	movs	r3, #0
 8003c74:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003c78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c80:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8003c84:	2500      	movs	r5, #0
 8003c86:	ea54 0305 	orrs.w	r3, r4, r5
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003c8c:	4bcd      	ldr	r3, [pc, #820]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c92:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8003c96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	4ac9      	ldr	r2, [pc, #804]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f002 0801 	and.w	r8, r2, #1
 8003cb0:	f04f 0900 	mov.w	r9, #0
 8003cb4:	ea58 0309 	orrs.w	r3, r8, r9
 8003cb8:	d042      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003cba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	2b05      	cmp	r3, #5
 8003cc2:	d823      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003cc4:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003d15 	.word	0x08003d15
 8003cd0:	08003ce5 	.word	0x08003ce5
 8003cd4:	08003cf9 	.word	0x08003cf9
 8003cd8:	08003d15 	.word	0x08003d15
 8003cdc:	08003d15 	.word	0x08003d15
 8003ce0:	08003d15 	.word	0x08003d15
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ce4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ce8:	3308      	adds	r3, #8
 8003cea:	4618      	mov	r0, r3
 8003cec:	f004 feda 	bl	8008aa4 <RCCEx_PLL2_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003cf6:	e00e      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cfc:	3330      	adds	r3, #48	; 0x30
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f004 ff68 	bl	8008bd4 <RCCEx_PLL3_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003d0a:	e004      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d12:	e000      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003d1e:	4ba9      	ldr	r3, [pc, #676]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d24:	f023 0107 	bic.w	r1, r3, #7
 8003d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2e:	4aa5      	ldr	r2, [pc, #660]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d30:	430b      	orrs	r3, r1
 8003d32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003d36:	e003      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d38:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d3c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	f002 0a02 	and.w	sl, r2, #2
 8003d4c:	f04f 0b00 	mov.w	fp, #0
 8003d50:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d54:	f000 8088 	beq.w	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5e:	2b28      	cmp	r3, #40	; 0x28
 8003d60:	d868      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003e3d 	.word	0x08003e3d
 8003d6c:	08003e35 	.word	0x08003e35
 8003d70:	08003e35 	.word	0x08003e35
 8003d74:	08003e35 	.word	0x08003e35
 8003d78:	08003e35 	.word	0x08003e35
 8003d7c:	08003e35 	.word	0x08003e35
 8003d80:	08003e35 	.word	0x08003e35
 8003d84:	08003e35 	.word	0x08003e35
 8003d88:	08003e0d 	.word	0x08003e0d
 8003d8c:	08003e35 	.word	0x08003e35
 8003d90:	08003e35 	.word	0x08003e35
 8003d94:	08003e35 	.word	0x08003e35
 8003d98:	08003e35 	.word	0x08003e35
 8003d9c:	08003e35 	.word	0x08003e35
 8003da0:	08003e35 	.word	0x08003e35
 8003da4:	08003e35 	.word	0x08003e35
 8003da8:	08003e21 	.word	0x08003e21
 8003dac:	08003e35 	.word	0x08003e35
 8003db0:	08003e35 	.word	0x08003e35
 8003db4:	08003e35 	.word	0x08003e35
 8003db8:	08003e35 	.word	0x08003e35
 8003dbc:	08003e35 	.word	0x08003e35
 8003dc0:	08003e35 	.word	0x08003e35
 8003dc4:	08003e35 	.word	0x08003e35
 8003dc8:	08003e3d 	.word	0x08003e3d
 8003dcc:	08003e35 	.word	0x08003e35
 8003dd0:	08003e35 	.word	0x08003e35
 8003dd4:	08003e35 	.word	0x08003e35
 8003dd8:	08003e35 	.word	0x08003e35
 8003ddc:	08003e35 	.word	0x08003e35
 8003de0:	08003e35 	.word	0x08003e35
 8003de4:	08003e35 	.word	0x08003e35
 8003de8:	08003e3d 	.word	0x08003e3d
 8003dec:	08003e35 	.word	0x08003e35
 8003df0:	08003e35 	.word	0x08003e35
 8003df4:	08003e35 	.word	0x08003e35
 8003df8:	08003e35 	.word	0x08003e35
 8003dfc:	08003e35 	.word	0x08003e35
 8003e00:	08003e35 	.word	0x08003e35
 8003e04:	08003e35 	.word	0x08003e35
 8003e08:	08003e3d 	.word	0x08003e3d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e10:	3308      	adds	r3, #8
 8003e12:	4618      	mov	r0, r3
 8003e14:	f004 fe46 	bl	8008aa4 <RCCEx_PLL2_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003e1e:	e00e      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e24:	3330      	adds	r3, #48	; 0x30
 8003e26:	4618      	mov	r0, r3
 8003e28:	f004 fed4 	bl	8008bd4 <RCCEx_PLL3_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003e32:	e004      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e3a:	e000      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003e46:	4b5f      	ldr	r3, [pc, #380]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003e48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003e4c:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003e50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e56:	4a5b      	ldr	r2, [pc, #364]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003e5e:	e003      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e64:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	f002 0304 	and.w	r3, r2, #4
 8003e74:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003e7e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8003e82:	460b      	mov	r3, r1
 8003e84:	4313      	orrs	r3, r2
 8003e86:	d04e      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003e88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e8e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e92:	d02c      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003e94:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e98:	d825      	bhi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e9e:	d028      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea4:	d81f      	bhi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003ea6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ea8:	d025      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003eaa:	2bc0      	cmp	r3, #192	; 0xc0
 8003eac:	d81b      	bhi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003eae:	2b80      	cmp	r3, #128	; 0x80
 8003eb0:	d00f      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003eb2:	2b80      	cmp	r3, #128	; 0x80
 8003eb4:	d817      	bhi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d01f      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003eba:	2b40      	cmp	r3, #64	; 0x40
 8003ebc:	d113      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ebe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f004 fded 	bl	8008aa4 <RCCEx_PLL2_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003ed0:	e014      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ed6:	3330      	adds	r3, #48	; 0x30
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f004 fe7b 	bl	8008bd4 <RCCEx_PLL3_Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003ee4:	e00a      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003eec:	e006      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003eee:	bf00      	nop
 8003ef0:	e004      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003ef2:	bf00      	nop
 8003ef4:	e002      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003ef6:	bf00      	nop
 8003ef8:	e000      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10c      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003f04:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003f06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003f0a:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003f0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f14:	4a2b      	ldr	r2, [pc, #172]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003f16:	430b      	orrs	r3, r1
 8003f18:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003f1c:	e003      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f22:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f002 0308 	and.w	r3, r2, #8
 8003f32:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003f36:	2300      	movs	r3, #0
 8003f38:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003f3c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8003f40:	460b      	mov	r3, r1
 8003f42:	4313      	orrs	r3, r2
 8003f44:	d056      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003f46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f4c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003f50:	d031      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003f52:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003f56:	d82a      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5c:	d02d      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f62:	d824      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003f64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f68:	d029      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003f6a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f6e:	d81e      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f74:	d011      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7a:	d818      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d023      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f84:	d113      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f004 fd89 	bl	8008aa4 <RCCEx_PLL2_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003f98:	e017      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f9e:	3330      	adds	r3, #48	; 0x30
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f004 fe17 	bl	8008bd4 <RCCEx_PLL3_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003fac:	e00d      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003fb4:	e009      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003fb6:	bf00      	nop
 8003fb8:	e007      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003fba:	bf00      	nop
 8003fbc:	e005      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003fbe:	bf00      	nop
 8003fc0:	e003      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003fc2:	bf00      	nop
 8003fc4:	44020c00 	.word	0x44020c00
        break;
 8003fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003fd2:	4bbb      	ldr	r3, [pc, #748]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003fd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003fd8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003fdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe2:	4ab7      	ldr	r2, [pc, #732]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003fea:	e003      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ff0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f002 0310 	and.w	r3, r2, #16
 8004000:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800400a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 800400e:	460b      	mov	r3, r1
 8004010:	4313      	orrs	r3, r2
 8004012:	d053      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004014:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800401e:	d031      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004020:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004024:	d82a      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004026:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800402a:	d02d      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800402c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004030:	d824      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004032:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004036:	d029      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004038:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800403c:	d81e      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800403e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004042:	d011      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004048:	d818      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d020      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004052:	d113      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004054:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004058:	3308      	adds	r3, #8
 800405a:	4618      	mov	r0, r3
 800405c:	f004 fd22 	bl	8008aa4 <RCCEx_PLL2_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004066:	e014      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004068:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800406c:	3330      	adds	r3, #48	; 0x30
 800406e:	4618      	mov	r0, r3
 8004070:	f004 fdb0 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800407a:	e00a      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004082:	e006      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004084:	bf00      	nop
 8004086:	e004      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004088:	bf00      	nop
 800408a:	e002      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800408c:	bf00      	nop
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004092:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10c      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800409a:	4b89      	ldr	r3, [pc, #548]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800409c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80040a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80040a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040aa:	4a85      	ldr	r2, [pc, #532]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80040ac:	430b      	orrs	r3, r1
 80040ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80040b2:	e003      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040b8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f002 0320 	and.w	r3, r2, #32
 80040c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80040cc:	2300      	movs	r3, #0
 80040ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80040d2:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80040d6:	460b      	mov	r3, r1
 80040d8:	4313      	orrs	r3, r2
 80040da:	d053      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80040dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80040e6:	d031      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80040e8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80040ec:	d82a      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80040ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040f2:	d02d      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80040f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040f8:	d824      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80040fa:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80040fe:	d029      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004100:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004104:	d81e      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410a:	d011      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004110:	d818      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d020      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800411a:	d113      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800411c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004120:	3308      	adds	r3, #8
 8004122:	4618      	mov	r0, r3
 8004124:	f004 fcbe 	bl	8008aa4 <RCCEx_PLL2_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800412e:	e014      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004130:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004134:	3330      	adds	r3, #48	; 0x30
 8004136:	4618      	mov	r0, r3
 8004138:	f004 fd4c 	bl	8008bd4 <RCCEx_PLL3_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004142:	e00a      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800414a:	e006      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800414c:	bf00      	nop
 800414e:	e004      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004150:	bf00      	nop
 8004152:	e002      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004154:	bf00      	nop
 8004156:	e000      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800415a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10c      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004162:	4b57      	ldr	r3, [pc, #348]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004164:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004168:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 800416c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	4a53      	ldr	r2, [pc, #332]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004174:	430b      	orrs	r3, r1
 8004176:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800417a:	e003      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004180:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004184:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004190:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800419a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800419e:	460b      	mov	r3, r1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	d053      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80041a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041aa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80041ae:	d031      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80041b0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80041b4:	d82a      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80041b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ba:	d02d      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80041bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c0:	d824      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80041c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041c6:	d029      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80041c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041cc:	d81e      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80041ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041d2:	d011      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80041d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041d8:	d818      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d020      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80041de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041e2:	d113      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041e8:	3308      	adds	r3, #8
 80041ea:	4618      	mov	r0, r3
 80041ec:	f004 fc5a 	bl	8008aa4 <RCCEx_PLL2_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80041f6:	e014      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041fc:	3330      	adds	r3, #48	; 0x30
 80041fe:	4618      	mov	r0, r3
 8004200:	f004 fce8 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800420a:	e00a      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004212:	e006      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004214:	bf00      	nop
 8004216:	e004      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004218:	bf00      	nop
 800421a:	e002      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800421c:	bf00      	nop
 800421e:	e000      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004222:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10c      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800422a:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800422c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004230:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8004234:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423a:	4a21      	ldr	r2, [pc, #132]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800423c:	430b      	orrs	r3, r1
 800423e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004242:	e003      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004244:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004248:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800424c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004258:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800425c:	2300      	movs	r3, #0
 800425e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004262:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8004266:	460b      	mov	r3, r1
 8004268:	4313      	orrs	r3, r2
 800426a:	d055      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800426c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004272:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004276:	d033      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004278:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800427c:	d82c      	bhi.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800427e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004282:	d02f      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004284:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004288:	d826      	bhi.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800428a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800428e:	d02b      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004290:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004294:	d820      	bhi.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429a:	d013      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800429c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a0:	d81a      	bhi.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d022      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80042a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042aa:	d115      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042b0:	3308      	adds	r3, #8
 80042b2:	4618      	mov	r0, r3
 80042b4:	f004 fbf6 	bl	8008aa4 <RCCEx_PLL2_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80042be:	e016      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80042c0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042c8:	3330      	adds	r3, #48	; 0x30
 80042ca:	4618      	mov	r0, r3
 80042cc:	f004 fc82 	bl	8008bd4 <RCCEx_PLL3_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80042d6:	e00a      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042de:	e006      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80042e0:	bf00      	nop
 80042e2:	e004      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80042e4:	bf00      	nop
 80042e6:	e002      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80042e8:	bf00      	nop
 80042ea:	e000      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80042ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10c      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80042f6:	4bbb      	ldr	r3, [pc, #748]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80042f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80042fc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004300:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004306:	4ab7      	ldr	r2, [pc, #732]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004308:	430b      	orrs	r3, r1
 800430a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800430e:	e003      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004314:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004318:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004324:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004328:	2300      	movs	r3, #0
 800432a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800432e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8004332:	460b      	mov	r3, r1
 8004334:	4313      	orrs	r3, r2
 8004336:	d053      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8004338:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800433c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800433e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004342:	d031      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004344:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004348:	d82a      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800434a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800434e:	d02d      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004354:	d824      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004356:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800435a:	d029      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800435c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004360:	d81e      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004366:	d011      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8004368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800436c:	d818      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d020      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8004372:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004376:	d113      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004378:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800437c:	3308      	adds	r3, #8
 800437e:	4618      	mov	r0, r3
 8004380:	f004 fb90 	bl	8008aa4 <RCCEx_PLL2_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800438a:	e014      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800438c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004390:	3330      	adds	r3, #48	; 0x30
 8004392:	4618      	mov	r0, r3
 8004394:	f004 fc1e 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800439e:	e00a      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043a6:	e006      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80043a8:	bf00      	nop
 80043aa:	e004      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80043ac:	bf00      	nop
 80043ae:	e002      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80043b0:	bf00      	nop
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80043b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80043be:	4b89      	ldr	r3, [pc, #548]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80043c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80043c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80043c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ce:	4a85      	ldr	r2, [pc, #532]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80043d0:	430b      	orrs	r3, r1
 80043d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80043d6:	e003      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043dc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80043e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80043ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80043f0:	2300      	movs	r3, #0
 80043f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80043f6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80043fa:	460b      	mov	r3, r1
 80043fc:	4313      	orrs	r3, r2
 80043fe:	d055      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004400:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004408:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800440c:	d031      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800440e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004412:	d82a      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004418:	d02d      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800441a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800441e:	d824      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004420:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004424:	d029      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004426:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800442a:	d81e      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800442c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004430:	d011      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8004432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004436:	d818      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004438:	2b00      	cmp	r3, #0
 800443a:	d020      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800443c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004440:	d113      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004442:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004446:	3308      	adds	r3, #8
 8004448:	4618      	mov	r0, r3
 800444a:	f004 fb2b 	bl	8008aa4 <RCCEx_PLL2_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004454:	e014      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004456:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800445a:	3330      	adds	r3, #48	; 0x30
 800445c:	4618      	mov	r0, r3
 800445e:	f004 fbb9 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004468:	e00a      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004470:	e006      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004472:	bf00      	nop
 8004474:	e004      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004476:	bf00      	nop
 8004478:	e002      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800447a:	bf00      	nop
 800447c:	e000      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800447e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004480:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10d      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8004488:	4b56      	ldr	r3, [pc, #344]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800448a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800448e:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8004492:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800449a:	4a52      	ldr	r2, [pc, #328]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800449c:	430b      	orrs	r3, r1
 800449e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80044a2:	e003      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80044ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80044b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80044bc:	2300      	movs	r3, #0
 80044be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80044c2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80044c6:	460b      	mov	r3, r1
 80044c8:	4313      	orrs	r3, r2
 80044ca:	d044      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80044cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d4:	2b05      	cmp	r3, #5
 80044d6:	d823      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004529 	.word	0x08004529
 80044e4:	080044f9 	.word	0x080044f9
 80044e8:	0800450d 	.word	0x0800450d
 80044ec:	08004529 	.word	0x08004529
 80044f0:	08004529 	.word	0x08004529
 80044f4:	08004529 	.word	0x08004529
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044fc:	3308      	adds	r3, #8
 80044fe:	4618      	mov	r0, r3
 8004500:	f004 fad0 	bl	8008aa4 <RCCEx_PLL2_Config>
 8004504:	4603      	mov	r3, r0
 8004506:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800450a:	e00e      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800450c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004510:	3330      	adds	r3, #48	; 0x30
 8004512:	4618      	mov	r0, r3
 8004514:	f004 fb5e 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800451e:	e004      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004526:	e000      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8004528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800452a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10d      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8004532:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004534:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004538:	f023 0107 	bic.w	r1, r3, #7
 800453c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004544:	4a27      	ldr	r2, [pc, #156]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004546:	430b      	orrs	r3, r1
 8004548:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800454c:	e003      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004552:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8004556:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004562:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004566:	2300      	movs	r3, #0
 8004568:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800456c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004570:	460b      	mov	r3, r1
 8004572:	4313      	orrs	r3, r2
 8004574:	d04f      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8004576:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	2b50      	cmp	r3, #80	; 0x50
 8004580:	d029      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004582:	2b50      	cmp	r3, #80	; 0x50
 8004584:	d823      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004586:	2b40      	cmp	r3, #64	; 0x40
 8004588:	d027      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800458a:	2b40      	cmp	r3, #64	; 0x40
 800458c:	d81f      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800458e:	2b30      	cmp	r3, #48	; 0x30
 8004590:	d025      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004592:	2b30      	cmp	r3, #48	; 0x30
 8004594:	d81b      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004596:	2b20      	cmp	r3, #32
 8004598:	d00f      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800459a:	2b20      	cmp	r3, #32
 800459c:	d817      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d022      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d113      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045aa:	3308      	adds	r3, #8
 80045ac:	4618      	mov	r0, r3
 80045ae:	f004 fa79 	bl	8008aa4 <RCCEx_PLL2_Config>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80045b8:	e017      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045be:	3330      	adds	r3, #48	; 0x30
 80045c0:	4618      	mov	r0, r3
 80045c2:	f004 fb07 	bl	8008bd4 <RCCEx_PLL3_Config>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80045cc:	e00d      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80045d4:	e009      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80045d6:	bf00      	nop
 80045d8:	e007      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80045da:	bf00      	nop
 80045dc:	e005      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80045de:	bf00      	nop
 80045e0:	e003      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80045e2:	bf00      	nop
 80045e4:	44020c00 	.word	0x44020c00
        break;
 80045e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10d      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80045f2:	4baf      	ldr	r3, [pc, #700]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80045f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80045f8:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80045fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004604:	4aaa      	ldr	r2, [pc, #680]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004606:	430b      	orrs	r3, r1
 8004608:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800460c:	e003      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004612:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004616:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004622:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004626:	2300      	movs	r3, #0
 8004628:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800462c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004630:	460b      	mov	r3, r1
 8004632:	4313      	orrs	r3, r2
 8004634:	d055      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004636:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800463a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004642:	d031      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8004644:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004648:	d82a      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800464a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800464e:	d02d      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004654:	d824      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004656:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800465a:	d029      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800465c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004660:	d81e      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004666:	d011      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8004668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800466c:	d818      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d020      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8004672:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004676:	d113      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004678:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800467c:	3308      	adds	r3, #8
 800467e:	4618      	mov	r0, r3
 8004680:	f004 fa10 	bl	8008aa4 <RCCEx_PLL2_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800468a:	e014      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800468c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004690:	3330      	adds	r3, #48	; 0x30
 8004692:	4618      	mov	r0, r3
 8004694:	f004 fa9e 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800469e:	e00a      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80046a6:	e006      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80046a8:	bf00      	nop
 80046aa:	e004      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80046ac:	bf00      	nop
 80046ae:	e002      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80046b0:	bf00      	nop
 80046b2:	e000      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80046b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10d      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80046be:	4b7c      	ldr	r3, [pc, #496]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80046c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80046c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046d0:	4a77      	ldr	r2, [pc, #476]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80046d2:	430b      	orrs	r3, r1
 80046d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046d8:	e003      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80046ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046f2:	2300      	movs	r3, #0
 80046f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80046f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80046fc:	460b      	mov	r3, r1
 80046fe:	4313      	orrs	r3, r2
 8004700:	d03d      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004702:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800470e:	d01b      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004710:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004714:	d814      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004716:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800471a:	d017      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800471c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004720:	d80e      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d014      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472a:	d109      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800472c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004730:	3330      	adds	r3, #48	; 0x30
 8004732:	4618      	mov	r0, r3
 8004734:	f004 fa4e 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004738:	4603      	mov	r3, r0
 800473a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800473e:	e008      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004746:	e004      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004748:	bf00      	nop
 800474a:	e002      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800474c:	bf00      	nop
 800474e:	e000      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004752:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10d      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800475a:	4b55      	ldr	r3, [pc, #340]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800475c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004760:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004764:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	4a50      	ldr	r2, [pc, #320]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800476e:	430b      	orrs	r3, r1
 8004770:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004774:	e003      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004776:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800477a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800477e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004786:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800478a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800478e:	2300      	movs	r3, #0
 8004790:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004794:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004798:	460b      	mov	r3, r1
 800479a:	4313      	orrs	r3, r2
 800479c:	d03d      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800479e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047aa:	d01b      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80047ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047b0:	d814      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80047b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047b6:	d017      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80047b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047bc:	d80e      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d014      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80047c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047c6:	d109      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047cc:	3330      	adds	r3, #48	; 0x30
 80047ce:	4618      	mov	r0, r3
 80047d0:	f004 fa00 	bl	8008bd4 <RCCEx_PLL3_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80047da:	e008      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80047e2:	e004      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80047e4:	bf00      	nop
 80047e6:	e002      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80047e8:	bf00      	nop
 80047ea:	e000      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80047ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10d      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80047f6:	4b2e      	ldr	r3, [pc, #184]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80047f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80047fc:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004800:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004808:	4a29      	ldr	r2, [pc, #164]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800480a:	430b      	orrs	r3, r1
 800480c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004810:	e003      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004812:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004816:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800481a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004822:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800482a:	2300      	movs	r3, #0
 800482c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004830:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004834:	460b      	mov	r3, r1
 8004836:	4313      	orrs	r3, r2
 8004838:	d040      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800483a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800483e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004842:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004846:	d01b      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8004848:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800484c:	d814      	bhi.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800484e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004852:	d017      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004854:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004858:	d80e      	bhi.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d014      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800485e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004862:	d109      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004864:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004868:	3330      	adds	r3, #48	; 0x30
 800486a:	4618      	mov	r0, r3
 800486c:	f004 f9b2 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004876:	e008      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800487e:	e004      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004880:	bf00      	nop
 8004882:	e002      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004884:	bf00      	nop
 8004886:	e000      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800488a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800488e:	2b00      	cmp	r3, #0
 8004890:	d110      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004892:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004894:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004898:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800489c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048a4:	4a02      	ldr	r2, [pc, #8]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80048a6:	430b      	orrs	r3, r1
 80048a8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80048ac:	e006      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80048ae:	bf00      	nop
 80048b0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048b8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	2100      	movs	r1, #0
 80048c6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80048ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80048d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4313      	orrs	r3, r2
 80048da:	d03d      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80048dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048e8:	d01b      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80048ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048ee:	d814      	bhi.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80048f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048f4:	d017      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80048f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048fa:	d80e      	bhi.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d014      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8004900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004904:	d109      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004906:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800490a:	3330      	adds	r3, #48	; 0x30
 800490c:	4618      	mov	r0, r3
 800490e:	f004 f961 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004918:	e008      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004920:	e004      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004922:	bf00      	nop
 8004924:	e002      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004926:	bf00      	nop
 8004928:	e000      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800492a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800492c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10d      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004934:	4bbe      	ldr	r3, [pc, #760]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004936:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800493a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800493e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004942:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004946:	4aba      	ldr	r2, [pc, #744]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004948:	430b      	orrs	r3, r1
 800494a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800494e:	e003      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004950:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004954:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004958:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004964:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004968:	2300      	movs	r3, #0
 800496a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800496e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004972:	460b      	mov	r3, r1
 8004974:	4313      	orrs	r3, r2
 8004976:	d035      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004978:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800497c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004980:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004984:	d015      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8004986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800498a:	d80e      	bhi.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d012      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004994:	d109      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004996:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800499a:	3330      	adds	r3, #48	; 0x30
 800499c:	4618      	mov	r0, r3
 800499e:	f004 f919 	bl	8008bd4 <RCCEx_PLL3_Config>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80049a8:	e006      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80049b0:	e002      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80049b2:	bf00      	nop
 80049b4:	e000      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80049b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10d      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80049c0:	4b9b      	ldr	r3, [pc, #620]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80049c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80049c6:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 80049ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049d2:	4a97      	ldr	r2, [pc, #604]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80049d4:	430b      	orrs	r3, r1
 80049d6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80049da:	e003      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049e0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	2100      	movs	r1, #0
 80049ee:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80049f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	d00e      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004a04:	4b8a      	ldr	r3, [pc, #552]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	4a89      	ldr	r2, [pc, #548]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a0e:	61d3      	str	r3, [r2, #28]
 8004a10:	4b87      	ldr	r3, [pc, #540]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a12:	69d9      	ldr	r1, [r3, #28]
 8004a14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a18:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004a1c:	4a84      	ldr	r2, [pc, #528]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004a2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a32:	2300      	movs	r3, #0
 8004a34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a38:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	d055      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004a42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a4a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004a4e:	d031      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8004a50:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004a54:	d82a      	bhi.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5a:	d02d      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a60:	d824      	bhi.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a66:	d029      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a6c:	d81e      	bhi.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a72:	d011      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a78:	d818      	bhi.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d020      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a82:	d113      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a88:	3308      	adds	r3, #8
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f004 f80a 	bl	8008aa4 <RCCEx_PLL2_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004a96:	e014      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a9c:	3330      	adds	r3, #48	; 0x30
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f004 f898 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004ab2:	e006      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004ab4:	bf00      	nop
 8004ab6:	e004      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004ab8:	bf00      	nop
 8004aba:	e002      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004abc:	bf00      	nop
 8004abe:	e000      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10d      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004aca:	4b59      	ldr	r3, [pc, #356]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004acc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004ad0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ad8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004adc:	4a54      	ldr	r2, [pc, #336]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004ae4:	e003      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004aea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004afe:	2300      	movs	r3, #0
 8004b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b04:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	d055      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b16:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004b1a:	d031      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004b1c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004b20:	d82a      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b26:	d02d      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004b28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b2c:	d824      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004b2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b32:	d029      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004b34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b38:	d81e      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3e:	d011      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b44:	d818      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d020      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4e:	d113      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b54:	3308      	adds	r3, #8
 8004b56:	4618      	mov	r0, r3
 8004b58:	f003 ffa4 	bl	8008aa4 <RCCEx_PLL2_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004b62:	e014      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b68:	3330      	adds	r3, #48	; 0x30
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f004 f832 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004b76:	e00a      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b7e:	e006      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004b80:	bf00      	nop
 8004b82:	e004      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004b84:	bf00      	nop
 8004b86:	e002      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004b88:	bf00      	nop
 8004b8a:	e000      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10d      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004b96:	4b26      	ldr	r3, [pc, #152]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004b98:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004b9c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ba4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ba8:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004baa:	430b      	orrs	r3, r1
 8004bac:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004bb0:	e003      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004bb6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004bba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	d057      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004bda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004be2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004be6:	d033      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bec:	d82c      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004bee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bf2:	d02f      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004bf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bf8:	d826      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004bfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bfe:	d02b      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004c00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c04:	d820      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c0a:	d013      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c10:	d81a      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d022      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8004c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1a:	d115      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c20:	3308      	adds	r3, #8
 8004c22:	4618      	mov	r0, r3
 8004c24:	f003 ff3e 	bl	8008aa4 <RCCEx_PLL2_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004c2e:	e016      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004c30:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c38:	3330      	adds	r3, #48	; 0x30
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f003 ffca 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004c46:	e00a      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004c4e:	e006      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004c50:	bf00      	nop
 8004c52:	e004      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004c54:	bf00      	nop
 8004c56:	e002      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004c58:	bf00      	nop
 8004c5a:	e000      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c5e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10d      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004c66:	4bbb      	ldr	r3, [pc, #748]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004c68:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004c6c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004c70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c78:	4ab6      	ldr	r2, [pc, #728]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004c80:	e003      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c86:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004c8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	2100      	movs	r1, #0
 8004c94:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ca0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	d055      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cb2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004cb6:	d031      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004cb8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004cbc:	d82a      	bhi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc2:	d02d      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc8:	d824      	bhi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004cca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cce:	d029      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004cd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cd4:	d81e      	bhi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cda:	d011      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8004cdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce0:	d818      	bhi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d020      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8004ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cea:	d113      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f003 fed6 	bl	8008aa4 <RCCEx_PLL2_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004cfe:	e014      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d04:	3330      	adds	r3, #48	; 0x30
 8004d06:	4618      	mov	r0, r3
 8004d08:	f003 ff64 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004d12:	e00a      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d1a:	e006      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004d1c:	bf00      	nop
 8004d1e:	e004      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004d20:	bf00      	nop
 8004d22:	e002      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004d24:	bf00      	nop
 8004d26:	e000      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d2a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10d      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8004d32:	4b88      	ldr	r3, [pc, #544]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004d34:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004d38:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8004d3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d44:	4a83      	ldr	r2, [pc, #524]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004d46:	430b      	orrs	r3, r1
 8004d48:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004d4c:	e003      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d52:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	2100      	movs	r1, #0
 8004d60:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d6c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004d70:	460b      	mov	r3, r1
 8004d72:	4313      	orrs	r3, r2
 8004d74:	d055      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004d76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d7e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004d82:	d031      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004d84:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004d88:	d82a      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004d8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d8e:	d02d      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8004d90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d94:	d824      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004d96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d9a:	d029      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8004d9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004da0:	d81e      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004da2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004da6:	d011      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8004da8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dac:	d818      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d020      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8004db2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004db6:	d113      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f003 fe70 	bl	8008aa4 <RCCEx_PLL2_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004dca:	e014      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dd0:	3330      	adds	r3, #48	; 0x30
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f003 fefe 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004dde:	e00a      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004de6:	e006      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004de8:	bf00      	nop
 8004dea:	e004      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004dec:	bf00      	nop
 8004dee:	e002      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004df0:	bf00      	nop
 8004df2:	e000      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10d      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004dfe:	4b55      	ldr	r3, [pc, #340]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004e00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004e04:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004e08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e10:	4a50      	ldr	r2, [pc, #320]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004e12:	430b      	orrs	r3, r1
 8004e14:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004e18:	e003      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e1e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8004e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e38:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	d055      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004e42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e4e:	d031      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e54:	d82a      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5a:	d02d      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e60:	d824      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004e62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e66:	d029      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004e68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e6c:	d81e      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e72:	d011      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e78:	d818      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d020      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e82:	d113      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e88:	3308      	adds	r3, #8
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f003 fe0a 	bl	8008aa4 <RCCEx_PLL2_Config>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004e96:	e014      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e9c:	3330      	adds	r3, #48	; 0x30
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f003 fe98 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004eaa:	e00a      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004eb2:	e006      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004eb4:	bf00      	nop
 8004eb6:	e004      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004eb8:	bf00      	nop
 8004eba:	e002      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004ebc:	bf00      	nop
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10d      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8004eca:	4b22      	ldr	r3, [pc, #136]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004ecc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004ed0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ed8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004edc:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004ee4:	e003      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004eea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004eee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004efa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004efe:	2300      	movs	r3, #0
 8004f00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f04:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	d055      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004f0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f1a:	d035      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004f1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f20:	d82e      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004f22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f26:	d031      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004f28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f2c:	d828      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004f2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f32:	d01b      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004f34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f38:	d822      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f42:	d009      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004f44:	e01c      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f46:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	4a02      	ldr	r2, [pc, #8]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f50:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f52:	e01c      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004f54:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f003 fda0 	bl	8008aa4 <RCCEx_PLL2_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f6a:	e010      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f70:	3330      	adds	r3, #48	; 0x30
 8004f72:	4618      	mov	r0, r3
 8004f74:	f003 fe2e 	bl	8008bd4 <RCCEx_PLL3_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f7e:	e006      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f86:	e002      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004f88:	bf00      	nop
 8004f8a:	e000      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10d      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004f96:	4bc3      	ldr	r3, [pc, #780]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f9c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fa4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004fa8:	4abe      	ldr	r2, [pc, #760]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004faa:	430b      	orrs	r3, r1
 8004fac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004fb0:	e003      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fb6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004fba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004fc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fd0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	d051      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004fe2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fe6:	d033      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004fe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fec:	d82c      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004fee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ff2:	d02d      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004ff4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ff8:	d826      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ffe:	d019      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005004:	d820      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800500a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800500e:	d007      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005010:	e01a      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005012:	4ba4      	ldr	r3, [pc, #656]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005016:	4aa3      	ldr	r2, [pc, #652]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800501c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800501e:	e018      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005020:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005024:	3308      	adds	r3, #8
 8005026:	4618      	mov	r0, r3
 8005028:	f003 fd3c 	bl	8008aa4 <RCCEx_PLL2_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005032:	e00e      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005034:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005038:	3330      	adds	r3, #48	; 0x30
 800503a:	4618      	mov	r0, r3
 800503c:	f003 fdca 	bl	8008bd4 <RCCEx_PLL3_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005046:	e004      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800504e:	e000      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005052:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10d      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800505a:	4b92      	ldr	r3, [pc, #584]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800505c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005060:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8005064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005068:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800506c:	4a8d      	ldr	r2, [pc, #564]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800506e:	430b      	orrs	r3, r1
 8005070:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005074:	e003      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005076:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800507a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800507e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800508a:	67bb      	str	r3, [r7, #120]	; 0x78
 800508c:	2300      	movs	r3, #0
 800508e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005090:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005094:	460b      	mov	r3, r1
 8005096:	4313      	orrs	r3, r2
 8005098:	d032      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800509a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800509e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d80f      	bhi.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d211      	bcs.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d911      	bls.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d109      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050b6:	3308      	adds	r3, #8
 80050b8:	4618      	mov	r0, r3
 80050ba:	f003 fcf3 	bl	8008aa4 <RCCEx_PLL2_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80050c4:	e006      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80050cc:	e002      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80050ce:	bf00      	nop
 80050d0:	e000      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80050d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050d4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10d      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80050dc:	4b71      	ldr	r3, [pc, #452]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80050de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050e2:	f023 0107 	bic.w	r1, r3, #7
 80050e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80050ee:	4a6d      	ldr	r2, [pc, #436]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80050f0:	430b      	orrs	r3, r1
 80050f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050f6:	e003      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80050fc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005100:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	2100      	movs	r1, #0
 800510a:	6739      	str	r1, [r7, #112]	; 0x70
 800510c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005110:	677b      	str	r3, [r7, #116]	; 0x74
 8005112:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005116:	460b      	mov	r3, r1
 8005118:	4313      	orrs	r3, r2
 800511a:	d024      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800511c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005120:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8005128:	2b08      	cmp	r3, #8
 800512a:	d005      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005132:	e002      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005134:	bf00      	nop
 8005136:	e000      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800513a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10d      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005142:	4b58      	ldr	r3, [pc, #352]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005148:	f023 0108 	bic.w	r1, r3, #8
 800514c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005154:	4a53      	ldr	r2, [pc, #332]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005156:	430b      	orrs	r3, r1
 8005158:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800515c:	e003      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005162:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005166:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005172:	66bb      	str	r3, [r7, #104]	; 0x68
 8005174:	2300      	movs	r3, #0
 8005176:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005178:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800517c:	460b      	mov	r3, r1
 800517e:	4313      	orrs	r3, r2
 8005180:	f000 80b9 	beq.w	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005184:	4b48      	ldr	r3, [pc, #288]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	4a47      	ldr	r2, [pc, #284]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005190:	f7fc fd3c 	bl	8001c0c <HAL_GetTick>
 8005194:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005198:	e00b      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800519a:	f7fc fd37 	bl	8001c0c <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d903      	bls.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80051b0:	e005      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80051b2:	4b3d      	ldr	r3, [pc, #244]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0ed      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80051be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f040 8093 	bne.w	80052ee <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051c8:	4b36      	ldr	r3, [pc, #216]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80051ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80051d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d023      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80051de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051e2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80051e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01b      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051ee:	4b2d      	ldr	r3, [pc, #180]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80051f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051fc:	4b29      	ldr	r3, [pc, #164]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80051fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005202:	4a28      	ldr	r2, [pc, #160]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005208:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800520c:	4b25      	ldr	r3, [pc, #148]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800520e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005212:	4a24      	ldr	r2, [pc, #144]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005218:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800521c:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800521e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005222:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005226:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d019      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005232:	f7fc fceb 	bl	8001c0c <HAL_GetTick>
 8005236:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800523a:	e00d      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523c:	f7fc fce6 	bl	8001c0c <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005246:	1ad2      	subs	r2, r2, r3
 8005248:	f241 3388 	movw	r3, #5000	; 0x1388
 800524c:	429a      	cmp	r2, r3
 800524e:	d903      	bls.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8005256:	e006      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005258:	4b12      	ldr	r3, [pc, #72]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800525a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0ea      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8005266:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800526a:	2b00      	cmp	r3, #0
 800526c:	d13a      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800526e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005272:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800527e:	d115      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8005280:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005288:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800528c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005296:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800529a:	4a02      	ldr	r2, [pc, #8]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800529c:	430b      	orrs	r3, r1
 800529e:	61d3      	str	r3, [r2, #28]
 80052a0:	e00a      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80052a2:	bf00      	nop
 80052a4:	44020c00 	.word	0x44020c00
 80052a8:	44020800 	.word	0x44020800
 80052ac:	4b9f      	ldr	r3, [pc, #636]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	4a9e      	ldr	r2, [pc, #632]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80052b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80052b6:	61d3      	str	r3, [r2, #28]
 80052b8:	4b9c      	ldr	r3, [pc, #624]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80052ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052be:	4a9b      	ldr	r2, [pc, #620]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80052c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80052c8:	4b98      	ldr	r3, [pc, #608]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80052ca:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80052ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052d2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80052d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052da:	4a94      	ldr	r2, [pc, #592]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80052dc:	430b      	orrs	r3, r1
 80052de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80052e2:	e008      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052e4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052e8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 80052ec:	e003      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052f2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005302:	663b      	str	r3, [r7, #96]	; 0x60
 8005304:	2300      	movs	r3, #0
 8005306:	667b      	str	r3, [r7, #100]	; 0x64
 8005308:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800530c:	460b      	mov	r3, r1
 800530e:	4313      	orrs	r3, r2
 8005310:	d035      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005312:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005316:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800531a:	2b30      	cmp	r3, #48	; 0x30
 800531c:	d014      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800531e:	2b30      	cmp	r3, #48	; 0x30
 8005320:	d80e      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005322:	2b20      	cmp	r3, #32
 8005324:	d012      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8005326:	2b20      	cmp	r3, #32
 8005328:	d80a      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d010      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800532e:	2b10      	cmp	r3, #16
 8005330:	d106      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005332:	4b7e      	ldr	r3, [pc, #504]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	4a7d      	ldr	r2, [pc, #500]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800533c:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800533e:	e008      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005346:	e004      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005348:	bf00      	nop
 800534a:	e002      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800534c:	bf00      	nop
 800534e:	e000      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005352:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10d      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800535a:	4b74      	ldr	r3, [pc, #464]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800535c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005360:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005364:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005368:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800536c:	4a6f      	ldr	r2, [pc, #444]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800536e:	430b      	orrs	r3, r1
 8005370:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005374:	e003      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005376:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800537a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800537e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800538a:	65bb      	str	r3, [r7, #88]	; 0x58
 800538c:	2300      	movs	r3, #0
 800538e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005390:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005394:	460b      	mov	r3, r1
 8005396:	4313      	orrs	r3, r2
 8005398:	d033      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800539a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800539e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d007      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80053aa:	e010      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ac:	4b5f      	ldr	r3, [pc, #380]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	4a5e      	ldr	r2, [pc, #376]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80053b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80053b8:	e00d      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053be:	3308      	adds	r3, #8
 80053c0:	4618      	mov	r0, r3
 80053c2:	f003 fb6f 	bl	8008aa4 <RCCEx_PLL2_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80053cc:	e003      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80053d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10d      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80053de:	4b53      	ldr	r3, [pc, #332]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80053e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80053e4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80053e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053ec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80053f0:	4a4e      	ldr	r2, [pc, #312]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80053f2:	430b      	orrs	r3, r1
 80053f4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80053f8:	e003      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053fe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005402:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800540e:	653b      	str	r3, [r7, #80]	; 0x50
 8005410:	2300      	movs	r3, #0
 8005412:	657b      	str	r3, [r7, #84]	; 0x54
 8005414:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005418:	460b      	mov	r3, r1
 800541a:	4313      	orrs	r3, r2
 800541c:	d033      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800541e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005422:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800542a:	2b80      	cmp	r3, #128	; 0x80
 800542c:	d007      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800542e:	e010      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005430:	4b3e      	ldr	r3, [pc, #248]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	4a3d      	ldr	r2, [pc, #244]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800543a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800543c:	e00d      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800543e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005442:	3308      	adds	r3, #8
 8005444:	4618      	mov	r0, r3
 8005446:	f003 fb2d 	bl	8008aa4 <RCCEx_PLL2_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005450:	e003      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800545a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10d      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8005462:	4b32      	ldr	r3, [pc, #200]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005464:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005468:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800546c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005470:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005474:	4a2d      	ldr	r2, [pc, #180]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005476:	430b      	orrs	r3, r1
 8005478:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800547c:	e003      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005482:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005486:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005492:	64bb      	str	r3, [r7, #72]	; 0x48
 8005494:	2300      	movs	r3, #0
 8005496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005498:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800549c:	460b      	mov	r3, r1
 800549e:	4313      	orrs	r3, r2
 80054a0:	d04a      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80054a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d827      	bhi.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80054ae:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	080054c9 	.word	0x080054c9
 80054b8:	080054d7 	.word	0x080054d7
 80054bc:	080054eb 	.word	0x080054eb
 80054c0:	08005507 	.word	0x08005507
 80054c4:	08005507 	.word	0x08005507
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c8:	4b18      	ldr	r3, [pc, #96]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	4a17      	ldr	r2, [pc, #92]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80054ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054d2:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80054d4:	e018      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054da:	3308      	adds	r3, #8
 80054dc:	4618      	mov	r0, r3
 80054de:	f003 fae1 	bl	8008aa4 <RCCEx_PLL2_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80054e8:	e00e      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054ee:	3330      	adds	r3, #48	; 0x30
 80054f0:	4618      	mov	r0, r3
 80054f2:	f003 fb6f 	bl	8008bd4 <RCCEx_PLL3_Config>
 80054f6:	4603      	mov	r3, r0
 80054f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80054fc:	e004      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005504:	e000      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8005506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005508:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10f      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005510:	4b06      	ldr	r3, [pc, #24]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005516:	f023 0107 	bic.w	r1, r3, #7
 800551a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800551e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005522:	4a02      	ldr	r2, [pc, #8]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005524:	430b      	orrs	r3, r1
 8005526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800552a:	e005      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800552c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005530:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005534:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005538:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005540:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005544:	643b      	str	r3, [r7, #64]	; 0x40
 8005546:	2300      	movs	r3, #0
 8005548:	647b      	str	r3, [r7, #68]	; 0x44
 800554a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800554e:	460b      	mov	r3, r1
 8005550:	4313      	orrs	r3, r2
 8005552:	f000 8081 	beq.w	8005658 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005556:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800555a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800555e:	2b20      	cmp	r3, #32
 8005560:	d85f      	bhi.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	080055ed 	.word	0x080055ed
 800556c:	08005623 	.word	0x08005623
 8005570:	08005623 	.word	0x08005623
 8005574:	08005623 	.word	0x08005623
 8005578:	08005623 	.word	0x08005623
 800557c:	08005623 	.word	0x08005623
 8005580:	08005623 	.word	0x08005623
 8005584:	08005623 	.word	0x08005623
 8005588:	080055fb 	.word	0x080055fb
 800558c:	08005623 	.word	0x08005623
 8005590:	08005623 	.word	0x08005623
 8005594:	08005623 	.word	0x08005623
 8005598:	08005623 	.word	0x08005623
 800559c:	08005623 	.word	0x08005623
 80055a0:	08005623 	.word	0x08005623
 80055a4:	08005623 	.word	0x08005623
 80055a8:	0800560f 	.word	0x0800560f
 80055ac:	08005623 	.word	0x08005623
 80055b0:	08005623 	.word	0x08005623
 80055b4:	08005623 	.word	0x08005623
 80055b8:	08005623 	.word	0x08005623
 80055bc:	08005623 	.word	0x08005623
 80055c0:	08005623 	.word	0x08005623
 80055c4:	08005623 	.word	0x08005623
 80055c8:	0800562b 	.word	0x0800562b
 80055cc:	08005623 	.word	0x08005623
 80055d0:	08005623 	.word	0x08005623
 80055d4:	08005623 	.word	0x08005623
 80055d8:	08005623 	.word	0x08005623
 80055dc:	08005623 	.word	0x08005623
 80055e0:	08005623 	.word	0x08005623
 80055e4:	08005623 	.word	0x08005623
 80055e8:	0800562b 	.word	0x0800562b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ec:	4bab      	ldr	r3, [pc, #684]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80055ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f0:	4aaa      	ldr	r2, [pc, #680]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80055f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f6:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80055f8:	e018      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055fe:	3308      	adds	r3, #8
 8005600:	4618      	mov	r0, r3
 8005602:	f003 fa4f 	bl	8008aa4 <RCCEx_PLL2_Config>
 8005606:	4603      	mov	r3, r0
 8005608:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800560c:	e00e      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800560e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005612:	3330      	adds	r3, #48	; 0x30
 8005614:	4618      	mov	r0, r3
 8005616:	f003 fadd 	bl	8008bd4 <RCCEx_PLL3_Config>
 800561a:	4603      	mov	r3, r0
 800561c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005620:	e004      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005628:	e000      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800562a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10d      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005634:	4b99      	ldr	r3, [pc, #612]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800563a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800563e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005642:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005646:	4a95      	ldr	r2, [pc, #596]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005648:	430b      	orrs	r3, r1
 800564a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800564e:	e003      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005650:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005654:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005658:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005664:	63bb      	str	r3, [r7, #56]	; 0x38
 8005666:	2300      	movs	r3, #0
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800566a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800566e:	460b      	mov	r3, r1
 8005670:	4313      	orrs	r3, r2
 8005672:	d04e      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005674:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800567c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005680:	d02e      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8005682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005686:	d827      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005688:	2bc0      	cmp	r3, #192	; 0xc0
 800568a:	d02b      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800568c:	2bc0      	cmp	r3, #192	; 0xc0
 800568e:	d823      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005690:	2b80      	cmp	r3, #128	; 0x80
 8005692:	d017      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8005694:	2b80      	cmp	r3, #128	; 0x80
 8005696:	d81f      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800569c:	2b40      	cmp	r3, #64	; 0x40
 800569e:	d007      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80056a0:	e01a      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a2:	4b7e      	ldr	r3, [pc, #504]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	4a7d      	ldr	r2, [pc, #500]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80056a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ac:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80056ae:	e01a      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056b4:	3308      	adds	r3, #8
 80056b6:	4618      	mov	r0, r3
 80056b8:	f003 f9f4 	bl	8008aa4 <RCCEx_PLL2_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80056c2:	e010      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056c8:	3330      	adds	r3, #48	; 0x30
 80056ca:	4618      	mov	r0, r3
 80056cc:	f003 fa82 	bl	8008bd4 <RCCEx_PLL3_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80056d6:	e006      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80056de:	e002      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80056e0:	bf00      	nop
 80056e2:	e000      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80056e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10d      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80056ee:	4b6b      	ldr	r3, [pc, #428]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80056f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056f4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80056f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005700:	4a66      	ldr	r2, [pc, #408]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005702:	430b      	orrs	r3, r1
 8005704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005708:	e003      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800570e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005712:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800571e:	633b      	str	r3, [r7, #48]	; 0x30
 8005720:	2300      	movs	r3, #0
 8005722:	637b      	str	r3, [r7, #52]	; 0x34
 8005724:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005728:	460b      	mov	r3, r1
 800572a:	4313      	orrs	r3, r2
 800572c:	d055      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800572e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005732:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005736:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800573a:	d031      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800573c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005740:	d82a      	bhi.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005746:	d02d      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800574c:	d824      	bhi.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800574e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005752:	d029      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005754:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005758:	d81e      	bhi.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800575a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575e:	d011      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005764:	d818      	bhi.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d020      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800576a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800576e:	d113      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005770:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005774:	3308      	adds	r3, #8
 8005776:	4618      	mov	r0, r3
 8005778:	f003 f994 	bl	8008aa4 <RCCEx_PLL2_Config>
 800577c:	4603      	mov	r3, r0
 800577e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005782:	e014      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005784:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005788:	3330      	adds	r3, #48	; 0x30
 800578a:	4618      	mov	r0, r3
 800578c:	f003 fa22 	bl	8008bd4 <RCCEx_PLL3_Config>
 8005790:	4603      	mov	r3, r0
 8005792:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005796:	e00a      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800579e:	e006      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80057a0:	bf00      	nop
 80057a2:	e004      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80057a4:	bf00      	nop
 80057a6:	e002      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80057a8:	bf00      	nop
 80057aa:	e000      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80057ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10d      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80057b6:	4b39      	ldr	r3, [pc, #228]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80057b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057bc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80057c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80057c8:	4a34      	ldr	r2, [pc, #208]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80057ca:	430b      	orrs	r3, r1
 80057cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80057d0:	e003      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057d6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80057da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80057e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80057e8:	2300      	movs	r3, #0
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80057f0:	460b      	mov	r3, r1
 80057f2:	4313      	orrs	r3, r2
 80057f4:	d058      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80057f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057fe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005802:	d031      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8005804:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005808:	d82a      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800580a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800580e:	d02d      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8005810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005814:	d824      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005816:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800581a:	d029      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800581c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005820:	d81e      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005826:	d011      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8005828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800582c:	d818      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d020      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8005832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005836:	d113      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005838:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800583c:	3308      	adds	r3, #8
 800583e:	4618      	mov	r0, r3
 8005840:	f003 f930 	bl	8008aa4 <RCCEx_PLL2_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800584a:	e014      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800584c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005850:	3330      	adds	r3, #48	; 0x30
 8005852:	4618      	mov	r0, r3
 8005854:	f003 f9be 	bl	8008bd4 <RCCEx_PLL3_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800585e:	e00a      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005866:	e006      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005868:	bf00      	nop
 800586a:	e004      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800586c:	bf00      	nop
 800586e:	e002      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005876:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800587a:	2b00      	cmp	r3, #0
 800587c:	d110      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800587e:	4b07      	ldr	r3, [pc, #28]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005884:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005888:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800588c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005890:	4902      	ldr	r1, [pc, #8]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005898:	e006      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800589a:	bf00      	nop
 800589c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80058a4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b0:	2100      	movs	r1, #0
 80058b2:	6239      	str	r1, [r7, #32]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80058be:	460b      	mov	r3, r1
 80058c0:	4313      	orrs	r3, r2
 80058c2:	d055      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80058c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058cc:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80058d0:	d031      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80058d2:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80058d6:	d82a      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80058d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058dc:	d02d      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80058de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058e2:	d824      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80058e4:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80058e8:	d029      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80058ea:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80058ee:	d81e      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80058f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f4:	d011      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80058f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fa:	d818      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d020      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8005900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005904:	d113      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005906:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800590a:	3308      	adds	r3, #8
 800590c:	4618      	mov	r0, r3
 800590e:	f003 f8c9 	bl	8008aa4 <RCCEx_PLL2_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005918:	e014      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800591a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800591e:	3330      	adds	r3, #48	; 0x30
 8005920:	4618      	mov	r0, r3
 8005922:	f003 f957 	bl	8008bd4 <RCCEx_PLL3_Config>
 8005926:	4603      	mov	r3, r0
 8005928:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800592c:	e00a      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005934:	e006      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005936:	bf00      	nop
 8005938:	e004      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800593a:	bf00      	nop
 800593c:	e002      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005944:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10d      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800594c:	4b88      	ldr	r3, [pc, #544]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800594e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005952:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8005956:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800595a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800595e:	4984      	ldr	r1, [pc, #528]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005966:	e003      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005968:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800596c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005970:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	2100      	movs	r1, #0
 800597a:	61b9      	str	r1, [r7, #24]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005986:	460b      	mov	r3, r1
 8005988:	4313      	orrs	r3, r2
 800598a:	d03d      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800598c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005990:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005994:	2b03      	cmp	r3, #3
 8005996:	d81c      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8005998:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	080059db 	.word	0x080059db
 80059a4:	080059b1 	.word	0x080059b1
 80059a8:	080059bf 	.word	0x080059bf
 80059ac:	080059db 	.word	0x080059db
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b0:	4b6f      	ldr	r3, [pc, #444]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	4a6e      	ldr	r2, [pc, #440]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80059b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ba:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80059bc:	e00e      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059c2:	3308      	adds	r3, #8
 80059c4:	4618      	mov	r0, r3
 80059c6:	f003 f86d 	bl	8008aa4 <RCCEx_PLL2_Config>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80059d0:	e004      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80059d8:	e000      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80059da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10d      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80059e4:	4b62      	ldr	r3, [pc, #392]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80059e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80059ea:	f023 0203 	bic.w	r2, r3, #3
 80059ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80059f6:	495e      	ldr	r1, [pc, #376]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80059fe:	e003      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a00:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a04:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	2100      	movs	r1, #0
 8005a12:	6139      	str	r1, [r7, #16]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4313      	orrs	r3, r2
 8005a22:	d03a      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a30:	d00e      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8005a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a36:	d815      	bhi.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d017      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8005a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a40:	d110      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a42:	4b4b      	ldr	r3, [pc, #300]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	4a4a      	ldr	r2, [pc, #296]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a4c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005a4e:	e00e      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a54:	3308      	adds	r3, #8
 8005a56:	4618      	mov	r0, r3
 8005a58:	f003 f824 	bl	8008aa4 <RCCEx_PLL2_Config>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005a62:	e004      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005a6a:	e000      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8005a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10d      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005a76:	4b3e      	ldr	r3, [pc, #248]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005a78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a84:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a88:	4939      	ldr	r1, [pc, #228]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8005a90:	e003      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a96:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	f003 0310 	and.w	r3, r3, #16
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	d038      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005ab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005aba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005abe:	2b30      	cmp	r3, #48	; 0x30
 8005ac0:	d01b      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8005ac2:	2b30      	cmp	r3, #48	; 0x30
 8005ac4:	d815      	bhi.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d002      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d007      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8005ace:	e010      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ad0:	4b27      	ldr	r3, [pc, #156]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	4a26      	ldr	r2, [pc, #152]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ada:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005adc:	e00e      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ade:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ae2:	3330      	adds	r3, #48	; 0x30
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f003 f875 	bl	8008bd4 <RCCEx_PLL3_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005af0:	e004      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005af8:	e000      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8005afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005afc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10d      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005b04:	4b1a      	ldr	r3, [pc, #104]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005b06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b12:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005b16:	4916      	ldr	r1, [pc, #88]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005b1e:	e003      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b20:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b24:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	2100      	movs	r1, #0
 8005b32:	6039      	str	r1, [r7, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	607b      	str	r3, [r7, #4]
 8005b3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4313      	orrs	r3, r2
 8005b42:	d00c      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005b44:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005b46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b52:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005b56:	4906      	ldr	r1, [pc, #24]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8005b5e:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b6e:	bf00      	nop
 8005b70:	44020c00 	.word	0x44020c00

08005b74 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b08b      	sub	sp, #44	; 0x2c
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005b7c:	4bad      	ldr	r3, [pc, #692]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b84:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005b86:	4bab      	ldr	r3, [pc, #684]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005b90:	4ba8      	ldr	r3, [pc, #672]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	0a1b      	lsrs	r3, r3, #8
 8005b96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b9a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005b9c:	4ba5      	ldr	r3, [pc, #660]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ba6:	4ba3      	ldr	r3, [pc, #652]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	08db      	lsrs	r3, r3, #3
 8005bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	fb02 f303 	mul.w	r3, r2, r3
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bbe:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 8126 	beq.w	8005e16 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d053      	beq.n	8005c78 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d86f      	bhi.n	8005cb6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d003      	beq.n	8005be4 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d02b      	beq.n	8005c3a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8005be2:	e068      	b.n	8005cb6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005be4:	4b93      	ldr	r3, [pc, #588]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	08db      	lsrs	r3, r3, #3
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	4a92      	ldr	r2, [pc, #584]	; (8005e38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	ee07 3a90 	vmov	s15, r3
 8005bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	ee07 3a90 	vmov	s15, r3
 8005c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c18:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c1c:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005c20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c34:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005c38:	e068      	b.n	8005d0c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	ee07 3a90 	vmov	s15, r3
 8005c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c44:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005e40 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c56:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005c76:	e049      	b.n	8005d0c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c82:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c94:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c98:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005c9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005cb4:	e02a      	b.n	8005d0c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005cb6:	4b5f      	ldr	r3, [pc, #380]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	08db      	lsrs	r3, r3, #3
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	4a5d      	ldr	r2, [pc, #372]	; (8005e38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	ee07 3a90 	vmov	s15, r3
 8005cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cea:	ed97 6a04 	vldr	s12, [r7, #16]
 8005cee:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d06:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005d0a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d0c:	4b49      	ldr	r3, [pc, #292]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d18:	d121      	bne.n	8005d5e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005d1a:	4b46      	ldr	r3, [pc, #280]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d017      	beq.n	8005d56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d26:	4b43      	ldr	r3, [pc, #268]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2a:	0a5b      	lsrs	r3, r3, #9
 8005d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d30:	ee07 3a90 	vmov	s15, r3
 8005d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005d38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005d40:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d4c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	e006      	b.n	8005d64 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	e002      	b.n	8005d64 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d64:	4b33      	ldr	r3, [pc, #204]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d70:	d121      	bne.n	8005db6 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005d72:	4b30      	ldr	r3, [pc, #192]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d017      	beq.n	8005dae <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d7e:	4b2d      	ldr	r3, [pc, #180]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d82:	0c1b      	lsrs	r3, r3, #16
 8005d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d88:	ee07 3a90 	vmov	s15, r3
 8005d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005d90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d94:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005d98:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005da4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	605a      	str	r2, [r3, #4]
 8005dac:	e006      	b.n	8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	605a      	str	r2, [r3, #4]
 8005db4:	e002      	b.n	8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005dbc:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dc8:	d121      	bne.n	8005e0e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005dca:	4b1a      	ldr	r3, [pc, #104]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d017      	beq.n	8005e06 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005dd6:	4b17      	ldr	r3, [pc, #92]	; (8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dda:	0e1b      	lsrs	r3, r3, #24
 8005ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005de8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005df0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dfc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005e04:	e010      	b.n	8005e28 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	609a      	str	r2, [r3, #8]
}
 8005e0c:	e00c      	b.n	8005e28 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	609a      	str	r2, [r3, #8]
}
 8005e14:	e008      	b.n	8005e28 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	609a      	str	r2, [r3, #8]
}
 8005e28:	bf00      	nop
 8005e2a:	372c      	adds	r7, #44	; 0x2c
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	44020c00 	.word	0x44020c00
 8005e38:	03d09000 	.word	0x03d09000
 8005e3c:	46000000 	.word	0x46000000
 8005e40:	4a742400 	.word	0x4a742400
 8005e44:	4af42400 	.word	0x4af42400

08005e48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b08b      	sub	sp, #44	; 0x2c
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005e50:	4bad      	ldr	r3, [pc, #692]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e58:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005e5a:	4bab      	ldr	r3, [pc, #684]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005e64:	4ba8      	ldr	r3, [pc, #672]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	0a1b      	lsrs	r3, r3, #8
 8005e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e6e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005e70:	4ba5      	ldr	r3, [pc, #660]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005e7a:	4ba3      	ldr	r3, [pc, #652]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	08db      	lsrs	r3, r3, #3
 8005e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	fb02 f303 	mul.w	r3, r2, r3
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8126 	beq.w	80060ea <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d053      	beq.n	8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d86f      	bhi.n	8005f8a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d003      	beq.n	8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d02b      	beq.n	8005f0e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8005eb6:	e068      	b.n	8005f8a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005eb8:	4b93      	ldr	r3, [pc, #588]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	08db      	lsrs	r3, r3, #3
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	4a92      	ldr	r2, [pc, #584]	; (800610c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	ee07 3a90 	vmov	s15, r3
 8005ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	ee07 3a90 	vmov	s15, r3
 8005ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eec:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ef0:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005ef4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005efc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005f0c:	e068      	b.n	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	ee07 3a90 	vmov	s15, r3
 8005f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f18:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005f1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005f4a:	e049      	b.n	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f56:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	ee07 3a90 	vmov	s15, r3
 8005f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f68:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f6c:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005f70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f84:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005f88:	e02a      	b.n	8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f8a:	4b5f      	ldr	r3, [pc, #380]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	08db      	lsrs	r3, r3, #3
 8005f90:	f003 0303 	and.w	r3, r3, #3
 8005f94:	4a5d      	ldr	r2, [pc, #372]	; (800610c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005f96:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	ee07 3a90 	vmov	s15, r3
 8005fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fbe:	ed97 6a04 	vldr	s12, [r7, #16]
 8005fc2:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fda:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005fde:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fe0:	4b49      	ldr	r3, [pc, #292]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fec:	d121      	bne.n	8006032 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005fee:	4b46      	ldr	r3, [pc, #280]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d017      	beq.n	800602a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ffa:	4b43      	ldr	r3, [pc, #268]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffe:	0a5b      	lsrs	r3, r3, #9
 8006000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800600c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006010:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006014:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800601c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006020:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	e006      	b.n	8006038 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	e002      	b.n	8006038 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006038:	4b33      	ldr	r3, [pc, #204]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006044:	d121      	bne.n	800608a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006046:	4b30      	ldr	r3, [pc, #192]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d017      	beq.n	8006082 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006052:	4b2d      	ldr	r3, [pc, #180]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006056:	0c1b      	lsrs	r3, r3, #16
 8006058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800605c:	ee07 3a90 	vmov	s15, r3
 8006060:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006064:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006068:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800606c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006078:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	e006      	b.n	8006090 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	605a      	str	r2, [r3, #4]
 8006088:	e002      	b.n	8006090 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006090:	4b1d      	ldr	r3, [pc, #116]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800609c:	d121      	bne.n	80060e2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800609e:	4b1a      	ldr	r3, [pc, #104]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d017      	beq.n	80060da <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060aa:	4b17      	ldr	r3, [pc, #92]	; (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	0e1b      	lsrs	r3, r3, #24
 80060b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b4:	ee07 3a90 	vmov	s15, r3
 80060b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80060bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060c0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80060c4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80060c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060d0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80060d8:	e010      	b.n	80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	609a      	str	r2, [r3, #8]
}
 80060e0:	e00c      	b.n	80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	609a      	str	r2, [r3, #8]
}
 80060e8:	e008      	b.n	80060fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	609a      	str	r2, [r3, #8]
}
 80060fc:	bf00      	nop
 80060fe:	372c      	adds	r7, #44	; 0x2c
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	44020c00 	.word	0x44020c00
 800610c:	03d09000 	.word	0x03d09000
 8006110:	46000000 	.word	0x46000000
 8006114:	4a742400 	.word	0x4a742400
 8006118:	4af42400 	.word	0x4af42400

0800611c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800611c:	b480      	push	{r7}
 800611e:	b08b      	sub	sp, #44	; 0x2c
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006124:	4bad      	ldr	r3, [pc, #692]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800612e:	4bab      	ldr	r3, [pc, #684]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006138:	4ba8      	ldr	r3, [pc, #672]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800613a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613c:	0a1b      	lsrs	r3, r3, #8
 800613e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006142:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006144:	4ba5      	ldr	r3, [pc, #660]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800614e:	4ba3      	ldr	r3, [pc, #652]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006152:	08db      	lsrs	r3, r3, #3
 8006154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	fb02 f303 	mul.w	r3, r2, r3
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 8126 	beq.w	80063be <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	2b03      	cmp	r3, #3
 8006176:	d053      	beq.n	8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	2b03      	cmp	r3, #3
 800617c:	d86f      	bhi.n	800625e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d003      	beq.n	800618c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	2b02      	cmp	r3, #2
 8006188:	d02b      	beq.n	80061e2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800618a:	e068      	b.n	800625e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800618c:	4b93      	ldr	r3, [pc, #588]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	08db      	lsrs	r3, r3, #3
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	4a92      	ldr	r2, [pc, #584]	; (80063e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006198:	fa22 f303 	lsr.w	r3, r2, r3
 800619c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	ee07 3a90 	vmov	s15, r3
 80061a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c0:	ed97 6a04 	vldr	s12, [r7, #16]
 80061c4:	eddf 5a87 	vldr	s11, [pc, #540]	; 80063e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80061c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80061e0:	e068      	b.n	80062b4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ec:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80061f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8006202:	eddf 5a78 	vldr	s11, [pc, #480]	; 80063e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800620a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800620e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800621a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800621e:	e049      	b.n	80062b4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622a:	eddf 6a70 	vldr	s13, [pc, #448]	; 80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800622e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	ee07 3a90 	vmov	s15, r3
 8006238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006240:	eddf 5a68 	vldr	s11, [pc, #416]	; 80063e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006258:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800625c:	e02a      	b.n	80062b4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800625e:	4b5f      	ldr	r3, [pc, #380]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	08db      	lsrs	r3, r3, #3
 8006264:	f003 0303 	and.w	r3, r3, #3
 8006268:	4a5d      	ldr	r2, [pc, #372]	; (80063e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800626a:	fa22 f303 	lsr.w	r3, r2, r3
 800626e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	ee07 3a90 	vmov	s15, r3
 8006280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	ee07 3a90 	vmov	s15, r3
 800628e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006292:	ed97 6a04 	vldr	s12, [r7, #16]
 8006296:	eddf 5a53 	vldr	s11, [pc, #332]	; 80063e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800629a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800629e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80062b2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80062b4:	4b49      	ldr	r3, [pc, #292]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062c0:	d121      	bne.n	8006306 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80062c2:	4b46      	ldr	r3, [pc, #280]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d017      	beq.n	80062fe <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80062ce:	4b43      	ldr	r3, [pc, #268]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80062d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d2:	0a5b      	lsrs	r3, r3, #9
 80062d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d8:	ee07 3a90 	vmov	s15, r3
 80062dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80062e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062e4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80062e8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80062ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	e006      	b.n	800630c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	e002      	b.n	800630c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800630c:	4b33      	ldr	r3, [pc, #204]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006318:	d121      	bne.n	800635e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800631a:	4b30      	ldr	r3, [pc, #192]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d017      	beq.n	8006356 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006326:	4b2d      	ldr	r3, [pc, #180]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632a:	0c1b      	lsrs	r3, r3, #16
 800632c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006330:	ee07 3a90 	vmov	s15, r3
 8006334:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006338:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800633c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006340:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800634c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	605a      	str	r2, [r3, #4]
 8006354:	e006      	b.n	8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	605a      	str	r2, [r3, #4]
 800635c:	e002      	b.n	8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006364:	4b1d      	ldr	r3, [pc, #116]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800636c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006370:	d121      	bne.n	80063b6 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006372:	4b1a      	ldr	r3, [pc, #104]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d017      	beq.n	80063ae <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800637e:	4b17      	ldr	r3, [pc, #92]	; (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	0e1b      	lsrs	r3, r3, #24
 8006384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006388:	ee07 3a90 	vmov	s15, r3
 800638c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006394:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006398:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800639c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063a4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80063ac:	e010      	b.n	80063d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	609a      	str	r2, [r3, #8]
}
 80063b4:	e00c      	b.n	80063d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	609a      	str	r2, [r3, #8]
}
 80063bc:	e008      	b.n	80063d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	609a      	str	r2, [r3, #8]
}
 80063d0:	bf00      	nop
 80063d2:	372c      	adds	r7, #44	; 0x2c
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	44020c00 	.word	0x44020c00
 80063e0:	03d09000 	.word	0x03d09000
 80063e4:	46000000 	.word	0x46000000
 80063e8:	4a742400 	.word	0x4a742400
 80063ec:	4af42400 	.word	0x4af42400

080063f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80063f0:	b590      	push	{r4, r7, lr}
 80063f2:	b08f      	sub	sp, #60	; 0x3c
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80063fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063fe:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8006402:	4321      	orrs	r1, r4
 8006404:	d150      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006406:	4b26      	ldr	r3, [pc, #152]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800640c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006410:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006412:	4b23      	ldr	r3, [pc, #140]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b02      	cmp	r3, #2
 800641e:	d108      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006426:	d104      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642c:	637b      	str	r3, [r7, #52]	; 0x34
 800642e:	f002 bb2a 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006432:	4b1b      	ldr	r3, [pc, #108]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800643c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006440:	d108      	bne.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006448:	d104      	bne.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800644a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800644e:	637b      	str	r3, [r7, #52]	; 0x34
 8006450:	f002 bb19 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006454:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006460:	d119      	bne.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006468:	d115      	bne.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800646a:	4b0d      	ldr	r3, [pc, #52]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8006472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006476:	d30a      	bcc.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006478:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	0a1b      	lsrs	r3, r3, #8
 800647e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006482:	4a08      	ldr	r2, [pc, #32]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006484:	fbb2 f3f3 	udiv	r3, r2, r3
 8006488:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800648a:	f002 bafc 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006492:	f002 baf8 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	637b      	str	r3, [r7, #52]	; 0x34
 800649a:	f002 baf4 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800649e:	bf00      	nop
 80064a0:	44020c00 	.word	0x44020c00
 80064a4:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80064a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064ac:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80064b0:	ea50 0104 	orrs.w	r1, r0, r4
 80064b4:	f001 8275 	beq.w	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80064b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064bc:	2801      	cmp	r0, #1
 80064be:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 80064c2:	f082 82dd 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80064c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064ca:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 80064ce:	ea50 0104 	orrs.w	r1, r0, r4
 80064d2:	f001 816c 	beq.w	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80064d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064da:	2801      	cmp	r0, #1
 80064dc:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 80064e0:	f082 82ce 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80064e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064e8:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 80064ec:	ea50 0104 	orrs.w	r1, r0, r4
 80064f0:	f001 8602 	beq.w	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80064f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064f8:	2801      	cmp	r0, #1
 80064fa:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 80064fe:	f082 82bf 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006502:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006506:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800650a:	ea50 0104 	orrs.w	r1, r0, r4
 800650e:	f001 854c 	beq.w	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8006512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006516:	2801      	cmp	r0, #1
 8006518:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800651c:	f082 82b0 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006524:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8006528:	ea50 0104 	orrs.w	r1, r0, r4
 800652c:	f001 849e 	beq.w	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8006530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006534:	2801      	cmp	r0, #1
 8006536:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800653a:	f082 82a1 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800653e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006542:	f1a1 0420 	sub.w	r4, r1, #32
 8006546:	ea50 0104 	orrs.w	r1, r0, r4
 800654a:	f001 83e8 	beq.w	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800654e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006552:	2801      	cmp	r0, #1
 8006554:	f171 0120 	sbcs.w	r1, r1, #32
 8006558:	f082 8292 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800655c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006560:	f1a1 0410 	sub.w	r4, r1, #16
 8006564:	ea50 0104 	orrs.w	r1, r0, r4
 8006568:	f002 8256 	beq.w	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800656c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006570:	2801      	cmp	r0, #1
 8006572:	f171 0110 	sbcs.w	r1, r1, #16
 8006576:	f082 8283 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800657a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800657e:	f1a1 0408 	sub.w	r4, r1, #8
 8006582:	ea50 0104 	orrs.w	r1, r0, r4
 8006586:	f002 81cc 	beq.w	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800658a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800658e:	2801      	cmp	r0, #1
 8006590:	f171 0108 	sbcs.w	r1, r1, #8
 8006594:	f082 8274 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006598:	e9d7 0100 	ldrd	r0, r1, [r7]
 800659c:	1f0c      	subs	r4, r1, #4
 800659e:	ea50 0104 	orrs.w	r1, r0, r4
 80065a2:	f001 8648 	beq.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80065a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065aa:	2801      	cmp	r0, #1
 80065ac:	f171 0104 	sbcs.w	r1, r1, #4
 80065b0:	f082 8266 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80065b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065b8:	1e8c      	subs	r4, r1, #2
 80065ba:	ea50 0104 	orrs.w	r1, r0, r4
 80065be:	f002 8143 	beq.w	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80065c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065c6:	2801      	cmp	r0, #1
 80065c8:	f171 0102 	sbcs.w	r1, r1, #2
 80065cc:	f082 8258 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80065d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065d4:	1e4c      	subs	r4, r1, #1
 80065d6:	ea50 0104 	orrs.w	r1, r0, r4
 80065da:	f002 80ce 	beq.w	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80065de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065e2:	2801      	cmp	r0, #1
 80065e4:	f171 0101 	sbcs.w	r1, r1, #1
 80065e8:	f082 824a 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80065ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065f0:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 80065f4:	4321      	orrs	r1, r4
 80065f6:	f002 8059 	beq.w	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80065fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065fe:	4cd9      	ldr	r4, [pc, #868]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006600:	42a0      	cmp	r0, r4
 8006602:	f171 0100 	sbcs.w	r1, r1, #0
 8006606:	f082 823b 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800660a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800660e:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8006612:	4321      	orrs	r1, r4
 8006614:	f001 87d9 	beq.w	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8006618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800661c:	4cd2      	ldr	r4, [pc, #840]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800661e:	42a0      	cmp	r0, r4
 8006620:	f171 0100 	sbcs.w	r1, r1, #0
 8006624:	f082 822c 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006628:	e9d7 0100 	ldrd	r0, r1, [r7]
 800662c:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8006630:	4321      	orrs	r1, r4
 8006632:	f001 8751 	beq.w	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8006636:	e9d7 0100 	ldrd	r0, r1, [r7]
 800663a:	4ccc      	ldr	r4, [pc, #816]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800663c:	42a0      	cmp	r0, r4
 800663e:	f171 0100 	sbcs.w	r1, r1, #0
 8006642:	f082 821d 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006646:	e9d7 0100 	ldrd	r0, r1, [r7]
 800664a:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 800664e:	4321      	orrs	r1, r4
 8006650:	f001 869a 	beq.w	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8006654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006658:	4cc5      	ldr	r4, [pc, #788]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800665a:	42a0      	cmp	r0, r4
 800665c:	f171 0100 	sbcs.w	r1, r1, #0
 8006660:	f082 820e 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006664:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006668:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 800666c:	4321      	orrs	r1, r4
 800666e:	f001 8612 	beq.w	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8006672:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006676:	4cbf      	ldr	r4, [pc, #764]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8006678:	42a0      	cmp	r0, r4
 800667a:	f171 0100 	sbcs.w	r1, r1, #0
 800667e:	f082 81ff 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006686:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800668a:	4321      	orrs	r1, r4
 800668c:	f002 817e 	beq.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8006690:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006694:	4cb8      	ldr	r4, [pc, #736]	; (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006696:	42a0      	cmp	r0, r4
 8006698:	f171 0100 	sbcs.w	r1, r1, #0
 800669c:	f082 81f0 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80066a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066a4:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 80066a8:	4321      	orrs	r1, r4
 80066aa:	f000 829e 	beq.w	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80066ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066b2:	4cb2      	ldr	r4, [pc, #712]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80066b4:	42a0      	cmp	r0, r4
 80066b6:	f171 0100 	sbcs.w	r1, r1, #0
 80066ba:	f082 81e1 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80066be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066c2:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 80066c6:	4321      	orrs	r1, r4
 80066c8:	f000 826d 	beq.w	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80066cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066d0:	4cab      	ldr	r4, [pc, #684]	; (8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066d2:	42a0      	cmp	r0, r4
 80066d4:	f171 0100 	sbcs.w	r1, r1, #0
 80066d8:	f082 81d2 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80066dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066e0:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 80066e4:	4321      	orrs	r1, r4
 80066e6:	f001 800d 	beq.w	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80066ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066ee:	4ca5      	ldr	r4, [pc, #660]	; (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80066f0:	42a0      	cmp	r0, r4
 80066f2:	f171 0100 	sbcs.w	r1, r1, #0
 80066f6:	f082 81c3 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80066fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066fe:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8006702:	4321      	orrs	r1, r4
 8006704:	f000 81d0 	beq.w	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006708:	e9d7 0100 	ldrd	r0, r1, [r7]
 800670c:	4c9e      	ldr	r4, [pc, #632]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800670e:	42a0      	cmp	r0, r4
 8006710:	f171 0100 	sbcs.w	r1, r1, #0
 8006714:	f082 81b4 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800671c:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8006720:	4321      	orrs	r1, r4
 8006722:	f000 8142 	beq.w	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8006726:	e9d7 0100 	ldrd	r0, r1, [r7]
 800672a:	4c98      	ldr	r4, [pc, #608]	; (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800672c:	42a0      	cmp	r0, r4
 800672e:	f171 0100 	sbcs.w	r1, r1, #0
 8006732:	f082 81a5 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800673a:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 800673e:	4321      	orrs	r1, r4
 8006740:	f001 824e 	beq.w	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8006744:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006748:	4c91      	ldr	r4, [pc, #580]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800674a:	42a0      	cmp	r0, r4
 800674c:	f171 0100 	sbcs.w	r1, r1, #0
 8006750:	f082 8196 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006754:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006758:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 800675c:	4321      	orrs	r1, r4
 800675e:	f001 8197 	beq.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8006762:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006766:	4c8b      	ldr	r4, [pc, #556]	; (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006768:	42a0      	cmp	r0, r4
 800676a:	f171 0100 	sbcs.w	r1, r1, #0
 800676e:	f082 8187 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006772:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006776:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 800677a:	4321      	orrs	r1, r4
 800677c:	f001 8154 	beq.w	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8006780:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006784:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8006788:	f171 0100 	sbcs.w	r1, r1, #0
 800678c:	f082 8178 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006794:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8006798:	4321      	orrs	r1, r4
 800679a:	f001 80b7 	beq.w	800790c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800679e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067a2:	f248 0401 	movw	r4, #32769	; 0x8001
 80067a6:	42a0      	cmp	r0, r4
 80067a8:	f171 0100 	sbcs.w	r1, r1, #0
 80067ac:	f082 8168 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80067b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067b4:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 80067b8:	4321      	orrs	r1, r4
 80067ba:	f001 8064 	beq.w	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80067be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067c2:	f244 0401 	movw	r4, #16385	; 0x4001
 80067c6:	42a0      	cmp	r0, r4
 80067c8:	f171 0100 	sbcs.w	r1, r1, #0
 80067cc:	f082 8158 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80067d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067d4:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 80067d8:	4321      	orrs	r1, r4
 80067da:	f001 8011 	beq.w	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80067de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067e2:	f242 0401 	movw	r4, #8193	; 0x2001
 80067e6:	42a0      	cmp	r0, r4
 80067e8:	f171 0100 	sbcs.w	r1, r1, #0
 80067ec:	f082 8148 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80067f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067f4:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 80067f8:	4321      	orrs	r1, r4
 80067fa:	f000 871e 	beq.w	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80067fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006802:	f241 0401 	movw	r4, #4097	; 0x1001
 8006806:	42a0      	cmp	r0, r4
 8006808:	f171 0100 	sbcs.w	r1, r1, #0
 800680c:	f082 8138 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006810:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006814:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8006818:	4321      	orrs	r1, r4
 800681a:	f000 86a8 	beq.w	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800681e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006822:	f640 0401 	movw	r4, #2049	; 0x801
 8006826:	42a0      	cmp	r0, r4
 8006828:	f171 0100 	sbcs.w	r1, r1, #0
 800682c:	f082 8128 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006830:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006834:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8006838:	4321      	orrs	r1, r4
 800683a:	f000 8632 	beq.w	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800683e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006842:	f240 4401 	movw	r4, #1025	; 0x401
 8006846:	42a0      	cmp	r0, r4
 8006848:	f171 0100 	sbcs.w	r1, r1, #0
 800684c:	f082 8118 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006850:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006854:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8006858:	4321      	orrs	r1, r4
 800685a:	f000 85b0 	beq.w	80073be <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800685e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006862:	f240 2401 	movw	r4, #513	; 0x201
 8006866:	42a0      	cmp	r0, r4
 8006868:	f171 0100 	sbcs.w	r1, r1, #0
 800686c:	f082 8108 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006874:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8006878:	4321      	orrs	r1, r4
 800687a:	f000 8535 	beq.w	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800687e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006882:	f240 1401 	movw	r4, #257	; 0x101
 8006886:	42a0      	cmp	r0, r4
 8006888:	f171 0100 	sbcs.w	r1, r1, #0
 800688c:	f082 80f8 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006894:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8006898:	4321      	orrs	r1, r4
 800689a:	f000 84ba 	beq.w	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800689e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068a2:	2881      	cmp	r0, #129	; 0x81
 80068a4:	f171 0100 	sbcs.w	r1, r1, #0
 80068a8:	f082 80ea 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068b0:	2821      	cmp	r0, #33	; 0x21
 80068b2:	f171 0100 	sbcs.w	r1, r1, #0
 80068b6:	d26f      	bcs.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80068b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068bc:	4301      	orrs	r1, r0
 80068be:	f002 80df 	beq.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068c6:	1e42      	subs	r2, r0, #1
 80068c8:	f141 33ff 	adc.w	r3, r1, #4294967295
 80068cc:	2a20      	cmp	r2, #32
 80068ce:	f173 0100 	sbcs.w	r1, r3, #0
 80068d2:	f082 80d5 	bcs.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068d6:	2a1f      	cmp	r2, #31
 80068d8:	f202 80d2 	bhi.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068dc:	a101      	add	r1, pc, #4	; (adr r1, 80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80068de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	08006c45 	.word	0x08006c45
 80068e8:	08006d11 	.word	0x08006d11
 80068ec:	08008a81 	.word	0x08008a81
 80068f0:	08006dd1 	.word	0x08006dd1
 80068f4:	08008a81 	.word	0x08008a81
 80068f8:	08008a81 	.word	0x08008a81
 80068fc:	08008a81 	.word	0x08008a81
 8006900:	08006ea1 	.word	0x08006ea1
 8006904:	08008a81 	.word	0x08008a81
 8006908:	08008a81 	.word	0x08008a81
 800690c:	08008a81 	.word	0x08008a81
 8006910:	08008a81 	.word	0x08008a81
 8006914:	08008a81 	.word	0x08008a81
 8006918:	08008a81 	.word	0x08008a81
 800691c:	08008a81 	.word	0x08008a81
 8006920:	08006f83 	.word	0x08006f83
 8006924:	08008a81 	.word	0x08008a81
 8006928:	08008a81 	.word	0x08008a81
 800692c:	08008a81 	.word	0x08008a81
 8006930:	08008a81 	.word	0x08008a81
 8006934:	08008a81 	.word	0x08008a81
 8006938:	08008a81 	.word	0x08008a81
 800693c:	08008a81 	.word	0x08008a81
 8006940:	08008a81 	.word	0x08008a81
 8006944:	08008a81 	.word	0x08008a81
 8006948:	08008a81 	.word	0x08008a81
 800694c:	08008a81 	.word	0x08008a81
 8006950:	08008a81 	.word	0x08008a81
 8006954:	08008a81 	.word	0x08008a81
 8006958:	08008a81 	.word	0x08008a81
 800695c:	08008a81 	.word	0x08008a81
 8006960:	08007059 	.word	0x08007059
 8006964:	80000001 	.word	0x80000001
 8006968:	40000001 	.word	0x40000001
 800696c:	20000001 	.word	0x20000001
 8006970:	10000001 	.word	0x10000001
 8006974:	08000001 	.word	0x08000001
 8006978:	04000001 	.word	0x04000001
 800697c:	00800001 	.word	0x00800001
 8006980:	00400001 	.word	0x00400001
 8006984:	00200001 	.word	0x00200001
 8006988:	00100001 	.word	0x00100001
 800698c:	00080001 	.word	0x00080001
 8006990:	00040001 	.word	0x00040001
 8006994:	00020001 	.word	0x00020001
 8006998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800699c:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80069a0:	430b      	orrs	r3, r1
 80069a2:	f000 83c4 	beq.w	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80069a6:	f002 b86b 	b.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80069aa:	4ba1      	ldr	r3, [pc, #644]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069b0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80069b4:	633b      	str	r3, [r7, #48]	; 0x30
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069bc:	d036      	beq.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069c4:	d86b      	bhi.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069cc:	d02b      	beq.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069d4:	d863      	bhi.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069dc:	d01b      	beq.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80069de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069e4:	d85b      	bhi.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d004      	beq.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f2:	d008      	beq.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80069f4:	e053      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069f6:	f107 0320 	add.w	r3, r7, #32
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff f8ba 	bl	8005b74 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a04:	e04e      	b.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a06:	f107 0314 	add.w	r3, r7, #20
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff fa1c 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a14:	e046      	b.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a16:	f107 0308 	add.w	r3, r7, #8
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff fb7e 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a24:	e03e      	b.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006a26:	4b83      	ldr	r3, [pc, #524]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a2a:	e03b      	b.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a2c:	4b80      	ldr	r3, [pc, #512]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a32:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006a36:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a38:	4b7d      	ldr	r3, [pc, #500]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d10c      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8006a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a4a:	4b79      	ldr	r3, [pc, #484]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	08db      	lsrs	r3, r3, #3
 8006a50:	f003 0303 	and.w	r3, r3, #3
 8006a54:	4a78      	ldr	r2, [pc, #480]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006a56:	fa22 f303 	lsr.w	r3, r2, r3
 8006a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5c:	e01e      	b.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a5e:	4b74      	ldr	r3, [pc, #464]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a6a:	d106      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a72:	d102      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006a74:	4b71      	ldr	r3, [pc, #452]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006a76:	637b      	str	r3, [r7, #52]	; 0x34
 8006a78:	e010      	b.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a7a:	4b6d      	ldr	r3, [pc, #436]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a86:	d106      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a8e:	d102      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006a90:	4b6b      	ldr	r3, [pc, #428]	; (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006a92:	637b      	str	r3, [r7, #52]	; 0x34
 8006a94:	e002      	b.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006a9a:	e003      	b.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8006a9c:	e002      	b.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006aa2:	bf00      	nop
          }
        }
        break;
 8006aa4:	f001 bfef 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006aa8:	4b61      	ldr	r3, [pc, #388]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006aaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006aae:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006ab2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aba:	d036      	beq.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ac2:	d86b      	bhi.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006aca:	d02b      	beq.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006ad2:	d863      	bhi.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ada:	d01b      	beq.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ae2:	d85b      	bhi.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d004      	beq.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006af0:	d008      	beq.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8006af2:	e053      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006af4:	f107 0320 	add.w	r3, r7, #32
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff f83b 	bl	8005b74 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b02:	e04e      	b.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b04:	f107 0314 	add.w	r3, r7, #20
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff f99d 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b12:	e046      	b.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b14:	f107 0308 	add.w	r3, r7, #8
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff faff 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b22:	e03e      	b.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006b24:	4b43      	ldr	r3, [pc, #268]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b28:	e03b      	b.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b2a:	4b41      	ldr	r3, [pc, #260]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b30:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006b34:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b36:	4b3e      	ldr	r3, [pc, #248]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d10c      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d109      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b48:	4b39      	ldr	r3, [pc, #228]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	08db      	lsrs	r3, r3, #3
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	4a39      	ldr	r2, [pc, #228]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006b54:	fa22 f303 	lsr.w	r3, r2, r3
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34
 8006b5a:	e01e      	b.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b5c:	4b34      	ldr	r3, [pc, #208]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b68:	d106      	bne.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b70:	d102      	bne.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006b72:	4b32      	ldr	r3, [pc, #200]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006b74:	637b      	str	r3, [r7, #52]	; 0x34
 8006b76:	e010      	b.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b78:	4b2d      	ldr	r3, [pc, #180]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b84:	d106      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b8c:	d102      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006b8e:	4b2c      	ldr	r3, [pc, #176]	; (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
 8006b92:	e002      	b.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006b98:	e003      	b.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8006b9a:	e002      	b.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ba0:	bf00      	nop
          }
        }
        break;
 8006ba2:	f001 bf70 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006ba6:	4b22      	ldr	r3, [pc, #136]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ba8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb0:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d108      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bb8:	f107 0320 	add.w	r3, r7, #32
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fe ffd9 	bl	8005b74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bc6:	f001 bf5e 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	2b40      	cmp	r3, #64	; 0x40
 8006bce:	d108      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bd0:	f107 0314 	add.w	r3, r7, #20
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff f937 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bde:	f001 bf52 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006be6:	f001 bf4e 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8006bea:	4b11      	ldr	r3, [pc, #68]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006bec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf4:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d108      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bfc:	f107 0320 	add.w	r3, r7, #32
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fe ffb7 	bl	8005b74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c0a:	f001 bf3c 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	2b80      	cmp	r3, #128	; 0x80
 8006c12:	d108      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c14:	f107 0314 	add.w	r3, r7, #20
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff f915 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c22:	f001 bf30 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c2a:	f001 bf2c 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c2e:	bf00      	nop
 8006c30:	44020c00 	.word	0x44020c00
 8006c34:	00bb8000 	.word	0x00bb8000
 8006c38:	03d09000 	.word	0x03d09000
 8006c3c:	003d0900 	.word	0x003d0900
 8006c40:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006c44:	4b9d      	ldr	r3, [pc, #628]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006c46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d104      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006c56:	f7fc ff9f 	bl	8003b98 <HAL_RCC_GetPCLK2Freq>
 8006c5a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c5c:	f001 bf13 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006c60:	4b96      	ldr	r3, [pc, #600]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c6c:	d10a      	bne.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d107      	bne.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c74:	f107 0314 	add.w	r3, r7, #20
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff f8e5 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	637b      	str	r3, [r7, #52]	; 0x34
 8006c82:	e043      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006c84:	4b8d      	ldr	r3, [pc, #564]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c90:	d10a      	bne.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8006c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d107      	bne.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c98:	f107 0308 	add.w	r3, r7, #8
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff fa3d 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca6:	e031      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006ca8:	4b84      	ldr	r3, [pc, #528]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d10c      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d109      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cba:	4b80      	ldr	r3, [pc, #512]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	08db      	lsrs	r3, r3, #3
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	4a7e      	ldr	r2, [pc, #504]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cca:	637b      	str	r3, [r7, #52]	; 0x34
 8006ccc:	e01e      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006cce:	4b7b      	ldr	r3, [pc, #492]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cda:	d105      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d102      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8006ce2:	4b78      	ldr	r3, [pc, #480]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce6:	e011      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006ce8:	4b74      	ldr	r3, [pc, #464]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d106      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	2b05      	cmp	r3, #5
 8006cfa:	d103      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d00:	637b      	str	r3, [r7, #52]	; 0x34
 8006d02:	e003      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d08:	f001 bebd 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d0c:	f001 bebb 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006d10:	4b6a      	ldr	r3, [pc, #424]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006d16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d1a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d104      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d22:	f7fc ff23 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8006d26:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d28:	f001 bead 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006d2c:	4b63      	ldr	r3, [pc, #396]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d38:	d10a      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d107      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d40:	f107 0314 	add.w	r3, r7, #20
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff f87f 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d4e:	e03d      	b.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	2b10      	cmp	r3, #16
 8006d54:	d108      	bne.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d56:	f107 0308 	add.w	r3, r7, #8
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff f9de 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d64:	f001 be8f 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006d68:	4b54      	ldr	r3, [pc, #336]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d10c      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	2b18      	cmp	r3, #24
 8006d78:	d109      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d7a:	4b50      	ldr	r3, [pc, #320]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	08db      	lsrs	r3, r3, #3
 8006d80:	f003 0303 	and.w	r3, r3, #3
 8006d84:	4a4e      	ldr	r2, [pc, #312]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006d86:	fa22 f303 	lsr.w	r3, r2, r3
 8006d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d8c:	e01e      	b.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8006d8e:	4b4b      	ldr	r3, [pc, #300]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d9a:	d105      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	2b20      	cmp	r3, #32
 8006da0:	d102      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8006da2:	4b48      	ldr	r3, [pc, #288]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006da4:	637b      	str	r3, [r7, #52]	; 0x34
 8006da6:	e011      	b.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006da8:	4b44      	ldr	r3, [pc, #272]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d106      	bne.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	2b28      	cmp	r3, #40	; 0x28
 8006dba:	d103      	bne.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8006dbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc2:	e003      	b.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dc8:	f001 be5d 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006dcc:	f001 be5b 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006dd0:	4b3a      	ldr	r3, [pc, #232]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006dd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006dd6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006dda:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d104      	bne.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006de2:	f7fc fec3 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8006de6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006de8:	f001 be4d 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006dec:	4b33      	ldr	r3, [pc, #204]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df8:	d10a      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	2b40      	cmp	r3, #64	; 0x40
 8006dfe:	d107      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e00:	f107 0314 	add.w	r3, r7, #20
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff f81f 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e0e:	e045      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006e10:	4b2a      	ldr	r3, [pc, #168]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e1c:	d10a      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	2b80      	cmp	r3, #128	; 0x80
 8006e22:	d107      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e24:	f107 0308 	add.w	r3, r7, #8
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7ff f977 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
 8006e32:	e033      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006e34:	4b21      	ldr	r3, [pc, #132]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d10c      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	2bc0      	cmp	r3, #192	; 0xc0
 8006e44:	d109      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e46:	4b1d      	ldr	r3, [pc, #116]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	08db      	lsrs	r3, r3, #3
 8006e4c:	f003 0303 	and.w	r3, r3, #3
 8006e50:	4a1b      	ldr	r2, [pc, #108]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006e52:	fa22 f303 	lsr.w	r3, r2, r3
 8006e56:	637b      	str	r3, [r7, #52]	; 0x34
 8006e58:	e020      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006e5a:	4b18      	ldr	r3, [pc, #96]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e66:	d106      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6e:	d102      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8006e70:	4b14      	ldr	r3, [pc, #80]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006e72:	637b      	str	r3, [r7, #52]	; 0x34
 8006e74:	e012      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006e76:	4b11      	ldr	r3, [pc, #68]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d107      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006e8a:	d103      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8006e8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34
 8006e92:	e003      	b.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e98:	f001 bdf5 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e9c:	f001 bdf3 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006ea0:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006ea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006ea6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006eaa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10a      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006eb2:	f7fc fe5b 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8006eb6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006eb8:	f001 bde5 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ebc:	44020c00 	.word	0x44020c00
 8006ec0:	03d09000 	.word	0x03d09000
 8006ec4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006ec8:	4ba0      	ldr	r3, [pc, #640]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ed4:	d10b      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006edc:	d107      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ede:	f107 0314 	add.w	r3, r7, #20
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fe ffb0 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
 8006eec:	e047      	b.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8006eee:	4b97      	ldr	r3, [pc, #604]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006efa:	d10b      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f02:	d107      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f04:	f107 0308 	add.w	r3, r7, #8
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff f907 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	637b      	str	r3, [r7, #52]	; 0x34
 8006f12:	e034      	b.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006f14:	4b8d      	ldr	r3, [pc, #564]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d10d      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006f26:	d109      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f28:	4b88      	ldr	r3, [pc, #544]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	08db      	lsrs	r3, r3, #3
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	4a87      	ldr	r2, [pc, #540]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006f34:	fa22 f303 	lsr.w	r3, r2, r3
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
 8006f3a:	e020      	b.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006f3c:	4b83      	ldr	r3, [pc, #524]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f48:	d106      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f50:	d102      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8006f52:	4b80      	ldr	r3, [pc, #512]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006f54:	637b      	str	r3, [r7, #52]	; 0x34
 8006f56:	e012      	b.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006f58:	4b7c      	ldr	r3, [pc, #496]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d107      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006f6c:	d103      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8006f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f72:	637b      	str	r3, [r7, #52]	; 0x34
 8006f74:	e003      	b.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f7a:	f001 bd84 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f7e:	f001 bd82 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006f82:	4b72      	ldr	r3, [pc, #456]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f88:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006f8c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d104      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f94:	f7fc fdea 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8006f98:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f9a:	f001 bd74 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8006f9e:	4b6b      	ldr	r3, [pc, #428]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006faa:	d10b      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb2:	d107      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fb4:	f107 0314 	add.w	r3, r7, #20
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fe ff45 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fc2:	e047      	b.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8006fc4:	4b61      	ldr	r3, [pc, #388]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fd0:	d10b      	bne.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fd8:	d107      	bne.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fda:	f107 0308 	add.w	r3, r7, #8
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff f89c 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8006fe8:	e034      	b.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006fea:	4b58      	ldr	r3, [pc, #352]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d10d      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ffc:	d109      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ffe:	4b53      	ldr	r3, [pc, #332]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	08db      	lsrs	r3, r3, #3
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	4a51      	ldr	r2, [pc, #324]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800700a:	fa22 f303 	lsr.w	r3, r2, r3
 800700e:	637b      	str	r3, [r7, #52]	; 0x34
 8007010:	e020      	b.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007012:	4b4e      	ldr	r3, [pc, #312]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800701a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800701e:	d106      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007026:	d102      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007028:	4b4a      	ldr	r3, [pc, #296]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
 800702c:	e012      	b.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800702e:	4b47      	ldr	r3, [pc, #284]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b02      	cmp	r3, #2
 800703a:	d107      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007042:	d103      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8007044:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007048:	637b      	str	r3, [r7, #52]	; 0x34
 800704a:	e003      	b.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007050:	f001 bd19 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007054:	f001 bd17 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007058:	4b3c      	ldr	r3, [pc, #240]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800705a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800705e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8007062:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800706a:	f7fc fd7f 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 800706e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007070:	f001 bd09 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007074:	4b35      	ldr	r3, [pc, #212]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800707c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007080:	d10b      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007088:	d107      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800708a:	f107 0314 	add.w	r3, r7, #20
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe feda 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	637b      	str	r3, [r7, #52]	; 0x34
 8007098:	e047      	b.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800709a:	4b2c      	ldr	r3, [pc, #176]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070a6:	d10b      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ae:	d107      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070b0:	f107 0308 	add.w	r3, r7, #8
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff f831 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	637b      	str	r3, [r7, #52]	; 0x34
 80070be:	e034      	b.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80070c0:	4b22      	ldr	r3, [pc, #136]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d10d      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80070cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ce:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80070d2:	d109      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070d4:	4b1d      	ldr	r3, [pc, #116]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	08db      	lsrs	r3, r3, #3
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	4a1c      	ldr	r2, [pc, #112]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80070e0:	fa22 f303 	lsr.w	r3, r2, r3
 80070e4:	637b      	str	r3, [r7, #52]	; 0x34
 80070e6:	e020      	b.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80070e8:	4b18      	ldr	r3, [pc, #96]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070f4:	d106      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070fc:	d102      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80070fe:	4b15      	ldr	r3, [pc, #84]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007100:	637b      	str	r3, [r7, #52]	; 0x34
 8007102:	e012      	b.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007104:	4b11      	ldr	r3, [pc, #68]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b02      	cmp	r3, #2
 8007110:	d107      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007118:	d103      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800711a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800711e:	637b      	str	r3, [r7, #52]	; 0x34
 8007120:	e003      	b.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007126:	f001 bcae 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800712a:	f001 bcac 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800712e:	4b07      	ldr	r3, [pc, #28]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007130:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007134:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8007138:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10b      	bne.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007140:	f7fc fd14 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8007144:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8007146:	f001 bc9e 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800714a:	bf00      	nop
 800714c:	44020c00 	.word	0x44020c00
 8007150:	03d09000 	.word	0x03d09000
 8007154:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8007158:	4ba0      	ldr	r3, [pc, #640]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007164:	d10b      	bne.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800716c:	d107      	bne.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800716e:	f107 0314 	add.w	r3, r7, #20
 8007172:	4618      	mov	r0, r3
 8007174:	f7fe fe68 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	637b      	str	r3, [r7, #52]	; 0x34
 800717c:	e047      	b.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800717e:	4b97      	ldr	r3, [pc, #604]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800718a:	d10b      	bne.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007192:	d107      	bne.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007194:	f107 0308 	add.w	r3, r7, #8
 8007198:	4618      	mov	r0, r3
 800719a:	f7fe ffbf 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	637b      	str	r3, [r7, #52]	; 0x34
 80071a2:	e034      	b.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80071a4:	4b8d      	ldr	r3, [pc, #564]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d10d      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80071b6:	d109      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071b8:	4b88      	ldr	r3, [pc, #544]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	08db      	lsrs	r3, r3, #3
 80071be:	f003 0303 	and.w	r3, r3, #3
 80071c2:	4a87      	ldr	r2, [pc, #540]	; (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80071c4:	fa22 f303 	lsr.w	r3, r2, r3
 80071c8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ca:	e020      	b.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80071cc:	4b83      	ldr	r3, [pc, #524]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071d8:	d106      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071e0:	d102      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80071e2:	4b80      	ldr	r3, [pc, #512]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80071e4:	637b      	str	r3, [r7, #52]	; 0x34
 80071e6:	e012      	b.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80071e8:	4b7c      	ldr	r3, [pc, #496]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80071ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d107      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80071fc:	d103      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80071fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007202:	637b      	str	r3, [r7, #52]	; 0x34
 8007204:	e003      	b.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800720a:	f001 bc3c 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800720e:	f001 bc3a 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8007212:	4b72      	ldr	r3, [pc, #456]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007214:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007218:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800721c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	2b00      	cmp	r3, #0
 8007222:	d104      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007224:	f7fc fca2 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8007228:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800722a:	f001 bc2c 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800722e:	4b6b      	ldr	r3, [pc, #428]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800723a:	d10b      	bne.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007242:	d107      	bne.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007244:	f107 0314 	add.w	r3, r7, #20
 8007248:	4618      	mov	r0, r3
 800724a:	f7fe fdfd 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	637b      	str	r3, [r7, #52]	; 0x34
 8007252:	e047      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8007254:	4b61      	ldr	r3, [pc, #388]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800725c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007260:	d10b      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007268:	d107      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800726a:	f107 0308 	add.w	r3, r7, #8
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe ff54 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	637b      	str	r3, [r7, #52]	; 0x34
 8007278:	e034      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800727a:	4b58      	ldr	r3, [pc, #352]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b02      	cmp	r3, #2
 8007284:	d10d      	bne.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800728c:	d109      	bne.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800728e:	4b53      	ldr	r3, [pc, #332]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	08db      	lsrs	r3, r3, #3
 8007294:	f003 0303 	and.w	r3, r3, #3
 8007298:	4a51      	ldr	r2, [pc, #324]	; (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800729a:	fa22 f303 	lsr.w	r3, r2, r3
 800729e:	637b      	str	r3, [r7, #52]	; 0x34
 80072a0:	e020      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80072a2:	4b4e      	ldr	r3, [pc, #312]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ae:	d106      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072b6:	d102      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80072b8:	4b4a      	ldr	r3, [pc, #296]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80072ba:	637b      	str	r3, [r7, #52]	; 0x34
 80072bc:	e012      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80072be:	4b47      	ldr	r3, [pc, #284]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80072c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d107      	bne.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80072d2:	d103      	bne.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80072d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34
 80072da:	e003      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072e0:	f001 bbd1 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80072e4:	f001 bbcf 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80072e8:	4b3c      	ldr	r3, [pc, #240]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80072ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80072ee:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80072f2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80072f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d104      	bne.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80072fa:	f7fc fc37 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 80072fe:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8007300:	f001 bbc1 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8007304:	4b35      	ldr	r3, [pc, #212]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800730c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007310:	d10b      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007318:	d107      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800731a:	f107 0314 	add.w	r3, r7, #20
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe fd92 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
 8007328:	e047      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800732a:	4b2c      	ldr	r3, [pc, #176]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007336:	d10b      	bne.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800733e:	d107      	bne.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007340:	f107 0308 	add.w	r3, r7, #8
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fee9 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	637b      	str	r3, [r7, #52]	; 0x34
 800734e:	e034      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8007350:	4b22      	ldr	r3, [pc, #136]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b02      	cmp	r3, #2
 800735a:	d10d      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007362:	d109      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007364:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	08db      	lsrs	r3, r3, #3
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	4a1c      	ldr	r2, [pc, #112]	; (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007370:	fa22 f303 	lsr.w	r3, r2, r3
 8007374:	637b      	str	r3, [r7, #52]	; 0x34
 8007376:	e020      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8007378:	4b18      	ldr	r3, [pc, #96]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007384:	d106      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800738c:	d102      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800738e:	4b15      	ldr	r3, [pc, #84]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007390:	637b      	str	r3, [r7, #52]	; 0x34
 8007392:	e012      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8007394:	4b11      	ldr	r3, [pc, #68]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d107      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80073a8:	d103      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80073aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ae:	637b      	str	r3, [r7, #52]	; 0x34
 80073b0:	e003      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073b6:	f001 bb66 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80073ba:	f001 bb64 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80073be:	4b07      	ldr	r3, [pc, #28]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80073c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80073c4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80073c8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10b      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80073d0:	f7fc fbcc 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 80073d4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80073d6:	f001 bb56 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80073da:	bf00      	nop
 80073dc:	44020c00 	.word	0x44020c00
 80073e0:	03d09000 	.word	0x03d09000
 80073e4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80073e8:	4ba1      	ldr	r3, [pc, #644]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073f4:	d10b      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073fc:	d107      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073fe:	f107 0314 	add.w	r3, r7, #20
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe fd20 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	637b      	str	r3, [r7, #52]	; 0x34
 800740c:	e047      	b.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800740e:	4b98      	ldr	r3, [pc, #608]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800741a:	d10b      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007422:	d107      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007424:	f107 0308 	add.w	r3, r7, #8
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe fe77 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	637b      	str	r3, [r7, #52]	; 0x34
 8007432:	e034      	b.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8007434:	4b8e      	ldr	r3, [pc, #568]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b02      	cmp	r3, #2
 800743e:	d10d      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007446:	d109      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007448:	4b89      	ldr	r3, [pc, #548]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	08db      	lsrs	r3, r3, #3
 800744e:	f003 0303 	and.w	r3, r3, #3
 8007452:	4a88      	ldr	r2, [pc, #544]	; (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
 8007458:	637b      	str	r3, [r7, #52]	; 0x34
 800745a:	e020      	b.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800745c:	4b84      	ldr	r3, [pc, #528]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007468:	d106      	bne.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007470:	d102      	bne.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8007472:	4b81      	ldr	r3, [pc, #516]	; (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007474:	637b      	str	r3, [r7, #52]	; 0x34
 8007476:	e012      	b.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8007478:	4b7d      	ldr	r3, [pc, #500]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800747a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b02      	cmp	r3, #2
 8007484:	d107      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800748c:	d103      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800748e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007492:	637b      	str	r3, [r7, #52]	; 0x34
 8007494:	e003      	b.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800749a:	f001 baf4 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800749e:	f001 baf2 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80074a2:	4b73      	ldr	r3, [pc, #460]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80074a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d104      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80074b4:	f7fc fb5a 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 80074b8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80074ba:	f001 bae4 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80074be:	4b6c      	ldr	r3, [pc, #432]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074ca:	d10a      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d107      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074d2:	f107 0314 	add.w	r3, r7, #20
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fcb6 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	637b      	str	r3, [r7, #52]	; 0x34
 80074e0:	e043      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80074e2:	4b63      	ldr	r3, [pc, #396]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074ee:	d10a      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d107      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074f6:	f107 0308 	add.w	r3, r7, #8
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fe0e 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	637b      	str	r3, [r7, #52]	; 0x34
 8007504:	e031      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8007506:	4b5a      	ldr	r3, [pc, #360]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b02      	cmp	r3, #2
 8007510:	d10c      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	2b03      	cmp	r3, #3
 8007516:	d109      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007518:	4b55      	ldr	r3, [pc, #340]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	08db      	lsrs	r3, r3, #3
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	4a54      	ldr	r2, [pc, #336]	; (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007524:	fa22 f303 	lsr.w	r3, r2, r3
 8007528:	637b      	str	r3, [r7, #52]	; 0x34
 800752a:	e01e      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800752c:	4b50      	ldr	r3, [pc, #320]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007538:	d105      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	2b04      	cmp	r3, #4
 800753e:	d102      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8007540:	4b4d      	ldr	r3, [pc, #308]	; (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007542:	637b      	str	r3, [r7, #52]	; 0x34
 8007544:	e011      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8007546:	4b4a      	ldr	r3, [pc, #296]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b02      	cmp	r3, #2
 8007552:	d106      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	2b05      	cmp	r3, #5
 8007558:	d103      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800755a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800755e:	637b      	str	r3, [r7, #52]	; 0x34
 8007560:	e003      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007566:	f001 ba8e 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800756a:	f001 ba8c 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800756e:	4b40      	ldr	r3, [pc, #256]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007570:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007574:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007578:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	2b00      	cmp	r3, #0
 800757e:	d104      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007580:	f7fc faf4 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8007584:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8007586:	f001 ba7e 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800758a:	4b39      	ldr	r3, [pc, #228]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007596:	d10a      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2b10      	cmp	r3, #16
 800759c:	d107      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800759e:	f107 0314 	add.w	r3, r7, #20
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fc50 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	637b      	str	r3, [r7, #52]	; 0x34
 80075ac:	e043      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80075ae:	4b30      	ldr	r3, [pc, #192]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ba:	d10a      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	2b20      	cmp	r3, #32
 80075c0:	d107      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075c2:	f107 0308 	add.w	r3, r7, #8
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe fda8 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	637b      	str	r3, [r7, #52]	; 0x34
 80075d0:	e031      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80075d2:	4b27      	ldr	r3, [pc, #156]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d10c      	bne.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80075de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e0:	2b30      	cmp	r3, #48	; 0x30
 80075e2:	d109      	bne.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075e4:	4b22      	ldr	r3, [pc, #136]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	08db      	lsrs	r3, r3, #3
 80075ea:	f003 0303 	and.w	r3, r3, #3
 80075ee:	4a21      	ldr	r2, [pc, #132]	; (8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80075f0:	fa22 f303 	lsr.w	r3, r2, r3
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
 80075f6:	e01e      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80075f8:	4b1d      	ldr	r3, [pc, #116]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007604:	d105      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	2b40      	cmp	r3, #64	; 0x40
 800760a:	d102      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800760c:	4b1a      	ldr	r3, [pc, #104]	; (8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800760e:	637b      	str	r3, [r7, #52]	; 0x34
 8007610:	e011      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8007612:	4b17      	ldr	r3, [pc, #92]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b02      	cmp	r3, #2
 800761e:	d106      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	2b50      	cmp	r3, #80	; 0x50
 8007624:	d103      	bne.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8007626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800762a:	637b      	str	r3, [r7, #52]	; 0x34
 800762c:	e003      	b.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007632:	f001 ba28 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007636:	f001 ba26 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800763a:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800763c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007640:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007644:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800764c:	f7fc faba 	bl	8003bc4 <HAL_RCC_GetPCLK3Freq>
 8007650:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007652:	f001 ba18 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800765c:	d10e      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800765e:	f107 0314 	add.w	r3, r7, #20
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe fbf0 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800766c:	f001 ba0b 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007670:	44020c00 	.word	0x44020c00
 8007674:	03d09000 	.word	0x03d09000
 8007678:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007682:	d108      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007684:	f107 0308 	add.w	r3, r7, #8
 8007688:	4618      	mov	r0, r3
 800768a:	f7fe fd47 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007692:	f001 b9f8 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007696:	4ba4      	ldr	r3, [pc, #656]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d10d      	bne.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076a8:	d109      	bne.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076aa:	4b9f      	ldr	r3, [pc, #636]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	08db      	lsrs	r3, r3, #3
 80076b0:	f003 0303 	and.w	r3, r3, #3
 80076b4:	4a9d      	ldr	r2, [pc, #628]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80076b6:	fa22 f303 	lsr.w	r3, r2, r3
 80076ba:	637b      	str	r3, [r7, #52]	; 0x34
 80076bc:	e020      	b.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80076be:	4b9a      	ldr	r3, [pc, #616]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ca:	d106      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076d2:	d102      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80076d4:	4b96      	ldr	r3, [pc, #600]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80076d6:	637b      	str	r3, [r7, #52]	; 0x34
 80076d8:	e012      	b.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80076da:	4b93      	ldr	r3, [pc, #588]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80076dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d107      	bne.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80076ee:	d103      	bne.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80076f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076f4:	637b      	str	r3, [r7, #52]	; 0x34
 80076f6:	e003      	b.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076fc:	f001 b9c3 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007700:	f001 b9c1 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007704:	4b88      	ldr	r3, [pc, #544]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007706:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	2b00      	cmp	r3, #0
 8007714:	d104      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007716:	f7fc fa0d 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 800771a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800771c:	f001 b9b3 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	2b01      	cmp	r3, #1
 8007724:	d104      	bne.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8007726:	f7fc f8d9 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 800772a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800772c:	f001 b9ab 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007732:	2b02      	cmp	r3, #2
 8007734:	d108      	bne.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007736:	f107 0314 	add.w	r3, r7, #20
 800773a:	4618      	mov	r0, r3
 800773c:	f7fe fb84 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007744:	f001 b99f 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007748:	4b77      	ldr	r3, [pc, #476]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007750:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007754:	d105      	bne.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	2b03      	cmp	r3, #3
 800775a:	d102      	bne.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800775c:	4b75      	ldr	r3, [pc, #468]	; (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
 8007760:	e023      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007762:	4b71      	ldr	r3, [pc, #452]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b02      	cmp	r3, #2
 800776c:	d10c      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	2b04      	cmp	r3, #4
 8007772:	d109      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007774:	4b6c      	ldr	r3, [pc, #432]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	08db      	lsrs	r3, r3, #3
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	4a6b      	ldr	r2, [pc, #428]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007780:	fa22 f303 	lsr.w	r3, r2, r3
 8007784:	637b      	str	r3, [r7, #52]	; 0x34
 8007786:	e010      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007788:	4b67      	ldr	r3, [pc, #412]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007794:	d105      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	2b05      	cmp	r3, #5
 800779a:	d102      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800779c:	4b64      	ldr	r3, [pc, #400]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800779e:	637b      	str	r3, [r7, #52]	; 0x34
 80077a0:	e003      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077a6:	f001 b96e 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077aa:	f001 b96c 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80077ae:	4b5e      	ldr	r3, [pc, #376]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80077b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80077b4:	f003 0308 	and.w	r3, r3, #8
 80077b8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80077ba:	4b5b      	ldr	r3, [pc, #364]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80077bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d106      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d103      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80077ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077d2:	637b      	str	r3, [r7, #52]	; 0x34
 80077d4:	e012      	b.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80077d6:	4b54      	ldr	r3, [pc, #336]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80077d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077e4:	d106      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d103      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80077ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80077f0:	637b      	str	r3, [r7, #52]	; 0x34
 80077f2:	e003      	b.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 80077f8:	f001 b945 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077fc:	f001 b943 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007800:	4b49      	ldr	r3, [pc, #292]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007802:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007806:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800780a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	2b00      	cmp	r3, #0
 8007810:	d104      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007812:	f7fc f9ab 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8007816:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007818:	f001 b935 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007822:	d108      	bne.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007824:	f107 0308 	add.w	r3, r7, #8
 8007828:	4618      	mov	r0, r3
 800782a:	f7fe fc77 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007832:	f001 b928 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007836:	4b3c      	ldr	r3, [pc, #240]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b02      	cmp	r3, #2
 8007840:	d10d      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007848:	d109      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800784a:	4b37      	ldr	r3, [pc, #220]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	08db      	lsrs	r3, r3, #3
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	4a35      	ldr	r2, [pc, #212]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007856:	fa22 f303 	lsr.w	r3, r2, r3
 800785a:	637b      	str	r3, [r7, #52]	; 0x34
 800785c:	e011      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800785e:	4b32      	ldr	r3, [pc, #200]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800786a:	d106      	bne.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007872:	d102      	bne.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8007874:	4b2e      	ldr	r3, [pc, #184]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007876:	637b      	str	r3, [r7, #52]	; 0x34
 8007878:	e003      	b.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800787e:	f001 b902 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007882:	f001 b900 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007886:	4b28      	ldr	r3, [pc, #160]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007888:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800788c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007890:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	2b00      	cmp	r3, #0
 8007896:	d104      	bne.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007898:	f7fc f968 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 800789c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800789e:	f001 b8f2 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078a8:	d108      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078aa:	f107 0308 	add.w	r3, r7, #8
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe fc34 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078b8:	f001 b8e5 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80078bc:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d10d      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80078c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80078ce:	d109      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078d0:	4b15      	ldr	r3, [pc, #84]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	08db      	lsrs	r3, r3, #3
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	4a14      	ldr	r2, [pc, #80]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80078dc:	fa22 f303 	lsr.w	r3, r2, r3
 80078e0:	637b      	str	r3, [r7, #52]	; 0x34
 80078e2:	e011      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80078e4:	4b10      	ldr	r3, [pc, #64]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f0:	d106      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80078f8:	d102      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80078fa:	4b0d      	ldr	r3, [pc, #52]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80078fc:	637b      	str	r3, [r7, #52]	; 0x34
 80078fe:	e003      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007904:	f001 b8bf 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007908:	f001 b8bd 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800790c:	4b06      	ldr	r3, [pc, #24]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800790e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007912:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007916:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10c      	bne.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800791e:	f7fc f951 	bl	8003bc4 <HAL_RCC_GetPCLK3Freq>
 8007922:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007924:	f001 b8af 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007928:	44020c00 	.word	0x44020c00
 800792c:	03d09000 	.word	0x03d09000
 8007930:	003d0900 	.word	0x003d0900
 8007934:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800793e:	d108      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007940:	f107 0308 	add.w	r3, r7, #8
 8007944:	4618      	mov	r0, r3
 8007946:	f7fe fbe9 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800794e:	f001 b89a 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007952:	4b9f      	ldr	r3, [pc, #636]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b02      	cmp	r3, #2
 800795c:	d10d      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007964:	d109      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007966:	4b9a      	ldr	r3, [pc, #616]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	08db      	lsrs	r3, r3, #3
 800796c:	f003 0303 	and.w	r3, r3, #3
 8007970:	4a98      	ldr	r2, [pc, #608]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007972:	fa22 f303 	lsr.w	r3, r2, r3
 8007976:	637b      	str	r3, [r7, #52]	; 0x34
 8007978:	e011      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800797a:	4b95      	ldr	r3, [pc, #596]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007986:	d106      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800798e:	d102      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8007990:	4b91      	ldr	r3, [pc, #580]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007992:	637b      	str	r3, [r7, #52]	; 0x34
 8007994:	e003      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800799a:	f001 b874 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800799e:	f001 b872 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80079a2:	4b8b      	ldr	r3, [pc, #556]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80079a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80079a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80079ac:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d104      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80079b4:	f7fc f906 	bl	8003bc4 <HAL_RCC_GetPCLK3Freq>
 80079b8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80079ba:	f001 b864 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079c4:	d108      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079c6:	f107 0308 	add.w	r3, r7, #8
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fe fba6 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079d4:	f001 b857 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80079d8:	4b7d      	ldr	r3, [pc, #500]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d10d      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079ea:	d109      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079ec:	4b78      	ldr	r3, [pc, #480]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	08db      	lsrs	r3, r3, #3
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	4a77      	ldr	r2, [pc, #476]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80079f8:	fa22 f303 	lsr.w	r3, r2, r3
 80079fc:	637b      	str	r3, [r7, #52]	; 0x34
 80079fe:	e011      	b.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8007a00:	4b73      	ldr	r3, [pc, #460]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a0c:	d106      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a14:	d102      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8007a16:	4b70      	ldr	r3, [pc, #448]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007a18:	637b      	str	r3, [r7, #52]	; 0x34
 8007a1a:	e003      	b.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a20:	f001 b831 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a24:	f001 b82f 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007a28:	4b69      	ldr	r3, [pc, #420]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a2e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007a32:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d104      	bne.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a3a:	f7fc f897 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8007a3e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a40:	f001 b821 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a4a:	d108      	bne.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a4c:	f107 0308 	add.w	r3, r7, #8
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe fb63 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a5a:	f001 b814 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007a5e:	4b5c      	ldr	r3, [pc, #368]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d10e      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a70:	d10a      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a72:	4b57      	ldr	r3, [pc, #348]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	08db      	lsrs	r3, r3, #3
 8007a78:	f003 0303 	and.w	r3, r3, #3
 8007a7c:	4a55      	ldr	r2, [pc, #340]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a84:	f000 bfff 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a8c:	f000 bffb 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007a90:	4b4f      	ldr	r3, [pc, #316]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a92:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007a96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007aa2:	d056      	beq.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007aaa:	f200 808b 	bhi.w	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ab4:	d03e      	beq.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007abc:	f200 8082 	bhi.w	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ac6:	d027      	beq.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ace:	d879      	bhi.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ad6:	d017      	beq.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ade:	d871      	bhi.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d004      	beq.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aec:	d004      	beq.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8007aee:	e069      	b.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007af0:	f7fc f868 	bl	8003bc4 <HAL_RCC_GetPCLK3Freq>
 8007af4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007af6:	e068      	b.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007af8:	f107 0314 	add.w	r3, r7, #20
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fe f9a3 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b06:	e060      	b.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b08:	f107 0308 	add.w	r3, r7, #8
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fe fb05 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b16:	e058      	b.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b18:	4b2d      	ldr	r3, [pc, #180]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d103      	bne.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8007b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b2a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007b2c:	e04d      	b.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b32:	e04a      	b.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007b34:	4b26      	ldr	r3, [pc, #152]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b42:	d103      	bne.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8007b44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007b4a:	e03e      	b.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b50:	e03b      	b.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b52:	4b1f      	ldr	r3, [pc, #124]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b58:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007b5c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b5e:	4b1c      	ldr	r3, [pc, #112]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0302 	and.w	r3, r3, #2
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d10c      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d109      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b70:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	08db      	lsrs	r3, r3, #3
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	4a16      	ldr	r2, [pc, #88]	; (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b80:	637b      	str	r3, [r7, #52]	; 0x34
 8007b82:	e01e      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b84:	4b12      	ldr	r3, [pc, #72]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b90:	d106      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8007b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b98:	d102      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007b9a:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b9e:	e010      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bac:	d106      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8007bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bb4:	d102      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007bb6:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8007bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bba:	e002      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007bc0:	e003      	b.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8007bc2:	e002      	b.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007bc8:	bf00      	nop
          }
        }
        break;
 8007bca:	f000 bf5c 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bce:	bf00      	nop
 8007bd0:	44020c00 	.word	0x44020c00
 8007bd4:	03d09000 	.word	0x03d09000
 8007bd8:	003d0900 	.word	0x003d0900
 8007bdc:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007be0:	4b9e      	ldr	r3, [pc, #632]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007be2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007be6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007bea:	633b      	str	r3, [r7, #48]	; 0x30
 8007bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007bf2:	d056      	beq.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007bfa:	f200 808b 	bhi.w	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c04:	d03e      	beq.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8007c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c0c:	f200 8082 	bhi.w	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c16:	d027      	beq.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c1e:	d879      	bhi.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c26:	d017      	beq.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8007c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c2e:	d871      	bhi.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d004      	beq.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c3c:	d004      	beq.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8007c3e:	e069      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007c40:	f7fb ff94 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8007c44:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007c46:	e068      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c48:	f107 0314 	add.w	r3, r7, #20
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fe f8fb 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c56:	e060      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c58:	f107 0308 	add.w	r3, r7, #8
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fe fa5d 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c66:	e058      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c68:	4b7c      	ldr	r3, [pc, #496]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d103      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8007c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c7a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007c7c:	e04d      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c82:	e04a      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007c84:	4b75      	ldr	r3, [pc, #468]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c92:	d103      	bne.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8007c94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c98:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007c9a:	e03e      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ca0:	e03b      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ca2:	4b6e      	ldr	r3, [pc, #440]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ca8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007cac:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007cae:	4b6b      	ldr	r3, [pc, #428]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d10c      	bne.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d109      	bne.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cc0:	4b66      	ldr	r3, [pc, #408]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	08db      	lsrs	r3, r3, #3
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	4a65      	ldr	r2, [pc, #404]	; (8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd2:	e01e      	b.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cd4:	4b61      	ldr	r3, [pc, #388]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce0:	d106      	bne.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ce8:	d102      	bne.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007cea:	4b5e      	ldr	r3, [pc, #376]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007cec:	637b      	str	r3, [r7, #52]	; 0x34
 8007cee:	e010      	b.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cf0:	4b5a      	ldr	r3, [pc, #360]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cfc:	d106      	bne.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8007cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d04:	d102      	bne.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007d06:	4b58      	ldr	r3, [pc, #352]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007d08:	637b      	str	r3, [r7, #52]	; 0x34
 8007d0a:	e002      	b.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007d10:	e003      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8007d12:	e002      	b.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d18:	bf00      	nop
          }
        }
        break;
 8007d1a:	f000 beb4 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007d1e:	4b4f      	ldr	r3, [pc, #316]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007d20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007d24:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007d28:	633b      	str	r3, [r7, #48]	; 0x30
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d30:	d056      	beq.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d38:	f200 808b 	bhi.w	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d42:	d03e      	beq.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d4a:	f200 8082 	bhi.w	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d54:	d027      	beq.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d5c:	d879      	bhi.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d64:	d017      	beq.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d6c:	d871      	bhi.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d004      	beq.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d7a:	d004      	beq.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8007d7c:	e069      	b.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007d7e:	f7fb ff21 	bl	8003bc4 <HAL_RCC_GetPCLK3Freq>
 8007d82:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007d84:	e068      	b.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d86:	f107 0314 	add.w	r3, r7, #20
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe f85c 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d94:	e060      	b.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d96:	f107 0308 	add.w	r3, r7, #8
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe f9be 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007da4:	e058      	b.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007da6:	4b2d      	ldr	r3, [pc, #180]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d103      	bne.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8007db4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007db8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007dba:	e04d      	b.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007dc0:	e04a      	b.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007dc2:	4b26      	ldr	r3, [pc, #152]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dd0:	d103      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8007dd2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007dd6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007dd8:	e03e      	b.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007dde:	e03b      	b.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007de0:	4b1e      	ldr	r3, [pc, #120]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007de2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007de6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007dea:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dec:	4b1b      	ldr	r3, [pc, #108]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d10c      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8007df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d109      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007dfe:	4b17      	ldr	r3, [pc, #92]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	08db      	lsrs	r3, r3, #3
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	4a15      	ldr	r2, [pc, #84]	; (8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e10:	e01e      	b.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e12:	4b12      	ldr	r3, [pc, #72]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e1e:	d106      	bne.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8007e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e26:	d102      	bne.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007e28:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2c:	e010      	b.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e2e:	4b0b      	ldr	r3, [pc, #44]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e3a:	d106      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e42:	d102      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007e44:	4b08      	ldr	r3, [pc, #32]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007e46:	637b      	str	r3, [r7, #52]	; 0x34
 8007e48:	e002      	b.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007e4e:	e003      	b.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8007e50:	e002      	b.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e56:	bf00      	nop
          }
        }
        break;
 8007e58:	f000 be15 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e5c:	44020c00 	.word	0x44020c00
 8007e60:	03d09000 	.word	0x03d09000
 8007e64:	003d0900 	.word	0x003d0900
 8007e68:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007e6c:	4b9e      	ldr	r3, [pc, #632]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007e6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007e72:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8007e76:	633b      	str	r3, [r7, #48]	; 0x30
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007e7e:	d056      	beq.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8007e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e82:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007e86:	f200 808b 	bhi.w	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e90:	d03e      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e98:	f200 8082 	bhi.w	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ea2:	d027      	beq.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007eaa:	d879      	bhi.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eb2:	d017      	beq.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eba:	d871      	bhi.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ec8:	d004      	beq.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8007eca:	e069      	b.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007ecc:	f7fb fe7a 	bl	8003bc4 <HAL_RCC_GetPCLK3Freq>
 8007ed0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007ed2:	e068      	b.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ed4:	f107 0314 	add.w	r3, r7, #20
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fd ffb5 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ee2:	e060      	b.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ee4:	f107 0308 	add.w	r3, r7, #8
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fe f917 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ef2:	e058      	b.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ef4:	4b7c      	ldr	r3, [pc, #496]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d103      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8007f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f06:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007f08:	e04d      	b.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f0e:	e04a      	b.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007f10:	4b75      	ldr	r3, [pc, #468]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f1e:	d103      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8007f20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f24:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007f26:	e03e      	b.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f2c:	e03b      	b.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f2e:	4b6e      	ldr	r3, [pc, #440]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f34:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007f38:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f3a:	4b6b      	ldr	r3, [pc, #428]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d10c      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8007f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f4c:	4b66      	ldr	r3, [pc, #408]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	08db      	lsrs	r3, r3, #3
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	4a65      	ldr	r2, [pc, #404]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007f58:	fa22 f303 	lsr.w	r3, r2, r3
 8007f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f5e:	e01e      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f60:	4b61      	ldr	r3, [pc, #388]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f6c:	d106      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f74:	d102      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007f76:	4b5e      	ldr	r3, [pc, #376]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007f78:	637b      	str	r3, [r7, #52]	; 0x34
 8007f7a:	e010      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f7c:	4b5a      	ldr	r3, [pc, #360]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f88:	d106      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8007f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f90:	d102      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007f92:	4b58      	ldr	r3, [pc, #352]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34
 8007f96:	e002      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007f9c:	e003      	b.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8007f9e:	e002      	b.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fa4:	bf00      	nop
          }
        }
        break;
 8007fa6:	f000 bd6e 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007faa:	4b4f      	ldr	r3, [pc, #316]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007fac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007fb0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007fbc:	d056      	beq.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007fc4:	f200 808b 	bhi.w	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fce:	d03e      	beq.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fd6:	f200 8082 	bhi.w	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fe0:	d027      	beq.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fe8:	d879      	bhi.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ff0:	d017      	beq.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ff8:	d871      	bhi.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d004      	beq.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008006:	d004      	beq.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008008:	e069      	b.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800800a:	f7fb fddb 	bl	8003bc4 <HAL_RCC_GetPCLK3Freq>
 800800e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008010:	e068      	b.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008012:	f107 0314 	add.w	r3, r7, #20
 8008016:	4618      	mov	r0, r3
 8008018:	f7fd ff16 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008020:	e060      	b.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008022:	f107 0308 	add.w	r3, r7, #8
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe f878 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008030:	e058      	b.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008032:	4b2d      	ldr	r3, [pc, #180]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b02      	cmp	r3, #2
 800803e:	d103      	bne.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008044:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008046:	e04d      	b.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008048:	2300      	movs	r3, #0
 800804a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800804c:	e04a      	b.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800804e:	4b26      	ldr	r3, [pc, #152]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800805c:	d103      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800805e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008062:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008064:	e03e      	b.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800806a:	e03b      	b.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800806c:	4b1e      	ldr	r3, [pc, #120]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800806e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008072:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008076:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008078:	4b1b      	ldr	r3, [pc, #108]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b02      	cmp	r3, #2
 8008082:	d10c      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d109      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800808a:	4b17      	ldr	r3, [pc, #92]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	08db      	lsrs	r3, r3, #3
 8008090:	f003 0303 	and.w	r3, r3, #3
 8008094:	4a15      	ldr	r2, [pc, #84]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008096:	fa22 f303 	lsr.w	r3, r2, r3
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
 800809c:	e01e      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800809e:	4b12      	ldr	r3, [pc, #72]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080aa:	d106      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80080ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b2:	d102      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80080b4:	4b0e      	ldr	r3, [pc, #56]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80080b6:	637b      	str	r3, [r7, #52]	; 0x34
 80080b8:	e010      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080ba:	4b0b      	ldr	r3, [pc, #44]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080c6:	d106      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80080c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080ce:	d102      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80080d0:	4b08      	ldr	r3, [pc, #32]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80080d2:	637b      	str	r3, [r7, #52]	; 0x34
 80080d4:	e002      	b.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80080da:	e003      	b.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80080dc:	e002      	b.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080e2:	bf00      	nop
          }
        }
        break;
 80080e4:	f000 bccf 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080e8:	44020c00 	.word	0x44020c00
 80080ec:	03d09000 	.word	0x03d09000
 80080f0:	003d0900 	.word	0x003d0900
 80080f4:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80080f8:	4b9e      	ldr	r3, [pc, #632]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80080fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80080fe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008102:	633b      	str	r3, [r7, #48]	; 0x30
 8008104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008106:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800810a:	d056      	beq.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008112:	f200 808b 	bhi.w	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800811c:	d03e      	beq.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008124:	f200 8082 	bhi.w	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800812e:	d027      	beq.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008136:	d879      	bhi.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800813e:	d017      	beq.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008146:	d871      	bhi.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	2b00      	cmp	r3, #0
 800814c:	d004      	beq.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008154:	d004      	beq.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8008156:	e069      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008158:	f7fb fd34 	bl	8003bc4 <HAL_RCC_GetPCLK3Freq>
 800815c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800815e:	e068      	b.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008160:	f107 0314 	add.w	r3, r7, #20
 8008164:	4618      	mov	r0, r3
 8008166:	f7fd fe6f 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800816e:	e060      	b.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008170:	f107 0308 	add.w	r3, r7, #8
 8008174:	4618      	mov	r0, r3
 8008176:	f7fd ffd1 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800817e:	e058      	b.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008180:	4b7c      	ldr	r3, [pc, #496]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b02      	cmp	r3, #2
 800818c:	d103      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800818e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008192:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008194:	e04d      	b.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800819a:	e04a      	b.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800819c:	4b75      	ldr	r3, [pc, #468]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800819e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081aa:	d103      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80081ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80081b2:	e03e      	b.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081b8:	e03b      	b.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081ba:	4b6e      	ldr	r3, [pc, #440]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80081bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081c0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80081c4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081c6:	4b6b      	ldr	r3, [pc, #428]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d10c      	bne.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d109      	bne.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081d8:	4b66      	ldr	r3, [pc, #408]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	08db      	lsrs	r3, r3, #3
 80081de:	f003 0303 	and.w	r3, r3, #3
 80081e2:	4a65      	ldr	r2, [pc, #404]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80081e4:	fa22 f303 	lsr.w	r3, r2, r3
 80081e8:	637b      	str	r3, [r7, #52]	; 0x34
 80081ea:	e01e      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081ec:	4b61      	ldr	r3, [pc, #388]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081f8:	d106      	bne.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80081fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008200:	d102      	bne.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008202:	4b5e      	ldr	r3, [pc, #376]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008204:	637b      	str	r3, [r7, #52]	; 0x34
 8008206:	e010      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008208:	4b5a      	ldr	r3, [pc, #360]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008214:	d106      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8008216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800821c:	d102      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800821e:	4b58      	ldr	r3, [pc, #352]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008220:	637b      	str	r3, [r7, #52]	; 0x34
 8008222:	e002      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008228:	e003      	b.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800822a:	e002      	b.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008230:	bf00      	nop
          }
        }
        break;
 8008232:	f000 bc28 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008236:	4b4f      	ldr	r3, [pc, #316]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800823c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008240:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008242:	4b4c      	ldr	r3, [pc, #304]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800824a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800824e:	d106      	bne.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	2b00      	cmp	r3, #0
 8008254:	d103      	bne.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8008256:	4b4a      	ldr	r3, [pc, #296]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008258:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800825a:	f000 bc14 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008264:	d108      	bne.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008266:	f107 0320 	add.w	r3, r7, #32
 800826a:	4618      	mov	r0, r3
 800826c:	f7fd fc82 	bl	8005b74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008274:	f000 bc07 	b.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800827e:	d107      	bne.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008280:	f107 0314 	add.w	r3, r7, #20
 8008284:	4618      	mov	r0, r3
 8008286:	f7fd fddf 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800828e:	e3fa      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008294:	e3f7      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008296:	4b37      	ldr	r3, [pc, #220]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800829c:	f003 0307 	and.w	r3, r3, #7
 80082a0:	633b      	str	r3, [r7, #48]	; 0x30
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d861      	bhi.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80082a8:	a201      	add	r2, pc, #4	; (adr r2, 80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	080082c5 	.word	0x080082c5
 80082b4:	080082d5 	.word	0x080082d5
 80082b8:	080082e5 	.word	0x080082e5
 80082bc:	080082f5 	.word	0x080082f5
 80082c0:	080082fb 	.word	0x080082fb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082c4:	f107 0320 	add.w	r3, r7, #32
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fd fc53 	bl	8005b74 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082d2:	e04e      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082d4:	f107 0314 	add.w	r3, r7, #20
 80082d8:	4618      	mov	r0, r3
 80082da:	f7fd fdb5 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082e2:	e046      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082e4:	f107 0308 	add.w	r3, r7, #8
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fd ff17 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082f2:	e03e      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80082f4:	4b23      	ldr	r3, [pc, #140]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80082f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082f8:	e03b      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082fa:	4b1e      	ldr	r3, [pc, #120]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80082fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008300:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008304:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008306:	4b1b      	ldr	r3, [pc, #108]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	2b02      	cmp	r3, #2
 8008310:	d10c      	bne.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8008312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008314:	2b00      	cmp	r3, #0
 8008316:	d109      	bne.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008318:	4b16      	ldr	r3, [pc, #88]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	08db      	lsrs	r3, r3, #3
 800831e:	f003 0303 	and.w	r3, r3, #3
 8008322:	4a15      	ldr	r2, [pc, #84]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008324:	fa22 f303 	lsr.w	r3, r2, r3
 8008328:	637b      	str	r3, [r7, #52]	; 0x34
 800832a:	e01e      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800832c:	4b11      	ldr	r3, [pc, #68]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008338:	d106      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800833a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008340:	d102      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008342:	4b0e      	ldr	r3, [pc, #56]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008344:	637b      	str	r3, [r7, #52]	; 0x34
 8008346:	e010      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008348:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008354:	d106      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800835c:	d102      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800835e:	4b08      	ldr	r3, [pc, #32]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008360:	637b      	str	r3, [r7, #52]	; 0x34
 8008362:	e002      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008368:	e003      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800836a:	e002      	b.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008370:	bf00      	nop
          }
        }
        break;
 8008372:	e388      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008374:	44020c00 	.word	0x44020c00
 8008378:	03d09000 	.word	0x03d09000
 800837c:	003d0900 	.word	0x003d0900
 8008380:	007a1200 	.word	0x007a1200
 8008384:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008388:	4ba9      	ldr	r3, [pc, #676]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800838a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800838e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008392:	633b      	str	r3, [r7, #48]	; 0x30
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	2b20      	cmp	r3, #32
 8008398:	f200 809a 	bhi.w	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800839c:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800839e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a2:	bf00      	nop
 80083a4:	08008429 	.word	0x08008429
 80083a8:	080084d1 	.word	0x080084d1
 80083ac:	080084d1 	.word	0x080084d1
 80083b0:	080084d1 	.word	0x080084d1
 80083b4:	080084d1 	.word	0x080084d1
 80083b8:	080084d1 	.word	0x080084d1
 80083bc:	080084d1 	.word	0x080084d1
 80083c0:	080084d1 	.word	0x080084d1
 80083c4:	08008439 	.word	0x08008439
 80083c8:	080084d1 	.word	0x080084d1
 80083cc:	080084d1 	.word	0x080084d1
 80083d0:	080084d1 	.word	0x080084d1
 80083d4:	080084d1 	.word	0x080084d1
 80083d8:	080084d1 	.word	0x080084d1
 80083dc:	080084d1 	.word	0x080084d1
 80083e0:	080084d1 	.word	0x080084d1
 80083e4:	08008449 	.word	0x08008449
 80083e8:	080084d1 	.word	0x080084d1
 80083ec:	080084d1 	.word	0x080084d1
 80083f0:	080084d1 	.word	0x080084d1
 80083f4:	080084d1 	.word	0x080084d1
 80083f8:	080084d1 	.word	0x080084d1
 80083fc:	080084d1 	.word	0x080084d1
 8008400:	080084d1 	.word	0x080084d1
 8008404:	08008459 	.word	0x08008459
 8008408:	080084d1 	.word	0x080084d1
 800840c:	080084d1 	.word	0x080084d1
 8008410:	080084d1 	.word	0x080084d1
 8008414:	080084d1 	.word	0x080084d1
 8008418:	080084d1 	.word	0x080084d1
 800841c:	080084d1 	.word	0x080084d1
 8008420:	080084d1 	.word	0x080084d1
 8008424:	0800845f 	.word	0x0800845f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008428:	f107 0320 	add.w	r3, r7, #32
 800842c:	4618      	mov	r0, r3
 800842e:	f7fd fba1 	bl	8005b74 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008436:	e04e      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008438:	f107 0314 	add.w	r3, r7, #20
 800843c:	4618      	mov	r0, r3
 800843e:	f7fd fd03 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008446:	e046      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008448:	f107 0308 	add.w	r3, r7, #8
 800844c:	4618      	mov	r0, r3
 800844e:	f7fd fe65 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008456:	e03e      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008458:	4b76      	ldr	r3, [pc, #472]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800845a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800845c:	e03b      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800845e:	4b74      	ldr	r3, [pc, #464]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008464:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008468:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800846a:	4b71      	ldr	r3, [pc, #452]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b02      	cmp	r3, #2
 8008474:	d10c      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8008476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008478:	2b00      	cmp	r3, #0
 800847a:	d109      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800847c:	4b6c      	ldr	r3, [pc, #432]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	08db      	lsrs	r3, r3, #3
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	4a6c      	ldr	r2, [pc, #432]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008488:	fa22 f303 	lsr.w	r3, r2, r3
 800848c:	637b      	str	r3, [r7, #52]	; 0x34
 800848e:	e01e      	b.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008490:	4b67      	ldr	r3, [pc, #412]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800849c:	d106      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084a4:	d102      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80084a6:	4b65      	ldr	r3, [pc, #404]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80084a8:	637b      	str	r3, [r7, #52]	; 0x34
 80084aa:	e010      	b.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084ac:	4b60      	ldr	r3, [pc, #384]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084b8:	d106      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80084ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084c0:	d102      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80084c2:	4b5f      	ldr	r3, [pc, #380]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80084c4:	637b      	str	r3, [r7, #52]	; 0x34
 80084c6:	e002      	b.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80084cc:	e003      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80084ce:	e002      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084d4:	bf00      	nop
          }
        }
        break;
 80084d6:	e2d6      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80084d8:	4b55      	ldr	r3, [pc, #340]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80084da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80084e2:	633b      	str	r3, [r7, #48]	; 0x30
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ea:	d031      	beq.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084f2:	d866      	bhi.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	2bc0      	cmp	r3, #192	; 0xc0
 80084f8:	d027      	beq.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80084fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fc:	2bc0      	cmp	r3, #192	; 0xc0
 80084fe:	d860      	bhi.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	2b80      	cmp	r3, #128	; 0x80
 8008504:	d019      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	2b80      	cmp	r3, #128	; 0x80
 800850a:	d85a      	bhi.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	2b00      	cmp	r3, #0
 8008510:	d003      	beq.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	2b40      	cmp	r3, #64	; 0x40
 8008516:	d008      	beq.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8008518:	e053      	b.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800851a:	f107 0320 	add.w	r3, r7, #32
 800851e:	4618      	mov	r0, r3
 8008520:	f7fd fb28 	bl	8005b74 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008528:	e04e      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800852a:	f107 0314 	add.w	r3, r7, #20
 800852e:	4618      	mov	r0, r3
 8008530:	f7fd fc8a 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008538:	e046      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800853a:	f107 0308 	add.w	r3, r7, #8
 800853e:	4618      	mov	r0, r3
 8008540:	f7fd fdec 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008548:	e03e      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800854a:	4b3a      	ldr	r3, [pc, #232]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800854c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800854e:	e03b      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008550:	4b37      	ldr	r3, [pc, #220]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008556:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800855c:	4b34      	ldr	r3, [pc, #208]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b02      	cmp	r3, #2
 8008566:	d10c      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8008568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856a:	2b00      	cmp	r3, #0
 800856c:	d109      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800856e:	4b30      	ldr	r3, [pc, #192]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	08db      	lsrs	r3, r3, #3
 8008574:	f003 0303 	and.w	r3, r3, #3
 8008578:	4a2f      	ldr	r2, [pc, #188]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800857a:	fa22 f303 	lsr.w	r3, r2, r3
 800857e:	637b      	str	r3, [r7, #52]	; 0x34
 8008580:	e01e      	b.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008582:	4b2b      	ldr	r3, [pc, #172]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800858a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800858e:	d106      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008596:	d102      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008598:	4b28      	ldr	r3, [pc, #160]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800859a:	637b      	str	r3, [r7, #52]	; 0x34
 800859c:	e010      	b.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800859e:	4b24      	ldr	r3, [pc, #144]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085aa:	d106      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80085ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085b2:	d102      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80085b4:	4b22      	ldr	r3, [pc, #136]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80085b6:	637b      	str	r3, [r7, #52]	; 0x34
 80085b8:	e002      	b.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80085be:	e003      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80085c0:	e002      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085c6:	bf00      	nop
          }
        }
        break;
 80085c8:	e25d      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80085ca:	4b19      	ldr	r3, [pc, #100]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80085cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085d0:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80085d4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d103      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80085dc:	f7fb fadc 	bl	8003b98 <HAL_RCC_GetPCLK2Freq>
 80085e0:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80085e2:	e250      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80085e4:	4b12      	ldr	r3, [pc, #72]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085f0:	d10b      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f8:	d107      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085fa:	f107 0314 	add.w	r3, r7, #20
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fd fc22 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	637b      	str	r3, [r7, #52]	; 0x34
 8008608:	e04f      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800860a:	4b09      	ldr	r3, [pc, #36]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008616:	d115      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800861e:	d111      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008620:	f107 0308 	add.w	r3, r7, #8
 8008624:	4618      	mov	r0, r3
 8008626:	f7fd fd79 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	637b      	str	r3, [r7, #52]	; 0x34
 800862e:	e03c      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8008630:	44020c00 	.word	0x44020c00
 8008634:	00bb8000 	.word	0x00bb8000
 8008638:	03d09000 	.word	0x03d09000
 800863c:	003d0900 	.word	0x003d0900
 8008640:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8008644:	4b94      	ldr	r3, [pc, #592]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b02      	cmp	r3, #2
 800864e:	d10d      	bne.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8008650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008652:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008656:	d109      	bne.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008658:	4b8f      	ldr	r3, [pc, #572]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	08db      	lsrs	r3, r3, #3
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	4a8e      	ldr	r2, [pc, #568]	; (800889c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008664:	fa22 f303 	lsr.w	r3, r2, r3
 8008668:	637b      	str	r3, [r7, #52]	; 0x34
 800866a:	e01e      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800866c:	4b8a      	ldr	r3, [pc, #552]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008678:	d106      	bne.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008680:	d102      	bne.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8008682:	4b87      	ldr	r3, [pc, #540]	; (80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008684:	637b      	str	r3, [r7, #52]	; 0x34
 8008686:	e010      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008688:	4b83      	ldr	r3, [pc, #524]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008694:	d106      	bne.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800869c:	d102      	bne.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800869e:	4b81      	ldr	r3, [pc, #516]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80086a0:	637b      	str	r3, [r7, #52]	; 0x34
 80086a2:	e002      	b.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086a8:	e1ed      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086aa:	e1ec      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80086ac:	4b7a      	ldr	r3, [pc, #488]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80086ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086b2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80086b6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d103      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80086be:	f7fb fa81 	bl	8003bc4 <HAL_RCC_GetPCLK3Freq>
 80086c2:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80086c4:	e1df      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80086c6:	4b74      	ldr	r3, [pc, #464]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086d2:	d10b      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086da:	d107      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086dc:	f107 0314 	add.w	r3, r7, #20
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fd fbb1 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	637b      	str	r3, [r7, #52]	; 0x34
 80086ea:	e045      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80086ec:	4b6a      	ldr	r3, [pc, #424]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086f8:	d10b      	bne.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008700:	d107      	bne.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008702:	f107 0308 	add.w	r3, r7, #8
 8008706:	4618      	mov	r0, r3
 8008708:	f7fd fd08 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	637b      	str	r3, [r7, #52]	; 0x34
 8008710:	e032      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8008712:	4b61      	ldr	r3, [pc, #388]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b02      	cmp	r3, #2
 800871c:	d10d      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008724:	d109      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008726:	4b5c      	ldr	r3, [pc, #368]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	08db      	lsrs	r3, r3, #3
 800872c:	f003 0303 	and.w	r3, r3, #3
 8008730:	4a5a      	ldr	r2, [pc, #360]	; (800889c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008732:	fa22 f303 	lsr.w	r3, r2, r3
 8008736:	637b      	str	r3, [r7, #52]	; 0x34
 8008738:	e01e      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800873a:	4b57      	ldr	r3, [pc, #348]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008746:	d106      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800874e:	d102      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8008750:	4b53      	ldr	r3, [pc, #332]	; (80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008752:	637b      	str	r3, [r7, #52]	; 0x34
 8008754:	e010      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8008756:	4b50      	ldr	r3, [pc, #320]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800875e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008762:	d106      	bne.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8008764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008766:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800876a:	d102      	bne.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800876c:	4b4d      	ldr	r3, [pc, #308]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800876e:	637b      	str	r3, [r7, #52]	; 0x34
 8008770:	e002      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8008772:	2300      	movs	r3, #0
 8008774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008776:	e186      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008778:	e185      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800877a:	4b47      	ldr	r3, [pc, #284]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800877c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008780:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8008784:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	2b00      	cmp	r3, #0
 800878a:	d103      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800878c:	f7fb fa04 	bl	8003b98 <HAL_RCC_GetPCLK2Freq>
 8008790:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008792:	e178      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8008794:	4b40      	ldr	r3, [pc, #256]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800879c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087a0:	d10b      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087a8:	d107      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087aa:	f107 0314 	add.w	r3, r7, #20
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fd fb4a 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	637b      	str	r3, [r7, #52]	; 0x34
 80087b8:	e045      	b.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80087ba:	4b37      	ldr	r3, [pc, #220]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087c6:	d10b      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80087c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ce:	d107      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087d0:	f107 0308 	add.w	r3, r7, #8
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fd fca1 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	637b      	str	r3, [r7, #52]	; 0x34
 80087de:	e032      	b.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80087e0:	4b2d      	ldr	r3, [pc, #180]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d10d      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80087f2:	d109      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087f4:	4b28      	ldr	r3, [pc, #160]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	08db      	lsrs	r3, r3, #3
 80087fa:	f003 0303 	and.w	r3, r3, #3
 80087fe:	4a27      	ldr	r2, [pc, #156]	; (800889c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008800:	fa22 f303 	lsr.w	r3, r2, r3
 8008804:	637b      	str	r3, [r7, #52]	; 0x34
 8008806:	e01e      	b.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8008808:	4b23      	ldr	r3, [pc, #140]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008814:	d106      	bne.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800881c:	d102      	bne.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800881e:	4b20      	ldr	r3, [pc, #128]	; (80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008820:	637b      	str	r3, [r7, #52]	; 0x34
 8008822:	e010      	b.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8008824:	4b1c      	ldr	r3, [pc, #112]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800882c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008830:	d106      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8008832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008834:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008838:	d102      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800883a:	4b1a      	ldr	r3, [pc, #104]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800883c:	637b      	str	r3, [r7, #52]	; 0x34
 800883e:	e002      	b.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8008840:	2300      	movs	r3, #0
 8008842:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008844:	e11f      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008846:	e11e      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008848:	4b13      	ldr	r3, [pc, #76]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800884a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800884e:	f003 0303 	and.w	r3, r3, #3
 8008852:	633b      	str	r3, [r7, #48]	; 0x30
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	2b03      	cmp	r3, #3
 8008858:	d85f      	bhi.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800885a:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800885c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008860:	08008871 	.word	0x08008871
 8008864:	08008879 	.word	0x08008879
 8008868:	08008889 	.word	0x08008889
 800886c:	080088a9 	.word	0x080088a9

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8008870:	f7fb f960 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8008874:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008876:	e053      	b.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008878:	f107 0320 	add.w	r3, r7, #32
 800887c:	4618      	mov	r0, r3
 800887e:	f7fd f979 	bl	8005b74 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008886:	e04b      	b.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008888:	f107 0314 	add.w	r3, r7, #20
 800888c:	4618      	mov	r0, r3
 800888e:	f7fd fadb 	bl	8005e48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008896:	e043      	b.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008898:	44020c00 	.word	0x44020c00
 800889c:	03d09000 	.word	0x03d09000
 80088a0:	003d0900 	.word	0x003d0900
 80088a4:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088a8:	4b79      	ldr	r3, [pc, #484]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80088aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80088ae:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80088b2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088b4:	4b76      	ldr	r3, [pc, #472]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0302 	and.w	r3, r3, #2
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d10c      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 80088c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d109      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088c6:	4b72      	ldr	r3, [pc, #456]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	08db      	lsrs	r3, r3, #3
 80088cc:	f003 0303 	and.w	r3, r3, #3
 80088d0:	4a70      	ldr	r2, [pc, #448]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 80088d2:	fa22 f303 	lsr.w	r3, r2, r3
 80088d6:	637b      	str	r3, [r7, #52]	; 0x34
 80088d8:	e01e      	b.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088da:	4b6d      	ldr	r3, [pc, #436]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088e6:	d106      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 80088e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ee:	d102      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80088f0:	4b69      	ldr	r3, [pc, #420]	; (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 80088f2:	637b      	str	r3, [r7, #52]	; 0x34
 80088f4:	e010      	b.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088f6:	4b66      	ldr	r3, [pc, #408]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008902:	d106      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800890a:	d102      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800890c:	4b63      	ldr	r3, [pc, #396]	; (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800890e:	637b      	str	r3, [r7, #52]	; 0x34
 8008910:	e002      	b.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008916:	e003      	b.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008918:	e002      	b.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800891e:	bf00      	nop
          }
        }
        break;
 8008920:	e0b1      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008922:	4b5b      	ldr	r3, [pc, #364]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008928:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800892c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800892e:	4b58      	ldr	r3, [pc, #352]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b02      	cmp	r3, #2
 800893a:	d106      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893e:	2b00      	cmp	r3, #0
 8008940:	d103      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8008942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008946:	637b      	str	r3, [r7, #52]	; 0x34
 8008948:	e01f      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800894a:	4b51      	ldr	r3, [pc, #324]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800894c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008958:	d106      	bne.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800895a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895c:	2b40      	cmp	r3, #64	; 0x40
 800895e:	d103      	bne.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8008960:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008964:	637b      	str	r3, [r7, #52]	; 0x34
 8008966:	e010      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8008968:	4b49      	ldr	r3, [pc, #292]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008974:	d106      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	2b80      	cmp	r3, #128	; 0x80
 800897a:	d103      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800897c:	f248 0312 	movw	r3, #32786	; 0x8012
 8008980:	637b      	str	r3, [r7, #52]	; 0x34
 8008982:	e002      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008988:	e07d      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800898a:	e07c      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800898c:	4b40      	ldr	r3, [pc, #256]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800898e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008992:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008996:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008998:	4b3d      	ldr	r3, [pc, #244]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089a4:	d105      	bne.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d102      	bne.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80089ac:	4b3c      	ldr	r3, [pc, #240]	; (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80089ae:	637b      	str	r3, [r7, #52]	; 0x34
 80089b0:	e031      	b.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80089b2:	4b37      	ldr	r3, [pc, #220]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089be:	d10a      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	2b10      	cmp	r3, #16
 80089c4:	d107      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089c6:	f107 0320 	add.w	r3, r7, #32
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fd f8d2 	bl	8005b74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	637b      	str	r3, [r7, #52]	; 0x34
 80089d4:	e01f      	b.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80089d6:	4b2e      	ldr	r3, [pc, #184]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80089d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d106      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	d103      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 80089ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ee:	637b      	str	r3, [r7, #52]	; 0x34
 80089f0:	e011      	b.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80089f2:	4b27      	ldr	r3, [pc, #156]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80089f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a00:	d106      	bne.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	2b30      	cmp	r3, #48	; 0x30
 8008a06:	d103      	bne.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8008a08:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a0e:	e002      	b.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008a14:	e037      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a16:	e036      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008a18:	4b1d      	ldr	r3, [pc, #116]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008a1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008a1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008a22:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	2b10      	cmp	r3, #16
 8008a28:	d107      	bne.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a2a:	f107 0320 	add.w	r3, r7, #32
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fd f8a0 	bl	8005b74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008a38:	e025      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8008a3a:	4b15      	ldr	r3, [pc, #84]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a46:	d10a      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	2b20      	cmp	r3, #32
 8008a4c:	d107      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a4e:	f107 0308 	add.w	r3, r7, #8
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fd fb62 	bl	800611c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a5c:	e00f      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008a5e:	4b0c      	ldr	r3, [pc, #48]	; (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a6a:	d105      	bne.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	2b30      	cmp	r3, #48	; 0x30
 8008a70:	d102      	bne.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8008a72:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008a74:	637b      	str	r3, [r7, #52]	; 0x34
 8008a76:	e002      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8008a7c:	e003      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a7e:	e002      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a84:	bf00      	nop
    }
  }

  return (frequency);
 8008a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	373c      	adds	r7, #60	; 0x3c
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd90      	pop	{r4, r7, pc}
 8008a90:	44020c00 	.word	0x44020c00
 8008a94:	03d09000 	.word	0x03d09000
 8008a98:	003d0900 	.word	0x003d0900
 8008a9c:	007a1200 	.word	0x007a1200
 8008aa0:	02dc6c00 	.word	0x02dc6c00

08008aa4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008aac:	4b48      	ldr	r3, [pc, #288]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a47      	ldr	r2, [pc, #284]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008ab2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ab6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ab8:	f7f9 f8a8 	bl	8001c0c <HAL_GetTick>
 8008abc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008abe:	e008      	b.n	8008ad2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ac0:	f7f9 f8a4 	bl	8001c0c <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d901      	bls.n	8008ad2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e07a      	b.n	8008bc8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ad2:	4b3f      	ldr	r3, [pc, #252]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1f0      	bne.n	8008ac0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008ade:	4b3c      	ldr	r3, [pc, #240]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008ae6:	f023 0303 	bic.w	r3, r3, #3
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6811      	ldr	r1, [r2, #0]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	6852      	ldr	r2, [r2, #4]
 8008af2:	0212      	lsls	r2, r2, #8
 8008af4:	430a      	orrs	r2, r1
 8008af6:	4936      	ldr	r1, [pc, #216]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	3b01      	subs	r3, #1
 8008b02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	025b      	lsls	r3, r3, #9
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	431a      	orrs	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	3b01      	subs	r3, #1
 8008b18:	041b      	lsls	r3, r3, #16
 8008b1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b1e:	431a      	orrs	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	061b      	lsls	r3, r3, #24
 8008b28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b2c:	4928      	ldr	r1, [pc, #160]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008b32:	4b27      	ldr	r3, [pc, #156]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b36:	f023 020c 	bic.w	r2, r3, #12
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	4924      	ldr	r1, [pc, #144]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008b44:	4b22      	ldr	r3, [pc, #136]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b48:	f023 0220 	bic.w	r2, r3, #32
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	491f      	ldr	r1, [pc, #124]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b52:	4313      	orrs	r3, r2
 8008b54:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008b56:	4b1e      	ldr	r3, [pc, #120]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	491c      	ldr	r1, [pc, #112]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008b64:	4b1a      	ldr	r3, [pc, #104]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	4a19      	ldr	r2, [pc, #100]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b6a:	f023 0310 	bic.w	r3, r3, #16
 8008b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008b70:	4b17      	ldr	r3, [pc, #92]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b78:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	6a12      	ldr	r2, [r2, #32]
 8008b80:	00d2      	lsls	r2, r2, #3
 8008b82:	4913      	ldr	r1, [pc, #76]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b84:	4313      	orrs	r3, r2
 8008b86:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008b88:	4b11      	ldr	r3, [pc, #68]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8c:	4a10      	ldr	r2, [pc, #64]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b8e:	f043 0310 	orr.w	r3, r3, #16
 8008b92:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008b94:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a0d      	ldr	r2, [pc, #52]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008b9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b9e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ba0:	f7f9 f834 	bl	8001c0c <HAL_GetTick>
 8008ba4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ba6:	e008      	b.n	8008bba <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ba8:	f7f9 f830 	bl	8001c0c <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d901      	bls.n	8008bba <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e006      	b.n	8008bc8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bba:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <RCCEx_PLL2_Config+0x12c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0f0      	beq.n	8008ba8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0

}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	44020c00 	.word	0x44020c00

08008bd4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008bdc:	4b48      	ldr	r3, [pc, #288]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a47      	ldr	r2, [pc, #284]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008be6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008be8:	f7f9 f810 	bl	8001c0c <HAL_GetTick>
 8008bec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bee:	e008      	b.n	8008c02 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008bf0:	f7f9 f80c 	bl	8001c0c <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d901      	bls.n	8008c02 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e07a      	b.n	8008cf8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c02:	4b3f      	ldr	r3, [pc, #252]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1f0      	bne.n	8008bf0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008c0e:	4b3c      	ldr	r3, [pc, #240]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008c16:	f023 0303 	bic.w	r3, r3, #3
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	6811      	ldr	r1, [r2, #0]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	6852      	ldr	r2, [r2, #4]
 8008c22:	0212      	lsls	r2, r2, #8
 8008c24:	430a      	orrs	r2, r1
 8008c26:	4936      	ldr	r1, [pc, #216]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	630b      	str	r3, [r1, #48]	; 0x30
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	025b      	lsls	r3, r3, #9
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	041b      	lsls	r3, r3, #16
 8008c4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c4e:	431a      	orrs	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	061b      	lsls	r3, r3, #24
 8008c58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c5c:	4928      	ldr	r1, [pc, #160]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c62:	4b27      	ldr	r3, [pc, #156]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c66:	f023 020c 	bic.w	r2, r3, #12
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	4924      	ldr	r1, [pc, #144]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008c74:	4b22      	ldr	r3, [pc, #136]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c78:	f023 0220 	bic.w	r2, r3, #32
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	491f      	ldr	r1, [pc, #124]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008c86:	4b1e      	ldr	r3, [pc, #120]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	491c      	ldr	r1, [pc, #112]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008c90:	4313      	orrs	r3, r2
 8008c92:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008c94:	4b1a      	ldr	r3, [pc, #104]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c98:	4a19      	ldr	r2, [pc, #100]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008c9a:	f023 0310 	bic.w	r3, r3, #16
 8008c9e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008ca0:	4b17      	ldr	r3, [pc, #92]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ca8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	6a12      	ldr	r2, [r2, #32]
 8008cb0:	00d2      	lsls	r2, r2, #3
 8008cb2:	4913      	ldr	r1, [pc, #76]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008cb8:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbc:	4a10      	ldr	r2, [pc, #64]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008cbe:	f043 0310 	orr.w	r3, r3, #16
 8008cc2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008cc4:	4b0e      	ldr	r3, [pc, #56]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a0d      	ldr	r2, [pc, #52]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008cd0:	f7f8 ff9c 	bl	8001c0c <HAL_GetTick>
 8008cd4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cd6:	e008      	b.n	8008cea <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cd8:	f7f8 ff98 	bl	8001c0c <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d901      	bls.n	8008cea <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e006      	b.n	8008cf8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cea:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <RCCEx_PLL3_Config+0x12c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0f0      	beq.n	8008cd8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	44020c00 	.word	0x44020c00

08008d04 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d071      	beq.n	8008dfa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d106      	bne.n	8008d30 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7f7 ffbc 	bl	8000ca8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008d38:	4b32      	ldr	r3, [pc, #200]	; (8008e04 <HAL_RTC_Init+0x100>)
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f003 0310 	and.w	r3, r3, #16
 8008d40:	2b10      	cmp	r3, #16
 8008d42:	d051      	beq.n	8008de8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d44:	4b2f      	ldr	r3, [pc, #188]	; (8008e04 <HAL_RTC_Init+0x100>)
 8008d46:	22ca      	movs	r2, #202	; 0xca
 8008d48:	625a      	str	r2, [r3, #36]	; 0x24
 8008d4a:	4b2e      	ldr	r3, [pc, #184]	; (8008e04 <HAL_RTC_Init+0x100>)
 8008d4c:	2253      	movs	r2, #83	; 0x53
 8008d4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f88b 	bl	8008e6c <RTC_EnterInitMode>
 8008d56:	4603      	mov	r3, r0
 8008d58:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d13f      	bne.n	8008de0 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008d60:	4b28      	ldr	r3, [pc, #160]	; (8008e04 <HAL_RTC_Init+0x100>)
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	4a27      	ldr	r2, [pc, #156]	; (8008e04 <HAL_RTC_Init+0x100>)
 8008d66:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d6e:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008d70:	4b24      	ldr	r3, [pc, #144]	; (8008e04 <HAL_RTC_Init+0x100>)
 8008d72:	699a      	ldr	r2, [r3, #24]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6859      	ldr	r1, [r3, #4]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	4319      	orrs	r1, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	430b      	orrs	r3, r1
 8008d84:	491f      	ldr	r1, [pc, #124]	; (8008e04 <HAL_RTC_Init+0x100>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	041b      	lsls	r3, r3, #16
 8008d94:	491b      	ldr	r1, [pc, #108]	; (8008e04 <HAL_RTC_Init+0x100>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008d9a:	4b1a      	ldr	r3, [pc, #104]	; (8008e04 <HAL_RTC_Init+0x100>)
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008daa:	430b      	orrs	r3, r1
 8008dac:	4915      	ldr	r1, [pc, #84]	; (8008e04 <HAL_RTC_Init+0x100>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f896 	bl	8008ee4 <RTC_ExitInitMode>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10e      	bne.n	8008de0 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 8008dc2:	4b10      	ldr	r3, [pc, #64]	; (8008e04 <HAL_RTC_Init+0x100>)
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a19      	ldr	r1, [r3, #32]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	4319      	orrs	r1, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	430b      	orrs	r3, r1
 8008dda:	490a      	ldr	r1, [pc, #40]	; (8008e04 <HAL_RTC_Init+0x100>)
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008de0:	4b08      	ldr	r3, [pc, #32]	; (8008e04 <HAL_RTC_Init+0x100>)
 8008de2:	22ff      	movs	r2, #255	; 0xff
 8008de4:	625a      	str	r2, [r3, #36]	; 0x24
 8008de6:	e001      	b.n	8008dec <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d103      	bne.n	8008dfa <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	44007800 	.word	0x44007800

08008e08 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008e10:	4b15      	ldr	r3, [pc, #84]	; (8008e68 <HAL_RTC_WaitForSynchro+0x60>)
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	4a14      	ldr	r2, [pc, #80]	; (8008e68 <HAL_RTC_WaitForSynchro+0x60>)
 8008e16:	f023 0320 	bic.w	r3, r3, #32
 8008e1a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008e1c:	f7f8 fef6 	bl	8001c0c <HAL_GetTick>
 8008e20:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008e22:	e013      	b.n	8008e4c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e24:	f7f8 fef2 	bl	8001c0c <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e32:	d90b      	bls.n	8008e4c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008e34:	4b0c      	ldr	r3, [pc, #48]	; (8008e68 <HAL_RTC_WaitForSynchro+0x60>)
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	f003 0320 	and.w	r3, r3, #32
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10c      	bne.n	8008e5a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2203      	movs	r2, #3
 8008e44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e008      	b.n	8008e5e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008e4c:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <HAL_RTC_WaitForSynchro+0x60>)
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	f003 0320 	and.w	r3, r3, #32
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0e5      	beq.n	8008e24 <HAL_RTC_WaitForSynchro+0x1c>
 8008e58:	e000      	b.n	8008e5c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8008e5a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	44007800 	.word	0x44007800

08008e6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008e78:	4b19      	ldr	r3, [pc, #100]	; (8008ee0 <RTC_EnterInitMode+0x74>)
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d128      	bne.n	8008ed6 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008e84:	4b16      	ldr	r3, [pc, #88]	; (8008ee0 <RTC_EnterInitMode+0x74>)
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	4a15      	ldr	r2, [pc, #84]	; (8008ee0 <RTC_EnterInitMode+0x74>)
 8008e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e8e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008e90:	f7f8 febc 	bl	8001c0c <HAL_GetTick>
 8008e94:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008e96:	e013      	b.n	8008ec0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008e98:	f7f8 feb8 	bl	8001c0c <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ea6:	d90b      	bls.n	8008ec0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008ea8:	4b0d      	ldr	r3, [pc, #52]	; (8008ee0 <RTC_EnterInitMode+0x74>)
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10f      	bne.n	8008ed4 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2203      	movs	r2, #3
 8008ebc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008ec0:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <RTC_EnterInitMode+0x74>)
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d104      	bne.n	8008ed6 <RTC_EnterInitMode+0x6a>
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d1e2      	bne.n	8008e98 <RTC_EnterInitMode+0x2c>
 8008ed2:	e000      	b.n	8008ed6 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8008ed4:	bf00      	nop
        }
      }
    }
  }

  return status;
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	44007800 	.word	0x44007800

08008ee4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008ef0:	4b1a      	ldr	r3, [pc, #104]	; (8008f5c <RTC_ExitInitMode+0x78>)
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	4a19      	ldr	r2, [pc, #100]	; (8008f5c <RTC_ExitInitMode+0x78>)
 8008ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008efa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008efc:	4b17      	ldr	r3, [pc, #92]	; (8008f5c <RTC_ExitInitMode+0x78>)
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	f003 0320 	and.w	r3, r3, #32
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10c      	bne.n	8008f22 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7ff ff7d 	bl	8008e08 <HAL_RTC_WaitForSynchro>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d01e      	beq.n	8008f52 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2203      	movs	r2, #3
 8008f18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	73fb      	strb	r3, [r7, #15]
 8008f20:	e017      	b.n	8008f52 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008f22:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <RTC_ExitInitMode+0x78>)
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	4a0d      	ldr	r2, [pc, #52]	; (8008f5c <RTC_ExitInitMode+0x78>)
 8008f28:	f023 0320 	bic.w	r3, r3, #32
 8008f2c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff ff6a 	bl	8008e08 <HAL_RTC_WaitForSynchro>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d005      	beq.n	8008f46 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2203      	movs	r2, #3
 8008f3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008f46:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <RTC_ExitInitMode+0x78>)
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	4a04      	ldr	r2, [pc, #16]	; (8008f5c <RTC_ExitInitMode+0x78>)
 8008f4c:	f043 0320 	orr.w	r3, r3, #32
 8008f50:	6193      	str	r3, [r2, #24]
  }
  return status;
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	44007800 	.word	0x44007800

08008f60 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 8008f6c:	4b07      	ldr	r3, [pc, #28]	; (8008f8c <HAL_RTCEx_BKUPWrite+0x2c>)
 8008f6e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	4413      	add	r3, r2
 8008f78:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	601a      	str	r2, [r3, #0]
}
 8008f80:	bf00      	nop
 8008f82:	371c      	adds	r7, #28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	44007d00 	.word	0x44007d00

08008f90 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 8008f9a:	4b07      	ldr	r3, [pc, #28]	; (8008fb8 <HAL_RTCEx_BKUPRead+0x28>)
 8008f9c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	44007d00 	.word	0x44007d00

08008fbc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	4910      	ldr	r1, [pc, #64]	; (8009010 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	490c      	ldr	r1, [pc, #48]	; (8009014 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	624b      	str	r3, [r1, #36]	; 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 8008fe8:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	6919      	ldr	r1, [r3, #16]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	041b      	lsls	r3, r3, #16
 8008ffa:	430b      	orrs	r3, r1
 8008ffc:	4905      	ldr	r1, [pc, #20]	; (8009014 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	44007800 	.word	0x44007800
 8009014:	44007c00 	.word	0x44007c00

08009018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e049      	b.n	80090be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b00      	cmp	r3, #0
 8009034:	d106      	bne.n	8009044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f841 	bl	80090c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2202      	movs	r2, #2
 8009048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3304      	adds	r3, #4
 8009054:	4619      	mov	r1, r3
 8009056:	4610      	mov	r0, r2
 8009058:	f000 fa60 	bl	800951c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b083      	sub	sp, #12
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80090ce:	bf00      	nop
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
	...

080090dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d001      	beq.n	80090f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e07c      	b.n	80091ee <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2202      	movs	r2, #2
 80090f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68da      	ldr	r2, [r3, #12]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f042 0201 	orr.w	r2, r2, #1
 800910a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a3a      	ldr	r2, [pc, #232]	; (80091fc <HAL_TIM_Base_Start_IT+0x120>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d04a      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a39      	ldr	r2, [pc, #228]	; (8009200 <HAL_TIM_Base_Start_IT+0x124>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d045      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009128:	d040      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009132:	d03b      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a32      	ldr	r2, [pc, #200]	; (8009204 <HAL_TIM_Base_Start_IT+0x128>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d036      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a31      	ldr	r2, [pc, #196]	; (8009208 <HAL_TIM_Base_Start_IT+0x12c>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d031      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a2f      	ldr	r2, [pc, #188]	; (800920c <HAL_TIM_Base_Start_IT+0x130>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d02c      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a2e      	ldr	r2, [pc, #184]	; (8009210 <HAL_TIM_Base_Start_IT+0x134>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d027      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a2c      	ldr	r2, [pc, #176]	; (8009214 <HAL_TIM_Base_Start_IT+0x138>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d022      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a2b      	ldr	r2, [pc, #172]	; (8009218 <HAL_TIM_Base_Start_IT+0x13c>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d01d      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a29      	ldr	r2, [pc, #164]	; (800921c <HAL_TIM_Base_Start_IT+0x140>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d018      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a28      	ldr	r2, [pc, #160]	; (8009220 <HAL_TIM_Base_Start_IT+0x144>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d013      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a26      	ldr	r2, [pc, #152]	; (8009224 <HAL_TIM_Base_Start_IT+0x148>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d00e      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a25      	ldr	r2, [pc, #148]	; (8009228 <HAL_TIM_Base_Start_IT+0x14c>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d009      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a23      	ldr	r2, [pc, #140]	; (800922c <HAL_TIM_Base_Start_IT+0x150>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d004      	beq.n	80091ac <HAL_TIM_Base_Start_IT+0xd0>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a22      	ldr	r2, [pc, #136]	; (8009230 <HAL_TIM_Base_Start_IT+0x154>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d115      	bne.n	80091d8 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689a      	ldr	r2, [r3, #8]
 80091b2:	4b20      	ldr	r3, [pc, #128]	; (8009234 <HAL_TIM_Base_Start_IT+0x158>)
 80091b4:	4013      	ands	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2b06      	cmp	r3, #6
 80091bc:	d015      	beq.n	80091ea <HAL_TIM_Base_Start_IT+0x10e>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091c4:	d011      	beq.n	80091ea <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f042 0201 	orr.w	r2, r2, #1
 80091d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d6:	e008      	b.n	80091ea <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f042 0201 	orr.w	r2, r2, #1
 80091e6:	601a      	str	r2, [r3, #0]
 80091e8:	e000      	b.n	80091ec <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	40012c00 	.word	0x40012c00
 8009200:	50012c00 	.word	0x50012c00
 8009204:	40000400 	.word	0x40000400
 8009208:	50000400 	.word	0x50000400
 800920c:	40000800 	.word	0x40000800
 8009210:	50000800 	.word	0x50000800
 8009214:	40000c00 	.word	0x40000c00
 8009218:	50000c00 	.word	0x50000c00
 800921c:	40013400 	.word	0x40013400
 8009220:	50013400 	.word	0x50013400
 8009224:	40001800 	.word	0x40001800
 8009228:	50001800 	.word	0x50001800
 800922c:	40014000 	.word	0x40014000
 8009230:	50014000 	.word	0x50014000
 8009234:	00010007 	.word	0x00010007

08009238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b00      	cmp	r3, #0
 8009258:	d020      	beq.n	800929c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d01b      	beq.n	800929c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f06f 0202 	mvn.w	r2, #2
 800926c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	f003 0303 	and.w	r3, r3, #3
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f92c 	bl	80094e0 <HAL_TIM_IC_CaptureCallback>
 8009288:	e005      	b.n	8009296 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f91e 	bl	80094cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f92f 	bl	80094f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f003 0304 	and.w	r3, r3, #4
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d020      	beq.n	80092e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f003 0304 	and.w	r3, r3, #4
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d01b      	beq.n	80092e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f06f 0204 	mvn.w	r2, #4
 80092b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2202      	movs	r2, #2
 80092be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f906 	bl	80094e0 <HAL_TIM_IC_CaptureCallback>
 80092d4:	e005      	b.n	80092e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f8f8 	bl	80094cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f909 	bl	80094f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f003 0308 	and.w	r3, r3, #8
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d020      	beq.n	8009334 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f003 0308 	and.w	r3, r3, #8
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d01b      	beq.n	8009334 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f06f 0208 	mvn.w	r2, #8
 8009304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2204      	movs	r2, #4
 800930a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	69db      	ldr	r3, [r3, #28]
 8009312:	f003 0303 	and.w	r3, r3, #3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f8e0 	bl	80094e0 <HAL_TIM_IC_CaptureCallback>
 8009320:	e005      	b.n	800932e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f8d2 	bl	80094cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f8e3 	bl	80094f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	f003 0310 	and.w	r3, r3, #16
 800933a:	2b00      	cmp	r3, #0
 800933c:	d020      	beq.n	8009380 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f003 0310 	and.w	r3, r3, #16
 8009344:	2b00      	cmp	r3, #0
 8009346:	d01b      	beq.n	8009380 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f06f 0210 	mvn.w	r2, #16
 8009350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2208      	movs	r2, #8
 8009356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f8ba 	bl	80094e0 <HAL_TIM_IC_CaptureCallback>
 800936c:	e005      	b.n	800937a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f8ac 	bl	80094cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f8bd 	bl	80094f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00c      	beq.n	80093a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f003 0301 	and.w	r3, r3, #1
 8009390:	2b00      	cmp	r3, #0
 8009392:	d007      	beq.n	80093a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f06f 0201 	mvn.w	r2, #1
 800939c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7f7 fbb4 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00c      	beq.n	80093c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d007      	beq.n	80093c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f9d2 	bl	800976c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00c      	beq.n	80093ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d007      	beq.n	80093ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80093e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f9ca 	bl	8009780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00c      	beq.n	8009410 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d007      	beq.n	8009410 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f87c 	bl	8009508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	f003 0320 	and.w	r3, r3, #32
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00c      	beq.n	8009434 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b00      	cmp	r3, #0
 8009422:	d007      	beq.n	8009434 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f06f 0220 	mvn.w	r2, #32
 800942c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f992 	bl	8009758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00c      	beq.n	8009458 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d007      	beq.n	8009458 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f99e 	bl	8009794 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00c      	beq.n	800947c <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d007      	beq.n	800947c <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f996 	bl	80097a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00c      	beq.n	80094a0 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d007      	beq.n	80094a0 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f98e 	bl	80097bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00c      	beq.n	80094c4 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d007      	beq.n	80094c4 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80094bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f986 	bl	80097d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094c4:	bf00      	nop
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a74      	ldr	r2, [pc, #464]	; (8009700 <TIM_Base_SetConfig+0x1e4>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d02b      	beq.n	800958c <TIM_Base_SetConfig+0x70>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a73      	ldr	r2, [pc, #460]	; (8009704 <TIM_Base_SetConfig+0x1e8>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d027      	beq.n	800958c <TIM_Base_SetConfig+0x70>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009542:	d023      	beq.n	800958c <TIM_Base_SetConfig+0x70>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800954a:	d01f      	beq.n	800958c <TIM_Base_SetConfig+0x70>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a6e      	ldr	r2, [pc, #440]	; (8009708 <TIM_Base_SetConfig+0x1ec>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d01b      	beq.n	800958c <TIM_Base_SetConfig+0x70>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a6d      	ldr	r2, [pc, #436]	; (800970c <TIM_Base_SetConfig+0x1f0>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d017      	beq.n	800958c <TIM_Base_SetConfig+0x70>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a6c      	ldr	r2, [pc, #432]	; (8009710 <TIM_Base_SetConfig+0x1f4>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d013      	beq.n	800958c <TIM_Base_SetConfig+0x70>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a6b      	ldr	r2, [pc, #428]	; (8009714 <TIM_Base_SetConfig+0x1f8>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d00f      	beq.n	800958c <TIM_Base_SetConfig+0x70>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a6a      	ldr	r2, [pc, #424]	; (8009718 <TIM_Base_SetConfig+0x1fc>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d00b      	beq.n	800958c <TIM_Base_SetConfig+0x70>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a69      	ldr	r2, [pc, #420]	; (800971c <TIM_Base_SetConfig+0x200>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d007      	beq.n	800958c <TIM_Base_SetConfig+0x70>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a68      	ldr	r2, [pc, #416]	; (8009720 <TIM_Base_SetConfig+0x204>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d003      	beq.n	800958c <TIM_Base_SetConfig+0x70>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a67      	ldr	r2, [pc, #412]	; (8009724 <TIM_Base_SetConfig+0x208>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d108      	bne.n	800959e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	4313      	orrs	r3, r2
 800959c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a57      	ldr	r2, [pc, #348]	; (8009700 <TIM_Base_SetConfig+0x1e4>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d05b      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a56      	ldr	r2, [pc, #344]	; (8009704 <TIM_Base_SetConfig+0x1e8>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d057      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095b4:	d053      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095bc:	d04f      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a51      	ldr	r2, [pc, #324]	; (8009708 <TIM_Base_SetConfig+0x1ec>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d04b      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a50      	ldr	r2, [pc, #320]	; (800970c <TIM_Base_SetConfig+0x1f0>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d047      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a4f      	ldr	r2, [pc, #316]	; (8009710 <TIM_Base_SetConfig+0x1f4>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d043      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a4e      	ldr	r2, [pc, #312]	; (8009714 <TIM_Base_SetConfig+0x1f8>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d03f      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a4d      	ldr	r2, [pc, #308]	; (8009718 <TIM_Base_SetConfig+0x1fc>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d03b      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a4c      	ldr	r2, [pc, #304]	; (800971c <TIM_Base_SetConfig+0x200>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d037      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a4b      	ldr	r2, [pc, #300]	; (8009720 <TIM_Base_SetConfig+0x204>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d033      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a4a      	ldr	r2, [pc, #296]	; (8009724 <TIM_Base_SetConfig+0x208>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d02f      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a49      	ldr	r2, [pc, #292]	; (8009728 <TIM_Base_SetConfig+0x20c>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d02b      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a48      	ldr	r2, [pc, #288]	; (800972c <TIM_Base_SetConfig+0x210>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d027      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a47      	ldr	r2, [pc, #284]	; (8009730 <TIM_Base_SetConfig+0x214>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d023      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a46      	ldr	r2, [pc, #280]	; (8009734 <TIM_Base_SetConfig+0x218>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d01f      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a45      	ldr	r2, [pc, #276]	; (8009738 <TIM_Base_SetConfig+0x21c>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d01b      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a44      	ldr	r2, [pc, #272]	; (800973c <TIM_Base_SetConfig+0x220>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d017      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a43      	ldr	r2, [pc, #268]	; (8009740 <TIM_Base_SetConfig+0x224>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d013      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a42      	ldr	r2, [pc, #264]	; (8009744 <TIM_Base_SetConfig+0x228>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d00f      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a41      	ldr	r2, [pc, #260]	; (8009748 <TIM_Base_SetConfig+0x22c>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d00b      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a40      	ldr	r2, [pc, #256]	; (800974c <TIM_Base_SetConfig+0x230>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d007      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a3f      	ldr	r2, [pc, #252]	; (8009750 <TIM_Base_SetConfig+0x234>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d003      	beq.n	800965e <TIM_Base_SetConfig+0x142>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a3e      	ldr	r2, [pc, #248]	; (8009754 <TIM_Base_SetConfig+0x238>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d108      	bne.n	8009670 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	4313      	orrs	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	4313      	orrs	r3, r2
 800967c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	689a      	ldr	r2, [r3, #8]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a1a      	ldr	r2, [pc, #104]	; (8009700 <TIM_Base_SetConfig+0x1e4>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d023      	beq.n	80096e4 <TIM_Base_SetConfig+0x1c8>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a19      	ldr	r2, [pc, #100]	; (8009704 <TIM_Base_SetConfig+0x1e8>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d01f      	beq.n	80096e4 <TIM_Base_SetConfig+0x1c8>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a1e      	ldr	r2, [pc, #120]	; (8009720 <TIM_Base_SetConfig+0x204>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d01b      	beq.n	80096e4 <TIM_Base_SetConfig+0x1c8>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a1d      	ldr	r2, [pc, #116]	; (8009724 <TIM_Base_SetConfig+0x208>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d017      	beq.n	80096e4 <TIM_Base_SetConfig+0x1c8>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a22      	ldr	r2, [pc, #136]	; (8009740 <TIM_Base_SetConfig+0x224>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d013      	beq.n	80096e4 <TIM_Base_SetConfig+0x1c8>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a21      	ldr	r2, [pc, #132]	; (8009744 <TIM_Base_SetConfig+0x228>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d00f      	beq.n	80096e4 <TIM_Base_SetConfig+0x1c8>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a20      	ldr	r2, [pc, #128]	; (8009748 <TIM_Base_SetConfig+0x22c>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d00b      	beq.n	80096e4 <TIM_Base_SetConfig+0x1c8>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a1f      	ldr	r2, [pc, #124]	; (800974c <TIM_Base_SetConfig+0x230>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d007      	beq.n	80096e4 <TIM_Base_SetConfig+0x1c8>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a1e      	ldr	r2, [pc, #120]	; (8009750 <TIM_Base_SetConfig+0x234>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d003      	beq.n	80096e4 <TIM_Base_SetConfig+0x1c8>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a1d      	ldr	r2, [pc, #116]	; (8009754 <TIM_Base_SetConfig+0x238>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d103      	bne.n	80096ec <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	691a      	ldr	r2, [r3, #16]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	615a      	str	r2, [r3, #20]
}
 80096f2:	bf00      	nop
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	40012c00 	.word	0x40012c00
 8009704:	50012c00 	.word	0x50012c00
 8009708:	40000400 	.word	0x40000400
 800970c:	50000400 	.word	0x50000400
 8009710:	40000800 	.word	0x40000800
 8009714:	50000800 	.word	0x50000800
 8009718:	40000c00 	.word	0x40000c00
 800971c:	50000c00 	.word	0x50000c00
 8009720:	40013400 	.word	0x40013400
 8009724:	50013400 	.word	0x50013400
 8009728:	40001800 	.word	0x40001800
 800972c:	50001800 	.word	0x50001800
 8009730:	40001c00 	.word	0x40001c00
 8009734:	50001c00 	.word	0x50001c00
 8009738:	40002000 	.word	0x40002000
 800973c:	50002000 	.word	0x50002000
 8009740:	40014000 	.word	0x40014000
 8009744:	50014000 	.word	0x50014000
 8009748:	40014400 	.word	0x40014400
 800974c:	50014400 	.word	0x50014400
 8009750:	40014800 	.word	0x40014800
 8009754:	50014800 	.word	0x50014800

08009758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e042      	b.n	800987c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d106      	bne.n	800980e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7f7 faad 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2224      	movs	r2, #36	; 0x24
 8009812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f022 0201 	bic.w	r2, r2, #1
 8009824:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982a:	2b00      	cmp	r3, #0
 800982c:	d002      	beq.n	8009834 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fe0a 	bl	800a448 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fc19 	bl	800a06c <UART_SetConfig>
 800983a:	4603      	mov	r3, r0
 800983c:	2b01      	cmp	r3, #1
 800983e:	d101      	bne.n	8009844 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e01b      	b.n	800987c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	685a      	ldr	r2, [r3, #4]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689a      	ldr	r2, [r3, #8]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0201 	orr.w	r2, r2, #1
 8009872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fe89 	bl	800a58c <UART_CheckIdleState>
 800987a:	4603      	mov	r3, r0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b08a      	sub	sp, #40	; 0x28
 8009888:	af02      	add	r7, sp, #8
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	603b      	str	r3, [r7, #0]
 8009890:	4613      	mov	r3, r2
 8009892:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800989a:	2b20      	cmp	r3, #32
 800989c:	f040 808b 	bne.w	80099b6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <HAL_UART_Transmit+0x28>
 80098a6:	88fb      	ldrh	r3, [r7, #6]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d101      	bne.n	80098b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e083      	b.n	80099b8 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ba:	2b80      	cmp	r3, #128	; 0x80
 80098bc:	d107      	bne.n	80098ce <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	689a      	ldr	r2, [r3, #8]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098cc:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2221      	movs	r2, #33	; 0x21
 80098da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098de:	f7f8 f995 	bl	8001c0c <HAL_GetTick>
 80098e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	88fa      	ldrh	r2, [r7, #6]
 80098e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	88fa      	ldrh	r2, [r7, #6]
 80098f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098fc:	d108      	bne.n	8009910 <HAL_UART_Transmit+0x8c>
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d104      	bne.n	8009910 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009906:	2300      	movs	r3, #0
 8009908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	61bb      	str	r3, [r7, #24]
 800990e:	e003      	b.n	8009918 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009914:	2300      	movs	r3, #0
 8009916:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009918:	e030      	b.n	800997c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	2200      	movs	r2, #0
 8009922:	2180      	movs	r1, #128	; 0x80
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 fedb 	bl	800a6e0 <UART_WaitOnFlagUntilTimeout>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d005      	beq.n	800993c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2220      	movs	r2, #32
 8009934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e03d      	b.n	80099b8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10b      	bne.n	800995a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009950:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	3302      	adds	r3, #2
 8009956:	61bb      	str	r3, [r7, #24]
 8009958:	e007      	b.n	800996a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	781a      	ldrb	r2, [r3, #0]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	3301      	adds	r3, #1
 8009968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009970:	b29b      	uxth	r3, r3
 8009972:	3b01      	subs	r3, #1
 8009974:	b29a      	uxth	r2, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009982:	b29b      	uxth	r3, r3
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1c8      	bne.n	800991a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	2200      	movs	r2, #0
 8009990:	2140      	movs	r1, #64	; 0x40
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 fea4 	bl	800a6e0 <UART_WaitOnFlagUntilTimeout>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d005      	beq.n	80099aa <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2220      	movs	r2, #32
 80099a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80099a6:	2303      	movs	r3, #3
 80099a8:	e006      	b.n	80099b8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2220      	movs	r2, #32
 80099ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	e000      	b.n	80099b8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80099b6:	2302      	movs	r3, #2
  }
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3720      	adds	r7, #32
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08a      	sub	sp, #40	; 0x28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	4613      	mov	r3, r2
 80099cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099d4:	2b20      	cmp	r3, #32
 80099d6:	d14b      	bne.n	8009a70 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <HAL_UART_Receive_IT+0x24>
 80099de:	88fb      	ldrh	r3, [r7, #6]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e044      	b.n	8009a72 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f8:	2b40      	cmp	r3, #64	; 0x40
 80099fa:	d107      	bne.n	8009a0c <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	689a      	ldr	r2, [r3, #8]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a0a:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a1a      	ldr	r2, [pc, #104]	; (8009a7c <HAL_UART_Receive_IT+0xbc>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d024      	beq.n	8009a60 <HAL_UART_Receive_IT+0xa0>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a19      	ldr	r2, [pc, #100]	; (8009a80 <HAL_UART_Receive_IT+0xc0>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d01f      	beq.n	8009a60 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d018      	beq.n	8009a60 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	e853 3f00 	ldrex	r3, [r3]
 8009a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	623b      	str	r3, [r7, #32]
 8009a4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a50:	69f9      	ldr	r1, [r7, #28]
 8009a52:	6a3a      	ldr	r2, [r7, #32]
 8009a54:	e841 2300 	strex	r3, r2, [r1]
 8009a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1e6      	bne.n	8009a2e <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009a60:	88fb      	ldrh	r3, [r7, #6]
 8009a62:	461a      	mov	r2, r3
 8009a64:	68b9      	ldr	r1, [r7, #8]
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 fea2 	bl	800a7b0 <UART_Start_Receive_IT>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	e000      	b.n	8009a72 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8009a70:	2302      	movs	r3, #2
  }
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3728      	adds	r7, #40	; 0x28
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	44002400 	.word	0x44002400
 8009a80:	54002400 	.word	0x54002400

08009a84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b0ae      	sub	sp, #184	; 0xb8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009aaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009aae:	f640 030f 	movw	r3, #2063	; 0x80f
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8009ab8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d11b      	bne.n	8009af8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ac0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ac4:	f003 0320 	and.w	r3, r3, #32
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d015      	beq.n	8009af8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009acc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009ad0:	f003 0320 	and.w	r3, r3, #32
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d105      	bne.n	8009ae4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d009      	beq.n	8009af8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 8293 	beq.w	800a014 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	4798      	blx	r3
      }
      return;
 8009af6:	e28d      	b.n	800a014 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009af8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f000 80fd 	beq.w	8009cfc <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009b06:	4b7a      	ldr	r3, [pc, #488]	; (8009cf0 <HAL_UART_IRQHandler+0x26c>)
 8009b08:	4013      	ands	r3, r2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d106      	bne.n	8009b1c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b12:	4b78      	ldr	r3, [pc, #480]	; (8009cf4 <HAL_UART_IRQHandler+0x270>)
 8009b14:	4013      	ands	r3, r2
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f000 80f0 	beq.w	8009cfc <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d011      	beq.n	8009b4c <HAL_UART_IRQHandler+0xc8>
 8009b28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00b      	beq.n	8009b4c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b42:	f043 0201 	orr.w	r2, r3, #1
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b50:	f003 0302 	and.w	r3, r3, #2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d011      	beq.n	8009b7c <HAL_UART_IRQHandler+0xf8>
 8009b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b5c:	f003 0301 	and.w	r3, r3, #1
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00b      	beq.n	8009b7c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2202      	movs	r2, #2
 8009b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b72:	f043 0204 	orr.w	r2, r3, #4
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b80:	f003 0304 	and.w	r3, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d011      	beq.n	8009bac <HAL_UART_IRQHandler+0x128>
 8009b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00b      	beq.n	8009bac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2204      	movs	r2, #4
 8009b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba2:	f043 0202 	orr.w	r2, r3, #2
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009bac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bb0:	f003 0308 	and.w	r3, r3, #8
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d017      	beq.n	8009be8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009bbc:	f003 0320 	and.w	r3, r3, #32
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d105      	bne.n	8009bd0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009bc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009bc8:	4b49      	ldr	r3, [pc, #292]	; (8009cf0 <HAL_UART_IRQHandler+0x26c>)
 8009bca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00b      	beq.n	8009be8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2208      	movs	r2, #8
 8009bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bde:	f043 0208 	orr.w	r2, r3, #8
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009be8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d012      	beq.n	8009c1a <HAL_UART_IRQHandler+0x196>
 8009bf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00c      	beq.n	8009c1a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c10:	f043 0220 	orr.w	r2, r3, #32
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 81f9 	beq.w	800a018 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c2a:	f003 0320 	and.w	r3, r3, #32
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d013      	beq.n	8009c5a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c36:	f003 0320 	and.w	r3, r3, #32
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d105      	bne.n	8009c4a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d007      	beq.n	8009c5a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d003      	beq.n	8009c5a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c6e:	2b40      	cmp	r3, #64	; 0x40
 8009c70:	d005      	beq.n	8009c7e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d02e      	beq.n	8009cdc <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 feb8 	bl	800a9f4 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c8e:	2b40      	cmp	r3, #64	; 0x40
 8009c90:	d120      	bne.n	8009cd4 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d017      	beq.n	8009ccc <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ca2:	4a15      	ldr	r2, [pc, #84]	; (8009cf8 <HAL_UART_IRQHandler+0x274>)
 8009ca4:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7f8 f94f 	bl	8001f50 <HAL_DMA_Abort_IT>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d019      	beq.n	8009cec <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cca:	e00f      	b.n	8009cec <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f9b7 	bl	800a040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cd2:	e00b      	b.n	8009cec <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f9b3 	bl	800a040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cda:	e007      	b.n	8009cec <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f9af 	bl	800a040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009cea:	e195      	b.n	800a018 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cec:	bf00      	nop
    return;
 8009cee:	e193      	b.n	800a018 <HAL_UART_IRQHandler+0x594>
 8009cf0:	10000001 	.word	0x10000001
 8009cf4:	04000120 	.word	0x04000120
 8009cf8:	0800aac1 	.word	0x0800aac1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	f040 8129 	bne.w	8009f58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d0a:	f003 0310 	and.w	r3, r3, #16
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f000 8122 	beq.w	8009f58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009d18:	f003 0310 	and.w	r3, r3, #16
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f000 811b 	beq.w	8009f58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2210      	movs	r2, #16
 8009d28:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d34:	2b40      	cmp	r3, #64	; 0x40
 8009d36:	f040 8091 	bne.w	8009e5c <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d44:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 8009d48:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 8165 	beq.w	800a01c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d58:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	f080 815d 	bcs.w	800a01c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8009d68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d74:	2b81      	cmp	r3, #129	; 0x81
 8009d76:	d060      	beq.n	8009e3a <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	461a      	mov	r2, r3
 8009d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d9e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009da2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009da6:	e841 2300 	strex	r3, r2, [r1]
 8009daa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1e2      	bne.n	8009d78 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3308      	adds	r3, #8
 8009db8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dbc:	e853 3f00 	ldrex	r3, [r3]
 8009dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dc4:	f023 0301 	bic.w	r3, r3, #1
 8009dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009dd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009dd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ddc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009dde:	e841 2300 	strex	r3, r2, [r1]
 8009de2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1e3      	bne.n	8009db2 <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2220      	movs	r2, #32
 8009dee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e08:	f023 0310 	bic.w	r3, r3, #16
 8009e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	461a      	mov	r2, r3
 8009e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e22:	e841 2300 	strex	r3, r2, [r1]
 8009e26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1e4      	bne.n	8009df8 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7f8 f80f 	bl	8001e58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2202      	movs	r2, #2
 8009e3e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f8fd 	bl	800a054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e5a:	e0df      	b.n	800a01c <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 80d1 	beq.w	800a020 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8009e7e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f000 80cc 	beq.w	800a020 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e90:	e853 3f00 	ldrex	r3, [r3]
 8009e94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8009eac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e4      	bne.n	8009e88 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3308      	adds	r3, #8
 8009ec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	e853 3f00 	ldrex	r3, [r3]
 8009ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ed4:	f023 0301 	bic.w	r3, r3, #1
 8009ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009ee6:	633a      	str	r2, [r7, #48]	; 0x30
 8009ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e1      	bne.n	8009ebe <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2220      	movs	r2, #32
 8009efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	e853 3f00 	ldrex	r3, [r3]
 8009f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f023 0310 	bic.w	r3, r3, #16
 8009f22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f30:	61fb      	str	r3, [r7, #28]
 8009f32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f34:	69b9      	ldr	r1, [r7, #24]
 8009f36:	69fa      	ldr	r2, [r7, #28]
 8009f38:	e841 2300 	strex	r3, r2, [r1]
 8009f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e4      	bne.n	8009f0e <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2202      	movs	r2, #2
 8009f48:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f4a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f87f 	bl	800a054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f56:	e063      	b.n	800a020 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00e      	beq.n	8009f82 <HAL_UART_IRQHandler+0x4fe>
 8009f64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d008      	beq.n	8009f82 <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 fb1a 	bl	800b5b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f80:	e051      	b.n	800a026 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d014      	beq.n	8009fb8 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d105      	bne.n	8009fa6 <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d008      	beq.n	8009fb8 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d03a      	beq.n	800a024 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	4798      	blx	r3
    }
    return;
 8009fb6:	e035      	b.n	800a024 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009fb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d009      	beq.n	8009fd8 <HAL_UART_IRQHandler+0x554>
 8009fc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d003      	beq.n	8009fd8 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fd8b 	bl	800aaec <UART_EndTransmit_IT>
    return;
 8009fd6:	e026      	b.n	800a026 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009fd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d009      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x574>
 8009fe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009fe8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d003      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f001 faf3 	bl	800b5dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ff6:	e016      	b.n	800a026 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ff8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d010      	beq.n	800a026 <HAL_UART_IRQHandler+0x5a2>
 800a004:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	da0c      	bge.n	800a026 <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f001 fadb 	bl	800b5c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a012:	e008      	b.n	800a026 <HAL_UART_IRQHandler+0x5a2>
      return;
 800a014:	bf00      	nop
 800a016:	e006      	b.n	800a026 <HAL_UART_IRQHandler+0x5a2>
    return;
 800a018:	bf00      	nop
 800a01a:	e004      	b.n	800a026 <HAL_UART_IRQHandler+0x5a2>
      return;
 800a01c:	bf00      	nop
 800a01e:	e002      	b.n	800a026 <HAL_UART_IRQHandler+0x5a2>
      return;
 800a020:	bf00      	nop
 800a022:	e000      	b.n	800a026 <HAL_UART_IRQHandler+0x5a2>
    return;
 800a024:	bf00      	nop
  }
}
 800a026:	37b8      	adds	r7, #184	; 0xb8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	460b      	mov	r3, r1
 800a05e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a06c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a070:	b094      	sub	sp, #80	; 0x50
 800a072:	af00      	add	r7, sp, #0
 800a074:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	4b78      	ldr	r3, [pc, #480]	; (800a264 <UART_SetConfig+0x1f8>)
 800a082:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	689a      	ldr	r2, [r3, #8]
 800a088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	431a      	orrs	r2, r3
 800a08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	431a      	orrs	r2, r3
 800a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a096:	69db      	ldr	r3, [r3, #28]
 800a098:	4313      	orrs	r3, r2
 800a09a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4971      	ldr	r1, [pc, #452]	; (800a268 <UART_SetConfig+0x1fc>)
 800a0a4:	4019      	ands	r1, r3
 800a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ac:	430b      	orrs	r3, r1
 800a0ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	68d9      	ldr	r1, [r3, #12]
 800a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	ea40 0301 	orr.w	r3, r0, r1
 800a0c6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ca:	699b      	ldr	r3, [r3, #24]
 800a0cc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	4b64      	ldr	r3, [pc, #400]	; (800a264 <UART_SetConfig+0x1f8>)
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d009      	beq.n	800a0ec <UART_SetConfig+0x80>
 800a0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	4b63      	ldr	r3, [pc, #396]	; (800a26c <UART_SetConfig+0x200>)
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d004      	beq.n	800a0ec <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e4:	6a1a      	ldr	r2, [r3, #32]
 800a0e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a0f6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a100:	430b      	orrs	r3, r1
 800a102:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10a:	f023 000f 	bic.w	r0, r3, #15
 800a10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a110:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	ea40 0301 	orr.w	r3, r0, r1
 800a11a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	4b53      	ldr	r3, [pc, #332]	; (800a270 <UART_SetConfig+0x204>)
 800a122:	429a      	cmp	r2, r3
 800a124:	d102      	bne.n	800a12c <UART_SetConfig+0xc0>
 800a126:	2301      	movs	r3, #1
 800a128:	64bb      	str	r3, [r7, #72]	; 0x48
 800a12a:	e066      	b.n	800a1fa <UART_SetConfig+0x18e>
 800a12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	4b50      	ldr	r3, [pc, #320]	; (800a274 <UART_SetConfig+0x208>)
 800a132:	429a      	cmp	r2, r3
 800a134:	d102      	bne.n	800a13c <UART_SetConfig+0xd0>
 800a136:	2302      	movs	r3, #2
 800a138:	64bb      	str	r3, [r7, #72]	; 0x48
 800a13a:	e05e      	b.n	800a1fa <UART_SetConfig+0x18e>
 800a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	4b4d      	ldr	r3, [pc, #308]	; (800a278 <UART_SetConfig+0x20c>)
 800a142:	429a      	cmp	r2, r3
 800a144:	d102      	bne.n	800a14c <UART_SetConfig+0xe0>
 800a146:	2304      	movs	r3, #4
 800a148:	64bb      	str	r3, [r7, #72]	; 0x48
 800a14a:	e056      	b.n	800a1fa <UART_SetConfig+0x18e>
 800a14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	4b4a      	ldr	r3, [pc, #296]	; (800a27c <UART_SetConfig+0x210>)
 800a152:	429a      	cmp	r2, r3
 800a154:	d102      	bne.n	800a15c <UART_SetConfig+0xf0>
 800a156:	2308      	movs	r3, #8
 800a158:	64bb      	str	r3, [r7, #72]	; 0x48
 800a15a:	e04e      	b.n	800a1fa <UART_SetConfig+0x18e>
 800a15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	4b47      	ldr	r3, [pc, #284]	; (800a280 <UART_SetConfig+0x214>)
 800a162:	429a      	cmp	r2, r3
 800a164:	d102      	bne.n	800a16c <UART_SetConfig+0x100>
 800a166:	2310      	movs	r3, #16
 800a168:	64bb      	str	r3, [r7, #72]	; 0x48
 800a16a:	e046      	b.n	800a1fa <UART_SetConfig+0x18e>
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	4b44      	ldr	r3, [pc, #272]	; (800a284 <UART_SetConfig+0x218>)
 800a172:	429a      	cmp	r2, r3
 800a174:	d102      	bne.n	800a17c <UART_SetConfig+0x110>
 800a176:	2320      	movs	r3, #32
 800a178:	64bb      	str	r3, [r7, #72]	; 0x48
 800a17a:	e03e      	b.n	800a1fa <UART_SetConfig+0x18e>
 800a17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	4b41      	ldr	r3, [pc, #260]	; (800a288 <UART_SetConfig+0x21c>)
 800a182:	429a      	cmp	r2, r3
 800a184:	d102      	bne.n	800a18c <UART_SetConfig+0x120>
 800a186:	2340      	movs	r3, #64	; 0x40
 800a188:	64bb      	str	r3, [r7, #72]	; 0x48
 800a18a:	e036      	b.n	800a1fa <UART_SetConfig+0x18e>
 800a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	4b3e      	ldr	r3, [pc, #248]	; (800a28c <UART_SetConfig+0x220>)
 800a192:	429a      	cmp	r2, r3
 800a194:	d102      	bne.n	800a19c <UART_SetConfig+0x130>
 800a196:	2380      	movs	r3, #128	; 0x80
 800a198:	64bb      	str	r3, [r7, #72]	; 0x48
 800a19a:	e02e      	b.n	800a1fa <UART_SetConfig+0x18e>
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	4b3b      	ldr	r3, [pc, #236]	; (800a290 <UART_SetConfig+0x224>)
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d103      	bne.n	800a1ae <UART_SetConfig+0x142>
 800a1a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1ac:	e025      	b.n	800a1fa <UART_SetConfig+0x18e>
 800a1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	4b38      	ldr	r3, [pc, #224]	; (800a294 <UART_SetConfig+0x228>)
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d103      	bne.n	800a1c0 <UART_SetConfig+0x154>
 800a1b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1be:	e01c      	b.n	800a1fa <UART_SetConfig+0x18e>
 800a1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	4b34      	ldr	r3, [pc, #208]	; (800a298 <UART_SetConfig+0x22c>)
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d103      	bne.n	800a1d2 <UART_SetConfig+0x166>
 800a1ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1d0:	e013      	b.n	800a1fa <UART_SetConfig+0x18e>
 800a1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	4b31      	ldr	r3, [pc, #196]	; (800a29c <UART_SetConfig+0x230>)
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d103      	bne.n	800a1e4 <UART_SetConfig+0x178>
 800a1dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a1e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1e2:	e00a      	b.n	800a1fa <UART_SetConfig+0x18e>
 800a1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	4b1e      	ldr	r3, [pc, #120]	; (800a264 <UART_SetConfig+0x1f8>)
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d103      	bne.n	800a1f6 <UART_SetConfig+0x18a>
 800a1ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1f4:	e001      	b.n	800a1fa <UART_SetConfig+0x18e>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	4b19      	ldr	r3, [pc, #100]	; (800a264 <UART_SetConfig+0x1f8>)
 800a200:	429a      	cmp	r2, r3
 800a202:	d005      	beq.n	800a210 <UART_SetConfig+0x1a4>
 800a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	4b18      	ldr	r3, [pc, #96]	; (800a26c <UART_SetConfig+0x200>)
 800a20a:	429a      	cmp	r2, r3
 800a20c:	f040 8094 	bne.w	800a338 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a212:	2200      	movs	r2, #0
 800a214:	623b      	str	r3, [r7, #32]
 800a216:	627a      	str	r2, [r7, #36]	; 0x24
 800a218:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a21c:	f7fc f8e8 	bl	80063f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a220:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a224:	2b00      	cmp	r3, #0
 800a226:	f000 80f7 	beq.w	800a418 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	4a1c      	ldr	r2, [pc, #112]	; (800a2a0 <UART_SetConfig+0x234>)
 800a230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a234:	461a      	mov	r2, r3
 800a236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a238:	fbb3 f3f2 	udiv	r3, r3, r2
 800a23c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	4613      	mov	r3, r2
 800a244:	005b      	lsls	r3, r3, #1
 800a246:	4413      	add	r3, r2
 800a248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d305      	bcc.n	800a25a <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a256:	429a      	cmp	r2, r3
 800a258:	d924      	bls.n	800a2a4 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a260:	e069      	b.n	800a336 <UART_SetConfig+0x2ca>
 800a262:	bf00      	nop
 800a264:	44002400 	.word	0x44002400
 800a268:	cfff69f3 	.word	0xcfff69f3
 800a26c:	54002400 	.word	0x54002400
 800a270:	40013800 	.word	0x40013800
 800a274:	40004400 	.word	0x40004400
 800a278:	40004800 	.word	0x40004800
 800a27c:	40004c00 	.word	0x40004c00
 800a280:	40005000 	.word	0x40005000
 800a284:	40006400 	.word	0x40006400
 800a288:	40007800 	.word	0x40007800
 800a28c:	40007c00 	.word	0x40007c00
 800a290:	40008000 	.word	0x40008000
 800a294:	40006800 	.word	0x40006800
 800a298:	40006c00 	.word	0x40006c00
 800a29c:	40008400 	.word	0x40008400
 800a2a0:	0800fb44 	.word	0x0800fb44
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	61bb      	str	r3, [r7, #24]
 800a2aa:	61fa      	str	r2, [r7, #28]
 800a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b0:	4a64      	ldr	r2, [pc, #400]	; (800a444 <UART_SetConfig+0x3d8>)
 800a2b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	613b      	str	r3, [r7, #16]
 800a2bc:	617a      	str	r2, [r7, #20]
 800a2be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a2c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a2c6:	f7f5 fff5 	bl	80002b4 <__aeabi_uldivmod>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	f04f 0200 	mov.w	r2, #0
 800a2d6:	f04f 0300 	mov.w	r3, #0
 800a2da:	020b      	lsls	r3, r1, #8
 800a2dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a2e0:	0202      	lsls	r2, r0, #8
 800a2e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2e4:	6849      	ldr	r1, [r1, #4]
 800a2e6:	0849      	lsrs	r1, r1, #1
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	eb12 0804 	adds.w	r8, r2, r4
 800a2f2:	eb43 0905 	adc.w	r9, r3, r5
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	60bb      	str	r3, [r7, #8]
 800a2fe:	60fa      	str	r2, [r7, #12]
 800a300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a304:	4640      	mov	r0, r8
 800a306:	4649      	mov	r1, r9
 800a308:	f7f5 ffd4 	bl	80002b4 <__aeabi_uldivmod>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	4613      	mov	r3, r2
 800a312:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a31a:	d308      	bcc.n	800a32e <UART_SetConfig+0x2c2>
 800a31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a31e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a322:	d204      	bcs.n	800a32e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800a324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a32a:	60da      	str	r2, [r3, #12]
 800a32c:	e003      	b.n	800a336 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800a334:	e070      	b.n	800a418 <UART_SetConfig+0x3ac>
 800a336:	e06f      	b.n	800a418 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33a:	69db      	ldr	r3, [r3, #28]
 800a33c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a340:	d13c      	bne.n	800a3bc <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a344:	2200      	movs	r2, #0
 800a346:	603b      	str	r3, [r7, #0]
 800a348:	607a      	str	r2, [r7, #4]
 800a34a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a34e:	f7fc f84f 	bl	80063f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a352:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a356:	2b00      	cmp	r3, #0
 800a358:	d05e      	beq.n	800a418 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	4a39      	ldr	r2, [pc, #228]	; (800a444 <UART_SetConfig+0x3d8>)
 800a360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a364:	461a      	mov	r2, r3
 800a366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a368:	fbb3 f3f2 	udiv	r3, r3, r2
 800a36c:	005a      	lsls	r2, r3, #1
 800a36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	085b      	lsrs	r3, r3, #1
 800a374:	441a      	add	r2, r3
 800a376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a37e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a382:	2b0f      	cmp	r3, #15
 800a384:	d916      	bls.n	800a3b4 <UART_SetConfig+0x348>
 800a386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a38c:	d212      	bcs.n	800a3b4 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a38e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a390:	b29b      	uxth	r3, r3
 800a392:	f023 030f 	bic.w	r3, r3, #15
 800a396:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a39a:	085b      	lsrs	r3, r3, #1
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	f003 0307 	and.w	r3, r3, #7
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a3b0:	60da      	str	r2, [r3, #12]
 800a3b2:	e031      	b.n	800a418 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a3ba:	e02d      	b.n	800a418 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a3bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3be:	2200      	movs	r2, #0
 800a3c0:	469a      	mov	sl, r3
 800a3c2:	4693      	mov	fp, r2
 800a3c4:	4650      	mov	r0, sl
 800a3c6:	4659      	mov	r1, fp
 800a3c8:	f7fc f812 	bl	80063f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a3cc:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800a3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d021      	beq.n	800a418 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d8:	4a1a      	ldr	r2, [pc, #104]	; (800a444 <UART_SetConfig+0x3d8>)
 800a3da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	085b      	lsrs	r3, r3, #1
 800a3ec:	441a      	add	r2, r3
 800a3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3fa:	2b0f      	cmp	r3, #15
 800a3fc:	d909      	bls.n	800a412 <UART_SetConfig+0x3a6>
 800a3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a404:	d205      	bcs.n	800a412 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a408:	b29a      	uxth	r2, r3
 800a40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60da      	str	r2, [r3, #12]
 800a410:	e002      	b.n	800a418 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41a:	2201      	movs	r2, #1
 800a41c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a422:	2201      	movs	r2, #1
 800a424:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42a:	2200      	movs	r2, #0
 800a42c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a430:	2200      	movs	r2, #0
 800a432:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a434:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3750      	adds	r7, #80	; 0x50
 800a43c:	46bd      	mov	sp, r7
 800a43e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a442:	bf00      	nop
 800a444:	0800fb44 	.word	0x0800fb44

0800a448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a454:	f003 0308 	and.w	r3, r3, #8
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00a      	beq.n	800a472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	430a      	orrs	r2, r1
 800a470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00a      	beq.n	800a494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	430a      	orrs	r2, r1
 800a492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a498:	f003 0302 	and.w	r3, r3, #2
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00a      	beq.n	800a4b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	430a      	orrs	r2, r1
 800a4b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ba:	f003 0304 	and.w	r3, r3, #4
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00a      	beq.n	800a4d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	430a      	orrs	r2, r1
 800a4d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4dc:	f003 0310 	and.w	r3, r3, #16
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00a      	beq.n	800a4fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fe:	f003 0320 	and.w	r3, r3, #32
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	430a      	orrs	r2, r1
 800a51a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a524:	2b00      	cmp	r3, #0
 800a526:	d01a      	beq.n	800a55e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	430a      	orrs	r2, r1
 800a53c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a546:	d10a      	bne.n	800a55e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	430a      	orrs	r2, r1
 800a55c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00a      	beq.n	800a580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	430a      	orrs	r2, r1
 800a57e:	605a      	str	r2, [r3, #4]
  }
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b098      	sub	sp, #96	; 0x60
 800a590:	af02      	add	r7, sp, #8
 800a592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a59c:	f7f7 fb36 	bl	8001c0c <HAL_GetTick>
 800a5a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 0308 	and.w	r3, r3, #8
 800a5ac:	2b08      	cmp	r3, #8
 800a5ae:	d12f      	bne.n	800a610 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f88e 	bl	800a6e0 <UART_WaitOnFlagUntilTimeout>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d022      	beq.n	800a610 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d2:	e853 3f00 	ldrex	r3, [r3]
 800a5d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5de:	653b      	str	r3, [r7, #80]	; 0x50
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5e8:	647b      	str	r3, [r7, #68]	; 0x44
 800a5ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a5ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5f0:	e841 2300 	strex	r3, r2, [r1]
 800a5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e6      	bne.n	800a5ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2220      	movs	r2, #32
 800a600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e063      	b.n	800a6d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0304 	and.w	r3, r3, #4
 800a61a:	2b04      	cmp	r3, #4
 800a61c:	d149      	bne.n	800a6b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a61e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a626:	2200      	movs	r2, #0
 800a628:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f857 	bl	800a6e0 <UART_WaitOnFlagUntilTimeout>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d03c      	beq.n	800a6b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a640:	e853 3f00 	ldrex	r3, [r3]
 800a644:	623b      	str	r3, [r7, #32]
   return(result);
 800a646:	6a3b      	ldr	r3, [r7, #32]
 800a648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a64c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	461a      	mov	r2, r3
 800a654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a656:	633b      	str	r3, [r7, #48]	; 0x30
 800a658:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a65c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a65e:	e841 2300 	strex	r3, r2, [r1]
 800a662:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1e6      	bne.n	800a638 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3308      	adds	r3, #8
 800a670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	e853 3f00 	ldrex	r3, [r3]
 800a678:	60fb      	str	r3, [r7, #12]
   return(result);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f023 0301 	bic.w	r3, r3, #1
 800a680:	64bb      	str	r3, [r7, #72]	; 0x48
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	3308      	adds	r3, #8
 800a688:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a68a:	61fa      	str	r2, [r7, #28]
 800a68c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68e:	69b9      	ldr	r1, [r7, #24]
 800a690:	69fa      	ldr	r2, [r7, #28]
 800a692:	e841 2300 	strex	r3, r2, [r1]
 800a696:	617b      	str	r3, [r7, #20]
   return(result);
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1e5      	bne.n	800a66a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6ae:	2303      	movs	r3, #3
 800a6b0:	e012      	b.n	800a6d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2220      	movs	r2, #32
 800a6b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2220      	movs	r2, #32
 800a6be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3758      	adds	r7, #88	; 0x58
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	603b      	str	r3, [r7, #0]
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6f0:	e049      	b.n	800a786 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f8:	d045      	beq.n	800a786 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6fa:	f7f7 fa87 	bl	8001c0c <HAL_GetTick>
 800a6fe:	4602      	mov	r2, r0
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	69ba      	ldr	r2, [r7, #24]
 800a706:	429a      	cmp	r2, r3
 800a708:	d302      	bcc.n	800a710 <UART_WaitOnFlagUntilTimeout+0x30>
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d101      	bne.n	800a714 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e048      	b.n	800a7a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 0304 	and.w	r3, r3, #4
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d031      	beq.n	800a786 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	69db      	ldr	r3, [r3, #28]
 800a728:	f003 0308 	and.w	r3, r3, #8
 800a72c:	2b08      	cmp	r3, #8
 800a72e:	d110      	bne.n	800a752 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2208      	movs	r2, #8
 800a736:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f000 f95b 	bl	800a9f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2208      	movs	r2, #8
 800a742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	e029      	b.n	800a7a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	69db      	ldr	r3, [r3, #28]
 800a758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a75c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a760:	d111      	bne.n	800a786 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a76a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f000 f941 	bl	800a9f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2220      	movs	r2, #32
 800a776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e00f      	b.n	800a7a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	69da      	ldr	r2, [r3, #28]
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	4013      	ands	r3, r2
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	429a      	cmp	r2, r3
 800a794:	bf0c      	ite	eq
 800a796:	2301      	moveq	r3, #1
 800a798:	2300      	movne	r3, #0
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	461a      	mov	r2, r3
 800a79e:	79fb      	ldrb	r3, [r7, #7]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d0a6      	beq.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
	...

0800a7b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b0a3      	sub	sp, #140	; 0x8c
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	88fa      	ldrh	r2, [r7, #6]
 800a7c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	88fa      	ldrh	r2, [r7, #6]
 800a7d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7e2:	d10e      	bne.n	800a802 <UART_Start_Receive_IT+0x52>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d105      	bne.n	800a7f8 <UART_Start_Receive_IT+0x48>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a7f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7f6:	e02d      	b.n	800a854 <UART_Start_Receive_IT+0xa4>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	22ff      	movs	r2, #255	; 0xff
 800a7fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a800:	e028      	b.n	800a854 <UART_Start_Receive_IT+0xa4>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10d      	bne.n	800a826 <UART_Start_Receive_IT+0x76>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d104      	bne.n	800a81c <UART_Start_Receive_IT+0x6c>
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	22ff      	movs	r2, #255	; 0xff
 800a816:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a81a:	e01b      	b.n	800a854 <UART_Start_Receive_IT+0xa4>
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	227f      	movs	r2, #127	; 0x7f
 800a820:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a824:	e016      	b.n	800a854 <UART_Start_Receive_IT+0xa4>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a82e:	d10d      	bne.n	800a84c <UART_Start_Receive_IT+0x9c>
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d104      	bne.n	800a842 <UART_Start_Receive_IT+0x92>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	227f      	movs	r2, #127	; 0x7f
 800a83c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a840:	e008      	b.n	800a854 <UART_Start_Receive_IT+0xa4>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	223f      	movs	r2, #63	; 0x3f
 800a846:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a84a:	e003      	b.n	800a854 <UART_Start_Receive_IT+0xa4>
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2222      	movs	r2, #34	; 0x22
 800a860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3308      	adds	r3, #8
 800a86a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a86e:	e853 3f00 	ldrex	r3, [r3]
 800a872:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a874:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a876:	f043 0301 	orr.w	r3, r3, #1
 800a87a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	3308      	adds	r3, #8
 800a884:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a888:	673a      	str	r2, [r7, #112]	; 0x70
 800a88a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a88e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a890:	e841 2300 	strex	r3, r2, [r1]
 800a894:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1e3      	bne.n	800a864 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8a4:	d14f      	bne.n	800a946 <UART_Start_Receive_IT+0x196>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a8ac:	88fa      	ldrh	r2, [r7, #6]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d349      	bcc.n	800a946 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8ba:	d107      	bne.n	800a8cc <UART_Start_Receive_IT+0x11c>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d103      	bne.n	800a8cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	4a47      	ldr	r2, [pc, #284]	; (800a9e4 <UART_Start_Receive_IT+0x234>)
 800a8c8:	675a      	str	r2, [r3, #116]	; 0x74
 800a8ca:	e002      	b.n	800a8d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	4a46      	ldr	r2, [pc, #280]	; (800a9e8 <UART_Start_Receive_IT+0x238>)
 800a8d0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d01a      	beq.n	800a910 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8e2:	e853 3f00 	ldrex	r3, [r3]
 800a8e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a8e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a8fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8fe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a900:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a902:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a904:	e841 2300 	strex	r3, r2, [r1]
 800a908:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a90a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1e4      	bne.n	800a8da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3308      	adds	r3, #8
 800a916:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a91a:	e853 3f00 	ldrex	r3, [r3]
 800a91e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a926:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	3308      	adds	r3, #8
 800a92e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a930:	64ba      	str	r2, [r7, #72]	; 0x48
 800a932:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a934:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a938:	e841 2300 	strex	r3, r2, [r1]
 800a93c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a93e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a940:	2b00      	cmp	r3, #0
 800a942:	d1e5      	bne.n	800a910 <UART_Start_Receive_IT+0x160>
 800a944:	e046      	b.n	800a9d4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a94e:	d107      	bne.n	800a960 <UART_Start_Receive_IT+0x1b0>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d103      	bne.n	800a960 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	4a24      	ldr	r2, [pc, #144]	; (800a9ec <UART_Start_Receive_IT+0x23c>)
 800a95c:	675a      	str	r2, [r3, #116]	; 0x74
 800a95e:	e002      	b.n	800a966 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4a23      	ldr	r2, [pc, #140]	; (800a9f0 <UART_Start_Receive_IT+0x240>)
 800a964:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d019      	beq.n	800a9a2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a976:	e853 3f00 	ldrex	r3, [r3]
 800a97a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a982:	677b      	str	r3, [r7, #116]	; 0x74
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	461a      	mov	r2, r3
 800a98a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a98c:	637b      	str	r3, [r7, #52]	; 0x34
 800a98e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a990:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a994:	e841 2300 	strex	r3, r2, [r1]
 800a998:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1e6      	bne.n	800a96e <UART_Start_Receive_IT+0x1be>
 800a9a0:	e018      	b.n	800a9d4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	e853 3f00 	ldrex	r3, [r3]
 800a9ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f043 0320 	orr.w	r3, r3, #32
 800a9b6:	67bb      	str	r3, [r7, #120]	; 0x78
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9c0:	623b      	str	r3, [r7, #32]
 800a9c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c4:	69f9      	ldr	r1, [r7, #28]
 800a9c6:	6a3a      	ldr	r2, [r7, #32]
 800a9c8:	e841 2300 	strex	r3, r2, [r1]
 800a9cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1e6      	bne.n	800a9a2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	378c      	adds	r7, #140	; 0x8c
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	0800b23d 	.word	0x0800b23d
 800a9e8:	0800aecd 	.word	0x0800aecd
 800a9ec:	0800ad09 	.word	0x0800ad09
 800a9f0:	0800ab45 	.word	0x0800ab45

0800a9f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b095      	sub	sp, #84	; 0x54
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa04:	e853 3f00 	ldrex	r3, [r3]
 800aa08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	461a      	mov	r2, r3
 800aa18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa1a:	643b      	str	r3, [r7, #64]	; 0x40
 800aa1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa22:	e841 2300 	strex	r3, r2, [r1]
 800aa26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1e6      	bne.n	800a9fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3308      	adds	r3, #8
 800aa34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	e853 3f00 	ldrex	r3, [r3]
 800aa3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa44:	f023 0301 	bic.w	r3, r3, #1
 800aa48:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	3308      	adds	r3, #8
 800aa50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa52:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa5a:	e841 2300 	strex	r3, r2, [r1]
 800aa5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1e3      	bne.n	800aa2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d118      	bne.n	800aaa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	e853 3f00 	ldrex	r3, [r3]
 800aa7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	f023 0310 	bic.w	r3, r3, #16
 800aa82:	647b      	str	r3, [r7, #68]	; 0x44
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	461a      	mov	r2, r3
 800aa8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa8c:	61bb      	str	r3, [r7, #24]
 800aa8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa90:	6979      	ldr	r1, [r7, #20]
 800aa92:	69ba      	ldr	r2, [r7, #24]
 800aa94:	e841 2300 	strex	r3, r2, [r1]
 800aa98:	613b      	str	r3, [r7, #16]
   return(result);
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1e6      	bne.n	800aa6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2220      	movs	r2, #32
 800aaa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800aab4:	bf00      	nop
 800aab6:	3754      	adds	r7, #84	; 0x54
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aacc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f7ff faae 	bl	800a040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aae4:	bf00      	nop
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b088      	sub	sp, #32
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	e853 3f00 	ldrex	r3, [r3]
 800ab00:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab08:	61fb      	str	r3, [r7, #28]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	61bb      	str	r3, [r7, #24]
 800ab14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab16:	6979      	ldr	r1, [r7, #20]
 800ab18:	69ba      	ldr	r2, [r7, #24]
 800ab1a:	e841 2300 	strex	r3, r2, [r1]
 800ab1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1e6      	bne.n	800aaf4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2220      	movs	r2, #32
 800ab2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7ff fa79 	bl	800a02c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab3a:	bf00      	nop
 800ab3c:	3720      	adds	r7, #32
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b09c      	sub	sp, #112	; 0x70
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab52:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab5c:	2b22      	cmp	r3, #34	; 0x22
 800ab5e:	f040 80c3 	bne.w	800ace8 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab68:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ab6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ab70:	b2d9      	uxtb	r1, r3
 800ab72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab7c:	400a      	ands	r2, r1
 800ab7e:	b2d2      	uxtb	r2, r2
 800ab80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab86:	1c5a      	adds	r2, r3, #1
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	3b01      	subs	r3, #1
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f040 80a6 	bne.w	800acf8 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abb4:	e853 3f00 	ldrex	r3, [r3]
 800abb8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800abba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abc0:	66bb      	str	r3, [r7, #104]	; 0x68
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	461a      	mov	r2, r3
 800abc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abca:	65bb      	str	r3, [r7, #88]	; 0x58
 800abcc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800abd2:	e841 2300 	strex	r3, r2, [r1]
 800abd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800abd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1e6      	bne.n	800abac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3308      	adds	r3, #8
 800abe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe8:	e853 3f00 	ldrex	r3, [r3]
 800abec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800abee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf0:	f023 0301 	bic.w	r3, r3, #1
 800abf4:	667b      	str	r3, [r7, #100]	; 0x64
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	3308      	adds	r3, #8
 800abfc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800abfe:	647a      	str	r2, [r7, #68]	; 0x44
 800ac00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac06:	e841 2300 	strex	r3, r2, [r1]
 800ac0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1e5      	bne.n	800abde <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2220      	movs	r2, #32
 800ac16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a35      	ldr	r2, [pc, #212]	; (800ad00 <UART_RxISR_8BIT+0x1bc>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d024      	beq.n	800ac7a <UART_RxISR_8BIT+0x136>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a33      	ldr	r2, [pc, #204]	; (800ad04 <UART_RxISR_8BIT+0x1c0>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d01f      	beq.n	800ac7a <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d018      	beq.n	800ac7a <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac50:	e853 3f00 	ldrex	r3, [r3]
 800ac54:	623b      	str	r3, [r7, #32]
   return(result);
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ac5c:	663b      	str	r3, [r7, #96]	; 0x60
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	461a      	mov	r2, r3
 800ac64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac66:	633b      	str	r3, [r7, #48]	; 0x30
 800ac68:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac6e:	e841 2300 	strex	r3, r2, [r1]
 800ac72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1e6      	bne.n	800ac48 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d12e      	bne.n	800ace0 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	e853 3f00 	ldrex	r3, [r3]
 800ac94:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f023 0310 	bic.w	r3, r3, #16
 800ac9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	461a      	mov	r2, r3
 800aca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aca6:	61fb      	str	r3, [r7, #28]
 800aca8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acaa:	69b9      	ldr	r1, [r7, #24]
 800acac:	69fa      	ldr	r2, [r7, #28]
 800acae:	e841 2300 	strex	r3, r2, [r1]
 800acb2:	617b      	str	r3, [r7, #20]
   return(result);
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1e6      	bne.n	800ac88 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	69db      	ldr	r3, [r3, #28]
 800acc0:	f003 0310 	and.w	r3, r3, #16
 800acc4:	2b10      	cmp	r3, #16
 800acc6:	d103      	bne.n	800acd0 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2210      	movs	r2, #16
 800acce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acd6:	4619      	mov	r1, r3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f7ff f9bb 	bl	800a054 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800acde:	e00b      	b.n	800acf8 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7f6 fe3f 	bl	8001964 <HAL_UART_RxCpltCallback>
}
 800ace6:	e007      	b.n	800acf8 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	699a      	ldr	r2, [r3, #24]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f042 0208 	orr.w	r2, r2, #8
 800acf6:	619a      	str	r2, [r3, #24]
}
 800acf8:	bf00      	nop
 800acfa:	3770      	adds	r7, #112	; 0x70
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	44002400 	.word	0x44002400
 800ad04:	54002400 	.word	0x54002400

0800ad08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b09c      	sub	sp, #112	; 0x70
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad16:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad20:	2b22      	cmp	r3, #34	; 0x22
 800ad22:	f040 80c3 	bne.w	800aeac <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad34:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ad36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ad3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ad3e:	4013      	ands	r3, r2
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad4a:	1c9a      	adds	r2, r3, #2
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f040 80a6 	bne.w	800aebc <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad78:	e853 3f00 	ldrex	r3, [r3]
 800ad7c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ad7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad84:	667b      	str	r3, [r7, #100]	; 0x64
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad8e:	657b      	str	r3, [r7, #84]	; 0x54
 800ad90:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad96:	e841 2300 	strex	r3, r2, [r1]
 800ad9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1e6      	bne.n	800ad70 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3308      	adds	r3, #8
 800ada8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	f023 0301 	bic.w	r3, r3, #1
 800adb8:	663b      	str	r3, [r7, #96]	; 0x60
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3308      	adds	r3, #8
 800adc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800adc2:	643a      	str	r2, [r7, #64]	; 0x40
 800adc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800adc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adca:	e841 2300 	strex	r3, r2, [r1]
 800adce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800add0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1e5      	bne.n	800ada2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2220      	movs	r2, #32
 800adda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a35      	ldr	r2, [pc, #212]	; (800aec4 <UART_RxISR_16BIT+0x1bc>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d024      	beq.n	800ae3e <UART_RxISR_16BIT+0x136>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a33      	ldr	r2, [pc, #204]	; (800aec8 <UART_RxISR_16BIT+0x1c0>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d01f      	beq.n	800ae3e <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d018      	beq.n	800ae3e <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	e853 3f00 	ldrex	r3, [r3]
 800ae18:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ae20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	461a      	mov	r2, r3
 800ae28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae2c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae32:	e841 2300 	strex	r3, r2, [r1]
 800ae36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1e6      	bne.n	800ae0c <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d12e      	bne.n	800aea4 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	e853 3f00 	ldrex	r3, [r3]
 800ae58:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	f023 0310 	bic.w	r3, r3, #16
 800ae60:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae6a:	61bb      	str	r3, [r7, #24]
 800ae6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6e:	6979      	ldr	r1, [r7, #20]
 800ae70:	69ba      	ldr	r2, [r7, #24]
 800ae72:	e841 2300 	strex	r3, r2, [r1]
 800ae76:	613b      	str	r3, [r7, #16]
   return(result);
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1e6      	bne.n	800ae4c <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	69db      	ldr	r3, [r3, #28]
 800ae84:	f003 0310 	and.w	r3, r3, #16
 800ae88:	2b10      	cmp	r3, #16
 800ae8a:	d103      	bne.n	800ae94 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2210      	movs	r2, #16
 800ae92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7ff f8d9 	bl	800a054 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aea2:	e00b      	b.n	800aebc <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f7f6 fd5d 	bl	8001964 <HAL_UART_RxCpltCallback>
}
 800aeaa:	e007      	b.n	800aebc <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	699a      	ldr	r2, [r3, #24]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f042 0208 	orr.w	r2, r2, #8
 800aeba:	619a      	str	r2, [r3, #24]
}
 800aebc:	bf00      	nop
 800aebe:	3770      	adds	r7, #112	; 0x70
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	44002400 	.word	0x44002400
 800aec8:	54002400 	.word	0x54002400

0800aecc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b0ac      	sub	sp, #176	; 0xb0
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aeda:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	69db      	ldr	r3, [r3, #28]
 800aee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af02:	2b22      	cmp	r3, #34	; 0x22
 800af04:	f040 8187 	bne.w	800b216 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800af0e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af12:	e12a      	b.n	800b16a <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800af1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800af22:	b2d9      	uxtb	r1, r3
 800af24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800af28:	b2da      	uxtb	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af2e:	400a      	ands	r2, r1
 800af30:	b2d2      	uxtb	r2, r2
 800af32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af38:	1c5a      	adds	r2, r3, #1
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af44:	b29b      	uxth	r3, r3
 800af46:	3b01      	subs	r3, #1
 800af48:	b29a      	uxth	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	69db      	ldr	r3, [r3, #28]
 800af56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800af5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	2b00      	cmp	r3, #0
 800af64:	d053      	beq.n	800b00e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d011      	beq.n	800af96 <UART_RxISR_8BIT_FIFOEN+0xca>
 800af72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800af76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00b      	beq.n	800af96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2201      	movs	r2, #1
 800af84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af8c:	f043 0201 	orr.w	r2, r3, #1
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af9a:	f003 0302 	and.w	r3, r3, #2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d011      	beq.n	800afc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800afa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00b      	beq.n	800afc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2202      	movs	r2, #2
 800afb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afbc:	f043 0204 	orr.w	r2, r3, #4
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800afca:	f003 0304 	and.w	r3, r3, #4
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d011      	beq.n	800aff6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800afd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800afd6:	f003 0301 	and.w	r3, r3, #1
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00b      	beq.n	800aff6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2204      	movs	r2, #4
 800afe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afec:	f043 0202 	orr.w	r2, r3, #2
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800affc:	2b00      	cmp	r3, #0
 800affe:	d006      	beq.n	800b00e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7ff f81d 	bl	800a040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b014:	b29b      	uxth	r3, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	f040 80a7 	bne.w	800b16a <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b024:	e853 3f00 	ldrex	r3, [r3]
 800b028:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b02a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b02c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	461a      	mov	r2, r3
 800b03a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b03e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b040:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b042:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b044:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b046:	e841 2300 	strex	r3, r2, [r1]
 800b04a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b04c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1e4      	bne.n	800b01c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	3308      	adds	r3, #8
 800b058:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b05c:	e853 3f00 	ldrex	r3, [r3]
 800b060:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b068:	f023 0301 	bic.w	r3, r3, #1
 800b06c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3308      	adds	r3, #8
 800b076:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b07a:	66ba      	str	r2, [r7, #104]	; 0x68
 800b07c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b080:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b082:	e841 2300 	strex	r3, r2, [r1]
 800b086:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1e1      	bne.n	800b052 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2220      	movs	r2, #32
 800b092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a62      	ldr	r2, [pc, #392]	; (800b230 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d026      	beq.n	800b0fa <UART_RxISR_8BIT_FIFOEN+0x22e>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a60      	ldr	r2, [pc, #384]	; (800b234 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d021      	beq.n	800b0fa <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d01a      	beq.n	800b0fa <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0cc:	e853 3f00 	ldrex	r3, [r3]
 800b0d0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b0d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b0d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0e6:	657b      	str	r3, [r7, #84]	; 0x54
 800b0e8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b0ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b0ee:	e841 2300 	strex	r3, r2, [r1]
 800b0f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b0f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1e4      	bne.n	800b0c4 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d130      	bne.n	800b164 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b110:	e853 3f00 	ldrex	r3, [r3]
 800b114:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	f023 0310 	bic.w	r3, r3, #16
 800b11c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	461a      	mov	r2, r3
 800b126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b12a:	643b      	str	r3, [r7, #64]	; 0x40
 800b12c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b130:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b132:	e841 2300 	strex	r3, r2, [r1]
 800b136:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d1e4      	bne.n	800b108 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	69db      	ldr	r3, [r3, #28]
 800b144:	f003 0310 	and.w	r3, r3, #16
 800b148:	2b10      	cmp	r3, #16
 800b14a:	d103      	bne.n	800b154 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2210      	movs	r2, #16
 800b152:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f7fe ff79 	bl	800a054 <HAL_UARTEx_RxEventCallback>
 800b162:	e002      	b.n	800b16a <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7f6 fbfd 	bl	8001964 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b16a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d006      	beq.n	800b180 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 800b172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b176:	f003 0320 	and.w	r3, r3, #32
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f47f aeca 	bne.w	800af14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b186:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b18a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d049      	beq.n	800b226 <UART_RxISR_8BIT_FIFOEN+0x35a>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b198:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d242      	bcs.n	800b226 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3308      	adds	r3, #8
 800b1a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	e853 3f00 	ldrex	r3, [r3]
 800b1ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	3308      	adds	r3, #8
 800b1c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b1c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1cc:	e841 2300 	strex	r3, r2, [r1]
 800b1d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1e3      	bne.n	800b1a0 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a17      	ldr	r2, [pc, #92]	; (800b238 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800b1dc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	e853 3f00 	ldrex	r3, [r3]
 800b1ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f043 0320 	orr.w	r3, r3, #32
 800b1f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b200:	61bb      	str	r3, [r7, #24]
 800b202:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b204:	6979      	ldr	r1, [r7, #20]
 800b206:	69ba      	ldr	r2, [r7, #24]
 800b208:	e841 2300 	strex	r3, r2, [r1]
 800b20c:	613b      	str	r3, [r7, #16]
   return(result);
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1e4      	bne.n	800b1de <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b214:	e007      	b.n	800b226 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	699a      	ldr	r2, [r3, #24]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f042 0208 	orr.w	r2, r2, #8
 800b224:	619a      	str	r2, [r3, #24]
}
 800b226:	bf00      	nop
 800b228:	37b0      	adds	r7, #176	; 0xb0
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	44002400 	.word	0x44002400
 800b234:	54002400 	.word	0x54002400
 800b238:	0800ab45 	.word	0x0800ab45

0800b23c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b0ae      	sub	sp, #184	; 0xb8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b24a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	69db      	ldr	r3, [r3, #28]
 800b254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b272:	2b22      	cmp	r3, #34	; 0x22
 800b274:	f040 818b 	bne.w	800b58e <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b27e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b282:	e12e      	b.n	800b4e2 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b296:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b29a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b29e:	4013      	ands	r3, r2
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b2a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ac:	1c9a      	adds	r2, r3, #2
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	69db      	ldr	r3, [r3, #28]
 800b2ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b2ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b2d2:	f003 0307 	and.w	r3, r3, #7
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d053      	beq.n	800b382 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b2da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d011      	beq.n	800b30a <UART_RxISR_16BIT_FIFOEN+0xce>
 800b2e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00b      	beq.n	800b30a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b300:	f043 0201 	orr.w	r2, r3, #1
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b30a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b30e:	f003 0302 	and.w	r3, r3, #2
 800b312:	2b00      	cmp	r3, #0
 800b314:	d011      	beq.n	800b33a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b316:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b31a:	f003 0301 	and.w	r3, r3, #1
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00b      	beq.n	800b33a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2202      	movs	r2, #2
 800b328:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b330:	f043 0204 	orr.w	r2, r3, #4
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b33a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b33e:	f003 0304 	and.w	r3, r3, #4
 800b342:	2b00      	cmp	r3, #0
 800b344:	d011      	beq.n	800b36a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b34a:	f003 0301 	and.w	r3, r3, #1
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00b      	beq.n	800b36a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2204      	movs	r2, #4
 800b358:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b360:	f043 0202 	orr.w	r2, r3, #2
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b370:	2b00      	cmp	r3, #0
 800b372:	d006      	beq.n	800b382 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7fe fe63 	bl	800a040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b388:	b29b      	uxth	r3, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f040 80a9 	bne.w	800b4e2 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b398:	e853 3f00 	ldrex	r3, [r3]
 800b39c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b39e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b3b6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b3ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b3be:	e841 2300 	strex	r3, r2, [r1]
 800b3c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b3c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1e2      	bne.n	800b390 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	3308      	adds	r3, #8
 800b3d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3d4:	e853 3f00 	ldrex	r3, [r3]
 800b3d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b3da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3e0:	f023 0301 	bic.w	r3, r3, #1
 800b3e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3308      	adds	r3, #8
 800b3ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b3f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b3f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b3f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b3fa:	e841 2300 	strex	r3, r2, [r1]
 800b3fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1e1      	bne.n	800b3ca <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2220      	movs	r2, #32
 800b40a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a62      	ldr	r2, [pc, #392]	; (800b5a8 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d026      	beq.n	800b472 <UART_RxISR_16BIT_FIFOEN+0x236>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a60      	ldr	r2, [pc, #384]	; (800b5ac <UART_RxISR_16BIT_FIFOEN+0x370>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d021      	beq.n	800b472 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d01a      	beq.n	800b472 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b444:	e853 3f00 	ldrex	r3, [r3]
 800b448:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b44a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b44c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b450:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	461a      	mov	r2, r3
 800b45a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b45e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b460:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b462:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b464:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b466:	e841 2300 	strex	r3, r2, [r1]
 800b46a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b46c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1e4      	bne.n	800b43c <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b476:	2b01      	cmp	r3, #1
 800b478:	d130      	bne.n	800b4dc <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b488:	e853 3f00 	ldrex	r3, [r3]
 800b48c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b490:	f023 0310 	bic.w	r3, r3, #16
 800b494:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	461a      	mov	r2, r3
 800b49e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b4a2:	647b      	str	r3, [r7, #68]	; 0x44
 800b4a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4aa:	e841 2300 	strex	r3, r2, [r1]
 800b4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1e4      	bne.n	800b480 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	69db      	ldr	r3, [r3, #28]
 800b4bc:	f003 0310 	and.w	r3, r3, #16
 800b4c0:	2b10      	cmp	r3, #16
 800b4c2:	d103      	bne.n	800b4cc <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2210      	movs	r2, #16
 800b4ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7fe fdbd 	bl	800a054 <HAL_UARTEx_RxEventCallback>
 800b4da:	e002      	b.n	800b4e2 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f7f6 fa41 	bl	8001964 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b4e2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d006      	beq.n	800b4f8 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800b4ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b4ee:	f003 0320 	and.w	r3, r3, #32
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f47f aec6 	bne.w	800b284 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b502:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b506:	2b00      	cmp	r3, #0
 800b508:	d049      	beq.n	800b59e <UART_RxISR_16BIT_FIFOEN+0x362>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b510:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b514:	429a      	cmp	r2, r3
 800b516:	d242      	bcs.n	800b59e <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	3308      	adds	r3, #8
 800b51e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b522:	e853 3f00 	ldrex	r3, [r3]
 800b526:	623b      	str	r3, [r7, #32]
   return(result);
 800b528:	6a3b      	ldr	r3, [r7, #32]
 800b52a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b52e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	3308      	adds	r3, #8
 800b538:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b53c:	633a      	str	r2, [r7, #48]	; 0x30
 800b53e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b540:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b544:	e841 2300 	strex	r3, r2, [r1]
 800b548:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1e3      	bne.n	800b518 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a17      	ldr	r2, [pc, #92]	; (800b5b0 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800b554:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	e853 3f00 	ldrex	r3, [r3]
 800b562:	60fb      	str	r3, [r7, #12]
   return(result);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f043 0320 	orr.w	r3, r3, #32
 800b56a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	461a      	mov	r2, r3
 800b574:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b578:	61fb      	str	r3, [r7, #28]
 800b57a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57c:	69b9      	ldr	r1, [r7, #24]
 800b57e:	69fa      	ldr	r2, [r7, #28]
 800b580:	e841 2300 	strex	r3, r2, [r1]
 800b584:	617b      	str	r3, [r7, #20]
   return(result);
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1e4      	bne.n	800b556 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b58c:	e007      	b.n	800b59e <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	699a      	ldr	r2, [r3, #24]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f042 0208 	orr.w	r2, r2, #8
 800b59c:	619a      	str	r2, [r3, #24]
}
 800b59e:	bf00      	nop
 800b5a0:	37b8      	adds	r7, #184	; 0xb8
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	44002400 	.word	0x44002400
 800b5ac:	54002400 	.word	0x54002400
 800b5b0:	0800ad09 	.word	0x0800ad09

0800b5b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d101      	bne.n	800b606 <HAL_UARTEx_DisableFifoMode+0x16>
 800b602:	2302      	movs	r3, #2
 800b604:	e027      	b.n	800b656 <HAL_UARTEx_DisableFifoMode+0x66>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2201      	movs	r2, #1
 800b60a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2224      	movs	r2, #36	; 0x24
 800b612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f022 0201 	bic.w	r2, r2, #1
 800b62c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b634:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2220      	movs	r2, #32
 800b648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3714      	adds	r7, #20
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b084      	sub	sp, #16
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b672:	2b01      	cmp	r3, #1
 800b674:	d101      	bne.n	800b67a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b676:	2302      	movs	r3, #2
 800b678:	e02d      	b.n	800b6d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2224      	movs	r2, #36	; 0x24
 800b686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f022 0201 	bic.w	r2, r2, #1
 800b6a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	683a      	ldr	r2, [r7, #0]
 800b6b2:	430a      	orrs	r2, r1
 800b6b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f850 	bl	800b75c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2220      	movs	r2, #32
 800b6c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
 800b6e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d101      	bne.n	800b6f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	e02d      	b.n	800b752 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2224      	movs	r2, #36	; 0x24
 800b702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f022 0201 	bic.w	r2, r2, #1
 800b71c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	430a      	orrs	r2, r1
 800b730:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f812 	bl	800b75c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2220      	movs	r2, #32
 800b744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
	...

0800b75c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d108      	bne.n	800b77e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2201      	movs	r2, #1
 800b778:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b77c:	e031      	b.n	800b7e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b77e:	2308      	movs	r3, #8
 800b780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b782:	2308      	movs	r3, #8
 800b784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	0e5b      	lsrs	r3, r3, #25
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	f003 0307 	and.w	r3, r3, #7
 800b794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	0f5b      	lsrs	r3, r3, #29
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	f003 0307 	and.w	r3, r3, #7
 800b7a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7a6:	7bbb      	ldrb	r3, [r7, #14]
 800b7a8:	7b3a      	ldrb	r2, [r7, #12]
 800b7aa:	4911      	ldr	r1, [pc, #68]	; (800b7f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b7ac:	5c8a      	ldrb	r2, [r1, r2]
 800b7ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b7b2:	7b3a      	ldrb	r2, [r7, #12]
 800b7b4:	490f      	ldr	r1, [pc, #60]	; (800b7f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b7b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7c4:	7bfb      	ldrb	r3, [r7, #15]
 800b7c6:	7b7a      	ldrb	r2, [r7, #13]
 800b7c8:	4909      	ldr	r1, [pc, #36]	; (800b7f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b7ca:	5c8a      	ldrb	r2, [r1, r2]
 800b7cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b7d0:	7b7a      	ldrb	r2, [r7, #13]
 800b7d2:	4908      	ldr	r1, [pc, #32]	; (800b7f4 <UARTEx_SetNbDataToProcess+0x98>)
 800b7d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b7e2:	bf00      	nop
 800b7e4:	3714      	adds	r7, #20
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	0800fb5c 	.word	0x0800fb5c
 800b7f4:	0800fb64 	.word	0x0800fb64

0800b7f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b08b      	sub	sp, #44	; 0x2c
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	fa93 f3a3 	rbit	r3, r3
 800b812:	613b      	str	r3, [r7, #16]
  return result;
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d101      	bne.n	800b822 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800b81e:	2320      	movs	r3, #32
 800b820:	e003      	b.n	800b82a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	fab3 f383 	clz	r3, r3
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	005b      	lsls	r3, r3, #1
 800b82c:	2103      	movs	r1, #3
 800b82e:	fa01 f303 	lsl.w	r3, r1, r3
 800b832:	43db      	mvns	r3, r3
 800b834:	401a      	ands	r2, r3
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	fa93 f3a3 	rbit	r3, r3
 800b840:	61fb      	str	r3, [r7, #28]
  return result;
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d101      	bne.n	800b850 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800b84c:	2320      	movs	r3, #32
 800b84e:	e003      	b.n	800b858 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800b850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b852:	fab3 f383 	clz	r3, r3
 800b856:	b2db      	uxtb	r3, r3
 800b858:	005b      	lsls	r3, r3, #1
 800b85a:	6879      	ldr	r1, [r7, #4]
 800b85c:	fa01 f303 	lsl.w	r3, r1, r3
 800b860:	431a      	orrs	r2, r3
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	601a      	str	r2, [r3, #0]
}
 800b866:	bf00      	nop
 800b868:	372c      	adds	r7, #44	; 0x2c
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr

0800b872 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800b872:	b480      	push	{r7}
 800b874:	b085      	sub	sp, #20
 800b876:	af00      	add	r7, sp, #0
 800b878:	60f8      	str	r0, [r7, #12]
 800b87a:	60b9      	str	r1, [r7, #8]
 800b87c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	685a      	ldr	r2, [r3, #4]
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	43db      	mvns	r3, r3
 800b886:	401a      	ands	r2, r3
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	6879      	ldr	r1, [r7, #4]
 800b88c:	fb01 f303 	mul.w	r3, r1, r3
 800b890:	431a      	orrs	r2, r3
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	605a      	str	r2, [r3, #4]
}
 800b896:	bf00      	nop
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr

0800b8a2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b08b      	sub	sp, #44	; 0x2c
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	60f8      	str	r0, [r7, #12]
 800b8aa:	60b9      	str	r1, [r7, #8]
 800b8ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	689a      	ldr	r2, [r3, #8]
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	fa93 f3a3 	rbit	r3, r3
 800b8bc:	613b      	str	r3, [r7, #16]
  return result;
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d101      	bne.n	800b8cc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800b8c8:	2320      	movs	r3, #32
 800b8ca:	e003      	b.n	800b8d4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	fab3 f383 	clz	r3, r3
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	005b      	lsls	r3, r3, #1
 800b8d6:	2103      	movs	r1, #3
 800b8d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b8dc:	43db      	mvns	r3, r3
 800b8de:	401a      	ands	r2, r3
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8e4:	6a3b      	ldr	r3, [r7, #32]
 800b8e6:	fa93 f3a3 	rbit	r3, r3
 800b8ea:	61fb      	str	r3, [r7, #28]
  return result;
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d101      	bne.n	800b8fa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b8f6:	2320      	movs	r3, #32
 800b8f8:	e003      	b.n	800b902 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	fab3 f383 	clz	r3, r3
 800b900:	b2db      	uxtb	r3, r3
 800b902:	005b      	lsls	r3, r3, #1
 800b904:	6879      	ldr	r1, [r7, #4]
 800b906:	fa01 f303 	lsl.w	r3, r1, r3
 800b90a:	431a      	orrs	r2, r3
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800b910:	bf00      	nop
 800b912:	372c      	adds	r7, #44	; 0x2c
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b08b      	sub	sp, #44	; 0x2c
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	68da      	ldr	r2, [r3, #12]
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	fa93 f3a3 	rbit	r3, r3
 800b936:	613b      	str	r3, [r7, #16]
  return result;
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d101      	bne.n	800b946 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b942:	2320      	movs	r3, #32
 800b944:	e003      	b.n	800b94e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	fab3 f383 	clz	r3, r3
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	2103      	movs	r1, #3
 800b952:	fa01 f303 	lsl.w	r3, r1, r3
 800b956:	43db      	mvns	r3, r3
 800b958:	401a      	ands	r2, r3
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b95e:	6a3b      	ldr	r3, [r7, #32]
 800b960:	fa93 f3a3 	rbit	r3, r3
 800b964:	61fb      	str	r3, [r7, #28]
  return result;
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d101      	bne.n	800b974 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b970:	2320      	movs	r3, #32
 800b972:	e003      	b.n	800b97c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	fab3 f383 	clz	r3, r3
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	005b      	lsls	r3, r3, #1
 800b97e:	6879      	ldr	r1, [r7, #4]
 800b980:	fa01 f303 	lsl.w	r3, r1, r3
 800b984:	431a      	orrs	r2, r3
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	60da      	str	r2, [r3, #12]
}
 800b98a:	bf00      	nop
 800b98c:	372c      	adds	r7, #44	; 0x2c
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b996:	b480      	push	{r7}
 800b998:	b08b      	sub	sp, #44	; 0x2c
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	60f8      	str	r0, [r7, #12]
 800b99e:	60b9      	str	r1, [r7, #8]
 800b9a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6a1a      	ldr	r2, [r3, #32]
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	fa93 f3a3 	rbit	r3, r3
 800b9b0:	613b      	str	r3, [r7, #16]
  return result;
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d101      	bne.n	800b9c0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b9bc:	2320      	movs	r3, #32
 800b9be:	e003      	b.n	800b9c8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	fab3 f383 	clz	r3, r3
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	210f      	movs	r1, #15
 800b9cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b9d0:	43db      	mvns	r3, r3
 800b9d2:	401a      	ands	r2, r3
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9d8:	6a3b      	ldr	r3, [r7, #32]
 800b9da:	fa93 f3a3 	rbit	r3, r3
 800b9de:	61fb      	str	r3, [r7, #28]
  return result;
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d101      	bne.n	800b9ee <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b9ea:	2320      	movs	r3, #32
 800b9ec:	e003      	b.n	800b9f6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f0:	fab3 f383 	clz	r3, r3
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	6879      	ldr	r1, [r7, #4]
 800b9fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b9fe:	431a      	orrs	r2, r3
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800ba04:	bf00      	nop
 800ba06:	372c      	adds	r7, #44	; 0x2c
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b08b      	sub	sp, #44	; 0x2c
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	0a1b      	lsrs	r3, r3, #8
 800ba24:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	fa93 f3a3 	rbit	r3, r3
 800ba2c:	613b      	str	r3, [r7, #16]
  return result;
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d101      	bne.n	800ba3c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800ba38:	2320      	movs	r3, #32
 800ba3a:	e003      	b.n	800ba44 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	fab3 f383 	clz	r3, r3
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	210f      	movs	r1, #15
 800ba48:	fa01 f303 	lsl.w	r3, r1, r3
 800ba4c:	43db      	mvns	r3, r3
 800ba4e:	401a      	ands	r2, r3
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	0a1b      	lsrs	r3, r3, #8
 800ba54:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	fa93 f3a3 	rbit	r3, r3
 800ba5c:	61fb      	str	r3, [r7, #28]
  return result;
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ba62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d101      	bne.n	800ba6c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800ba68:	2320      	movs	r3, #32
 800ba6a:	e003      	b.n	800ba74 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	fab3 f383 	clz	r3, r3
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	6879      	ldr	r1, [r7, #4]
 800ba78:	fa01 f303 	lsl.w	r3, r1, r3
 800ba7c:	431a      	orrs	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800ba82:	bf00      	nop
 800ba84:	372c      	adds	r7, #44	; 0x2c
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr

0800ba8e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b08a      	sub	sp, #40	; 0x28
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
 800ba96:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	fa93 f3a3 	rbit	r3, r3
 800baa4:	617b      	str	r3, [r7, #20]
  return result;
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800baaa:	69fb      	ldr	r3, [r7, #28]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d101      	bne.n	800bab4 <LL_GPIO_Init+0x26>
    return 32U;
 800bab0:	2320      	movs	r3, #32
 800bab2:	e003      	b.n	800babc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	fab3 f383 	clz	r3, r3
 800baba:	b2db      	uxtb	r3, r3
 800babc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800babe:	e058      	b.n	800bb72 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	2101      	movs	r1, #1
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	fa01 f303 	lsl.w	r3, r1, r3
 800bacc:	4013      	ands	r3, r2
 800bace:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800bad0:	6a3b      	ldr	r3, [r7, #32]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d04a      	beq.n	800bb6c <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d003      	beq.n	800bae6 <LL_GPIO_Init+0x58>
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	2b02      	cmp	r3, #2
 800bae4:	d10e      	bne.n	800bb04 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	461a      	mov	r2, r3
 800baec:	6a39      	ldr	r1, [r7, #32]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f7ff fed7 	bl	800b8a2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	6819      	ldr	r1, [r3, #0]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	461a      	mov	r2, r3
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f7ff feb7 	bl	800b872 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	691b      	ldr	r3, [r3, #16]
 800bb08:	461a      	mov	r2, r3
 800bb0a:	6a39      	ldr	r1, [r7, #32]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f7ff ff05 	bl	800b91c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d121      	bne.n	800bb5e <LL_GPIO_Init+0xd0>
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	fa93 f3a3 	rbit	r3, r3
 800bb24:	60bb      	str	r3, [r7, #8]
  return result;
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <LL_GPIO_Init+0xa6>
    return 32U;
 800bb30:	2320      	movs	r3, #32
 800bb32:	e003      	b.n	800bb3c <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	fab3 f383 	clz	r3, r3
 800bb3a:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800bb3c:	2b07      	cmp	r3, #7
 800bb3e:	d807      	bhi.n	800bb50 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	695b      	ldr	r3, [r3, #20]
 800bb44:	461a      	mov	r2, r3
 800bb46:	6a39      	ldr	r1, [r7, #32]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7ff ff24 	bl	800b996 <LL_GPIO_SetAFPin_0_7>
 800bb4e:	e006      	b.n	800bb5e <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	695b      	ldr	r3, [r3, #20]
 800bb54:	461a      	mov	r2, r3
 800bb56:	6a39      	ldr	r1, [r7, #32]
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f7ff ff59 	bl	800ba10 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	461a      	mov	r2, r3
 800bb64:	6a39      	ldr	r1, [r7, #32]
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7ff fe46 	bl	800b7f8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6e:	3301      	adds	r3, #1
 800bb70:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb78:	fa22 f303 	lsr.w	r3, r2, r3
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d19f      	bne.n	800bac0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3728      	adds	r7, #40	; 0x28
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b085      	sub	sp, #20
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bb92:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800bb96:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	43db      	mvns	r3, r3
 800bba0:	401a      	ands	r2, r3
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bba6:	2300      	movs	r3, #0
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3714      	adds	r7, #20
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800bbc0:	78fb      	ldrb	r3, [r7, #3]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d106      	bne.n	800bbd4 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	641a      	str	r2, [r3, #64]	; 0x40
 800bbd2:	e00b      	b.n	800bbec <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800bbd4:	78fb      	ldrb	r3, [r7, #3]
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d106      	bne.n	800bbe8 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	641a      	str	r2, [r3, #64]	; 0x40
 800bbe6:	e001      	b.n	800bbec <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e000      	b.n	800bbee <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	370c      	adds	r7, #12
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	f107 001c 	add.w	r0, r7, #28
 800bc08:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc16:	f023 0201 	bic.w	r2, r3, #1
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800bc1e:	2100      	movs	r1, #0
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7ff ffc7 	bl	800bbb4 <USB_SetCurrentMode>
 800bc26:	4603      	mov	r3, r0
 800bc28:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc3c:	b004      	add	sp, #16
 800bc3e:	4770      	bx	lr

0800bc40 <svCLI_Init>:
// extern variables

// Functions
// svCLI_Init must be called before using CLI
void svCLI_Init(SVCLI_GET_CHAR_FUNC funcGetChar, SVCLI_PUT_CHAR_FUNC funcPutChar, SVCLI_COMMIT_FUNC funcCommit)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
	svGetChar = funcGetChar;
 800bc4c:	4a18      	ldr	r2, [pc, #96]	; (800bcb0 <svCLI_Init+0x70>)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6013      	str	r3, [r2, #0]
	svPutChar = funcPutChar;
 800bc52:	4a18      	ldr	r2, [pc, #96]	; (800bcb4 <svCLI_Init+0x74>)
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	6013      	str	r3, [r2, #0]
	svCommit = funcCommit;
 800bc58:	4a17      	ldr	r2, [pc, #92]	; (800bcb8 <svCLI_Init+0x78>)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6013      	str	r3, [r2, #0]
	szCLIString[0] = 0;
 800bc5e:	4b17      	ldr	r3, [pc, #92]	; (800bcbc <svCLI_Init+0x7c>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	701a      	strb	r2, [r3, #0]
#pragma section=".Table4CLI"
  sCLITableBegin = (SVCLI_t*)__section_begin(".Table4CLI");
  sCLITablEnd = (SVCLI_t*)__section_end(".Table4CLI");

#elif defined ( __GNUC__ )
  sCLITableBegin = (SVCLI_t*)Table4CLI_start;
 800bc64:	4b16      	ldr	r3, [pc, #88]	; (800bcc0 <svCLI_Init+0x80>)
 800bc66:	4a17      	ldr	r2, [pc, #92]	; (800bcc4 <svCLI_Init+0x84>)
 800bc68:	601a      	str	r2, [r3, #0]
  sCLITablEnd = (SVCLI_t*)Table4CLI_end;
 800bc6a:	4b17      	ldr	r3, [pc, #92]	; (800bcc8 <svCLI_Init+0x88>)
 800bc6c:	4a17      	ldr	r2, [pc, #92]	; (800bccc <svCLI_Init+0x8c>)
 800bc6e:	601a      	str	r2, [r3, #0]
#endif

  if (s_bPwdOK) {
 800bc70:	4b17      	ldr	r3, [pc, #92]	; (800bcd0 <svCLI_Init+0x90>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00d      	beq.n	800bc94 <svCLI_Init+0x54>
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800bc78:	4b16      	ldr	r3, [pc, #88]	; (800bcd4 <svCLI_Init+0x94>)
 800bc7a:	4a17      	ldr	r2, [pc, #92]	; (800bcd8 <svCLI_Init+0x98>)
 800bc7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc80:	6018      	str	r0, [r3, #0]
 800bc82:	3304      	adds	r3, #4
 800bc84:	8019      	strh	r1, [r3, #0]
 800bc86:	3302      	adds	r3, #2
 800bc88:	0c0a      	lsrs	r2, r1, #16
 800bc8a:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800bc8c:	4b13      	ldr	r3, [pc, #76]	; (800bcdc <svCLI_Init+0x9c>)
 800bc8e:	2206      	movs	r2, #6
 800bc90:	601a      	str	r2, [r3, #0]
  }
  else {
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
  }
}
 800bc92:	e007      	b.n	800bca4 <svCLI_Init+0x64>
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
 800bc94:	4b0f      	ldr	r3, [pc, #60]	; (800bcd4 <svCLI_Init+0x94>)
 800bc96:	4a12      	ldr	r2, [pc, #72]	; (800bce0 <svCLI_Init+0xa0>)
 800bc98:	ca07      	ldmia	r2, {r0, r1, r2}
 800bc9a:	c303      	stmia	r3!, {r0, r1}
 800bc9c:	801a      	strh	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
 800bc9e:	4b0f      	ldr	r3, [pc, #60]	; (800bcdc <svCLI_Init+0x9c>)
 800bca0:	2209      	movs	r2, #9
 800bca2:	601a      	str	r2, [r3, #0]
}
 800bca4:	bf00      	nop
 800bca6:	3714      	adds	r7, #20
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	20000e20 	.word	0x20000e20
 800bcb4:	20000e24 	.word	0x20000e24
 800bcb8:	20000e28 	.word	0x20000e28
 800bcbc:	20000c0c 	.word	0x20000c0c
 800bcc0:	20000e18 	.word	0x20000e18
 800bcc4:	0800f9b8 	.word	0x0800f9b8
 800bcc8:	20000e1c 	.word	0x20000e1c
 800bccc:	0800f9d0 	.word	0x0800f9d0
 800bcd0:	20000038 	.word	0x20000038
 800bcd4:	2000003c 	.word	0x2000003c
 800bcd8:	0800fa00 	.word	0x0800fa00
 800bcdc:	20000048 	.word	0x20000048
 800bce0:	0800fa08 	.word	0x0800fa08

0800bce4 <svCLI_Printf>:

static int svCLI_Printf(char* fmt,...)
{
 800bce4:	b40f      	push	{r0, r1, r2, r3}
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b084      	sub	sp, #16
 800bcea:	af00      	add	r7, sp, #0
static char msg[256];
	va_list ap;
	int len;

	va_start(ap, fmt);
 800bcec:	f107 031c 	add.w	r3, r7, #28
 800bcf0:	607b      	str	r3, [r7, #4]
	len = vsprintf(msg, fmt, ap);
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	69b9      	ldr	r1, [r7, #24]
 800bcf6:	480f      	ldr	r0, [pc, #60]	; (800bd34 <svCLI_Printf+0x50>)
 800bcf8:	f003 fa4c 	bl	800f194 <vsiprintf>
 800bcfc:	60b8      	str	r0, [r7, #8]
	va_end(ap);
	for (int i=0;i<len;i++) {
 800bcfe:	2300      	movs	r3, #0
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	e00a      	b.n	800bd1a <svCLI_Printf+0x36>
		svPutChar(msg[i]);
 800bd04:	4b0c      	ldr	r3, [pc, #48]	; (800bd38 <svCLI_Printf+0x54>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	490a      	ldr	r1, [pc, #40]	; (800bd34 <svCLI_Printf+0x50>)
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	440a      	add	r2, r1
 800bd0e:	7812      	ldrb	r2, [r2, #0]
 800bd10:	4610      	mov	r0, r2
 800bd12:	4798      	blx	r3
	for (int i=0;i<len;i++) {
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	3301      	adds	r3, #1
 800bd18:	60fb      	str	r3, [r7, #12]
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	dbf0      	blt.n	800bd04 <svCLI_Printf+0x20>
	}
	return len;
 800bd22:	68bb      	ldr	r3, [r7, #8]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd2e:	b004      	add	sp, #16
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop
 800bd34:	20000e38 	.word	0x20000e38
 800bd38:	20000e24 	.word	0x20000e24

0800bd3c <svCLI_ShowHelp>:

void svCLI_ShowHelp(void)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
	if (svPutChar) {
 800bd42:	4b2d      	ldr	r3, [pc, #180]	; (800bdf8 <svCLI_ShowHelp+0xbc>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d04a      	beq.n	800bde0 <svCLI_ShowHelp+0xa4>
		if (sCLITableBegin != sCLITablEnd) {
 800bd4a:	4b2c      	ldr	r3, [pc, #176]	; (800bdfc <svCLI_ShowHelp+0xc0>)
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	4b2c      	ldr	r3, [pc, #176]	; (800be00 <svCLI_ShowHelp+0xc4>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d03e      	beq.n	800bdd4 <svCLI_ShowHelp+0x98>
			for (unsigned int s=0;s<80;s++) svPutChar('=');
 800bd56:	2300      	movs	r3, #0
 800bd58:	60fb      	str	r3, [r7, #12]
 800bd5a:	e006      	b.n	800bd6a <svCLI_ShowHelp+0x2e>
 800bd5c:	4b26      	ldr	r3, [pc, #152]	; (800bdf8 <svCLI_ShowHelp+0xbc>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	203d      	movs	r0, #61	; 0x3d
 800bd62:	4798      	blx	r3
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	3301      	adds	r3, #1
 800bd68:	60fb      	str	r3, [r7, #12]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2b4f      	cmp	r3, #79	; 0x4f
 800bd6e:	d9f5      	bls.n	800bd5c <svCLI_ShowHelp+0x20>
			svCLI_Printf("\r\n");
 800bd70:	4824      	ldr	r0, [pc, #144]	; (800be04 <svCLI_ShowHelp+0xc8>)
 800bd72:	f7ff ffb7 	bl	800bce4 <svCLI_Printf>
			SVCLI_t* pCLIEntry;
			int nCount = 1;
 800bd76:	2301      	movs	r3, #1
 800bd78:	607b      	str	r3, [r7, #4]
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800bd7a:	4b20      	ldr	r3, [pc, #128]	; (800bdfc <svCLI_ShowHelp+0xc0>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	60bb      	str	r3, [r7, #8]
 800bd80:	e012      	b.n	800bda8 <svCLI_ShowHelp+0x6c>
				svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 800bd82:	6879      	ldr	r1, [r7, #4]
 800bd84:	1c4b      	adds	r3, r1, #1
 800bd86:	607b      	str	r3, [r7, #4]
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d002      	beq.n	800bd9a <svCLI_ShowHelp+0x5e>
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	e000      	b.n	800bd9c <svCLI_ShowHelp+0x60>
 800bd9a:	4b1b      	ldr	r3, [pc, #108]	; (800be08 <svCLI_ShowHelp+0xcc>)
 800bd9c:	481b      	ldr	r0, [pc, #108]	; (800be0c <svCLI_ShowHelp+0xd0>)
 800bd9e:	f7ff ffa1 	bl	800bce4 <svCLI_Printf>
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	330c      	adds	r3, #12
 800bda6:	60bb      	str	r3, [r7, #8]
 800bda8:	4b15      	ldr	r3, [pc, #84]	; (800be00 <svCLI_ShowHelp+0xc4>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	68ba      	ldr	r2, [r7, #8]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d3e7      	bcc.n	800bd82 <svCLI_ShowHelp+0x46>
			}
			svCLI_Printf(AES_RESET);
 800bdb2:	4817      	ldr	r0, [pc, #92]	; (800be10 <svCLI_ShowHelp+0xd4>)
 800bdb4:	f7ff ff96 	bl	800bce4 <svCLI_Printf>
			for (unsigned int s=0;s<80;s++) svPutChar('=');
 800bdb8:	2300      	movs	r3, #0
 800bdba:	603b      	str	r3, [r7, #0]
 800bdbc:	e006      	b.n	800bdcc <svCLI_ShowHelp+0x90>
 800bdbe:	4b0e      	ldr	r3, [pc, #56]	; (800bdf8 <svCLI_ShowHelp+0xbc>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	203d      	movs	r0, #61	; 0x3d
 800bdc4:	4798      	blx	r3
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	603b      	str	r3, [r7, #0]
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	2b4f      	cmp	r3, #79	; 0x4f
 800bdd0:	d9f5      	bls.n	800bdbe <svCLI_ShowHelp+0x82>
 800bdd2:	e002      	b.n	800bdda <svCLI_ShowHelp+0x9e>
		}
		else {	// No CLI Entry
			svCLI_Printf("No CLI Entries !!!");
 800bdd4:	480f      	ldr	r0, [pc, #60]	; (800be14 <svCLI_ShowHelp+0xd8>)
 800bdd6:	f7ff ff85 	bl	800bce4 <svCLI_Printf>
		}
		svCLI_Printf("\r\n");
 800bdda:	480a      	ldr	r0, [pc, #40]	; (800be04 <svCLI_ShowHelp+0xc8>)
 800bddc:	f7ff ff82 	bl	800bce4 <svCLI_Printf>
	}
	if (svCommit) {
 800bde0:	4b0d      	ldr	r3, [pc, #52]	; (800be18 <svCLI_ShowHelp+0xdc>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d002      	beq.n	800bdee <svCLI_ShowHelp+0xb2>
		svCommit();
 800bde8:	4b0b      	ldr	r3, [pc, #44]	; (800be18 <svCLI_ShowHelp+0xdc>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4798      	blx	r3
	}
}
 800bdee:	bf00      	nop
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20000e24 	.word	0x20000e24
 800bdfc:	20000e18 	.word	0x20000e18
 800be00:	20000e1c 	.word	0x20000e1c
 800be04:	0800fa14 	.word	0x0800fa14
 800be08:	0800fa18 	.word	0x0800fa18
 800be0c:	0800fa1c 	.word	0x0800fa1c
 800be10:	0800fa3c 	.word	0x0800fa3c
 800be14:	0800fa44 	.word	0x0800fa44
 800be18:	20000e28 	.word	0x20000e28

0800be1c <_strlenOffspace>:

// String length after stripped off space[0x20]
static int _strlenOffspace(const char* szString)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
	int nCount = 0;
 800be24:	2300      	movs	r3, #0
 800be26:	60fb      	str	r3, [r7, #12]
	if ((szString == NULL) || (*szString == 0))
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d003      	beq.n	800be36 <_strlenOffspace+0x1a>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d104      	bne.n	800be40 <_strlenOffspace+0x24>
		return 0;
 800be36:	2300      	movs	r3, #0
 800be38:	e017      	b.n	800be6a <_strlenOffspace+0x4e>
	// Strip off first spaces
	while (*szString == ' ') szString++;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	3301      	adds	r3, #1
 800be3e:	607b      	str	r3, [r7, #4]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	2b20      	cmp	r3, #32
 800be46:	d0f8      	beq.n	800be3a <_strlenOffspace+0x1e>
	// Count
	while (*szString) {
 800be48:	e008      	b.n	800be5c <_strlenOffspace+0x40>
		if (*szString++ != ' ') {
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	1c5a      	adds	r2, r3, #1
 800be4e:	607a      	str	r2, [r7, #4]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	2b20      	cmp	r3, #32
 800be54:	d007      	beq.n	800be66 <_strlenOffspace+0x4a>
			nCount++;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3301      	adds	r3, #1
 800be5a:	60fb      	str	r3, [r7, #12]
	while (*szString) {
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1f2      	bne.n	800be4a <_strlenOffspace+0x2e>
 800be64:	e000      	b.n	800be68 <_strlenOffspace+0x4c>
		}
		else
			break;
 800be66:	bf00      	nop
	}
	return nCount;
 800be68:	68fb      	ldr	r3, [r7, #12]
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <_toLower>:

static char _toLower(char c)
{
 800be76:	b480      	push	{r7}
 800be78:	b083      	sub	sp, #12
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	4603      	mov	r3, r0
 800be7e:	71fb      	strb	r3, [r7, #7]
  if ((c >= 'A') && (c <= 'Z')) {
 800be80:	79fb      	ldrb	r3, [r7, #7]
 800be82:	2b40      	cmp	r3, #64	; 0x40
 800be84:	d905      	bls.n	800be92 <_toLower+0x1c>
 800be86:	79fb      	ldrb	r3, [r7, #7]
 800be88:	2b5a      	cmp	r3, #90	; 0x5a
 800be8a:	d802      	bhi.n	800be92 <_toLower+0x1c>
    c = (c - 'A') + 'a';
 800be8c:	79fb      	ldrb	r3, [r7, #7]
 800be8e:	3320      	adds	r3, #32
 800be90:	71fb      	strb	r3, [r7, #7]
  }
  return c;
 800be92:	79fb      	ldrb	r3, [r7, #7]
}
 800be94:	4618      	mov	r0, r3
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <_isPrintable>:

static int _isPrintable(char c)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	4603      	mov	r3, r0
 800bea8:	71fb      	strb	r3, [r7, #7]
	if ((' ' <= c) && (c <= '~'))
 800beaa:	79fb      	ldrb	r3, [r7, #7]
 800beac:	2b1f      	cmp	r3, #31
 800beae:	d904      	bls.n	800beba <_isPrintable+0x1a>
 800beb0:	79fb      	ldrb	r3, [r7, #7]
 800beb2:	2b7e      	cmp	r3, #126	; 0x7e
 800beb4:	d801      	bhi.n	800beba <_isPrintable+0x1a>
		return 1;
 800beb6:	2301      	movs	r3, #1
 800beb8:	e000      	b.n	800bebc <_isPrintable+0x1c>
	return 0;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr

0800bec8 <_isHex>:

static int _isHex(char c)
{
 800bec8:	b480      	push	{r7}
 800beca:	b083      	sub	sp, #12
 800becc:	af00      	add	r7, sp, #0
 800bece:	4603      	mov	r3, r0
 800bed0:	71fb      	strb	r3, [r7, #7]
  if (((c >= '0') && (c <= '9')) ||				\
 800bed2:	79fb      	ldrb	r3, [r7, #7]
 800bed4:	2b2f      	cmp	r3, #47	; 0x2f
 800bed6:	d902      	bls.n	800bede <_isHex+0x16>
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	2b39      	cmp	r3, #57	; 0x39
 800bedc:	d90b      	bls.n	800bef6 <_isHex+0x2e>
 800bede:	79fb      	ldrb	r3, [r7, #7]
 800bee0:	2b40      	cmp	r3, #64	; 0x40
 800bee2:	d902      	bls.n	800beea <_isHex+0x22>
      ((c >= 'A') && (c <= 'F')) ||  	\
 800bee4:	79fb      	ldrb	r3, [r7, #7]
 800bee6:	2b46      	cmp	r3, #70	; 0x46
 800bee8:	d905      	bls.n	800bef6 <_isHex+0x2e>
 800beea:	79fb      	ldrb	r3, [r7, #7]
 800beec:	2b60      	cmp	r3, #96	; 0x60
 800beee:	d904      	bls.n	800befa <_isHex+0x32>
      ((c >= 'a') && (c <= 'f')))
 800bef0:	79fb      	ldrb	r3, [r7, #7]
 800bef2:	2b66      	cmp	r3, #102	; 0x66
 800bef4:	d801      	bhi.n	800befa <_isHex+0x32>
    return 1;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e000      	b.n	800befc <_isHex+0x34>
	return 0;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <_fromHex>:

static int _fromHex(char c) 
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 800bf12:	2300      	movs	r3, #0
 800bf14:	60fb      	str	r3, [r7, #12]

  if ((c >= '0') && (c <= '9')) {
 800bf16:	79fb      	ldrb	r3, [r7, #7]
 800bf18:	2b2f      	cmp	r3, #47	; 0x2f
 800bf1a:	d906      	bls.n	800bf2a <_fromHex+0x22>
 800bf1c:	79fb      	ldrb	r3, [r7, #7]
 800bf1e:	2b39      	cmp	r3, #57	; 0x39
 800bf20:	d803      	bhi.n	800bf2a <_fromHex+0x22>
    ret = (c - '0');
 800bf22:	79fb      	ldrb	r3, [r7, #7]
 800bf24:	3b30      	subs	r3, #48	; 0x30
 800bf26:	60fb      	str	r3, [r7, #12]
 800bf28:	e012      	b.n	800bf50 <_fromHex+0x48>
  } 
	else if ((c >= 'a') && (c <= 'f')) {
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	2b60      	cmp	r3, #96	; 0x60
 800bf2e:	d906      	bls.n	800bf3e <_fromHex+0x36>
 800bf30:	79fb      	ldrb	r3, [r7, #7]
 800bf32:	2b66      	cmp	r3, #102	; 0x66
 800bf34:	d803      	bhi.n	800bf3e <_fromHex+0x36>
    ret = (c - 'a' + 0x0a);
 800bf36:	79fb      	ldrb	r3, [r7, #7]
 800bf38:	3b57      	subs	r3, #87	; 0x57
 800bf3a:	60fb      	str	r3, [r7, #12]
 800bf3c:	e008      	b.n	800bf50 <_fromHex+0x48>
  } 
	else if ((c >= 'A') && (c <= 'F')) {
 800bf3e:	79fb      	ldrb	r3, [r7, #7]
 800bf40:	2b40      	cmp	r3, #64	; 0x40
 800bf42:	d905      	bls.n	800bf50 <_fromHex+0x48>
 800bf44:	79fb      	ldrb	r3, [r7, #7]
 800bf46:	2b46      	cmp	r3, #70	; 0x46
 800bf48:	d802      	bhi.n	800bf50 <_fromHex+0x48>
    ret = (c - 'A' + 0x0A);
 800bf4a:	79fb      	ldrb	r3, [r7, #7]
 800bf4c:	3b37      	subs	r3, #55	; 0x37
 800bf4e:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800bf50:	68fb      	ldr	r3, [r7, #12]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3714      	adds	r7, #20
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr

0800bf5e <_strNoCaseCmp>:

static int _strNoCaseCmp(const char *s1, const char *s2, int nLenghth)
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b086      	sub	sp, #24
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	60f8      	str	r0, [r7, #12]
 800bf66:	60b9      	str	r1, [r7, #8]
 800bf68:	607a      	str	r2, [r7, #4]
  char c1, c2;

  if (nLenghth == 0)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d101      	bne.n	800bf74 <_strNoCaseCmp+0x16>
    return 0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	e026      	b.n	800bfc2 <_strNoCaseCmp+0x64>
  do {
		if ((c1 = _toLower(*s1++)) != (c2 = _toLower(*s2++))) {
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	1c5a      	adds	r2, r3, #1
 800bf78:	60fa      	str	r2, [r7, #12]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7ff ff7a 	bl	800be76 <_toLower>
 800bf82:	4603      	mov	r3, r0
 800bf84:	75fb      	strb	r3, [r7, #23]
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	1c5a      	adds	r2, r3, #1
 800bf8a:	60ba      	str	r2, [r7, #8]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7ff ff71 	bl	800be76 <_toLower>
 800bf94:	4603      	mov	r3, r0
 800bf96:	75bb      	strb	r3, [r7, #22]
 800bf98:	7dfa      	ldrb	r2, [r7, #23]
 800bf9a:	7dbb      	ldrb	r3, [r7, #22]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d009      	beq.n	800bfb4 <_strNoCaseCmp+0x56>
			if ((c1 == 0) || (c2 == 0))
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00c      	beq.n	800bfc0 <_strNoCaseCmp+0x62>
 800bfa6:	7dbb      	ldrb	r3, [r7, #22]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d009      	beq.n	800bfc0 <_strNoCaseCmp+0x62>
					break;
			return ((unsigned char)c1 - (unsigned char)c2);
 800bfac:	7dfa      	ldrb	r2, [r7, #23]
 800bfae:	7dbb      	ldrb	r3, [r7, #22]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	e006      	b.n	800bfc2 <_strNoCaseCmp+0x64>
		}
  } while (--nLenghth != 0);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	607b      	str	r3, [r7, #4]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1d9      	bne.n	800bf74 <_strNoCaseCmp+0x16>
  return 0;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3718      	adds	r7, #24
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <_svMemCpy>:

static void _svMemCpy(char* dst, char *src, int nLength)
{
 800bfca:	b480      	push	{r7}
 800bfcc:	b085      	sub	sp, #20
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	60f8      	str	r0, [r7, #12]
 800bfd2:	60b9      	str	r1, [r7, #8]
 800bfd4:	607a      	str	r2, [r7, #4]
	while (nLength--) {
 800bfd6:	e007      	b.n	800bfe8 <_svMemCpy+0x1e>
		*dst++=*src++;
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	1c53      	adds	r3, r2, #1
 800bfdc:	60bb      	str	r3, [r7, #8]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	1c59      	adds	r1, r3, #1
 800bfe2:	60f9      	str	r1, [r7, #12]
 800bfe4:	7812      	ldrb	r2, [r2, #0]
 800bfe6:	701a      	strb	r2, [r3, #0]
	while (nLength--) {
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	1e5a      	subs	r2, r3, #1
 800bfec:	607a      	str	r2, [r7, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1f2      	bne.n	800bfd8 <_svMemCpy+0xe>
	}
}
 800bff2:	bf00      	nop
 800bff4:	bf00      	nop
 800bff6:	3714      	adds	r7, #20
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <_svClearLine>:

static void _svClearLine(void)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
	svPutChar('\r');
 800c006:	4b16      	ldr	r3, [pc, #88]	; (800c060 <_svClearLine+0x60>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	200d      	movs	r0, #13
 800c00c:	4798      	blx	r3
	// Remove Strings
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800c00e:	2300      	movs	r3, #0
 800c010:	607b      	str	r3, [r7, #4]
 800c012:	e006      	b.n	800c022 <_svClearLine+0x22>
		svPutChar(' ');
 800c014:	4b12      	ldr	r3, [pc, #72]	; (800c060 <_svClearLine+0x60>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2020      	movs	r0, #32
 800c01a:	4798      	blx	r3
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	3301      	adds	r3, #1
 800c020:	607b      	str	r3, [r7, #4]
 800c022:	4b10      	ldr	r3, [pc, #64]	; (800c064 <_svClearLine+0x64>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a10      	ldr	r2, [pc, #64]	; (800c068 <_svClearLine+0x68>)
 800c028:	6812      	ldr	r2, [r2, #0]
 800c02a:	441a      	add	r2, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d8f0      	bhi.n	800c014 <_svClearLine+0x14>
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800c032:	2300      	movs	r3, #0
 800c034:	603b      	str	r3, [r7, #0]
 800c036:	e006      	b.n	800c046 <_svClearLine+0x46>
		svPutChar('\b');
 800c038:	4b09      	ldr	r3, [pc, #36]	; (800c060 <_svClearLine+0x60>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	2008      	movs	r0, #8
 800c03e:	4798      	blx	r3
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	3301      	adds	r3, #1
 800c044:	603b      	str	r3, [r7, #0]
 800c046:	4b07      	ldr	r3, [pc, #28]	; (800c064 <_svClearLine+0x64>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a07      	ldr	r2, [pc, #28]	; (800c068 <_svClearLine+0x68>)
 800c04c:	6812      	ldr	r2, [r2, #0]
 800c04e:	441a      	add	r2, r3
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	429a      	cmp	r2, r3
 800c054:	d8f0      	bhi.n	800c038 <_svClearLine+0x38>
}
 800c056:	bf00      	nop
 800c058:	bf00      	nop
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	20000e24 	.word	0x20000e24
 800c064:	20000e14 	.word	0x20000e14
 800c068:	20000048 	.word	0x20000048

0800c06c <svCLIHandleHistory>:

static void svCLIHandleHistory(CLI_HISTORY_CMD_e eHistoryCmd)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	4603      	mov	r3, r0
 800c074:	71fb      	strb	r3, [r7, #7]
	switch (eHistoryCmd) {
 800c076:	79fb      	ldrb	r3, [r7, #7]
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d03f      	beq.n	800c0fc <svCLIHandleHistory+0x90>
 800c07c:	2b02      	cmp	r3, #2
 800c07e:	dc6f      	bgt.n	800c160 <svCLIHandleHistory+0xf4>
 800c080:	2b00      	cmp	r3, #0
 800c082:	d002      	beq.n	800c08a <svCLIHandleHistory+0x1e>
 800c084:	2b01      	cmp	r3, #1
 800c086:	d052      	beq.n	800c12e <svCLIHandleHistory+0xc2>
			if (snCLIHistoryPos >= snCLIHistoryCount)
				snCLIHistoryPos = 0;
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
			break;
		default:
			break;
 800c088:	e06a      	b.n	800c160 <svCLIHandleHistory+0xf4>
			if (snCLIHistoryCount == MAX_CLI_HISTORY_BUFF_MAX) {	// Full
 800c08a:	4b38      	ldr	r3, [pc, #224]	; (800c16c <svCLIHandleHistory+0x100>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2b03      	cmp	r3, #3
 800c090:	d11c      	bne.n	800c0cc <svCLIHandleHistory+0x60>
				for (int i=1;i<snCLIHistoryCount;i++) {
 800c092:	2301      	movs	r3, #1
 800c094:	60fb      	str	r3, [r7, #12]
 800c096:	e00f      	b.n	800c0b8 <svCLIHandleHistory+0x4c>
	        _svMemCpy(&szCLIHistoryBuffer[i-1][0],&szCLIHistoryBuffer[i][0],MAX_CLI_CHARS);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	3b01      	subs	r3, #1
 800c09c:	01db      	lsls	r3, r3, #7
 800c09e:	4a34      	ldr	r2, [pc, #208]	; (800c170 <svCLIHandleHistory+0x104>)
 800c0a0:	1898      	adds	r0, r3, r2
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	01db      	lsls	r3, r3, #7
 800c0a6:	4a32      	ldr	r2, [pc, #200]	; (800c170 <svCLIHandleHistory+0x104>)
 800c0a8:	4413      	add	r3, r2
 800c0aa:	2280      	movs	r2, #128	; 0x80
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	f7ff ff8c 	bl	800bfca <_svMemCpy>
				for (int i=1;i<snCLIHistoryCount;i++) {
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	4b2c      	ldr	r3, [pc, #176]	; (800c16c <svCLIHandleHistory+0x100>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	dbea      	blt.n	800c098 <svCLIHandleHistory+0x2c>
				snCLIHistoryCount--;
 800c0c2:	4b2a      	ldr	r3, [pc, #168]	; (800c16c <svCLIHandleHistory+0x100>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	3b01      	subs	r3, #1
 800c0c8:	4a28      	ldr	r2, [pc, #160]	; (800c16c <svCLIHandleHistory+0x100>)
 800c0ca:	6013      	str	r3, [r2, #0]
			_svMemCpy(&szCLIHistoryBuffer[snCLIHistoryCount][0], &szCLIString[0],MAX_CLI_CHARS);
 800c0cc:	4b27      	ldr	r3, [pc, #156]	; (800c16c <svCLIHandleHistory+0x100>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	01db      	lsls	r3, r3, #7
 800c0d2:	4a27      	ldr	r2, [pc, #156]	; (800c170 <svCLIHandleHistory+0x104>)
 800c0d4:	4413      	add	r3, r2
 800c0d6:	2280      	movs	r2, #128	; 0x80
 800c0d8:	4926      	ldr	r1, [pc, #152]	; (800c174 <svCLIHandleHistory+0x108>)
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7ff ff75 	bl	800bfca <_svMemCpy>
			if (snCLIHistoryCount < MAX_CLI_HISTORY_BUFF_MAX)
 800c0e0:	4b22      	ldr	r3, [pc, #136]	; (800c16c <svCLIHandleHistory+0x100>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	dc04      	bgt.n	800c0f2 <svCLIHandleHistory+0x86>
				snCLIHistoryCount++;
 800c0e8:	4b20      	ldr	r3, [pc, #128]	; (800c16c <svCLIHandleHistory+0x100>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	4a1f      	ldr	r2, [pc, #124]	; (800c16c <svCLIHandleHistory+0x100>)
 800c0f0:	6013      	str	r3, [r2, #0]
			snCLIHistoryPos = snCLIHistoryCount;
 800c0f2:	4b1e      	ldr	r3, [pc, #120]	; (800c16c <svCLIHandleHistory+0x100>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a20      	ldr	r2, [pc, #128]	; (800c178 <svCLIHandleHistory+0x10c>)
 800c0f8:	6013      	str	r3, [r2, #0]
			break;
 800c0fa:	e032      	b.n	800c162 <svCLIHandleHistory+0xf6>
			snCLIHistoryPos--;
 800c0fc:	4b1e      	ldr	r3, [pc, #120]	; (800c178 <svCLIHandleHistory+0x10c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	3b01      	subs	r3, #1
 800c102:	4a1d      	ldr	r2, [pc, #116]	; (800c178 <svCLIHandleHistory+0x10c>)
 800c104:	6013      	str	r3, [r2, #0]
			if (snCLIHistoryPos < 0)
 800c106:	4b1c      	ldr	r3, [pc, #112]	; (800c178 <svCLIHandleHistory+0x10c>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	da04      	bge.n	800c118 <svCLIHandleHistory+0xac>
				snCLIHistoryPos = snCLIHistoryCount - 1;
 800c10e:	4b17      	ldr	r3, [pc, #92]	; (800c16c <svCLIHandleHistory+0x100>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	3b01      	subs	r3, #1
 800c114:	4a18      	ldr	r2, [pc, #96]	; (800c178 <svCLIHandleHistory+0x10c>)
 800c116:	6013      	str	r3, [r2, #0]
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800c118:	4b17      	ldr	r3, [pc, #92]	; (800c178 <svCLIHandleHistory+0x10c>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	01db      	lsls	r3, r3, #7
 800c11e:	4a14      	ldr	r2, [pc, #80]	; (800c170 <svCLIHandleHistory+0x104>)
 800c120:	4413      	add	r3, r2
 800c122:	2280      	movs	r2, #128	; 0x80
 800c124:	4619      	mov	r1, r3
 800c126:	4813      	ldr	r0, [pc, #76]	; (800c174 <svCLIHandleHistory+0x108>)
 800c128:	f7ff ff4f 	bl	800bfca <_svMemCpy>
			break;
 800c12c:	e019      	b.n	800c162 <svCLIHandleHistory+0xf6>
			snCLIHistoryPos++;
 800c12e:	4b12      	ldr	r3, [pc, #72]	; (800c178 <svCLIHandleHistory+0x10c>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	3301      	adds	r3, #1
 800c134:	4a10      	ldr	r2, [pc, #64]	; (800c178 <svCLIHandleHistory+0x10c>)
 800c136:	6013      	str	r3, [r2, #0]
			if (snCLIHistoryPos >= snCLIHistoryCount)
 800c138:	4b0f      	ldr	r3, [pc, #60]	; (800c178 <svCLIHandleHistory+0x10c>)
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	4b0b      	ldr	r3, [pc, #44]	; (800c16c <svCLIHandleHistory+0x100>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	429a      	cmp	r2, r3
 800c142:	db02      	blt.n	800c14a <svCLIHandleHistory+0xde>
				snCLIHistoryPos = 0;
 800c144:	4b0c      	ldr	r3, [pc, #48]	; (800c178 <svCLIHandleHistory+0x10c>)
 800c146:	2200      	movs	r2, #0
 800c148:	601a      	str	r2, [r3, #0]
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800c14a:	4b0b      	ldr	r3, [pc, #44]	; (800c178 <svCLIHandleHistory+0x10c>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	01db      	lsls	r3, r3, #7
 800c150:	4a07      	ldr	r2, [pc, #28]	; (800c170 <svCLIHandleHistory+0x104>)
 800c152:	4413      	add	r3, r2
 800c154:	2280      	movs	r2, #128	; 0x80
 800c156:	4619      	mov	r1, r3
 800c158:	4806      	ldr	r0, [pc, #24]	; (800c174 <svCLIHandleHistory+0x108>)
 800c15a:	f7ff ff36 	bl	800bfca <_svMemCpy>
			break;
 800c15e:	e000      	b.n	800c162 <svCLIHandleHistory+0xf6>
			break;
 800c160:	bf00      	nop
	}
}
 800c162:	bf00      	nop
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	20000e0c 	.word	0x20000e0c
 800c170:	20000c8c 	.word	0x20000c8c
 800c174:	20000c0c 	.word	0x20000c0c
 800c178:	20000e10 	.word	0x20000e10

0800c17c <svCLI_Search>:

static SVCLI_t* svCLI_Search(char **line)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
	SVCLI_t* pCLIEntry;
	char* pCurrent = *line;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	613b      	str	r3, [r7, #16]
  // strip off leading spaces
  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 800c18a:	e002      	b.n	800c192 <svCLI_Search+0x16>
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	3301      	adds	r3, #1
 800c190:	613b      	str	r3, [r7, #16]
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d003      	beq.n	800c1a2 <svCLI_Search+0x26>
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	2b20      	cmp	r3, #32
 800c1a0:	d0f4      	beq.n	800c18c <svCLI_Search+0x10>
	for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800c1a2:	4b22      	ldr	r3, [pc, #136]	; (800c22c <svCLI_Search+0xb0>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	617b      	str	r3, [r7, #20]
 800c1a8:	e035      	b.n	800c216 <svCLI_Search+0x9a>
		int nCmdLength = _strlenOffspace(pCLIEntry->szCmd);
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7ff fe34 	bl	800be1c <_strlenOffspace>
 800c1b4:	60f8      	str	r0, [r7, #12]
		int nArgLength = _strlenOffspace(pCurrent);
 800c1b6:	6938      	ldr	r0, [r7, #16]
 800c1b8:	f7ff fe30 	bl	800be1c <_strlenOffspace>
 800c1bc:	60b8      	str	r0, [r7, #8]
		pCurrent[nArgLength] = 0;	// NULL termination just after command for comparing
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	693a      	ldr	r2, [r7, #16]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	701a      	strb	r2, [r3, #0]
		if (nCmdLength >= nArgLength) {
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	db1f      	blt.n	800c210 <svCLI_Search+0x94>
			if (_strNoCaseCmp(pCurrent, pCLIEntry->szCmd, nCmdLength) == 0) {	// Partial Command OK !!
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6938      	ldr	r0, [r7, #16]
 800c1da:	f7ff fec0 	bl	800bf5e <_strNoCaseCmp>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d115      	bne.n	800c210 <svCLI_Search+0x94>
				pCurrent += (nArgLength + 1);
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	693a      	ldr	r2, [r7, #16]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	613b      	str	r3, [r7, #16]
			  // strip off trailing spaces
			  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 800c1ee:	e002      	b.n	800c1f6 <svCLI_Search+0x7a>
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	613b      	str	r3, [r7, #16]
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d003      	beq.n	800c206 <svCLI_Search+0x8a>
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	2b20      	cmp	r3, #32
 800c204:	d0f4      	beq.n	800c1f0 <svCLI_Search+0x74>
				*line = pCurrent;		// remove command & return
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	693a      	ldr	r2, [r7, #16]
 800c20a:	601a      	str	r2, [r3, #0]
				
				return pCLIEntry;
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	e008      	b.n	800c222 <svCLI_Search+0xa6>
	for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	330c      	adds	r3, #12
 800c214:	617b      	str	r3, [r7, #20]
 800c216:	4b06      	ldr	r3, [pc, #24]	; (800c230 <svCLI_Search+0xb4>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	697a      	ldr	r2, [r7, #20]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d3c4      	bcc.n	800c1aa <svCLI_Search+0x2e>
			}
		}
	}
	return NULL;
 800c220:	2300      	movs	r3, #0
}
 800c222:	4618      	mov	r0, r3
 800c224:	3718      	adds	r7, #24
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	20000e18 	.word	0x20000e18
 800c230:	20000e1c 	.word	0x20000e1c

0800c234 <svCLI_ParseNumber>:

int svCLI_ParseNumber(char *s, unsigned int *val, char **res, char *delimiter)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b08a      	sub	sp, #40	; 0x28
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	607a      	str	r2, [r7, #4]
 800c240:	603b      	str	r3, [r7, #0]
  int first = 1;
 800c242:	2301      	movs	r3, #1
 800c244:	627b      	str	r3, [r7, #36]	; 0x24
  int radix = 10;
 800c246:	230a      	movs	r3, #10
 800c248:	623b      	str	r3, [r7, #32]
  char c;
  unsigned long result = 0;
 800c24a:	2300      	movs	r3, #0
 800c24c:	61fb      	str	r3, [r7, #28]
  int digit;
		// strip off leading spaces
    while (*s == ' ') s++;
 800c24e:	e002      	b.n	800c256 <svCLI_ParseNumber+0x22>
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	3301      	adds	r3, #1
 800c254:	60fb      	str	r3, [r7, #12]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	2b20      	cmp	r3, #32
 800c25c:	d0f8      	beq.n	800c250 <svCLI_ParseNumber+0x1c>
		if (*s == 0)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d14d      	bne.n	800c302 <svCLI_ParseNumber+0xce>
			return 0;
 800c266:	2300      	movs	r3, #0
 800c268:	e05b      	b.n	800c322 <svCLI_ParseNumber+0xee>
    while (*s) {
      if (first && (s[0] == '0') && (_toLower(s[1]) == 'x')) {
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d011      	beq.n	800c294 <svCLI_ParseNumber+0x60>
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	2b30      	cmp	r3, #48	; 0x30
 800c276:	d10d      	bne.n	800c294 <svCLI_ParseNumber+0x60>
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	3301      	adds	r3, #1
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	4618      	mov	r0, r3
 800c280:	f7ff fdf9 	bl	800be76 <_toLower>
 800c284:	4603      	mov	r3, r0
 800c286:	2b78      	cmp	r3, #120	; 0x78
 800c288:	d104      	bne.n	800c294 <svCLI_ParseNumber+0x60>
        radix = 16;
 800c28a:	2310      	movs	r3, #16
 800c28c:	623b      	str	r3, [r7, #32]
        s += 2;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3302      	adds	r3, #2
 800c292:	60fb      	str	r3, [r7, #12]
      }
      first = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	627b      	str	r3, [r7, #36]	; 0x24
      c = *s++;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	1c5a      	adds	r2, r3, #1
 800c29c:	60fa      	str	r2, [r7, #12]
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	75fb      	strb	r3, [r7, #23]
      if (_isHex(c) && ((digit = _fromHex(c)) < radix)) {
 800c2a2:	7dfb      	ldrb	r3, [r7, #23]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7ff fe0f 	bl	800bec8 <_isHex>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d010      	beq.n	800c2d2 <svCLI_ParseNumber+0x9e>
 800c2b0:	7dfb      	ldrb	r3, [r7, #23]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7ff fe28 	bl	800bf08 <_fromHex>
 800c2b8:	6138      	str	r0, [r7, #16]
 800c2ba:	693a      	ldr	r2, [r7, #16]
 800c2bc:	6a3b      	ldr	r3, [r7, #32]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	da07      	bge.n	800c2d2 <svCLI_ParseNumber+0x9e>
        // Valid digit
        result = (result * radix) + digit;
 800c2c2:	6a3b      	ldr	r3, [r7, #32]
 800c2c4:	69fa      	ldr	r2, [r7, #28]
 800c2c6:	fb03 f202 	mul.w	r2, r3, r2
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	61fb      	str	r3, [r7, #28]
 800c2d0:	e017      	b.n	800c302 <svCLI_ParseNumber+0xce>
      } 
			else {
        if (delimiter != (char *)0) {
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d012      	beq.n	800c2fe <svCLI_ParseNumber+0xca>
          // See if this character is one of the delimiters
          char *dp = delimiter;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	61bb      	str	r3, [r7, #24]
          while (*dp && (c != *dp)) dp++;
 800c2dc:	e002      	b.n	800c2e4 <svCLI_ParseNumber+0xb0>
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	61bb      	str	r3, [r7, #24]
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d004      	beq.n	800c2f6 <svCLI_ParseNumber+0xc2>
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	7dfa      	ldrb	r2, [r7, #23]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d1f3      	bne.n	800c2de <svCLI_ParseNumber+0xaa>
          if (*dp) break;  // Found a good delimiter
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d106      	bne.n	800c30c <svCLI_ParseNumber+0xd8>
        }
        return 0;  // invalid number
 800c2fe:	2300      	movs	r3, #0
 800c300:	e00f      	b.n	800c322 <svCLI_ParseNumber+0xee>
    while (*s) {
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1af      	bne.n	800c26a <svCLI_ParseNumber+0x36>
 800c30a:	e000      	b.n	800c30e <svCLI_ParseNumber+0xda>
          if (*dp) break;  // Found a good delimiter
 800c30c:	bf00      	nop
      }
    }
    *val = result;
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	69fa      	ldr	r2, [r7, #28]
 800c312:	601a      	str	r2, [r3, #0]
    if (res != (char **)0) {
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d002      	beq.n	800c320 <svCLI_ParseNumber+0xec>
      *res = s;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800c320:	2301      	movs	r3, #1
}
 800c322:	4618      	mov	r0, r3
 800c324:	3728      	adds	r7, #40	; 0x28
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
	...

0800c32c <svCLI_ParsenExecute>:

static void svCLI_ParsenExecute()
{
 800c32c:	b590      	push	{r4, r7, lr}
 800c32e:	b089      	sub	sp, #36	; 0x24
 800c330:	af00      	add	r7, sp, #0
	if (s_bPwdOK == FALSE) {	// Input Password
 800c332:	4b3a      	ldr	r3, [pc, #232]	; (800c41c <svCLI_ParsenExecute+0xf0>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d120      	bne.n	800c37c <svCLI_ParsenExecute+0x50>
		if (strcmp(szCLIString, DEFAULT_PASSWORD) == 0) {
 800c33a:	4939      	ldr	r1, [pc, #228]	; (800c420 <svCLI_ParsenExecute+0xf4>)
 800c33c:	4839      	ldr	r0, [pc, #228]	; (800c424 <svCLI_ParsenExecute+0xf8>)
 800c33e:	f7f3 ffa7 	bl	8000290 <strcmp>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d115      	bne.n	800c374 <svCLI_ParsenExecute+0x48>
			s_bPwdOK = TRUE;
 800c348:	4b34      	ldr	r3, [pc, #208]	; (800c41c <svCLI_ParsenExecute+0xf0>)
 800c34a:	2201      	movs	r2, #1
 800c34c:	601a      	str	r2, [r3, #0]
			svCLI_Printf("Welcome !!\r\n");
 800c34e:	4836      	ldr	r0, [pc, #216]	; (800c428 <svCLI_ParsenExecute+0xfc>)
 800c350:	f7ff fcc8 	bl	800bce4 <svCLI_Printf>
			strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800c354:	4b35      	ldr	r3, [pc, #212]	; (800c42c <svCLI_ParsenExecute+0x100>)
 800c356:	4a36      	ldr	r2, [pc, #216]	; (800c430 <svCLI_ParsenExecute+0x104>)
 800c358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c35c:	6018      	str	r0, [r3, #0]
 800c35e:	3304      	adds	r3, #4
 800c360:	8019      	strh	r1, [r3, #0]
 800c362:	3302      	adds	r3, #2
 800c364:	0c0a      	lsrs	r2, r1, #16
 800c366:	701a      	strb	r2, [r3, #0]
			snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800c368:	4b32      	ldr	r3, [pc, #200]	; (800c434 <svCLI_ParsenExecute+0x108>)
 800c36a:	2206      	movs	r2, #6
 800c36c:	601a      	str	r2, [r3, #0]
			svCLI_ShowHelp();
 800c36e:	f7ff fce5 	bl	800bd3c <svCLI_ShowHelp>
		}
		else {
			svCLI_Printf("Invalid Password !!\r\n");
		}
		return;
 800c372:	e04f      	b.n	800c414 <svCLI_ParsenExecute+0xe8>
			svCLI_Printf("Invalid Password !!\r\n");
 800c374:	4830      	ldr	r0, [pc, #192]	; (800c438 <svCLI_ParsenExecute+0x10c>)
 800c376:	f7ff fcb5 	bl	800bce4 <svCLI_Printf>
		return;
 800c37a:	e04b      	b.n	800c414 <svCLI_ParsenExecute+0xe8>
	}
	SVCLI_t* pCLIEntry;
	if (sCLITableBegin == sCLITablEnd) {
 800c37c:	4b2f      	ldr	r3, [pc, #188]	; (800c43c <svCLI_ParsenExecute+0x110>)
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	4b2f      	ldr	r3, [pc, #188]	; (800c440 <svCLI_ParsenExecute+0x114>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	429a      	cmp	r2, r3
 800c386:	d103      	bne.n	800c390 <svCLI_ParsenExecute+0x64>
		svCLI_Printf("No CLI Entries !!!\r\n");
 800c388:	482e      	ldr	r0, [pc, #184]	; (800c444 <svCLI_ParsenExecute+0x118>)
 800c38a:	f7ff fcab 	bl	800bce4 <svCLI_Printf>
		return;
 800c38e:	e041      	b.n	800c414 <svCLI_ParsenExecute+0xe8>
	}
	char* pLine = szCLIString;
 800c390:	4b24      	ldr	r3, [pc, #144]	; (800c424 <svCLI_ParsenExecute+0xf8>)
 800c392:	613b      	str	r3, [r7, #16]
	pCLIEntry = svCLI_Search(&pLine);
 800c394:	f107 0310 	add.w	r3, r7, #16
 800c398:	4618      	mov	r0, r3
 800c39a:	f7ff feef 	bl	800c17c <svCLI_Search>
 800c39e:	61b8      	str	r0, [r7, #24]
	if (pCLIEntry) {
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d033      	beq.n	800c40e <svCLI_ParsenExecute+0xe2>
		// Parse more for CLI function
		unsigned int nFirst, nSecond, nCount;
		nCount = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	61fb      	str	r3, [r7, #28]
		nFirst = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	60fb      	str	r3, [r7, #12]
		nSecond = 0;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	60bb      	str	r3, [r7, #8]
		char* pParseLine = pLine;
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	617b      	str	r3, [r7, #20]
		char delim[3] = ", ";
 800c3b6:	4a24      	ldr	r2, [pc, #144]	; (800c448 <svCLI_ParsenExecute+0x11c>)
 800c3b8:	1d3b      	adds	r3, r7, #4
 800c3ba:	6812      	ldr	r2, [r2, #0]
 800c3bc:	4611      	mov	r1, r2
 800c3be:	8019      	strh	r1, [r3, #0]
 800c3c0:	3302      	adds	r3, #2
 800c3c2:	0c12      	lsrs	r2, r2, #16
 800c3c4:	701a      	strb	r2, [r3, #0]
		if (svCLI_ParseNumber(pLine, &nFirst, &pLine, delim)) {
 800c3c6:	6938      	ldr	r0, [r7, #16]
 800c3c8:	1d3b      	adds	r3, r7, #4
 800c3ca:	f107 0210 	add.w	r2, r7, #16
 800c3ce:	f107 010c 	add.w	r1, r7, #12
 800c3d2:	f7ff ff2f 	bl	800c234 <svCLI_ParseNumber>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d010      	beq.n	800c3fe <svCLI_ParsenExecute+0xd2>
			nCount++;
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	61fb      	str	r3, [r7, #28]
			if (svCLI_ParseNumber(pLine, &nSecond, &pLine, delim)) {
 800c3e2:	6938      	ldr	r0, [r7, #16]
 800c3e4:	1d3b      	adds	r3, r7, #4
 800c3e6:	f107 0210 	add.w	r2, r7, #16
 800c3ea:	f107 0108 	add.w	r1, r7, #8
 800c3ee:	f7ff ff21 	bl	800c234 <svCLI_ParseNumber>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <svCLI_ParsenExecute+0xd2>
				nCount++;
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	61fb      	str	r3, [r7, #28]
			}
		}
		pCLIEntry->func(pParseLine,nCount,nFirst,nSecond);
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	689c      	ldr	r4, [r3, #8]
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	69f9      	ldr	r1, [r7, #28]
 800c408:	6978      	ldr	r0, [r7, #20]
 800c40a:	47a0      	blx	r4
 800c40c:	e002      	b.n	800c414 <svCLI_ParsenExecute+0xe8>
	}
	else {
		svCLI_Printf("CLI command Not Found !! - Press Help\r\n");
 800c40e:	480f      	ldr	r0, [pc, #60]	; (800c44c <svCLI_ParsenExecute+0x120>)
 800c410:	f7ff fc68 	bl	800bce4 <svCLI_Printf>
	}
}
 800c414:	3724      	adds	r7, #36	; 0x24
 800c416:	46bd      	mov	sp, r7
 800c418:	bd90      	pop	{r4, r7, pc}
 800c41a:	bf00      	nop
 800c41c:	20000038 	.word	0x20000038
 800c420:	0800fa58 	.word	0x0800fa58
 800c424:	20000c0c 	.word	0x20000c0c
 800c428:	0800fa64 	.word	0x0800fa64
 800c42c:	2000003c 	.word	0x2000003c
 800c430:	0800fa00 	.word	0x0800fa00
 800c434:	20000048 	.word	0x20000048
 800c438:	0800fa74 	.word	0x0800fa74
 800c43c:	20000e18 	.word	0x20000e18
 800c440:	20000e1c 	.word	0x20000e1c
 800c444:	0800fa8c 	.word	0x0800fa8c
 800c448:	0800facc 	.word	0x0800facc
 800c44c:	0800faa4 	.word	0x0800faa4

0800c450 <svCLI_SetBypassFtn>:

// hellosmk 210225 added
void svCLI_SetBypassFtn(SVCLI_BYPASS_FUNC pfnBypass, char* szPrompt, char szExit, BOOL bEnter)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	603b      	str	r3, [r7, #0]
 800c45c:	4613      	mov	r3, r2
 800c45e:	71fb      	strb	r3, [r7, #7]
	if ((pfnBypass == NULL) || (szPrompt == NULL) || (szExit == NULL)) {
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d005      	beq.n	800c472 <svCLI_SetBypassFtn+0x22>
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d002      	beq.n	800c472 <svCLI_SetBypassFtn+0x22>
 800c46c:	79fb      	ldrb	r3, [r7, #7]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d136      	bne.n	800c4e0 <svCLI_SetBypassFtn+0x90>
		if (svBypass == NULL) {
 800c472:	4b28      	ldr	r3, [pc, #160]	; (800c514 <svCLI_SetBypassFtn+0xc4>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d048      	beq.n	800c50c <svCLI_SetBypassFtn+0xbc>
			// Nothing to do..
			return;
		}
		strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800c47a:	4b27      	ldr	r3, [pc, #156]	; (800c518 <svCLI_SetBypassFtn+0xc8>)
 800c47c:	4a27      	ldr	r2, [pc, #156]	; (800c51c <svCLI_SetBypassFtn+0xcc>)
 800c47e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c482:	6018      	str	r0, [r3, #0]
 800c484:	3304      	adds	r3, #4
 800c486:	8019      	strh	r1, [r3, #0]
 800c488:	3302      	adds	r3, #2
 800c48a:	0c0a      	lsrs	r2, r1, #16
 800c48c:	701a      	strb	r2, [r3, #0]
		snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800c48e:	4b24      	ldr	r3, [pc, #144]	; (800c520 <svCLI_SetBypassFtn+0xd0>)
 800c490:	2206      	movs	r2, #6
 800c492:	601a      	str	r2, [r3, #0]
		svBypass = NULL;
 800c494:	4b1f      	ldr	r3, [pc, #124]	; (800c514 <svCLI_SetBypassFtn+0xc4>)
 800c496:	2200      	movs	r2, #0
 800c498:	601a      	str	r2, [r3, #0]

		svExit = NULL;
 800c49a:	4b22      	ldr	r3, [pc, #136]	; (800c524 <svCLI_SetBypassFtn+0xd4>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	701a      	strb	r2, [r3, #0]
		sbEnter = FALSE;
 800c4a0:	4b21      	ldr	r3, [pc, #132]	; (800c528 <svCLI_SetBypassFtn+0xd8>)
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	601a      	str	r2, [r3, #0]
		
		scntCLIString = 0;	// Clean Up Char
 800c4a6:	4b21      	ldr	r3, [pc, #132]	; (800c52c <svCLI_SetBypassFtn+0xdc>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	601a      	str	r2, [r3, #0]
		// clean up line string
		for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	617b      	str	r3, [r7, #20]
 800c4b0:	e007      	b.n	800c4c2 <svCLI_SetBypassFtn+0x72>
			szCLIString[i] = '\0';
 800c4b2:	4a1f      	ldr	r2, [pc, #124]	; (800c530 <svCLI_SetBypassFtn+0xe0>)
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	617b      	str	r3, [r7, #20]
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	2b7f      	cmp	r3, #127	; 0x7f
 800c4c6:	ddf4      	ble.n	800c4b2 <svCLI_SetBypassFtn+0x62>
		}
		svCLI_Printf("\r\nExit Bypass Mode\r\n%s", szCLI_PROMPT);
 800c4c8:	4913      	ldr	r1, [pc, #76]	; (800c518 <svCLI_SetBypassFtn+0xc8>)
 800c4ca:	481a      	ldr	r0, [pc, #104]	; (800c534 <svCLI_SetBypassFtn+0xe4>)
 800c4cc:	f7ff fc0a 	bl	800bce4 <svCLI_Printf>

		if (svCommit) {
 800c4d0:	4b19      	ldr	r3, [pc, #100]	; (800c538 <svCLI_SetBypassFtn+0xe8>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d01a      	beq.n	800c50e <svCLI_SetBypassFtn+0xbe>
			svCommit();
 800c4d8:	4b17      	ldr	r3, [pc, #92]	; (800c538 <svCLI_SetBypassFtn+0xe8>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4798      	blx	r3
		if (svCommit) {
 800c4de:	e016      	b.n	800c50e <svCLI_SetBypassFtn+0xbe>
		}
	}
	else {
		strncpy(szCLI_PROMPT, szPrompt, sizeof(szCLI_PROMPT) - 1);
 800c4e0:	2209      	movs	r2, #9
 800c4e2:	68b9      	ldr	r1, [r7, #8]
 800c4e4:	480c      	ldr	r0, [pc, #48]	; (800c518 <svCLI_SetBypassFtn+0xc8>)
 800c4e6:	f002 fe67 	bl	800f1b8 <strncpy>
		snCLI_PROMPT_LENGTH = strlen(szCLI_PROMPT);
 800c4ea:	480b      	ldr	r0, [pc, #44]	; (800c518 <svCLI_SetBypassFtn+0xc8>)
 800c4ec:	f7f3 feda 	bl	80002a4 <strlen>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	4b0a      	ldr	r3, [pc, #40]	; (800c520 <svCLI_SetBypassFtn+0xd0>)
 800c4f6:	601a      	str	r2, [r3, #0]
		svBypass = pfnBypass;
 800c4f8:	4a06      	ldr	r2, [pc, #24]	; (800c514 <svCLI_SetBypassFtn+0xc4>)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6013      	str	r3, [r2, #0]
		svExit = szExit;
 800c4fe:	4a09      	ldr	r2, [pc, #36]	; (800c524 <svCLI_SetBypassFtn+0xd4>)
 800c500:	79fb      	ldrb	r3, [r7, #7]
 800c502:	7013      	strb	r3, [r2, #0]
		sbEnter = bEnter;
 800c504:	4a08      	ldr	r2, [pc, #32]	; (800c528 <svCLI_SetBypassFtn+0xd8>)
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	6013      	str	r3, [r2, #0]
 800c50a:	e000      	b.n	800c50e <svCLI_SetBypassFtn+0xbe>
			return;
 800c50c:	bf00      	nop
	}
}
 800c50e:	3718      	adds	r7, #24
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	20000e2c 	.word	0x20000e2c
 800c518:	2000003c 	.word	0x2000003c
 800c51c:	0800fa00 	.word	0x0800fa00
 800c520:	20000048 	.word	0x20000048
 800c524:	20000e30 	.word	0x20000e30
 800c528:	20000e34 	.word	0x20000e34
 800c52c:	20000e14 	.word	0x20000e14
 800c530:	20000c0c 	.word	0x20000c0c
 800c534:	0800fad0 	.word	0x0800fad0
 800c538:	20000e28 	.word	0x20000e28

0800c53c <svCLI_Handler>:

void svCLI_Handler(void)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
	if (sbFirst) {
		svCLI_Printf("\r\n%s", szCLI_PROMPT);
		sbFirst = 0;
	}
#endif	
	if (svGetChar) {
 800c542:	4b92      	ldr	r3, [pc, #584]	; (800c78c <svCLI_Handler+0x250>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	f000 8114 	beq.w	800c774 <svCLI_Handler+0x238>
		char bSkipPrompt = 0;
 800c54c:	2300      	movs	r3, #0
 800c54e:	73fb      	strb	r3, [r7, #15]
		char szChar = svGetChar();
 800c550:	4b8e      	ldr	r3, [pc, #568]	; (800c78c <svCLI_Handler+0x250>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4798      	blx	r3
 800c556:	4603      	mov	r3, r0
 800c558:	71fb      	strb	r3, [r7, #7]
		if ((szChar != 0) && (szChar != '\n')) {
 800c55a:	79fb      	ldrb	r3, [r7, #7]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f000 8109 	beq.w	800c774 <svCLI_Handler+0x238>
 800c562:	79fb      	ldrb	r3, [r7, #7]
 800c564:	2b0a      	cmp	r3, #10
 800c566:	f000 8105 	beq.w	800c774 <svCLI_Handler+0x238>
			if (szChar == '\r') {
 800c56a:	79fb      	ldrb	r3, [r7, #7]
 800c56c:	2b0d      	cmp	r3, #13
 800c56e:	d154      	bne.n	800c61a <svCLI_Handler+0xde>
				sbInEsc = 0;
 800c570:	4b87      	ldr	r3, [pc, #540]	; (800c790 <svCLI_Handler+0x254>)
 800c572:	2200      	movs	r2, #0
 800c574:	701a      	strb	r2, [r3, #0]
				svCLI_Printf("\r\n");
 800c576:	4887      	ldr	r0, [pc, #540]	; (800c794 <svCLI_Handler+0x258>)
 800c578:	f7ff fbb4 	bl	800bce4 <svCLI_Printf>
				if (scntCLIString > 0) {
 800c57c:	4b86      	ldr	r3, [pc, #536]	; (800c798 <svCLI_Handler+0x25c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d031      	beq.n	800c5e8 <svCLI_Handler+0xac>
					// Parse and Execute
					szCLIString[scntCLIString] = '\0';	// NULL Termination
 800c584:	4b84      	ldr	r3, [pc, #528]	; (800c798 <svCLI_Handler+0x25c>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a84      	ldr	r2, [pc, #528]	; (800c79c <svCLI_Handler+0x260>)
 800c58a:	2100      	movs	r1, #0
 800c58c:	54d1      	strb	r1, [r2, r3]
					// Save to history Buffer
					svCLIHandleHistory(CLI_HISTORY_ADD);					
 800c58e:	2000      	movs	r0, #0
 800c590:	f7ff fd6c 	bl	800c06c <svCLIHandleHistory>
					// Call Parser
					if (svBypass) {	// hellosmk 210225 added
 800c594:	4b82      	ldr	r3, [pc, #520]	; (800c7a0 <svCLI_Handler+0x264>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d011      	beq.n	800c5c0 <svCLI_Handler+0x84>
						bSkipPrompt = 1;
 800c59c:	2301      	movs	r3, #1
 800c59e:	73fb      	strb	r3, [r7, #15]
						szCLIString[scntCLIString] = '\r';
 800c5a0:	4b7d      	ldr	r3, [pc, #500]	; (800c798 <svCLI_Handler+0x25c>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a7d      	ldr	r2, [pc, #500]	; (800c79c <svCLI_Handler+0x260>)
 800c5a6:	210d      	movs	r1, #13
 800c5a8:	54d1      	strb	r1, [r2, r3]
						szCLIString[scntCLIString+1] = '\0';
 800c5aa:	4b7b      	ldr	r3, [pc, #492]	; (800c798 <svCLI_Handler+0x25c>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	4a7a      	ldr	r2, [pc, #488]	; (800c79c <svCLI_Handler+0x260>)
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	54d1      	strb	r1, [r2, r3]
						svBypass(szCLIString);
 800c5b6:	4b7a      	ldr	r3, [pc, #488]	; (800c7a0 <svCLI_Handler+0x264>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4878      	ldr	r0, [pc, #480]	; (800c79c <svCLI_Handler+0x260>)
 800c5bc:	4798      	blx	r3
 800c5be:	e001      	b.n	800c5c4 <svCLI_Handler+0x88>
					}
					else {
						svCLI_ParsenExecute();
 800c5c0:	f7ff feb4 	bl	800c32c <svCLI_ParsenExecute>
					}
					scntCLIString = 0;	// Clean Up Char
 800c5c4:	4b74      	ldr	r3, [pc, #464]	; (800c798 <svCLI_Handler+0x25c>)
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	601a      	str	r2, [r3, #0]
					// clean up line string
					for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	60bb      	str	r3, [r7, #8]
 800c5ce:	e007      	b.n	800c5e0 <svCLI_Handler+0xa4>
						szCLIString[i] = '\0';
 800c5d0:	4a72      	ldr	r2, [pc, #456]	; (800c79c <svCLI_Handler+0x260>)
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	701a      	strb	r2, [r3, #0]
					for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	60bb      	str	r3, [r7, #8]
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	2b7f      	cmp	r3, #127	; 0x7f
 800c5e4:	ddf4      	ble.n	800c5d0 <svCLI_Handler+0x94>
 800c5e6:	e010      	b.n	800c60a <svCLI_Handler+0xce>
					}
				}
				else if (sbEnter && svBypass) {
 800c5e8:	4b6e      	ldr	r3, [pc, #440]	; (800c7a4 <svCLI_Handler+0x268>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00c      	beq.n	800c60a <svCLI_Handler+0xce>
 800c5f0:	4b6b      	ldr	r3, [pc, #428]	; (800c7a0 <svCLI_Handler+0x264>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d008      	beq.n	800c60a <svCLI_Handler+0xce>
					const char cszRet[2] = {'\n',0};
 800c5f8:	230a      	movs	r3, #10
 800c5fa:	80bb      	strh	r3, [r7, #4]
					svBypass((char*)cszRet);
 800c5fc:	4b68      	ldr	r3, [pc, #416]	; (800c7a0 <svCLI_Handler+0x264>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	1d3a      	adds	r2, r7, #4
 800c602:	4610      	mov	r0, r2
 800c604:	4798      	blx	r3
					bSkipPrompt = 1;
 800c606:	2301      	movs	r3, #1
 800c608:	73fb      	strb	r3, [r7, #15]
				}
				
				if (bSkipPrompt == 0) {
 800c60a:	7bfb      	ldrb	r3, [r7, #15]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	f040 80b1 	bne.w	800c774 <svCLI_Handler+0x238>
					svCLI_Printf(szCLI_PROMPT);
 800c612:	4865      	ldr	r0, [pc, #404]	; (800c7a8 <svCLI_Handler+0x26c>)
 800c614:	f7ff fb66 	bl	800bce4 <svCLI_Printf>
 800c618:	e0ac      	b.n	800c774 <svCLI_Handler+0x238>
				}
			}
			else if (svBypass && (szChar == svExit)) {
 800c61a:	4b61      	ldr	r3, [pc, #388]	; (800c7a0 <svCLI_Handler+0x264>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d019      	beq.n	800c656 <svCLI_Handler+0x11a>
 800c622:	4b62      	ldr	r3, [pc, #392]	; (800c7ac <svCLI_Handler+0x270>)
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	79fa      	ldrb	r2, [r7, #7]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d114      	bne.n	800c656 <svCLI_Handler+0x11a>
				// Exit Bypass mode
				if (0x11 == svExit) {
 800c62c:	4b5f      	ldr	r3, [pc, #380]	; (800c7ac <svCLI_Handler+0x270>)
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	2b11      	cmp	r3, #17
 800c632:	d102      	bne.n	800c63a <svCLI_Handler+0xfe>
					svCLI_Printf("^Q");
 800c634:	485e      	ldr	r0, [pc, #376]	; (800c7b0 <svCLI_Handler+0x274>)
 800c636:	f7ff fb55 	bl	800bce4 <svCLI_Printf>
				}
				svBypass(NULL);	// Notify Exit !!
 800c63a:	4b59      	ldr	r3, [pc, #356]	; (800c7a0 <svCLI_Handler+0x264>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2000      	movs	r0, #0
 800c640:	4798      	blx	r3
				svCLI_SetBypassFtn(NULL,NULL,NULL,FALSE);
 800c642:	2300      	movs	r3, #0
 800c644:	2200      	movs	r2, #0
 800c646:	2100      	movs	r1, #0
 800c648:	2000      	movs	r0, #0
 800c64a:	f7ff ff01 	bl	800c450 <svCLI_SetBypassFtn>
				sbInEsc = 0;
 800c64e:	4b50      	ldr	r3, [pc, #320]	; (800c790 <svCLI_Handler+0x254>)
 800c650:	2200      	movs	r2, #0
 800c652:	701a      	strb	r2, [r3, #0]
 800c654:	e08e      	b.n	800c774 <svCLI_Handler+0x238>
			}
			else if (svBypass && (szChar == 0X1A)) {		// Ctrl+Z
 800c656:	4b52      	ldr	r3, [pc, #328]	; (800c7a0 <svCLI_Handler+0x264>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d014      	beq.n	800c688 <svCLI_Handler+0x14c>
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	2b1a      	cmp	r3, #26
 800c662:	d111      	bne.n	800c688 <svCLI_Handler+0x14c>
				bSkipPrompt = 1;
 800c664:	2301      	movs	r3, #1
 800c666:	73fb      	strb	r3, [r7, #15]
				szCLIString[scntCLIString] = 0X1A;	//Ctrl+z
 800c668:	4b4b      	ldr	r3, [pc, #300]	; (800c798 <svCLI_Handler+0x25c>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a4b      	ldr	r2, [pc, #300]	; (800c79c <svCLI_Handler+0x260>)
 800c66e:	211a      	movs	r1, #26
 800c670:	54d1      	strb	r1, [r2, r3]
				szCLIString[scntCLIString+1] = '\0';	// NULL Termination
 800c672:	4b49      	ldr	r3, [pc, #292]	; (800c798 <svCLI_Handler+0x25c>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	3301      	adds	r3, #1
 800c678:	4a48      	ldr	r2, [pc, #288]	; (800c79c <svCLI_Handler+0x260>)
 800c67a:	2100      	movs	r1, #0
 800c67c:	54d1      	strb	r1, [r2, r3]
				svBypass(szCLIString);
 800c67e:	4b48      	ldr	r3, [pc, #288]	; (800c7a0 <svCLI_Handler+0x264>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4846      	ldr	r0, [pc, #280]	; (800c79c <svCLI_Handler+0x260>)
 800c684:	4798      	blx	r3
 800c686:	e075      	b.n	800c774 <svCLI_Handler+0x238>
			}
			else {
				if (szChar == '\b')	{ // Back space
 800c688:	79fb      	ldrb	r3, [r7, #7]
 800c68a:	2b08      	cmp	r3, #8
 800c68c:	d118      	bne.n	800c6c0 <svCLI_Handler+0x184>
					sbInEsc = 0;
 800c68e:	4b40      	ldr	r3, [pc, #256]	; (800c790 <svCLI_Handler+0x254>)
 800c690:	2200      	movs	r2, #0
 800c692:	701a      	strb	r2, [r3, #0]
					if (scntCLIString > 0) {
 800c694:	4b40      	ldr	r3, [pc, #256]	; (800c798 <svCLI_Handler+0x25c>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d06b      	beq.n	800c774 <svCLI_Handler+0x238>
						_svClearLine();
 800c69c:	f7ff fcb0 	bl	800c000 <_svClearLine>
						scntCLIString--;
 800c6a0:	4b3d      	ldr	r3, [pc, #244]	; (800c798 <svCLI_Handler+0x25c>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	4a3c      	ldr	r2, [pc, #240]	; (800c798 <svCLI_Handler+0x25c>)
 800c6a8:	6013      	str	r3, [r2, #0]
						szCLIString[scntCLIString] = '\0';	// NULL Termination
 800c6aa:	4b3b      	ldr	r3, [pc, #236]	; (800c798 <svCLI_Handler+0x25c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a3b      	ldr	r2, [pc, #236]	; (800c79c <svCLI_Handler+0x260>)
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	54d1      	strb	r1, [r2, r3]
						svCLI_Printf("%s%s", szCLI_PROMPT, szCLIString);
 800c6b4:	4a39      	ldr	r2, [pc, #228]	; (800c79c <svCLI_Handler+0x260>)
 800c6b6:	493c      	ldr	r1, [pc, #240]	; (800c7a8 <svCLI_Handler+0x26c>)
 800c6b8:	483e      	ldr	r0, [pc, #248]	; (800c7b4 <svCLI_Handler+0x278>)
 800c6ba:	f7ff fb13 	bl	800bce4 <svCLI_Printf>
 800c6be:	e059      	b.n	800c774 <svCLI_Handler+0x238>
					}
				}
				else if (szChar == '[') {	// ESC sequence started
 800c6c0:	79fb      	ldrb	r3, [r7, #7]
 800c6c2:	2b5b      	cmp	r3, #91	; 0x5b
 800c6c4:	d103      	bne.n	800c6ce <svCLI_Handler+0x192>
					sbInEsc = 1;
 800c6c6:	4b32      	ldr	r3, [pc, #200]	; (800c790 <svCLI_Handler+0x254>)
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	701a      	strb	r2, [r3, #0]
 800c6cc:	e052      	b.n	800c774 <svCLI_Handler+0x238>
				}
				else if (_isPrintable(szChar)) {
 800c6ce:	79fb      	ldrb	r3, [r7, #7]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7ff fbe5 	bl	800bea0 <_isPrintable>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d04b      	beq.n	800c774 <svCLI_Handler+0x238>
					if (sbInEsc) {
 800c6dc:	4b2c      	ldr	r3, [pc, #176]	; (800c790 <svCLI_Handler+0x254>)
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d036      	beq.n	800c752 <svCLI_Handler+0x216>
						sbInEsc = 0;
 800c6e4:	4b2a      	ldr	r3, [pc, #168]	; (800c790 <svCLI_Handler+0x254>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	701a      	strb	r2, [r3, #0]
						if (snCLIHistoryCount > 0) {
 800c6ea:	4b33      	ldr	r3, [pc, #204]	; (800c7b8 <svCLI_Handler+0x27c>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	dd27      	ble.n	800c742 <svCLI_Handler+0x206>
							switch (szChar) {
 800c6f2:	79fb      	ldrb	r3, [r7, #7]
 800c6f4:	2b41      	cmp	r3, #65	; 0x41
 800c6f6:	d002      	beq.n	800c6fe <svCLI_Handler+0x1c2>
 800c6f8:	2b42      	cmp	r3, #66	; 0x42
 800c6fa:	d011      	beq.n	800c720 <svCLI_Handler+0x1e4>
									// echo back
									scntCLIString = svCLI_Printf("%s", szCLIString);
									// echo back
									break;
								default:	// Do Nothing
									break;
 800c6fc:	e021      	b.n	800c742 <svCLI_Handler+0x206>
									svCLIHandleHistory(CLI_HISTORY_PREV);
 800c6fe:	2002      	movs	r0, #2
 800c700:	f7ff fcb4 	bl	800c06c <svCLIHandleHistory>
									_svClearLine();
 800c704:	f7ff fc7c 	bl	800c000 <_svClearLine>
									svCLI_Printf(szCLI_PROMPT);
 800c708:	4827      	ldr	r0, [pc, #156]	; (800c7a8 <svCLI_Handler+0x26c>)
 800c70a:	f7ff faeb 	bl	800bce4 <svCLI_Printf>
									scntCLIString = svCLI_Printf("%s", szCLIString);
 800c70e:	4923      	ldr	r1, [pc, #140]	; (800c79c <svCLI_Handler+0x260>)
 800c710:	482a      	ldr	r0, [pc, #168]	; (800c7bc <svCLI_Handler+0x280>)
 800c712:	f7ff fae7 	bl	800bce4 <svCLI_Printf>
 800c716:	4603      	mov	r3, r0
 800c718:	461a      	mov	r2, r3
 800c71a:	4b1f      	ldr	r3, [pc, #124]	; (800c798 <svCLI_Handler+0x25c>)
 800c71c:	601a      	str	r2, [r3, #0]
									break;
 800c71e:	e010      	b.n	800c742 <svCLI_Handler+0x206>
									svCLIHandleHistory(CLI_HISTORY_NEXT);
 800c720:	2001      	movs	r0, #1
 800c722:	f7ff fca3 	bl	800c06c <svCLIHandleHistory>
									_svClearLine();
 800c726:	f7ff fc6b 	bl	800c000 <_svClearLine>
									svCLI_Printf(szCLI_PROMPT);
 800c72a:	481f      	ldr	r0, [pc, #124]	; (800c7a8 <svCLI_Handler+0x26c>)
 800c72c:	f7ff fada 	bl	800bce4 <svCLI_Printf>
									scntCLIString = svCLI_Printf("%s", szCLIString);
 800c730:	491a      	ldr	r1, [pc, #104]	; (800c79c <svCLI_Handler+0x260>)
 800c732:	4822      	ldr	r0, [pc, #136]	; (800c7bc <svCLI_Handler+0x280>)
 800c734:	f7ff fad6 	bl	800bce4 <svCLI_Printf>
 800c738:	4603      	mov	r3, r0
 800c73a:	461a      	mov	r2, r3
 800c73c:	4b16      	ldr	r3, [pc, #88]	; (800c798 <svCLI_Handler+0x25c>)
 800c73e:	601a      	str	r2, [r3, #0]
									break;
 800c740:	bf00      	nop
							}
						}
						if (svCommit) {
 800c742:	4b1f      	ldr	r3, [pc, #124]	; (800c7c0 <svCLI_Handler+0x284>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d01c      	beq.n	800c784 <svCLI_Handler+0x248>
							svCommit();
 800c74a:	4b1d      	ldr	r3, [pc, #116]	; (800c7c0 <svCLI_Handler+0x284>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4798      	blx	r3
						}
						return;
 800c750:	e018      	b.n	800c784 <svCLI_Handler+0x248>
					}
					if (scntCLIString < (MAX_CLI_CHARS-1)) {
 800c752:	4b11      	ldr	r3, [pc, #68]	; (800c798 <svCLI_Handler+0x25c>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b7e      	cmp	r3, #126	; 0x7e
 800c758:	d80c      	bhi.n	800c774 <svCLI_Handler+0x238>
						// echo back
						svPutChar(szChar);
 800c75a:	4b1a      	ldr	r3, [pc, #104]	; (800c7c4 <svCLI_Handler+0x288>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	79fa      	ldrb	r2, [r7, #7]
 800c760:	4610      	mov	r0, r2
 800c762:	4798      	blx	r3
						szCLIString[scntCLIString++] = szChar;
 800c764:	4b0c      	ldr	r3, [pc, #48]	; (800c798 <svCLI_Handler+0x25c>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	1c5a      	adds	r2, r3, #1
 800c76a:	490b      	ldr	r1, [pc, #44]	; (800c798 <svCLI_Handler+0x25c>)
 800c76c:	600a      	str	r2, [r1, #0]
 800c76e:	490b      	ldr	r1, [pc, #44]	; (800c79c <svCLI_Handler+0x260>)
 800c770:	79fa      	ldrb	r2, [r7, #7]
 800c772:	54ca      	strb	r2, [r1, r3]
					}
				}
			}
		}
	}
	if (svCommit) {
 800c774:	4b12      	ldr	r3, [pc, #72]	; (800c7c0 <svCLI_Handler+0x284>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d004      	beq.n	800c786 <svCLI_Handler+0x24a>
		svCommit();
 800c77c:	4b10      	ldr	r3, [pc, #64]	; (800c7c0 <svCLI_Handler+0x284>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4798      	blx	r3
 800c782:	e000      	b.n	800c786 <svCLI_Handler+0x24a>
						return;
 800c784:	bf00      	nop
	}
}
 800c786:	3710      	adds	r7, #16
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	20000e20 	.word	0x20000e20
 800c790:	20000f38 	.word	0x20000f38
 800c794:	0800fa14 	.word	0x0800fa14
 800c798:	20000e14 	.word	0x20000e14
 800c79c:	20000c0c 	.word	0x20000c0c
 800c7a0:	20000e2c 	.word	0x20000e2c
 800c7a4:	20000e34 	.word	0x20000e34
 800c7a8:	2000003c 	.word	0x2000003c
 800c7ac:	20000e30 	.word	0x20000e30
 800c7b0:	0800fae8 	.word	0x0800fae8
 800c7b4:	0800faec 	.word	0x0800faec
 800c7b8:	20000e0c 	.word	0x20000e0c
 800c7bc:	0800faf4 	.word	0x0800faf4
 800c7c0:	20000e28 	.word	0x20000e28
 800c7c4:	20000e24 	.word	0x20000e24

0800c7c8 <CLI_Help>:
// for CLI
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (HELP,"Help","Help : Show menu",CLI_Help);

static void CLI_Help(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
 800c7d4:	603b      	str	r3, [r7, #0]
	svCLI_ShowHelp();
 800c7d6:	f7ff fab1 	bl	800bd3c <svCLI_ShowHelp>
}
 800c7da:	bf00      	nop
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <svRingBuffer_GetCount>:
{
	return rb->size;
}

unsigned int svRingBuffer_GetCount(const svRingBuffer_t *rb)
{
 800c7e2:	b480      	push	{r7}
 800c7e4:	b085      	sub	sp, #20
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
	unsigned char *h, *t;
	// use temporal value to avoid corruption in between context-switching / Interrupt 
	h = rb->head;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	60fb      	str	r3, [r7, #12]
	t = rb->tail;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	60bb      	str	r3, [r7, #8]
	if (h >= t)
 800c7f6:	68fa      	ldr	r2, [r7, #12]
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d303      	bcc.n	800c806 <svRingBuffer_GetCount+0x24>
	  return (h - t);
 800c7fe:	68fa      	ldr	r2, [r7, #12]
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	1ad3      	subs	r3, r2, r3
 800c804:	e009      	b.n	800c81a <svRingBuffer_GetCount+0x38>
	else
	  return (unsigned int)(rb->bufend - t + h - rb->buf);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	68da      	ldr	r2, [r3, #12]
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	1ad3      	subs	r3, r2, r3
 800c80e:	461a      	mov	r2, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	441a      	add	r2, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	1ad3      	subs	r3, r2, r3
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <svRingBuffer_Reset>:

void svRingBuffer_Reset(svRingBuffer_t *rb)
{
 800c826:	b480      	push	{r7}
 800c828:	b083      	sub	sp, #12
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
	rb->head = rb->tail = rb->buf;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	609a      	str	r2, [r3, #8]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	689a      	ldr	r2, [r3, #8]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	605a      	str	r2, [r3, #4]
	rb->fOverflow = 0;		// Clear Flag
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	615a      	str	r2, [r3, #20]
	rb->fTurnAround = 0;	// Clear Flag
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	619a      	str	r2, [r3, #24]
}
 800c84a:	bf00      	nop
 800c84c:	370c      	adds	r7, #12
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr

0800c856 <svRingBuffer_Push>:
{
	rb->fOverflow = 0;
}

int svRingBuffer_Push(svRingBuffer_t *rb, unsigned char data)
{
 800c856:	b480      	push	{r7}
 800c858:	b085      	sub	sp, #20
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
 800c85e:	460b      	mov	r3, r1
 800c860:	70fb      	strb	r3, [r7, #3]
	int nRet;
	nRet = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	60fb      	str	r3, [r7, #12]
	*(rb->head) = data;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	78fa      	ldrb	r2, [r7, #3]
 800c86c:	701a      	strb	r2, [r3, #0]
	rb->head++;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	1c5a      	adds	r2, r3, #1
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	605a      	str	r2, [r3, #4]
	if (rb->head == rb->bufend) {	// Wrap around
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	685a      	ldr	r2, [r3, #4]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	429a      	cmp	r2, r3
 800c882:	d109      	bne.n	800c898 <svRingBuffer_Push+0x42>
	  rb->head = rb->buf;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	605a      	str	r2, [r3, #4]
		rb->fTurnAround = 1;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2201      	movs	r2, #1
 800c890:	619a      	str	r2, [r3, #24]
		nRet = -1;
 800c892:	f04f 33ff 	mov.w	r3, #4294967295
 800c896:	60fb      	str	r3, [r7, #12]
		// return -1;	// -- hellosmk 210512 to check overflow
	}
	if (rb->head == rb->tail) {		// Over flowed
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	685a      	ldr	r2, [r3, #4]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d105      	bne.n	800c8b0 <svRingBuffer_Push+0x5a>
	  rb->fOverflow = 1;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	615a      	str	r2, [r3, #20]
		nRet = -2;
 800c8aa:	f06f 0301 	mvn.w	r3, #1
 800c8ae:	60fb      	str	r3, [r7, #12]
	}
	return nRet;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3714      	adds	r7, #20
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr

0800c8be <svRingBuffer_Pop>:

unsigned char svRingBuffer_Pop(svRingBuffer_t *rb)
{
 800c8be:	b480      	push	{r7}
 800c8c0:	b085      	sub	sp, #20
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
	unsigned char byData;
	byData = *(rb->tail);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	689b      	ldr	r3, [r3, #8]
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	73fb      	strb	r3, [r7, #15]
	rb->tail++;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	1c5a      	adds	r2, r3, #1
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	609a      	str	r2, [r3, #8]
	if (rb->tail == rb->bufend)	// Wrap around
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	689a      	ldr	r2, [r3, #8]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d103      	bne.n	800c8ec <svRingBuffer_Pop+0x2e>
	  rb->tail = rb->buf;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	609a      	str	r2, [r3, #8]
	return byData;
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3714      	adds	r7, #20
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr

0800c8fa <svTaskTimer_InitTimers>:

// Global variables
// Static Variables
// Functions
void svTaskTimer_InitTimers(svTaskTimer_t* pTaskTimer, SVUTIL_TIMETICK_FUNC_t pfnTimeTick)
{
 800c8fa:	b480      	push	{r7}
 800c8fc:	b085      	sub	sp, #20
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	6039      	str	r1, [r7, #0]
	// Note. Argument Integrity Not Check !!!
	pTaskTimer->pfnTimeTick = pfnTimeTick;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	683a      	ldr	r2, [r7, #0]
 800c908:	605a      	str	r2, [r3, #4]
	for (int i=SV_TIMER_1;i<pTaskTimer->uNumOfTimers;i++) {
 800c90a:	2300      	movs	r3, #0
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	e03f      	b.n	800c990 <svTaskTimer_InitTimers+0x96>
		pTaskTimer->psvUtilTimer[i].dwDuration = 0;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6899      	ldr	r1, [r3, #8]
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	4613      	mov	r3, r2
 800c918:	005b      	lsls	r3, r3, #1
 800c91a:	4413      	add	r3, r2
 800c91c:	00db      	lsls	r3, r3, #3
 800c91e:	440b      	add	r3, r1
 800c920:	2200      	movs	r2, #0
 800c922:	601a      	str	r2, [r3, #0]
		pTaskTimer->psvUtilTimer[i].dwTimeOut = 0;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6899      	ldr	r1, [r3, #8]
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	4613      	mov	r3, r2
 800c92c:	005b      	lsls	r3, r3, #1
 800c92e:	4413      	add	r3, r2
 800c930:	00db      	lsls	r3, r3, #3
 800c932:	440b      	add	r3, r1
 800c934:	2200      	movs	r2, #0
 800c936:	605a      	str	r2, [r3, #4]
		pTaskTimer->psvUtilTimer[i].bLive = FALSE;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6899      	ldr	r1, [r3, #8]
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	4613      	mov	r3, r2
 800c940:	005b      	lsls	r3, r3, #1
 800c942:	4413      	add	r3, r2
 800c944:	00db      	lsls	r3, r3, #3
 800c946:	440b      	add	r3, r1
 800c948:	2200      	movs	r2, #0
 800c94a:	615a      	str	r2, [r3, #20]
		pTaskTimer->psvUtilTimer[i].dwWrapAroundTick = 0;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6899      	ldr	r1, [r3, #8]
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	4613      	mov	r3, r2
 800c954:	005b      	lsls	r3, r3, #1
 800c956:	4413      	add	r3, r2
 800c958:	00db      	lsls	r3, r3, #3
 800c95a:	440b      	add	r3, r1
 800c95c:	2200      	movs	r2, #0
 800c95e:	609a      	str	r2, [r3, #8]
		pTaskTimer->psvUtilTimer[i].eTimerID = (svTimer_e)i;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6899      	ldr	r1, [r3, #8]
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	4613      	mov	r3, r2
 800c968:	005b      	lsls	r3, r3, #1
 800c96a:	4413      	add	r3, r2
 800c96c:	00db      	lsls	r3, r3, #3
 800c96e:	440b      	add	r3, r1
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	b2d2      	uxtb	r2, r2
 800c974:	741a      	strb	r2, [r3, #16]
		pTaskTimer->psvUtilTimer[i].pfnCallback = 0;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6899      	ldr	r1, [r3, #8]
 800c97a:	68fa      	ldr	r2, [r7, #12]
 800c97c:	4613      	mov	r3, r2
 800c97e:	005b      	lsls	r3, r3, #1
 800c980:	4413      	add	r3, r2
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	440b      	add	r3, r1
 800c986:	2200      	movs	r2, #0
 800c988:	60da      	str	r2, [r3, #12]
	for (int i=SV_TIMER_1;i<pTaskTimer->uNumOfTimers;i++) {
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	3301      	adds	r3, #1
 800c98e:	60fb      	str	r3, [r7, #12]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	429a      	cmp	r2, r3
 800c998:	d8ba      	bhi.n	800c910 <svTaskTimer_InitTimers+0x16>
	}
}
 800c99a:	bf00      	nop
 800c99c:	bf00      	nop
 800c99e:	3714      	adds	r7, #20
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <svTaskTimer_SetTimer>:
		pTaskTimer->psvUtilTimer[i].bLive = FALSE;
	}
}

BOOL svTaskTimer_SetTimer(svTaskTimer_t* pTaskTimer, svTimer_e eTimerID, unsigned int dwDuration, svTimerSet_e eTimerSet, pfnUtilTimerCallback pfnCallback)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b086      	sub	sp, #24
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	607a      	str	r2, [r7, #4]
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	72fb      	strb	r3, [r7, #11]
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	72bb      	strb	r3, [r7, #10]
	if (dwDuration == 0) {
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d106      	bne.n	800c9d0 <svTaskTimer_SetTimer+0x28>
		return svTaskTimer_KillTimer(pTaskTimer, eTimerID);
 800c9c2:	7afb      	ldrb	r3, [r7, #11]
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	68f8      	ldr	r0, [r7, #12]
 800c9c8:	f000 f86b 	bl	800caa2 <svTaskTimer_KillTimer>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	e064      	b.n	800ca9a <svTaskTimer_SetTimer+0xf2>
	}
	if (eTimerID >= pTaskTimer->uNumOfTimers) {
 800c9d0:	7afa      	ldrb	r2, [r7, #11]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d301      	bcc.n	800c9de <svTaskTimer_SetTimer+0x36>
		return FALSE;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	e05d      	b.n	800ca9a <svTaskTimer_SetTimer+0xf2>
	}
	// Check Wrap around !!!
	unsigned int dwCurrentTick = pTaskTimer->pfnTimeTick();
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	4798      	blx	r3
 800c9e4:	6178      	str	r0, [r7, #20]
	pTaskTimer->psvUtilTimer[eTimerID].dwTimeOut = dwCurrentTick + dwDuration;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	6899      	ldr	r1, [r3, #8]
 800c9ea:	7afa      	ldrb	r2, [r7, #11]
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	4413      	add	r3, r2
 800c9f2:	00db      	lsls	r3, r3, #3
 800c9f4:	440b      	add	r3, r1
 800c9f6:	6979      	ldr	r1, [r7, #20]
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	440a      	add	r2, r1
 800c9fc:	605a      	str	r2, [r3, #4]

	if (pTaskTimer->psvUtilTimer[eTimerID].dwTimeOut < dwCurrentTick) {	// Wrap around
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6899      	ldr	r1, [r3, #8]
 800ca02:	7afa      	ldrb	r2, [r7, #11]
 800ca04:	4613      	mov	r3, r2
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	4413      	add	r3, r2
 800ca0a:	00db      	lsls	r3, r3, #3
 800ca0c:	440b      	add	r3, r1
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	697a      	ldr	r2, [r7, #20]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d90a      	bls.n	800ca2c <svTaskTimer_SetTimer+0x84>
			pTaskTimer->psvUtilTimer[eTimerID].dwWrapAroundTick = dwCurrentTick;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6899      	ldr	r1, [r3, #8]
 800ca1a:	7afa      	ldrb	r2, [r7, #11]
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	005b      	lsls	r3, r3, #1
 800ca20:	4413      	add	r3, r2
 800ca22:	00db      	lsls	r3, r3, #3
 800ca24:	440b      	add	r3, r1
 800ca26:	697a      	ldr	r2, [r7, #20]
 800ca28:	609a      	str	r2, [r3, #8]
 800ca2a:	e009      	b.n	800ca40 <svTaskTimer_SetTimer+0x98>
	}
	else {
			pTaskTimer->psvUtilTimer[eTimerID].dwWrapAroundTick = 0;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6899      	ldr	r1, [r3, #8]
 800ca30:	7afa      	ldrb	r2, [r7, #11]
 800ca32:	4613      	mov	r3, r2
 800ca34:	005b      	lsls	r3, r3, #1
 800ca36:	4413      	add	r3, r2
 800ca38:	00db      	lsls	r3, r3, #3
 800ca3a:	440b      	add	r3, r1
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	609a      	str	r2, [r3, #8]
	}
	if (eTimerSet == SV_TIMER_REPEAT) {
 800ca40:	7abb      	ldrb	r3, [r7, #10]
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d10a      	bne.n	800ca5c <svTaskTimer_SetTimer+0xb4>
		pTaskTimer->psvUtilTimer[eTimerID].dwDuration = dwDuration;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	6899      	ldr	r1, [r3, #8]
 800ca4a:	7afa      	ldrb	r2, [r7, #11]
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	005b      	lsls	r3, r3, #1
 800ca50:	4413      	add	r3, r2
 800ca52:	00db      	lsls	r3, r3, #3
 800ca54:	440b      	add	r3, r1
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	601a      	str	r2, [r3, #0]
 800ca5a:	e009      	b.n	800ca70 <svTaskTimer_SetTimer+0xc8>
	}
	else {
		pTaskTimer->psvUtilTimer[eTimerID].dwDuration = 0;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	6899      	ldr	r1, [r3, #8]
 800ca60:	7afa      	ldrb	r2, [r7, #11]
 800ca62:	4613      	mov	r3, r2
 800ca64:	005b      	lsls	r3, r3, #1
 800ca66:	4413      	add	r3, r2
 800ca68:	00db      	lsls	r3, r3, #3
 800ca6a:	440b      	add	r3, r1
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	601a      	str	r2, [r3, #0]
	}
	pTaskTimer->psvUtilTimer[eTimerID].pfnCallback = pfnCallback;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	6899      	ldr	r1, [r3, #8]
 800ca74:	7afa      	ldrb	r2, [r7, #11]
 800ca76:	4613      	mov	r3, r2
 800ca78:	005b      	lsls	r3, r3, #1
 800ca7a:	4413      	add	r3, r2
 800ca7c:	00db      	lsls	r3, r3, #3
 800ca7e:	440b      	add	r3, r1
 800ca80:	6a3a      	ldr	r2, [r7, #32]
 800ca82:	60da      	str	r2, [r3, #12]
	pTaskTimer->psvUtilTimer[eTimerID].bLive = TRUE;		// Set Running
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6899      	ldr	r1, [r3, #8]
 800ca88:	7afa      	ldrb	r2, [r7, #11]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	005b      	lsls	r3, r3, #1
 800ca8e:	4413      	add	r3, r2
 800ca90:	00db      	lsls	r3, r3, #3
 800ca92:	440b      	add	r3, r1
 800ca94:	2201      	movs	r2, #1
 800ca96:	615a      	str	r2, [r3, #20]
	return TRUE;
 800ca98:	2301      	movs	r3, #1
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <svTaskTimer_KillTimer>:

BOOL svTaskTimer_KillTimer(svTaskTimer_t* pTaskTimer, svTimer_e eTimerID)
{
 800caa2:	b480      	push	{r7}
 800caa4:	b083      	sub	sp, #12
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
 800caaa:	460b      	mov	r3, r1
 800caac:	70fb      	strb	r3, [r7, #3]
	if (eTimerID >= pTaskTimer->uNumOfTimers) {
 800caae:	78fa      	ldrb	r2, [r7, #3]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d301      	bcc.n	800cabc <svTaskTimer_KillTimer+0x1a>
		return FALSE;
 800cab8:	2300      	movs	r3, #0
 800caba:	e00a      	b.n	800cad2 <svTaskTimer_KillTimer+0x30>
	}
	pTaskTimer->psvUtilTimer[eTimerID].bLive = FALSE;		// Set Non-Running
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6899      	ldr	r1, [r3, #8]
 800cac0:	78fa      	ldrb	r2, [r7, #3]
 800cac2:	4613      	mov	r3, r2
 800cac4:	005b      	lsls	r3, r3, #1
 800cac6:	4413      	add	r3, r2
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	440b      	add	r3, r1
 800cacc:	2200      	movs	r2, #0
 800cace:	615a      	str	r2, [r3, #20]
	return TRUE;
 800cad0:	2301      	movs	r3, #1
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	370c      	adds	r7, #12
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <svTaskTimer_CheckTimers>:
	}
	return FALSE;
}

BOOL svTaskTimer_CheckTimers(svTaskTimer_t* pTaskTimer)
{
 800cade:	b590      	push	{r4, r7, lr}
 800cae0:	b087      	sub	sp, #28
 800cae2:	af02      	add	r7, sp, #8
 800cae4:	6078      	str	r0, [r7, #4]
	unsigned int dwCurrentTick = pTaskTimer->pfnTimeTick();
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	4798      	blx	r3
 800caec:	60b8      	str	r0, [r7, #8]
	for (int i=SV_TIMER_1;i<pTaskTimer->uNumOfTimers;i++) {
 800caee:	2300      	movs	r3, #0
 800caf0:	60fb      	str	r3, [r7, #12]
 800caf2:	e07b      	b.n	800cbec <svTaskTimer_CheckTimers+0x10e>
		// Check Running Timer
		if (pTaskTimer->psvUtilTimer[i].bLive) {
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6899      	ldr	r1, [r3, #8]
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	4613      	mov	r3, r2
 800cafc:	005b      	lsls	r3, r3, #1
 800cafe:	4413      	add	r3, r2
 800cb00:	00db      	lsls	r3, r3, #3
 800cb02:	440b      	add	r3, r1
 800cb04:	695b      	ldr	r3, [r3, #20]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d06d      	beq.n	800cbe6 <svTaskTimer_CheckTimers+0x108>
			if (pTaskTimer->psvUtilTimer[i].dwWrapAroundTick > 0) {	// Wrap around
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6899      	ldr	r1, [r3, #8]
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	4613      	mov	r3, r2
 800cb12:	005b      	lsls	r3, r3, #1
 800cb14:	4413      	add	r3, r2
 800cb16:	00db      	lsls	r3, r3, #3
 800cb18:	440b      	add	r3, r1
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d00b      	beq.n	800cb38 <svTaskTimer_CheckTimers+0x5a>
				if (dwCurrentTick >= pTaskTimer->psvUtilTimer[i].dwWrapAroundTick)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6899      	ldr	r1, [r3, #8]
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	4613      	mov	r3, r2
 800cb28:	005b      	lsls	r3, r3, #1
 800cb2a:	4413      	add	r3, r2
 800cb2c:	00db      	lsls	r3, r3, #3
 800cb2e:	440b      	add	r3, r1
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	68ba      	ldr	r2, [r7, #8]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d255      	bcs.n	800cbe4 <svTaskTimer_CheckTimers+0x106>
					continue;
			}
			if (pTaskTimer->psvUtilTimer[i].dwTimeOut <= dwCurrentTick) {	// Expired !!!
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6899      	ldr	r1, [r3, #8]
 800cb3c:	68fa      	ldr	r2, [r7, #12]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	005b      	lsls	r3, r3, #1
 800cb42:	4413      	add	r3, r2
 800cb44:	00db      	lsls	r3, r3, #3
 800cb46:	440b      	add	r3, r1
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d34a      	bcc.n	800cbe6 <svTaskTimer_CheckTimers+0x108>
				if (pTaskTimer->psvUtilTimer[i].dwDuration > 0) {	// Repeat timer
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6899      	ldr	r1, [r3, #8]
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	4613      	mov	r3, r2
 800cb58:	005b      	lsls	r3, r3, #1
 800cb5a:	4413      	add	r3, r2
 800cb5c:	00db      	lsls	r3, r3, #3
 800cb5e:	440b      	add	r3, r1
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d01b      	beq.n	800cb9e <svTaskTimer_CheckTimers+0xc0>
					svTaskTimer_SetTimer(pTaskTimer, (svTimer_e)i, pTaskTimer->psvUtilTimer[i].dwDuration, SV_TIMER_REPEAT, pTaskTimer->psvUtilTimer[i].pfnCallback); 				
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	b2d8      	uxtb	r0, r3
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6899      	ldr	r1, [r3, #8]
 800cb6e:	68fa      	ldr	r2, [r7, #12]
 800cb70:	4613      	mov	r3, r2
 800cb72:	005b      	lsls	r3, r3, #1
 800cb74:	4413      	add	r3, r2
 800cb76:	00db      	lsls	r3, r3, #3
 800cb78:	440b      	add	r3, r1
 800cb7a:	681c      	ldr	r4, [r3, #0]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6899      	ldr	r1, [r3, #8]
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	4613      	mov	r3, r2
 800cb84:	005b      	lsls	r3, r3, #1
 800cb86:	4413      	add	r3, r2
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	440b      	add	r3, r1
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	2301      	movs	r3, #1
 800cb92:	4622      	mov	r2, r4
 800cb94:	4601      	mov	r1, r0
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f7ff ff06 	bl	800c9a8 <svTaskTimer_SetTimer>
 800cb9c:	e009      	b.n	800cbb2 <svTaskTimer_CheckTimers+0xd4>
				}
				else {	// Stop Timer
					pTaskTimer->psvUtilTimer[i].bLive = FALSE;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6899      	ldr	r1, [r3, #8]
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	4613      	mov	r3, r2
 800cba6:	005b      	lsls	r3, r3, #1
 800cba8:	4413      	add	r3, r2
 800cbaa:	00db      	lsls	r3, r3, #3
 800cbac:	440b      	add	r3, r1
 800cbae:	2200      	movs	r2, #0
 800cbb0:	615a      	str	r2, [r3, #20]
				}
				// Call Callback function !!
				if (pTaskTimer->psvUtilTimer[i].pfnCallback) {
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6899      	ldr	r1, [r3, #8]
 800cbb6:	68fa      	ldr	r2, [r7, #12]
 800cbb8:	4613      	mov	r3, r2
 800cbba:	005b      	lsls	r3, r3, #1
 800cbbc:	4413      	add	r3, r2
 800cbbe:	00db      	lsls	r3, r3, #3
 800cbc0:	440b      	add	r3, r1
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00e      	beq.n	800cbe6 <svTaskTimer_CheckTimers+0x108>
					pTaskTimer->psvUtilTimer[i].pfnCallback((svTimer_e)i);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6899      	ldr	r1, [r3, #8]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	4613      	mov	r3, r2
 800cbd0:	005b      	lsls	r3, r3, #1
 800cbd2:	4413      	add	r3, r2
 800cbd4:	00db      	lsls	r3, r3, #3
 800cbd6:	440b      	add	r3, r1
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	68fa      	ldr	r2, [r7, #12]
 800cbdc:	b2d2      	uxtb	r2, r2
 800cbde:	4610      	mov	r0, r2
 800cbe0:	4798      	blx	r3
 800cbe2:	e000      	b.n	800cbe6 <svTaskTimer_CheckTimers+0x108>
					continue;
 800cbe4:	bf00      	nop
	for (int i=SV_TIMER_1;i<pTaskTimer->uNumOfTimers;i++) {
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	60fb      	str	r3, [r7, #12]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	f63f af7e 	bhi.w	800caf4 <svTaskTimer_CheckTimers+0x16>
				}
			}
		}
	}
	return TRUE;
 800cbf8:	2301      	movs	r3, #1
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3714      	adds	r7, #20
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd90      	pop	{r4, r7, pc}
	...

0800cc04 <__NVIC_SetPriority>:
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	6039      	str	r1, [r7, #0]
 800cc0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cc10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	db0a      	blt.n	800cc2e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	b2da      	uxtb	r2, r3
 800cc1c:	490c      	ldr	r1, [pc, #48]	; (800cc50 <__NVIC_SetPriority+0x4c>)
 800cc1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc22:	0112      	lsls	r2, r2, #4
 800cc24:	b2d2      	uxtb	r2, r2
 800cc26:	440b      	add	r3, r1
 800cc28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cc2c:	e00a      	b.n	800cc44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	4908      	ldr	r1, [pc, #32]	; (800cc54 <__NVIC_SetPriority+0x50>)
 800cc34:	88fb      	ldrh	r3, [r7, #6]
 800cc36:	f003 030f 	and.w	r3, r3, #15
 800cc3a:	3b04      	subs	r3, #4
 800cc3c:	0112      	lsls	r2, r2, #4
 800cc3e:	b2d2      	uxtb	r2, r2
 800cc40:	440b      	add	r3, r1
 800cc42:	761a      	strb	r2, [r3, #24]
}
 800cc44:	bf00      	nop
 800cc46:	370c      	adds	r7, #12
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	e000e100 	.word	0xe000e100
 800cc54:	e000ed00 	.word	0xe000ed00

0800cc58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800cc5c:	4b05      	ldr	r3, [pc, #20]	; (800cc74 <SysTick_Handler+0x1c>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cc60:	f001 fa72 	bl	800e148 <xTaskGetSchedulerState>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d001      	beq.n	800cc6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cc6a:	f001 fe15 	bl	800e898 <xPortSysTickHandler>
  }
}
 800cc6e:	bf00      	nop
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	e000e010 	.word	0xe000e010

0800cc78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	f06f 0004 	mvn.w	r0, #4
 800cc82:	f7ff ffbf 	bl	800cc04 <__NVIC_SetPriority>
#endif
}
 800cc86:	bf00      	nop
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b086      	sub	sp, #24
 800cc8e:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800cc90:	2300      	movs	r3, #0
 800cc92:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc94:	f3ef 8305 	mrs	r3, IPSR
 800cc98:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc9a:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d002      	beq.n	800cca6 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800cca0:	2301      	movs	r3, #1
 800cca2:	617b      	str	r3, [r7, #20]
 800cca4:	e013      	b.n	800ccce <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800cca6:	f001 fa4f 	bl	800e148 <xTaskGetSchedulerState>
 800ccaa:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d00d      	beq.n	800ccce <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ccb2:	f3ef 8310 	mrs	r3, PRIMASK
 800ccb6:	60bb      	str	r3, [r7, #8]
  return(result);
 800ccb8:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d105      	bne.n	800ccca <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ccbe:	f3ef 8311 	mrs	r3, BASEPRI
 800ccc2:	607b      	str	r3, [r7, #4]
  return(result);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d001      	beq.n	800ccce <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800ccca:	2301      	movs	r3, #1
 800cccc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800ccce:	697b      	ldr	r3, [r7, #20]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3718      	adds	r7, #24
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800ccde:	f7ff ffd4 	bl	800cc8a <IRQ_Context>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d003      	beq.n	800ccf0 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800cce8:	f06f 0305 	mvn.w	r3, #5
 800ccec:	607b      	str	r3, [r7, #4]
 800ccee:	e012      	b.n	800cd16 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800ccf0:	f001 fa2a 	bl	800e148 <xTaskGetSchedulerState>
 800ccf4:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d109      	bne.n	800cd10 <osKernelInitialize+0x38>
 800ccfc:	4b08      	ldr	r3, [pc, #32]	; (800cd20 <osKernelInitialize+0x48>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d105      	bne.n	800cd10 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cd04:	4b06      	ldr	r3, [pc, #24]	; (800cd20 <osKernelInitialize+0x48>)
 800cd06:	2201      	movs	r2, #1
 800cd08:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	607b      	str	r3, [r7, #4]
 800cd0e:	e002      	b.n	800cd16 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800cd10:	f04f 33ff 	mov.w	r3, #4294967295
 800cd14:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800cd16:	687b      	ldr	r3, [r7, #4]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	20000f3c 	.word	0x20000f3c

0800cd24 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800cd2a:	f7ff ffae 	bl	800cc8a <IRQ_Context>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d003      	beq.n	800cd3c <osKernelStart+0x18>
    stat = osErrorISR;
 800cd34:	f06f 0305 	mvn.w	r3, #5
 800cd38:	607b      	str	r3, [r7, #4]
 800cd3a:	e016      	b.n	800cd6a <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800cd3c:	f001 fa04 	bl	800e148 <xTaskGetSchedulerState>
 800cd40:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d10d      	bne.n	800cd64 <osKernelStart+0x40>
 800cd48:	4b0a      	ldr	r3, [pc, #40]	; (800cd74 <osKernelStart+0x50>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d109      	bne.n	800cd64 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cd50:	f7ff ff92 	bl	800cc78 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800cd54:	4b07      	ldr	r3, [pc, #28]	; (800cd74 <osKernelStart+0x50>)
 800cd56:	2202      	movs	r2, #2
 800cd58:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cd5a:	f000 fccb 	bl	800d6f4 <vTaskStartScheduler>
      stat = osOK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	607b      	str	r3, [r7, #4]
 800cd62:	e002      	b.n	800cd6a <osKernelStart+0x46>
    } else {
      stat = osError;
 800cd64:	f04f 33ff 	mov.w	r3, #4294967295
 800cd68:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800cd6a:	687b      	ldr	r3, [r7, #4]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	20000f3c 	.word	0x20000f3c

0800cd78 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cd78:	b480      	push	{r7}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	4a07      	ldr	r2, [pc, #28]	; (800cda4 <vApplicationGetIdleTaskMemory+0x2c>)
 800cd88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	4a06      	ldr	r2, [pc, #24]	; (800cda8 <vApplicationGetIdleTaskMemory+0x30>)
 800cd8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2280      	movs	r2, #128	; 0x80
 800cd94:	601a      	str	r2, [r3, #0]
}
 800cd96:	bf00      	nop
 800cd98:	3714      	adds	r7, #20
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	20000f40 	.word	0x20000f40
 800cda8:	20000f9c 	.word	0x20000f9c

0800cdac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	4a07      	ldr	r2, [pc, #28]	; (800cdd8 <vApplicationGetTimerTaskMemory+0x2c>)
 800cdbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	4a06      	ldr	r2, [pc, #24]	; (800cddc <vApplicationGetTimerTaskMemory+0x30>)
 800cdc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2280      	movs	r2, #128	; 0x80
 800cdc8:	601a      	str	r2, [r3, #0]
}
 800cdca:	bf00      	nop
 800cdcc:	3714      	adds	r7, #20
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop
 800cdd8:	2000119c 	.word	0x2000119c
 800cddc:	200011f8 	.word	0x200011f8

0800cde0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f103 0208 	add.w	r2, r3, #8
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f103 0208 	add.w	r2, r3, #8
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f103 0208 	add.w	r2, r3, #8
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ce14:	bf00      	nop
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ce2e:	bf00      	nop
 800ce30:	370c      	adds	r7, #12
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800ce3a:	b480      	push	{r7}
 800ce3c:	b085      	sub	sp, #20
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
 800ce42:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce50:	d103      	bne.n	800ce5a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	60fb      	str	r3, [r7, #12]
 800ce58:	e00c      	b.n	800ce74 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	3308      	adds	r3, #8
 800ce5e:	60fb      	str	r3, [r7, #12]
 800ce60:	e002      	b.n	800ce68 <vListInsert+0x2e>
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	60fb      	str	r3, [r7, #12]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	68ba      	ldr	r2, [r7, #8]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d2f6      	bcs.n	800ce62 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	685a      	ldr	r2, [r3, #4]
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	683a      	ldr	r2, [r7, #0]
 800ce82:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	683a      	ldr	r2, [r7, #0]
 800ce8e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	1c5a      	adds	r2, r3, #1
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	601a      	str	r2, [r3, #0]
}
 800cea0:	bf00      	nop
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ceac:	b480      	push	{r7}
 800ceae:	b085      	sub	sp, #20
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	691b      	ldr	r3, [r3, #16]
 800ceb8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	6892      	ldr	r2, [r2, #8]
 800cec2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	6852      	ldr	r2, [r2, #4]
 800cecc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d103      	bne.n	800cee0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	689a      	ldr	r2, [r3, #8]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	1e5a      	subs	r2, r3, #1
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3714      	adds	r7, #20
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d102      	bne.n	800cf1e <xQueueGenericReset+0x1e>
 800cf18:	f001 fdce 	bl	800eab8 <ulSetInterruptMask>
 800cf1c:	e7fe      	b.n	800cf1c <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d057      	beq.n	800cfd4 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d053      	beq.n	800cfd4 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf34:	2100      	movs	r1, #0
 800cf36:	fba3 2302 	umull	r2, r3, r3, r2
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d000      	beq.n	800cf40 <xQueueGenericReset+0x40>
 800cf3e:	2101      	movs	r1, #1
 800cf40:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d146      	bne.n	800cfd4 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800cf46:	f001 fc7b 	bl	800e840 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf52:	68b9      	ldr	r1, [r7, #8]
 800cf54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cf56:	fb01 f303 	mul.w	r3, r1, r3
 800cf5a:	441a      	add	r2, r3
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	2200      	movs	r2, #0
 800cf64:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf76:	3b01      	subs	r3, #1
 800cf78:	68b9      	ldr	r1, [r7, #8]
 800cf7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cf7c:	fb01 f303 	mul.w	r3, r1, r3
 800cf80:	441a      	add	r2, r3
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	22ff      	movs	r2, #255	; 0xff
 800cf8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	22ff      	movs	r2, #255	; 0xff
 800cf92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d10e      	bne.n	800cfba <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d014      	beq.n	800cfce <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	3310      	adds	r3, #16
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f000 fec5 	bl	800dd38 <xTaskRemoveFromEventList>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00c      	beq.n	800cfce <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800cfb4:	f001 fc32 	bl	800e81c <vPortYield>
 800cfb8:	e009      	b.n	800cfce <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	3310      	adds	r3, #16
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7ff ff0e 	bl	800cde0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	3324      	adds	r3, #36	; 0x24
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7ff ff09 	bl	800cde0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800cfce:	f001 fc49 	bl	800e864 <vPortExitCritical>
 800cfd2:	e001      	b.n	800cfd8 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d102      	bne.n	800cfe4 <xQueueGenericReset+0xe4>
 800cfde:	f001 fd6b 	bl	800eab8 <ulSetInterruptMask>
 800cfe2:	e7fe      	b.n	800cfe2 <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b088      	sub	sp, #32
 800cff2:	af02      	add	r7, sp, #8
 800cff4:	60f8      	str	r0, [r7, #12]
 800cff6:	60b9      	str	r1, [r7, #8]
 800cff8:	607a      	str	r2, [r7, #4]
 800cffa:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800cffc:	2300      	movs	r3, #0
 800cffe:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d102      	bne.n	800d00c <xQueueGenericCreateStatic+0x1e>
 800d006:	f001 fd57 	bl	800eab8 <ulSetInterruptMask>
 800d00a:	e7fe      	b.n	800d00a <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d028      	beq.n	800d064 <xQueueGenericCreateStatic+0x76>
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d025      	beq.n	800d064 <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d002      	beq.n	800d024 <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d01f      	beq.n	800d064 <xQueueGenericCreateStatic+0x76>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d102      	bne.n	800d030 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d119      	bne.n	800d064 <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800d030:	2350      	movs	r3, #80	; 0x50
 800d032:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	2b50      	cmp	r3, #80	; 0x50
 800d038:	d002      	beq.n	800d040 <xQueueGenericCreateStatic+0x52>
 800d03a:	f001 fd3d 	bl	800eab8 <ulSetInterruptMask>
 800d03e:	e7fe      	b.n	800d03e <xQueueGenericCreateStatic+0x50>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800d040:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	2201      	movs	r2, #1
 800d04a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d04e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	9300      	str	r3, [sp, #0]
 800d056:	4613      	mov	r3, r2
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	68b9      	ldr	r1, [r7, #8]
 800d05c:	68f8      	ldr	r0, [r7, #12]
 800d05e:	f000 f80c 	bl	800d07a <prvInitialiseNewQueue>
 800d062:	e005      	b.n	800d070 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d102      	bne.n	800d070 <xQueueGenericCreateStatic+0x82>
 800d06a:	f001 fd25 	bl	800eab8 <ulSetInterruptMask>
 800d06e:	e7fe      	b.n	800d06e <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800d070:	697b      	ldr	r3, [r7, #20]
    }
 800d072:	4618      	mov	r0, r3
 800d074:	3718      	adds	r7, #24
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b084      	sub	sp, #16
 800d07e:	af00      	add	r7, sp, #0
 800d080:	60f8      	str	r0, [r7, #12]
 800d082:	60b9      	str	r1, [r7, #8]
 800d084:	607a      	str	r2, [r7, #4]
 800d086:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d103      	bne.n	800d096 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	69ba      	ldr	r2, [r7, #24]
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	e002      	b.n	800d09c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d0a8:	2101      	movs	r1, #1
 800d0aa:	69b8      	ldr	r0, [r7, #24]
 800d0ac:	f7ff ff28 	bl	800cf00 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	78fa      	ldrb	r2, [r7, #3]
 800d0b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800d0b8:	bf00      	nop
 800d0ba:	3710      	adds	r7, #16
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b08a      	sub	sp, #40	; 0x28
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800d0d4:	6a3b      	ldr	r3, [r7, #32]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d102      	bne.n	800d0e0 <xQueueReceive+0x20>
 800d0da:	f001 fced 	bl	800eab8 <ulSetInterruptMask>
 800d0de:	e7fe      	b.n	800d0de <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d103      	bne.n	800d0ee <xQueueReceive+0x2e>
 800d0e6:	6a3b      	ldr	r3, [r7, #32]
 800d0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d101      	bne.n	800d0f2 <xQueueReceive+0x32>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e000      	b.n	800d0f4 <xQueueReceive+0x34>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d102      	bne.n	800d0fe <xQueueReceive+0x3e>
 800d0f8:	f001 fcde 	bl	800eab8 <ulSetInterruptMask>
 800d0fc:	e7fe      	b.n	800d0fc <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0fe:	f001 f823 	bl	800e148 <xTaskGetSchedulerState>
 800d102:	4603      	mov	r3, r0
 800d104:	2b00      	cmp	r3, #0
 800d106:	d102      	bne.n	800d10e <xQueueReceive+0x4e>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d101      	bne.n	800d112 <xQueueReceive+0x52>
 800d10e:	2301      	movs	r3, #1
 800d110:	e000      	b.n	800d114 <xQueueReceive+0x54>
 800d112:	2300      	movs	r3, #0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d102      	bne.n	800d11e <xQueueReceive+0x5e>
 800d118:	f001 fcce 	bl	800eab8 <ulSetInterruptMask>
 800d11c:	e7fe      	b.n	800d11c <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800d11e:	f001 fb8f 	bl	800e840 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d122:	6a3b      	ldr	r3, [r7, #32]
 800d124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d126:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d019      	beq.n	800d162 <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d12e:	68b9      	ldr	r1, [r7, #8]
 800d130:	6a38      	ldr	r0, [r7, #32]
 800d132:	f000 f87e 	bl	800d232 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	1e5a      	subs	r2, r3, #1
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d13e:	6a3b      	ldr	r3, [r7, #32]
 800d140:	691b      	ldr	r3, [r3, #16]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d009      	beq.n	800d15a <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d146:	6a3b      	ldr	r3, [r7, #32]
 800d148:	3310      	adds	r3, #16
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 fdf4 	bl	800dd38 <xTaskRemoveFromEventList>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d001      	beq.n	800d15a <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800d156:	f001 fb61 	bl	800e81c <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800d15a:	f001 fb83 	bl	800e864 <vPortExitCritical>
                return pdPASS;
 800d15e:	2301      	movs	r3, #1
 800d160:	e063      	b.n	800d22a <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d103      	bne.n	800d170 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800d168:	f001 fb7c 	bl	800e864 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800d16c:	2300      	movs	r3, #0
 800d16e:	e05c      	b.n	800d22a <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800d170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d172:	2b00      	cmp	r3, #0
 800d174:	d106      	bne.n	800d184 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800d176:	f107 0314 	add.w	r3, r7, #20
 800d17a:	4618      	mov	r0, r3
 800d17c:	f000 feaa 	bl	800ded4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800d180:	2301      	movs	r3, #1
 800d182:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800d184:	f001 fb6e 	bl	800e864 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800d188:	f000 fb0e 	bl	800d7a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800d18c:	f001 fb58 	bl	800e840 <vPortEnterCritical>
 800d190:	6a3b      	ldr	r3, [r7, #32]
 800d192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d196:	b25b      	sxtb	r3, r3
 800d198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d19c:	d103      	bne.n	800d1a6 <xQueueReceive+0xe6>
 800d19e:	6a3b      	ldr	r3, [r7, #32]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1a6:	6a3b      	ldr	r3, [r7, #32]
 800d1a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1ac:	b25b      	sxtb	r3, r3
 800d1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b2:	d103      	bne.n	800d1bc <xQueueReceive+0xfc>
 800d1b4:	6a3b      	ldr	r3, [r7, #32]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1bc:	f001 fb52 	bl	800e864 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1c0:	1d3a      	adds	r2, r7, #4
 800d1c2:	f107 0314 	add.w	r3, r7, #20
 800d1c6:	4611      	mov	r1, r2
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f000 fe99 	bl	800df00 <xTaskCheckForTimeOut>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d11d      	bne.n	800d210 <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1d4:	6a38      	ldr	r0, [r7, #32]
 800d1d6:	f000 f8a4 	bl	800d322 <prvIsQueueEmpty>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d011      	beq.n	800d204 <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1e0:	6a3b      	ldr	r3, [r7, #32]
 800d1e2:	3324      	adds	r3, #36	; 0x24
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f000 fd4b 	bl	800dc84 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800d1ee:	6a38      	ldr	r0, [r7, #32]
 800d1f0:	f000 f845 	bl	800d27e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800d1f4:	f000 fae6 	bl	800d7c4 <xTaskResumeAll>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d18f      	bne.n	800d11e <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 800d1fe:	f001 fb0d 	bl	800e81c <vPortYield>
 800d202:	e78c      	b.n	800d11e <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800d204:	6a38      	ldr	r0, [r7, #32]
 800d206:	f000 f83a 	bl	800d27e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800d20a:	f000 fadb 	bl	800d7c4 <xTaskResumeAll>
 800d20e:	e786      	b.n	800d11e <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800d210:	6a38      	ldr	r0, [r7, #32]
 800d212:	f000 f834 	bl	800d27e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800d216:	f000 fad5 	bl	800d7c4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d21a:	6a38      	ldr	r0, [r7, #32]
 800d21c:	f000 f881 	bl	800d322 <prvIsQueueEmpty>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	f43f af7b 	beq.w	800d11e <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800d228:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3728      	adds	r7, #40	; 0x28
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b082      	sub	sp, #8
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
 800d23a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d240:	2b00      	cmp	r3, #0
 800d242:	d018      	beq.n	800d276 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	68da      	ldr	r2, [r3, #12]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d24c:	441a      	add	r2, r3
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	68da      	ldr	r2, [r3, #12]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d303      	bcc.n	800d266 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	68d9      	ldr	r1, [r3, #12]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26e:	461a      	mov	r2, r3
 800d270:	6838      	ldr	r0, [r7, #0]
 800d272:	f001 fff1 	bl	800f258 <memcpy>
    }
}
 800d276:	bf00      	nop
 800d278:	3708      	adds	r7, #8
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}

0800d27e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d27e:	b580      	push	{r7, lr}
 800d280:	b084      	sub	sp, #16
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800d286:	f001 fadb 	bl	800e840 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d290:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800d292:	e011      	b.n	800d2b8 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d012      	beq.n	800d2c2 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	3324      	adds	r3, #36	; 0x24
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f000 fd49 	bl	800dd38 <xTaskRemoveFromEventList>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d001      	beq.n	800d2b0 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800d2ac:	f000 fe7e 	bl	800dfac <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800d2b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	dce9      	bgt.n	800d294 <prvUnlockQueue+0x16>
 800d2c0:	e000      	b.n	800d2c4 <prvUnlockQueue+0x46>
                    break;
 800d2c2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	22ff      	movs	r2, #255	; 0xff
 800d2c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800d2cc:	f001 faca 	bl	800e864 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800d2d0:	f001 fab6 	bl	800e840 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2da:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800d2dc:	e011      	b.n	800d302 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	691b      	ldr	r3, [r3, #16]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d012      	beq.n	800d30c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	3310      	adds	r3, #16
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f000 fd24 	bl	800dd38 <xTaskRemoveFromEventList>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d001      	beq.n	800d2fa <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800d2f6:	f000 fe59 	bl	800dfac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800d2fa:	7bbb      	ldrb	r3, [r7, #14]
 800d2fc:	3b01      	subs	r3, #1
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800d302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d306:	2b00      	cmp	r3, #0
 800d308:	dce9      	bgt.n	800d2de <prvUnlockQueue+0x60>
 800d30a:	e000      	b.n	800d30e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800d30c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	22ff      	movs	r2, #255	; 0xff
 800d312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800d316:	f001 faa5 	bl	800e864 <vPortExitCritical>
}
 800d31a:	bf00      	nop
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800d322:	b580      	push	{r7, lr}
 800d324:	b084      	sub	sp, #16
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800d32a:	f001 fa89 	bl	800e840 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d332:	2b00      	cmp	r3, #0
 800d334:	d102      	bne.n	800d33c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800d336:	2301      	movs	r3, #1
 800d338:	60fb      	str	r3, [r7, #12]
 800d33a:	e001      	b.n	800d340 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800d33c:	2300      	movs	r3, #0
 800d33e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800d340:	f001 fa90 	bl	800e864 <vPortExitCritical>

    return xReturn;
 800d344:	68fb      	ldr	r3, [r7, #12]
}
 800d346:	4618      	mov	r0, r3
 800d348:	3710      	adds	r7, #16
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
	...

0800d350 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d102      	bne.n	800d36a <vQueueAddToRegistry+0x1a>
 800d364:	f001 fba8 	bl	800eab8 <ulSetInterruptMask>
 800d368:	e7fe      	b.n	800d368 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d024      	beq.n	800d3ba <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d370:	2300      	movs	r3, #0
 800d372:	60fb      	str	r3, [r7, #12]
 800d374:	e01e      	b.n	800d3b4 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800d376:	4a17      	ldr	r2, [pc, #92]	; (800d3d4 <vQueueAddToRegistry+0x84>)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	00db      	lsls	r3, r3, #3
 800d37c:	4413      	add	r3, r2
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	429a      	cmp	r2, r3
 800d384:	d105      	bne.n	800d392 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	00db      	lsls	r3, r3, #3
 800d38a:	4a12      	ldr	r2, [pc, #72]	; (800d3d4 <vQueueAddToRegistry+0x84>)
 800d38c:	4413      	add	r3, r2
 800d38e:	60bb      	str	r3, [r7, #8]
                    break;
 800d390:	e013      	b.n	800d3ba <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d10a      	bne.n	800d3ae <vQueueAddToRegistry+0x5e>
 800d398:	4a0e      	ldr	r2, [pc, #56]	; (800d3d4 <vQueueAddToRegistry+0x84>)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d104      	bne.n	800d3ae <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	00db      	lsls	r3, r3, #3
 800d3a8:	4a0a      	ldr	r2, [pc, #40]	; (800d3d4 <vQueueAddToRegistry+0x84>)
 800d3aa:	4413      	add	r3, r2
 800d3ac:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	60fb      	str	r3, [r7, #12]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2b07      	cmp	r3, #7
 800d3b8:	d9dd      	bls.n	800d376 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d005      	beq.n	800d3cc <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	683a      	ldr	r2, [r7, #0]
 800d3c4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800d3cc:	bf00      	nop
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	200013f8 	.word	0x200013f8

0800d3d8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b086      	sub	sp, #24
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	60b9      	str	r1, [r7, #8]
 800d3e2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800d3e8:	f001 fa2a 	bl	800e840 <vPortEnterCritical>
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3f2:	b25b      	sxtb	r3, r3
 800d3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3f8:	d103      	bne.n	800d402 <vQueueWaitForMessageRestricted+0x2a>
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d408:	b25b      	sxtb	r3, r3
 800d40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d40e:	d103      	bne.n	800d418 <vQueueWaitForMessageRestricted+0x40>
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	2200      	movs	r2, #0
 800d414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d418:	f001 fa24 	bl	800e864 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d420:	2b00      	cmp	r3, #0
 800d422:	d106      	bne.n	800d432 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	3324      	adds	r3, #36	; 0x24
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	68b9      	ldr	r1, [r7, #8]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f000 fc45 	bl	800dcbc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800d432:	6978      	ldr	r0, [r7, #20]
 800d434:	f7ff ff23 	bl	800d27e <prvUnlockQueue>
    }
 800d438:	bf00      	nop
 800d43a:	3718      	adds	r7, #24
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800d440:	b580      	push	{r7, lr}
 800d442:	b08c      	sub	sp, #48	; 0x30
 800d444:	af04      	add	r7, sp, #16
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
 800d44c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800d44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d450:	2b00      	cmp	r3, #0
 800d452:	d102      	bne.n	800d45a <xTaskCreateStatic+0x1a>
 800d454:	f001 fb30 	bl	800eab8 <ulSetInterruptMask>
 800d458:	e7fe      	b.n	800d458 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800d45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d102      	bne.n	800d466 <xTaskCreateStatic+0x26>
 800d460:	f001 fb2a 	bl	800eab8 <ulSetInterruptMask>
 800d464:	e7fe      	b.n	800d464 <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800d466:	235c      	movs	r3, #92	; 0x5c
 800d468:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	2b5c      	cmp	r3, #92	; 0x5c
 800d46e:	d002      	beq.n	800d476 <xTaskCreateStatic+0x36>
 800d470:	f001 fb22 	bl	800eab8 <ulSetInterruptMask>
 800d474:	e7fe      	b.n	800d474 <xTaskCreateStatic+0x34>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d476:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d023      	beq.n	800d4c6 <xTaskCreateStatic+0x86>
 800d47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d480:	2b00      	cmp	r3, #0
 800d482:	d020      	beq.n	800d4c6 <xTaskCreateStatic+0x86>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d486:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d488:	225c      	movs	r2, #92	; 0x5c
 800d48a:	2100      	movs	r1, #0
 800d48c:	69f8      	ldr	r0, [r7, #28]
 800d48e:	f001 fe8b 	bl	800f1a8 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d496:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	2202      	movs	r2, #2
 800d49c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	9303      	str	r3, [sp, #12]
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	9302      	str	r3, [sp, #8]
 800d4a8:	f107 0318 	add.w	r3, r7, #24
 800d4ac:	9301      	str	r3, [sp, #4]
 800d4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b0:	9300      	str	r3, [sp, #0]
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	68b9      	ldr	r1, [r7, #8]
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f000 f80b 	bl	800d4d4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d4be:	69f8      	ldr	r0, [r7, #28]
 800d4c0:	f000 f888 	bl	800d5d4 <prvAddNewTaskToReadyList>
 800d4c4:	e001      	b.n	800d4ca <xTaskCreateStatic+0x8a>
        }
        else
        {
            xReturn = NULL;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d4ca:	69bb      	ldr	r3, [r7, #24]
    }
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3720      	adds	r7, #32
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b086      	sub	sp, #24
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
 800d4e0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	21a5      	movs	r1, #165	; 0xa5
 800d4ee:	f001 fe5b 	bl	800f1a8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	4413      	add	r3, r2
 800d502:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	f023 0307 	bic.w	r3, r3, #7
 800d50a:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	f003 0307 	and.w	r3, r3, #7
 800d512:	2b00      	cmp	r3, #0
 800d514:	d002      	beq.n	800d51c <prvInitialiseNewTask+0x48>
 800d516:	f001 facf 	bl	800eab8 <ulSetInterruptMask>
 800d51a:	e7fe      	b.n	800d51a <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d01e      	beq.n	800d560 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d522:	2300      	movs	r3, #0
 800d524:	617b      	str	r3, [r7, #20]
 800d526:	e012      	b.n	800d54e <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d528:	68ba      	ldr	r2, [r7, #8]
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	4413      	add	r3, r2
 800d52e:	7819      	ldrb	r1, [r3, #0]
 800d530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	4413      	add	r3, r2
 800d536:	3334      	adds	r3, #52	; 0x34
 800d538:	460a      	mov	r2, r1
 800d53a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800d53c:	68ba      	ldr	r2, [r7, #8]
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	4413      	add	r3, r2
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d006      	beq.n	800d556 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	3301      	adds	r3, #1
 800d54c:	617b      	str	r3, [r7, #20]
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	2b0f      	cmp	r3, #15
 800d552:	d9e9      	bls.n	800d528 <prvInitialiseNewTask+0x54>
 800d554:	e000      	b.n	800d558 <prvInitialiseNewTask+0x84>
            {
                break;
 800d556:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55a:	2200      	movs	r2, #0
 800d55c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800d560:	6a3b      	ldr	r3, [r7, #32]
 800d562:	2b37      	cmp	r3, #55	; 0x37
 800d564:	d902      	bls.n	800d56c <prvInitialiseNewTask+0x98>
 800d566:	f001 faa7 	bl	800eab8 <ulSetInterruptMask>
 800d56a:	e7fe      	b.n	800d56a <prvInitialiseNewTask+0x96>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d56c:	6a3b      	ldr	r3, [r7, #32]
 800d56e:	2b37      	cmp	r3, #55	; 0x37
 800d570:	d901      	bls.n	800d576 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d572:	2337      	movs	r3, #55	; 0x37
 800d574:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800d576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d578:	6a3a      	ldr	r2, [r7, #32]
 800d57a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800d57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57e:	6a3a      	ldr	r2, [r7, #32]
 800d580:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d584:	3304      	adds	r3, #4
 800d586:	4618      	mov	r0, r3
 800d588:	f7ff fc4a 	bl	800ce20 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58e:	3318      	adds	r3, #24
 800d590:	4618      	mov	r0, r3
 800d592:	f7ff fc45 	bl	800ce20 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d59a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d59c:	6a3b      	ldr	r3, [r7, #32]
 800d59e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5aa:	625a      	str	r2, [r3, #36]	; 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800d5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	6938      	ldr	r0, [r7, #16]
 800d5b6:	f001 f99f 	bl	800e8f8 <pxPortInitialiseStack>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5be:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800d5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d002      	beq.n	800d5cc <prvInitialiseNewTask+0xf8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5ca:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d5cc:	bf00      	nop
 800d5ce:	3718      	adds	r7, #24
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800d5dc:	f001 f930 	bl	800e840 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800d5e0:	4b3e      	ldr	r3, [pc, #248]	; (800d6dc <prvAddNewTaskToReadyList+0x108>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	4a3d      	ldr	r2, [pc, #244]	; (800d6dc <prvAddNewTaskToReadyList+0x108>)
 800d5e8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800d5ea:	4b3d      	ldr	r3, [pc, #244]	; (800d6e0 <prvAddNewTaskToReadyList+0x10c>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d109      	bne.n	800d606 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800d5f2:	4a3b      	ldr	r2, [pc, #236]	; (800d6e0 <prvAddNewTaskToReadyList+0x10c>)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d5f8:	4b38      	ldr	r3, [pc, #224]	; (800d6dc <prvAddNewTaskToReadyList+0x108>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d110      	bne.n	800d622 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800d600:	f000 fcf0 	bl	800dfe4 <prvInitialiseTaskLists>
 800d604:	e00d      	b.n	800d622 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800d606:	4b37      	ldr	r3, [pc, #220]	; (800d6e4 <prvAddNewTaskToReadyList+0x110>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d109      	bne.n	800d622 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d60e:	4b34      	ldr	r3, [pc, #208]	; (800d6e0 <prvAddNewTaskToReadyList+0x10c>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d618:	429a      	cmp	r2, r3
 800d61a:	d802      	bhi.n	800d622 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800d61c:	4a30      	ldr	r2, [pc, #192]	; (800d6e0 <prvAddNewTaskToReadyList+0x10c>)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800d622:	4b31      	ldr	r3, [pc, #196]	; (800d6e8 <prvAddNewTaskToReadyList+0x114>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	3301      	adds	r3, #1
 800d628:	4a2f      	ldr	r2, [pc, #188]	; (800d6e8 <prvAddNewTaskToReadyList+0x114>)
 800d62a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d62c:	4b2e      	ldr	r3, [pc, #184]	; (800d6e8 <prvAddNewTaskToReadyList+0x114>)
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d638:	4b2c      	ldr	r3, [pc, #176]	; (800d6ec <prvAddNewTaskToReadyList+0x118>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d903      	bls.n	800d648 <prvAddNewTaskToReadyList+0x74>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d644:	4a29      	ldr	r2, [pc, #164]	; (800d6ec <prvAddNewTaskToReadyList+0x118>)
 800d646:	6013      	str	r3, [r2, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d64c:	4928      	ldr	r1, [pc, #160]	; (800d6f0 <prvAddNewTaskToReadyList+0x11c>)
 800d64e:	4613      	mov	r3, r2
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	4413      	add	r3, r2
 800d654:	009b      	lsls	r3, r3, #2
 800d656:	440b      	add	r3, r1
 800d658:	3304      	adds	r3, #4
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	60fb      	str	r3, [r7, #12]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	609a      	str	r2, [r3, #8]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	689a      	ldr	r2, [r3, #8]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	60da      	str	r2, [r3, #12]
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	3204      	adds	r2, #4
 800d674:	605a      	str	r2, [r3, #4]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	1d1a      	adds	r2, r3, #4
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	609a      	str	r2, [r3, #8]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d682:	4613      	mov	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	4413      	add	r3, r2
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	4a19      	ldr	r2, [pc, #100]	; (800d6f0 <prvAddNewTaskToReadyList+0x11c>)
 800d68c:	441a      	add	r2, r3
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	615a      	str	r2, [r3, #20]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d696:	4916      	ldr	r1, [pc, #88]	; (800d6f0 <prvAddNewTaskToReadyList+0x11c>)
 800d698:	4613      	mov	r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	4413      	add	r3, r2
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	440b      	add	r3, r1
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	1c59      	adds	r1, r3, #1
 800d6a6:	4812      	ldr	r0, [pc, #72]	; (800d6f0 <prvAddNewTaskToReadyList+0x11c>)
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	4413      	add	r3, r2
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	4403      	add	r3, r0
 800d6b2:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800d6b4:	f001 f8d6 	bl	800e864 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800d6b8:	4b0a      	ldr	r3, [pc, #40]	; (800d6e4 <prvAddNewTaskToReadyList+0x110>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d008      	beq.n	800d6d2 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d6c0:	4b07      	ldr	r3, [pc, #28]	; (800d6e0 <prvAddNewTaskToReadyList+0x10c>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d201      	bcs.n	800d6d2 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800d6ce:	f001 f8a5 	bl	800e81c <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d6d2:	bf00      	nop
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	2000190c 	.word	0x2000190c
 800d6e0:	20001438 	.word	0x20001438
 800d6e4:	20001918 	.word	0x20001918
 800d6e8:	20001928 	.word	0x20001928
 800d6ec:	20001914 	.word	0x20001914
 800d6f0:	2000143c 	.word	0x2000143c

0800d6f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b088      	sub	sp, #32
 800d6f8:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800d6fe:	2300      	movs	r3, #0
 800d700:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d702:	463a      	mov	r2, r7
 800d704:	1d39      	adds	r1, r7, #4
 800d706:	f107 0308 	add.w	r3, r7, #8
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7ff fb34 	bl	800cd78 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800d710:	6839      	ldr	r1, [r7, #0]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	68ba      	ldr	r2, [r7, #8]
 800d716:	9202      	str	r2, [sp, #8]
 800d718:	9301      	str	r3, [sp, #4]
 800d71a:	2300      	movs	r3, #0
 800d71c:	9300      	str	r3, [sp, #0]
 800d71e:	2300      	movs	r3, #0
 800d720:	460a      	mov	r2, r1
 800d722:	491a      	ldr	r1, [pc, #104]	; (800d78c <vTaskStartScheduler+0x98>)
 800d724:	481a      	ldr	r0, [pc, #104]	; (800d790 <vTaskStartScheduler+0x9c>)
 800d726:	f7ff fe8b 	bl	800d440 <xTaskCreateStatic>
 800d72a:	4603      	mov	r3, r0
 800d72c:	4a19      	ldr	r2, [pc, #100]	; (800d794 <vTaskStartScheduler+0xa0>)
 800d72e:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800d730:	4b18      	ldr	r3, [pc, #96]	; (800d794 <vTaskStartScheduler+0xa0>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800d738:	2301      	movs	r3, #1
 800d73a:	60fb      	str	r3, [r7, #12]
 800d73c:	e001      	b.n	800d742 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800d73e:	2300      	movs	r3, #0
 800d740:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2b01      	cmp	r3, #1
 800d746:	d102      	bne.n	800d74e <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800d748:	f000 fd8a 	bl	800e260 <xTimerCreateTimerTask>
 800d74c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2b01      	cmp	r3, #1
 800d752:	d10e      	bne.n	800d772 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800d754:	f001 f9b0 	bl	800eab8 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800d758:	4b0f      	ldr	r3, [pc, #60]	; (800d798 <vTaskStartScheduler+0xa4>)
 800d75a:	f04f 32ff 	mov.w	r2, #4294967295
 800d75e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d760:	4b0e      	ldr	r3, [pc, #56]	; (800d79c <vTaskStartScheduler+0xa8>)
 800d762:	2201      	movs	r2, #1
 800d764:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d766:	4b0e      	ldr	r3, [pc, #56]	; (800d7a0 <vTaskStartScheduler+0xac>)
 800d768:	2200      	movs	r2, #0
 800d76a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800d76c:	f001 f94e 	bl	800ea0c <xPortStartScheduler>
 800d770:	e006      	b.n	800d780 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d778:	d102      	bne.n	800d780 <vTaskStartScheduler+0x8c>
 800d77a:	f001 f99d 	bl	800eab8 <ulSetInterruptMask>
 800d77e:	e7fe      	b.n	800d77e <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800d780:	4b08      	ldr	r3, [pc, #32]	; (800d7a4 <vTaskStartScheduler+0xb0>)
 800d782:	681b      	ldr	r3, [r3, #0]
}
 800d784:	bf00      	nop
 800d786:	3710      	adds	r7, #16
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	0800fb14 	.word	0x0800fb14
 800d790:	0800dfc5 	.word	0x0800dfc5
 800d794:	20001930 	.word	0x20001930
 800d798:	2000192c 	.word	0x2000192c
 800d79c:	20001918 	.word	0x20001918
 800d7a0:	20001910 	.word	0x20001910
 800d7a4:	2000004c 	.word	0x2000004c

0800d7a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d7ac:	4b04      	ldr	r3, [pc, #16]	; (800d7c0 <vTaskSuspendAll+0x18>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	4a03      	ldr	r2, [pc, #12]	; (800d7c0 <vTaskSuspendAll+0x18>)
 800d7b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d7b6:	bf00      	nop
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr
 800d7c0:	20001934 	.word	0x20001934

0800d7c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b086      	sub	sp, #24
 800d7c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800d7d2:	4b6a      	ldr	r3, [pc, #424]	; (800d97c <xTaskResumeAll+0x1b8>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d102      	bne.n	800d7e0 <xTaskResumeAll+0x1c>
 800d7da:	f001 f96d 	bl	800eab8 <ulSetInterruptMask>
 800d7de:	e7fe      	b.n	800d7de <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d7e0:	f001 f82e 	bl	800e840 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d7e4:	4b65      	ldr	r3, [pc, #404]	; (800d97c <xTaskResumeAll+0x1b8>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	3b01      	subs	r3, #1
 800d7ea:	4a64      	ldr	r2, [pc, #400]	; (800d97c <xTaskResumeAll+0x1b8>)
 800d7ec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ee:	4b63      	ldr	r3, [pc, #396]	; (800d97c <xTaskResumeAll+0x1b8>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f040 80bb 	bne.w	800d96e <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d7f8:	4b61      	ldr	r3, [pc, #388]	; (800d980 <xTaskResumeAll+0x1bc>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f000 80b6 	beq.w	800d96e <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d802:	e08b      	b.n	800d91c <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d804:	4b5f      	ldr	r3, [pc, #380]	; (800d984 <xTaskResumeAll+0x1c0>)
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d810:	60bb      	str	r3, [r7, #8]
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	69db      	ldr	r3, [r3, #28]
 800d816:	697a      	ldr	r2, [r7, #20]
 800d818:	6a12      	ldr	r2, [r2, #32]
 800d81a:	609a      	str	r2, [r3, #8]
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	6a1b      	ldr	r3, [r3, #32]
 800d820:	697a      	ldr	r2, [r7, #20]
 800d822:	69d2      	ldr	r2, [r2, #28]
 800d824:	605a      	str	r2, [r3, #4]
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	685a      	ldr	r2, [r3, #4]
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	3318      	adds	r3, #24
 800d82e:	429a      	cmp	r2, r3
 800d830:	d103      	bne.n	800d83a <xTaskResumeAll+0x76>
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	6a1a      	ldr	r2, [r3, #32]
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	605a      	str	r2, [r3, #4]
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	2200      	movs	r2, #0
 800d83e:	629a      	str	r2, [r3, #40]	; 0x28
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	1e5a      	subs	r2, r3, #1
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	695b      	ldr	r3, [r3, #20]
 800d84e:	607b      	str	r3, [r7, #4]
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	697a      	ldr	r2, [r7, #20]
 800d856:	68d2      	ldr	r2, [r2, #12]
 800d858:	609a      	str	r2, [r3, #8]
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	697a      	ldr	r2, [r7, #20]
 800d860:	6892      	ldr	r2, [r2, #8]
 800d862:	605a      	str	r2, [r3, #4]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685a      	ldr	r2, [r3, #4]
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	3304      	adds	r3, #4
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d103      	bne.n	800d878 <xTaskResumeAll+0xb4>
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	68da      	ldr	r2, [r3, #12]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	605a      	str	r2, [r3, #4]
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	2200      	movs	r2, #0
 800d87c:	615a      	str	r2, [r3, #20]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	1e5a      	subs	r2, r3, #1
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d88c:	4b3e      	ldr	r3, [pc, #248]	; (800d988 <xTaskResumeAll+0x1c4>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	429a      	cmp	r2, r3
 800d892:	d903      	bls.n	800d89c <xTaskResumeAll+0xd8>
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d898:	4a3b      	ldr	r2, [pc, #236]	; (800d988 <xTaskResumeAll+0x1c4>)
 800d89a:	6013      	str	r3, [r2, #0]
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a0:	493a      	ldr	r1, [pc, #232]	; (800d98c <xTaskResumeAll+0x1c8>)
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	009b      	lsls	r3, r3, #2
 800d8a6:	4413      	add	r3, r2
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	440b      	add	r3, r1
 800d8ac:	3304      	adds	r3, #4
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	603b      	str	r3, [r7, #0]
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	683a      	ldr	r2, [r7, #0]
 800d8b6:	609a      	str	r2, [r3, #8]
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	689a      	ldr	r2, [r3, #8]
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	60da      	str	r2, [r3, #12]
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	697a      	ldr	r2, [r7, #20]
 800d8c6:	3204      	adds	r2, #4
 800d8c8:	605a      	str	r2, [r3, #4]
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	1d1a      	adds	r2, r3, #4
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	609a      	str	r2, [r3, #8]
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	4413      	add	r3, r2
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	4a2b      	ldr	r2, [pc, #172]	; (800d98c <xTaskResumeAll+0x1c8>)
 800d8e0:	441a      	add	r2, r3
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	615a      	str	r2, [r3, #20]
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ea:	4928      	ldr	r1, [pc, #160]	; (800d98c <xTaskResumeAll+0x1c8>)
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	4413      	add	r3, r2
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	440b      	add	r3, r1
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	1c59      	adds	r1, r3, #1
 800d8fa:	4824      	ldr	r0, [pc, #144]	; (800d98c <xTaskResumeAll+0x1c8>)
 800d8fc:	4613      	mov	r3, r2
 800d8fe:	009b      	lsls	r3, r3, #2
 800d900:	4413      	add	r3, r2
 800d902:	009b      	lsls	r3, r3, #2
 800d904:	4403      	add	r3, r0
 800d906:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d90c:	4b20      	ldr	r3, [pc, #128]	; (800d990 <xTaskResumeAll+0x1cc>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d912:	429a      	cmp	r2, r3
 800d914:	d302      	bcc.n	800d91c <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 800d916:	4b1f      	ldr	r3, [pc, #124]	; (800d994 <xTaskResumeAll+0x1d0>)
 800d918:	2201      	movs	r2, #1
 800d91a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d91c:	4b19      	ldr	r3, [pc, #100]	; (800d984 <xTaskResumeAll+0x1c0>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	f47f af6f 	bne.w	800d804 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800d92c:	f000 fbf0 	bl	800e110 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d930:	4b19      	ldr	r3, [pc, #100]	; (800d998 <xTaskResumeAll+0x1d4>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d010      	beq.n	800d95e <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800d93c:	f000 f83e 	bl	800d9bc <xTaskIncrementTick>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d002      	beq.n	800d94c <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 800d946:	4b13      	ldr	r3, [pc, #76]	; (800d994 <xTaskResumeAll+0x1d0>)
 800d948:	2201      	movs	r2, #1
 800d94a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	3b01      	subs	r3, #1
 800d950:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d1f1      	bne.n	800d93c <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 800d958:	4b0f      	ldr	r3, [pc, #60]	; (800d998 <xTaskResumeAll+0x1d4>)
 800d95a:	2200      	movs	r2, #0
 800d95c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800d95e:	4b0d      	ldr	r3, [pc, #52]	; (800d994 <xTaskResumeAll+0x1d0>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d003      	beq.n	800d96e <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800d966:	2301      	movs	r3, #1
 800d968:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d96a:	f000 ff57 	bl	800e81c <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d96e:	f000 ff79 	bl	800e864 <vPortExitCritical>

    return xAlreadyYielded;
 800d972:	693b      	ldr	r3, [r7, #16]
}
 800d974:	4618      	mov	r0, r3
 800d976:	3718      	adds	r7, #24
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	20001934 	.word	0x20001934
 800d980:	2000190c 	.word	0x2000190c
 800d984:	200018cc 	.word	0x200018cc
 800d988:	20001914 	.word	0x20001914
 800d98c:	2000143c 	.word	0x2000143c
 800d990:	20001438 	.word	0x20001438
 800d994:	20001920 	.word	0x20001920
 800d998:	2000191c 	.word	0x2000191c

0800d99c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d99c:	b480      	push	{r7}
 800d99e:	b083      	sub	sp, #12
 800d9a0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800d9a2:	4b05      	ldr	r3, [pc, #20]	; (800d9b8 <xTaskGetTickCount+0x1c>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d9a8:	687b      	ldr	r3, [r7, #4]
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	370c      	adds	r7, #12
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	20001910 	.word	0x20001910

0800d9bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b088      	sub	sp, #32
 800d9c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9c6:	4b7a      	ldr	r3, [pc, #488]	; (800dbb0 <xTaskIncrementTick+0x1f4>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	f040 80e5 	bne.w	800db9a <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d9d0:	4b78      	ldr	r3, [pc, #480]	; (800dbb4 <xTaskIncrementTick+0x1f8>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d9d8:	4a76      	ldr	r2, [pc, #472]	; (800dbb4 <xTaskIncrementTick+0x1f8>)
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d118      	bne.n	800da16 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 800d9e4:	4b74      	ldr	r3, [pc, #464]	; (800dbb8 <xTaskIncrementTick+0x1fc>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d002      	beq.n	800d9f4 <xTaskIncrementTick+0x38>
 800d9ee:	f001 f863 	bl	800eab8 <ulSetInterruptMask>
 800d9f2:	e7fe      	b.n	800d9f2 <xTaskIncrementTick+0x36>
 800d9f4:	4b70      	ldr	r3, [pc, #448]	; (800dbb8 <xTaskIncrementTick+0x1fc>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	617b      	str	r3, [r7, #20]
 800d9fa:	4b70      	ldr	r3, [pc, #448]	; (800dbbc <xTaskIncrementTick+0x200>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	4a6e      	ldr	r2, [pc, #440]	; (800dbb8 <xTaskIncrementTick+0x1fc>)
 800da00:	6013      	str	r3, [r2, #0]
 800da02:	4a6e      	ldr	r2, [pc, #440]	; (800dbbc <xTaskIncrementTick+0x200>)
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	6013      	str	r3, [r2, #0]
 800da08:	4b6d      	ldr	r3, [pc, #436]	; (800dbc0 <xTaskIncrementTick+0x204>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	3301      	adds	r3, #1
 800da0e:	4a6c      	ldr	r2, [pc, #432]	; (800dbc0 <xTaskIncrementTick+0x204>)
 800da10:	6013      	str	r3, [r2, #0]
 800da12:	f000 fb7d 	bl	800e110 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800da16:	4b6b      	ldr	r3, [pc, #428]	; (800dbc4 <xTaskIncrementTick+0x208>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	69ba      	ldr	r2, [r7, #24]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	f0c0 80a7 	bcc.w	800db70 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da22:	4b65      	ldr	r3, [pc, #404]	; (800dbb8 <xTaskIncrementTick+0x1fc>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d104      	bne.n	800da36 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da2c:	4b65      	ldr	r3, [pc, #404]	; (800dbc4 <xTaskIncrementTick+0x208>)
 800da2e:	f04f 32ff 	mov.w	r2, #4294967295
 800da32:	601a      	str	r2, [r3, #0]
                    break;
 800da34:	e09c      	b.n	800db70 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da36:	4b60      	ldr	r3, [pc, #384]	; (800dbb8 <xTaskIncrementTick+0x1fc>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800da46:	69ba      	ldr	r2, [r7, #24]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d203      	bcs.n	800da56 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800da4e:	4a5d      	ldr	r2, [pc, #372]	; (800dbc4 <xTaskIncrementTick+0x208>)
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800da54:	e08c      	b.n	800db70 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	695b      	ldr	r3, [r3, #20]
 800da5a:	60bb      	str	r3, [r7, #8]
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	693a      	ldr	r2, [r7, #16]
 800da62:	68d2      	ldr	r2, [r2, #12]
 800da64:	609a      	str	r2, [r3, #8]
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	693a      	ldr	r2, [r7, #16]
 800da6c:	6892      	ldr	r2, [r2, #8]
 800da6e:	605a      	str	r2, [r3, #4]
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	685a      	ldr	r2, [r3, #4]
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	3304      	adds	r3, #4
 800da78:	429a      	cmp	r2, r3
 800da7a:	d103      	bne.n	800da84 <xTaskIncrementTick+0xc8>
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	68da      	ldr	r2, [r3, #12]
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	605a      	str	r2, [r3, #4]
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	2200      	movs	r2, #0
 800da88:	615a      	str	r2, [r3, #20]
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	1e5a      	subs	r2, r3, #1
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d01e      	beq.n	800dada <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa0:	607b      	str	r3, [r7, #4]
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	69db      	ldr	r3, [r3, #28]
 800daa6:	693a      	ldr	r2, [r7, #16]
 800daa8:	6a12      	ldr	r2, [r2, #32]
 800daaa:	609a      	str	r2, [r3, #8]
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	6a1b      	ldr	r3, [r3, #32]
 800dab0:	693a      	ldr	r2, [r7, #16]
 800dab2:	69d2      	ldr	r2, [r2, #28]
 800dab4:	605a      	str	r2, [r3, #4]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	685a      	ldr	r2, [r3, #4]
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	3318      	adds	r3, #24
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d103      	bne.n	800daca <xTaskIncrementTick+0x10e>
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	6a1a      	ldr	r2, [r3, #32]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	605a      	str	r2, [r3, #4]
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	2200      	movs	r2, #0
 800dace:	629a      	str	r2, [r3, #40]	; 0x28
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	1e5a      	subs	r2, r3, #1
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dade:	4b3a      	ldr	r3, [pc, #232]	; (800dbc8 <xTaskIncrementTick+0x20c>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d903      	bls.n	800daee <xTaskIncrementTick+0x132>
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daea:	4a37      	ldr	r2, [pc, #220]	; (800dbc8 <xTaskIncrementTick+0x20c>)
 800daec:	6013      	str	r3, [r2, #0]
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf2:	4936      	ldr	r1, [pc, #216]	; (800dbcc <xTaskIncrementTick+0x210>)
 800daf4:	4613      	mov	r3, r2
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	4413      	add	r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	440b      	add	r3, r1
 800dafe:	3304      	adds	r3, #4
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	603b      	str	r3, [r7, #0]
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	683a      	ldr	r2, [r7, #0]
 800db08:	609a      	str	r2, [r3, #8]
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	689a      	ldr	r2, [r3, #8]
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	60da      	str	r2, [r3, #12]
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	689b      	ldr	r3, [r3, #8]
 800db16:	693a      	ldr	r2, [r7, #16]
 800db18:	3204      	adds	r2, #4
 800db1a:	605a      	str	r2, [r3, #4]
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	1d1a      	adds	r2, r3, #4
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	609a      	str	r2, [r3, #8]
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db28:	4613      	mov	r3, r2
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4413      	add	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	4a26      	ldr	r2, [pc, #152]	; (800dbcc <xTaskIncrementTick+0x210>)
 800db32:	441a      	add	r2, r3
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	615a      	str	r2, [r3, #20]
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db3c:	4923      	ldr	r1, [pc, #140]	; (800dbcc <xTaskIncrementTick+0x210>)
 800db3e:	4613      	mov	r3, r2
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	4413      	add	r3, r2
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	440b      	add	r3, r1
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	1c59      	adds	r1, r3, #1
 800db4c:	481f      	ldr	r0, [pc, #124]	; (800dbcc <xTaskIncrementTick+0x210>)
 800db4e:	4613      	mov	r3, r2
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	4413      	add	r3, r2
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	4403      	add	r3, r0
 800db58:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db5e:	4b1c      	ldr	r3, [pc, #112]	; (800dbd0 <xTaskIncrementTick+0x214>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db64:	429a      	cmp	r2, r3
 800db66:	f67f af5c 	bls.w	800da22 <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 800db6a:	2301      	movs	r3, #1
 800db6c:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db6e:	e758      	b.n	800da22 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800db70:	4b17      	ldr	r3, [pc, #92]	; (800dbd0 <xTaskIncrementTick+0x214>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db76:	4915      	ldr	r1, [pc, #84]	; (800dbcc <xTaskIncrementTick+0x210>)
 800db78:	4613      	mov	r3, r2
 800db7a:	009b      	lsls	r3, r3, #2
 800db7c:	4413      	add	r3, r2
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	440b      	add	r3, r1
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b01      	cmp	r3, #1
 800db86:	d901      	bls.n	800db8c <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 800db88:	2301      	movs	r3, #1
 800db8a:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800db8c:	4b11      	ldr	r3, [pc, #68]	; (800dbd4 <xTaskIncrementTick+0x218>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d007      	beq.n	800dba4 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 800db94:	2301      	movs	r3, #1
 800db96:	61fb      	str	r3, [r7, #28]
 800db98:	e004      	b.n	800dba4 <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800db9a:	4b0f      	ldr	r3, [pc, #60]	; (800dbd8 <xTaskIncrementTick+0x21c>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	3301      	adds	r3, #1
 800dba0:	4a0d      	ldr	r2, [pc, #52]	; (800dbd8 <xTaskIncrementTick+0x21c>)
 800dba2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800dba4:	69fb      	ldr	r3, [r7, #28]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3720      	adds	r7, #32
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	20001934 	.word	0x20001934
 800dbb4:	20001910 	.word	0x20001910
 800dbb8:	200018c4 	.word	0x200018c4
 800dbbc:	200018c8 	.word	0x200018c8
 800dbc0:	20001924 	.word	0x20001924
 800dbc4:	2000192c 	.word	0x2000192c
 800dbc8:	20001914 	.word	0x20001914
 800dbcc:	2000143c 	.word	0x2000143c
 800dbd0:	20001438 	.word	0x20001438
 800dbd4:	20001920 	.word	0x20001920
 800dbd8:	2000191c 	.word	0x2000191c

0800dbdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dbe2:	4b23      	ldr	r3, [pc, #140]	; (800dc70 <vTaskSwitchContext+0x94>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d003      	beq.n	800dbf2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800dbea:	4b22      	ldr	r3, [pc, #136]	; (800dc74 <vTaskSwitchContext+0x98>)
 800dbec:	2201      	movs	r2, #1
 800dbee:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800dbf0:	e039      	b.n	800dc66 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800dbf2:	4b20      	ldr	r3, [pc, #128]	; (800dc74 <vTaskSwitchContext+0x98>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbf8:	4b1f      	ldr	r3, [pc, #124]	; (800dc78 <vTaskSwitchContext+0x9c>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	607b      	str	r3, [r7, #4]
 800dbfe:	e008      	b.n	800dc12 <vTaskSwitchContext+0x36>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d102      	bne.n	800dc0c <vTaskSwitchContext+0x30>
 800dc06:	f000 ff57 	bl	800eab8 <ulSetInterruptMask>
 800dc0a:	e7fe      	b.n	800dc0a <vTaskSwitchContext+0x2e>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	3b01      	subs	r3, #1
 800dc10:	607b      	str	r3, [r7, #4]
 800dc12:	491a      	ldr	r1, [pc, #104]	; (800dc7c <vTaskSwitchContext+0xa0>)
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	4613      	mov	r3, r2
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	4413      	add	r3, r2
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	440b      	add	r3, r1
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d0ec      	beq.n	800dc00 <vTaskSwitchContext+0x24>
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	4613      	mov	r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	4413      	add	r3, r2
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4a12      	ldr	r2, [pc, #72]	; (800dc7c <vTaskSwitchContext+0xa0>)
 800dc32:	4413      	add	r3, r2
 800dc34:	603b      	str	r3, [r7, #0]
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	685a      	ldr	r2, [r3, #4]
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	605a      	str	r2, [r3, #4]
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	685a      	ldr	r2, [r3, #4]
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	3308      	adds	r3, #8
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d104      	bne.n	800dc56 <vTaskSwitchContext+0x7a>
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	685a      	ldr	r2, [r3, #4]
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	605a      	str	r2, [r3, #4]
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	68db      	ldr	r3, [r3, #12]
 800dc5c:	4a08      	ldr	r2, [pc, #32]	; (800dc80 <vTaskSwitchContext+0xa4>)
 800dc5e:	6013      	str	r3, [r2, #0]
 800dc60:	4a05      	ldr	r2, [pc, #20]	; (800dc78 <vTaskSwitchContext+0x9c>)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6013      	str	r3, [r2, #0]
}
 800dc66:	bf00      	nop
 800dc68:	3708      	adds	r7, #8
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	20001934 	.word	0x20001934
 800dc74:	20001920 	.word	0x20001920
 800dc78:	20001914 	.word	0x20001914
 800dc7c:	2000143c 	.word	0x2000143c
 800dc80:	20001438 	.word	0x20001438

0800dc84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d102      	bne.n	800dc9a <vTaskPlaceOnEventList+0x16>
 800dc94:	f000 ff10 	bl	800eab8 <ulSetInterruptMask>
 800dc98:	e7fe      	b.n	800dc98 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc9a:	4b07      	ldr	r3, [pc, #28]	; (800dcb8 <vTaskPlaceOnEventList+0x34>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	3318      	adds	r3, #24
 800dca0:	4619      	mov	r1, r3
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f7ff f8c9 	bl	800ce3a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dca8:	2101      	movs	r1, #1
 800dcaa:	6838      	ldr	r0, [r7, #0]
 800dcac:	f000 fa6a 	bl	800e184 <prvAddCurrentTaskToDelayedList>
}
 800dcb0:	bf00      	nop
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	20001438 	.word	0x20001438

0800dcbc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b086      	sub	sp, #24
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d102      	bne.n	800dcd4 <vTaskPlaceOnEventListRestricted+0x18>
 800dcce:	f000 fef3 	bl	800eab8 <ulSetInterruptMask>
 800dcd2:	e7fe      	b.n	800dcd2 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	617b      	str	r3, [r7, #20]
 800dcda:	4b16      	ldr	r3, [pc, #88]	; (800dd34 <vTaskPlaceOnEventListRestricted+0x78>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	697a      	ldr	r2, [r7, #20]
 800dce0:	61da      	str	r2, [r3, #28]
 800dce2:	4b14      	ldr	r3, [pc, #80]	; (800dd34 <vTaskPlaceOnEventListRestricted+0x78>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	697a      	ldr	r2, [r7, #20]
 800dce8:	6892      	ldr	r2, [r2, #8]
 800dcea:	621a      	str	r2, [r3, #32]
 800dcec:	4b11      	ldr	r3, [pc, #68]	; (800dd34 <vTaskPlaceOnEventListRestricted+0x78>)
 800dcee:	681a      	ldr	r2, [r3, #0]
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	689b      	ldr	r3, [r3, #8]
 800dcf4:	3218      	adds	r2, #24
 800dcf6:	605a      	str	r2, [r3, #4]
 800dcf8:	4b0e      	ldr	r3, [pc, #56]	; (800dd34 <vTaskPlaceOnEventListRestricted+0x78>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f103 0218 	add.w	r2, r3, #24
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	609a      	str	r2, [r3, #8]
 800dd04:	4b0b      	ldr	r3, [pc, #44]	; (800dd34 <vTaskPlaceOnEventListRestricted+0x78>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	629a      	str	r2, [r3, #40]	; 0x28
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	1c5a      	adds	r2, r3, #1
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d002      	beq.n	800dd22 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 800dd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd20:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dd22:	6879      	ldr	r1, [r7, #4]
 800dd24:	68b8      	ldr	r0, [r7, #8]
 800dd26:	f000 fa2d 	bl	800e184 <prvAddCurrentTaskToDelayedList>
    }
 800dd2a:	bf00      	nop
 800dd2c:	3718      	adds	r7, #24
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	20001438 	.word	0x20001438

0800dd38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b088      	sub	sp, #32
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800dd48:	69bb      	ldr	r3, [r7, #24]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d102      	bne.n	800dd54 <xTaskRemoveFromEventList+0x1c>
 800dd4e:	f000 feb3 	bl	800eab8 <ulSetInterruptMask>
 800dd52:	e7fe      	b.n	800dd52 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd58:	617b      	str	r3, [r7, #20]
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	69db      	ldr	r3, [r3, #28]
 800dd5e:	69ba      	ldr	r2, [r7, #24]
 800dd60:	6a12      	ldr	r2, [r2, #32]
 800dd62:	609a      	str	r2, [r3, #8]
 800dd64:	69bb      	ldr	r3, [r7, #24]
 800dd66:	6a1b      	ldr	r3, [r3, #32]
 800dd68:	69ba      	ldr	r2, [r7, #24]
 800dd6a:	69d2      	ldr	r2, [r2, #28]
 800dd6c:	605a      	str	r2, [r3, #4]
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	685a      	ldr	r2, [r3, #4]
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	3318      	adds	r3, #24
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d103      	bne.n	800dd82 <xTaskRemoveFromEventList+0x4a>
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	6a1a      	ldr	r2, [r3, #32]
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	605a      	str	r2, [r3, #4]
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	2200      	movs	r2, #0
 800dd86:	629a      	str	r2, [r3, #40]	; 0x28
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	1e5a      	subs	r2, r3, #1
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd92:	4b4a      	ldr	r3, [pc, #296]	; (800debc <xTaskRemoveFromEventList+0x184>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d15f      	bne.n	800de5a <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800dd9a:	69bb      	ldr	r3, [r7, #24]
 800dd9c:	695b      	ldr	r3, [r3, #20]
 800dd9e:	60fb      	str	r3, [r7, #12]
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	69ba      	ldr	r2, [r7, #24]
 800dda6:	68d2      	ldr	r2, [r2, #12]
 800dda8:	609a      	str	r2, [r3, #8]
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	69ba      	ldr	r2, [r7, #24]
 800ddb0:	6892      	ldr	r2, [r2, #8]
 800ddb2:	605a      	str	r2, [r3, #4]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	685a      	ldr	r2, [r3, #4]
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	3304      	adds	r3, #4
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d103      	bne.n	800ddc8 <xTaskRemoveFromEventList+0x90>
 800ddc0:	69bb      	ldr	r3, [r7, #24]
 800ddc2:	68da      	ldr	r2, [r3, #12]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	605a      	str	r2, [r3, #4]
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	615a      	str	r2, [r3, #20]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	1e5a      	subs	r2, r3, #1
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dddc:	4b38      	ldr	r3, [pc, #224]	; (800dec0 <xTaskRemoveFromEventList+0x188>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d903      	bls.n	800ddec <xTaskRemoveFromEventList+0xb4>
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde8:	4a35      	ldr	r2, [pc, #212]	; (800dec0 <xTaskRemoveFromEventList+0x188>)
 800ddea:	6013      	str	r3, [r2, #0]
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf0:	4934      	ldr	r1, [pc, #208]	; (800dec4 <xTaskRemoveFromEventList+0x18c>)
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	009b      	lsls	r3, r3, #2
 800ddf6:	4413      	add	r3, r2
 800ddf8:	009b      	lsls	r3, r3, #2
 800ddfa:	440b      	add	r3, r1
 800ddfc:	3304      	adds	r3, #4
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	60bb      	str	r3, [r7, #8]
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	68ba      	ldr	r2, [r7, #8]
 800de06:	609a      	str	r2, [r3, #8]
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	689a      	ldr	r2, [r3, #8]
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	60da      	str	r2, [r3, #12]
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	69ba      	ldr	r2, [r7, #24]
 800de16:	3204      	adds	r2, #4
 800de18:	605a      	str	r2, [r3, #4]
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	1d1a      	adds	r2, r3, #4
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	609a      	str	r2, [r3, #8]
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de26:	4613      	mov	r3, r2
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	4413      	add	r3, r2
 800de2c:	009b      	lsls	r3, r3, #2
 800de2e:	4a25      	ldr	r2, [pc, #148]	; (800dec4 <xTaskRemoveFromEventList+0x18c>)
 800de30:	441a      	add	r2, r3
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	615a      	str	r2, [r3, #20]
 800de36:	69bb      	ldr	r3, [r7, #24]
 800de38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de3a:	4922      	ldr	r1, [pc, #136]	; (800dec4 <xTaskRemoveFromEventList+0x18c>)
 800de3c:	4613      	mov	r3, r2
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	4413      	add	r3, r2
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	440b      	add	r3, r1
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	1c59      	adds	r1, r3, #1
 800de4a:	481e      	ldr	r0, [pc, #120]	; (800dec4 <xTaskRemoveFromEventList+0x18c>)
 800de4c:	4613      	mov	r3, r2
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4413      	add	r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	4403      	add	r3, r0
 800de56:	6019      	str	r1, [r3, #0]
 800de58:	e01b      	b.n	800de92 <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de5a:	4b1b      	ldr	r3, [pc, #108]	; (800dec8 <xTaskRemoveFromEventList+0x190>)
 800de5c:	685b      	ldr	r3, [r3, #4]
 800de5e:	613b      	str	r3, [r7, #16]
 800de60:	69bb      	ldr	r3, [r7, #24]
 800de62:	693a      	ldr	r2, [r7, #16]
 800de64:	61da      	str	r2, [r3, #28]
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	689a      	ldr	r2, [r3, #8]
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	621a      	str	r2, [r3, #32]
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	689b      	ldr	r3, [r3, #8]
 800de72:	69ba      	ldr	r2, [r7, #24]
 800de74:	3218      	adds	r2, #24
 800de76:	605a      	str	r2, [r3, #4]
 800de78:	69bb      	ldr	r3, [r7, #24]
 800de7a:	f103 0218 	add.w	r2, r3, #24
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	609a      	str	r2, [r3, #8]
 800de82:	69bb      	ldr	r3, [r7, #24]
 800de84:	4a10      	ldr	r2, [pc, #64]	; (800dec8 <xTaskRemoveFromEventList+0x190>)
 800de86:	629a      	str	r2, [r3, #40]	; 0x28
 800de88:	4b0f      	ldr	r3, [pc, #60]	; (800dec8 <xTaskRemoveFromEventList+0x190>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	3301      	adds	r3, #1
 800de8e:	4a0e      	ldr	r2, [pc, #56]	; (800dec8 <xTaskRemoveFromEventList+0x190>)
 800de90:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de96:	4b0d      	ldr	r3, [pc, #52]	; (800decc <xTaskRemoveFromEventList+0x194>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d905      	bls.n	800deac <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800dea0:	2301      	movs	r3, #1
 800dea2:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800dea4:	4b0a      	ldr	r3, [pc, #40]	; (800ded0 <xTaskRemoveFromEventList+0x198>)
 800dea6:	2201      	movs	r2, #1
 800dea8:	601a      	str	r2, [r3, #0]
 800deaa:	e001      	b.n	800deb0 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 800deac:	2300      	movs	r3, #0
 800deae:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800deb0:	69fb      	ldr	r3, [r7, #28]
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3720      	adds	r7, #32
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	20001934 	.word	0x20001934
 800dec0:	20001914 	.word	0x20001914
 800dec4:	2000143c 	.word	0x2000143c
 800dec8:	200018cc 	.word	0x200018cc
 800decc:	20001438 	.word	0x20001438
 800ded0:	20001920 	.word	0x20001920

0800ded4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dedc:	4b06      	ldr	r3, [pc, #24]	; (800def8 <vTaskInternalSetTimeOutState+0x24>)
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800dee4:	4b05      	ldr	r3, [pc, #20]	; (800defc <vTaskInternalSetTimeOutState+0x28>)
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	605a      	str	r2, [r3, #4]
}
 800deec:	bf00      	nop
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr
 800def8:	20001924 	.word	0x20001924
 800defc:	20001910 	.word	0x20001910

0800df00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b086      	sub	sp, #24
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d102      	bne.n	800df16 <xTaskCheckForTimeOut+0x16>
 800df10:	f000 fdd2 	bl	800eab8 <ulSetInterruptMask>
 800df14:	e7fe      	b.n	800df14 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d102      	bne.n	800df22 <xTaskCheckForTimeOut+0x22>
 800df1c:	f000 fdcc 	bl	800eab8 <ulSetInterruptMask>
 800df20:	e7fe      	b.n	800df20 <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 800df22:	f000 fc8d 	bl	800e840 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800df26:	4b1f      	ldr	r3, [pc, #124]	; (800dfa4 <xTaskCheckForTimeOut+0xa4>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	693a      	ldr	r2, [r7, #16]
 800df32:	1ad3      	subs	r3, r2, r3
 800df34:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df3e:	d102      	bne.n	800df46 <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800df40:	2300      	movs	r3, #0
 800df42:	617b      	str	r3, [r7, #20]
 800df44:	e026      	b.n	800df94 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	4b17      	ldr	r3, [pc, #92]	; (800dfa8 <xTaskCheckForTimeOut+0xa8>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d00a      	beq.n	800df68 <xTaskCheckForTimeOut+0x68>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	693a      	ldr	r2, [r7, #16]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d305      	bcc.n	800df68 <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800df5c:	2301      	movs	r3, #1
 800df5e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	2200      	movs	r2, #0
 800df64:	601a      	str	r2, [r3, #0]
 800df66:	e015      	b.n	800df94 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	68fa      	ldr	r2, [r7, #12]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d20b      	bcs.n	800df8a <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	1ad2      	subs	r2, r2, r3
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f7ff ffa8 	bl	800ded4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800df84:	2300      	movs	r3, #0
 800df86:	617b      	str	r3, [r7, #20]
 800df88:	e004      	b.n	800df94 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	2200      	movs	r2, #0
 800df8e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800df90:	2301      	movs	r3, #1
 800df92:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800df94:	f000 fc66 	bl	800e864 <vPortExitCritical>

    return xReturn;
 800df98:	697b      	ldr	r3, [r7, #20]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3718      	adds	r7, #24
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	20001910 	.word	0x20001910
 800dfa8:	20001924 	.word	0x20001924

0800dfac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dfac:	b480      	push	{r7}
 800dfae:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800dfb0:	4b03      	ldr	r3, [pc, #12]	; (800dfc0 <vTaskMissedYield+0x14>)
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	601a      	str	r2, [r3, #0]
}
 800dfb6:	bf00      	nop
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	20001920 	.word	0x20001920

0800dfc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800dfcc:	f000 f84a 	bl	800e064 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dfd0:	4b03      	ldr	r3, [pc, #12]	; (800dfe0 <prvIdleTask+0x1c>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d9f9      	bls.n	800dfcc <prvIdleTask+0x8>
            {
                taskYIELD();
 800dfd8:	f000 fc20 	bl	800e81c <vPortYield>
        prvCheckTasksWaitingTermination();
 800dfdc:	e7f6      	b.n	800dfcc <prvIdleTask+0x8>
 800dfde:	bf00      	nop
 800dfe0:	2000143c 	.word	0x2000143c

0800dfe4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfea:	2300      	movs	r3, #0
 800dfec:	607b      	str	r3, [r7, #4]
 800dfee:	e00c      	b.n	800e00a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	4613      	mov	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4413      	add	r3, r2
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	4a12      	ldr	r2, [pc, #72]	; (800e044 <prvInitialiseTaskLists+0x60>)
 800dffc:	4413      	add	r3, r2
 800dffe:	4618      	mov	r0, r3
 800e000:	f7fe feee 	bl	800cde0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	3301      	adds	r3, #1
 800e008:	607b      	str	r3, [r7, #4]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2b37      	cmp	r3, #55	; 0x37
 800e00e:	d9ef      	bls.n	800dff0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800e010:	480d      	ldr	r0, [pc, #52]	; (800e048 <prvInitialiseTaskLists+0x64>)
 800e012:	f7fe fee5 	bl	800cde0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800e016:	480d      	ldr	r0, [pc, #52]	; (800e04c <prvInitialiseTaskLists+0x68>)
 800e018:	f7fe fee2 	bl	800cde0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800e01c:	480c      	ldr	r0, [pc, #48]	; (800e050 <prvInitialiseTaskLists+0x6c>)
 800e01e:	f7fe fedf 	bl	800cde0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800e022:	480c      	ldr	r0, [pc, #48]	; (800e054 <prvInitialiseTaskLists+0x70>)
 800e024:	f7fe fedc 	bl	800cde0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800e028:	480b      	ldr	r0, [pc, #44]	; (800e058 <prvInitialiseTaskLists+0x74>)
 800e02a:	f7fe fed9 	bl	800cde0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800e02e:	4b0b      	ldr	r3, [pc, #44]	; (800e05c <prvInitialiseTaskLists+0x78>)
 800e030:	4a05      	ldr	r2, [pc, #20]	; (800e048 <prvInitialiseTaskLists+0x64>)
 800e032:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e034:	4b0a      	ldr	r3, [pc, #40]	; (800e060 <prvInitialiseTaskLists+0x7c>)
 800e036:	4a05      	ldr	r2, [pc, #20]	; (800e04c <prvInitialiseTaskLists+0x68>)
 800e038:	601a      	str	r2, [r3, #0]
}
 800e03a:	bf00      	nop
 800e03c:	3708      	adds	r7, #8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	2000143c 	.word	0x2000143c
 800e048:	2000189c 	.word	0x2000189c
 800e04c:	200018b0 	.word	0x200018b0
 800e050:	200018cc 	.word	0x200018cc
 800e054:	200018e0 	.word	0x200018e0
 800e058:	200018f8 	.word	0x200018f8
 800e05c:	200018c4 	.word	0x200018c4
 800e060:	200018c8 	.word	0x200018c8

0800e064 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e06a:	e019      	b.n	800e0a0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800e06c:	f000 fbe8 	bl	800e840 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e070:	4b10      	ldr	r3, [pc, #64]	; (800e0b4 <prvCheckTasksWaitingTermination+0x50>)
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	3304      	adds	r3, #4
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7fe ff15 	bl	800ceac <uxListRemove>
                --uxCurrentNumberOfTasks;
 800e082:	4b0d      	ldr	r3, [pc, #52]	; (800e0b8 <prvCheckTasksWaitingTermination+0x54>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	3b01      	subs	r3, #1
 800e088:	4a0b      	ldr	r2, [pc, #44]	; (800e0b8 <prvCheckTasksWaitingTermination+0x54>)
 800e08a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800e08c:	4b0b      	ldr	r3, [pc, #44]	; (800e0bc <prvCheckTasksWaitingTermination+0x58>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	3b01      	subs	r3, #1
 800e092:	4a0a      	ldr	r2, [pc, #40]	; (800e0bc <prvCheckTasksWaitingTermination+0x58>)
 800e094:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800e096:	f000 fbe5 	bl	800e864 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 f810 	bl	800e0c0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0a0:	4b06      	ldr	r3, [pc, #24]	; (800e0bc <prvCheckTasksWaitingTermination+0x58>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d1e1      	bne.n	800e06c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800e0a8:	bf00      	nop
 800e0aa:	bf00      	nop
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	200018e0 	.word	0x200018e0
 800e0b8:	2000190c 	.word	0x2000190c
 800e0bc:	200018f4 	.word	0x200018f4

0800e0c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d108      	bne.n	800e0e4 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f000 fd4e 	bl	800eb78 <vPortFree>
                vPortFree( pxTCB );
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 fd4b 	bl	800eb78 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800e0e2:	e010      	b.n	800e106 <prvDeleteTCB+0x46>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d103      	bne.n	800e0f6 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 fd42 	bl	800eb78 <vPortFree>
    }
 800e0f4:	e007      	b.n	800e106 <prvDeleteTCB+0x46>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e0fc:	2b02      	cmp	r3, #2
 800e0fe:	d002      	beq.n	800e106 <prvDeleteTCB+0x46>
 800e100:	f000 fcda 	bl	800eab8 <ulSetInterruptMask>
 800e104:	e7fe      	b.n	800e104 <prvDeleteTCB+0x44>
    }
 800e106:	bf00      	nop
 800e108:	3708      	adds	r7, #8
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
	...

0800e110 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e110:	b480      	push	{r7}
 800e112:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e114:	4b0a      	ldr	r3, [pc, #40]	; (800e140 <prvResetNextTaskUnblockTime+0x30>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d104      	bne.n	800e128 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800e11e:	4b09      	ldr	r3, [pc, #36]	; (800e144 <prvResetNextTaskUnblockTime+0x34>)
 800e120:	f04f 32ff 	mov.w	r2, #4294967295
 800e124:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800e126:	e005      	b.n	800e134 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e128:	4b05      	ldr	r3, [pc, #20]	; (800e140 <prvResetNextTaskUnblockTime+0x30>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a04      	ldr	r2, [pc, #16]	; (800e144 <prvResetNextTaskUnblockTime+0x34>)
 800e132:	6013      	str	r3, [r2, #0]
}
 800e134:	bf00      	nop
 800e136:	46bd      	mov	sp, r7
 800e138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	200018c4 	.word	0x200018c4
 800e144:	2000192c 	.word	0x2000192c

0800e148 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800e14e:	4b0b      	ldr	r3, [pc, #44]	; (800e17c <xTaskGetSchedulerState+0x34>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d102      	bne.n	800e15c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800e156:	2301      	movs	r3, #1
 800e158:	607b      	str	r3, [r7, #4]
 800e15a:	e008      	b.n	800e16e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e15c:	4b08      	ldr	r3, [pc, #32]	; (800e180 <xTaskGetSchedulerState+0x38>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d102      	bne.n	800e16a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800e164:	2302      	movs	r3, #2
 800e166:	607b      	str	r3, [r7, #4]
 800e168:	e001      	b.n	800e16e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800e16a:	2300      	movs	r3, #0
 800e16c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800e16e:	687b      	ldr	r3, [r7, #4]
    }
 800e170:	4618      	mov	r0, r3
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr
 800e17c:	20001918 	.word	0x20001918
 800e180:	20001934 	.word	0x20001934

0800e184 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b086      	sub	sp, #24
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800e18e:	4b2e      	ldr	r3, [pc, #184]	; (800e248 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e194:	4b2d      	ldr	r3, [pc, #180]	; (800e24c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	3304      	adds	r3, #4
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fe fe86 	bl	800ceac <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1a6:	d124      	bne.n	800e1f2 <prvAddCurrentTaskToDelayedList+0x6e>
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d021      	beq.n	800e1f2 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1ae:	4b28      	ldr	r3, [pc, #160]	; (800e250 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	613b      	str	r3, [r7, #16]
 800e1b4:	4b25      	ldr	r3, [pc, #148]	; (800e24c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	693a      	ldr	r2, [r7, #16]
 800e1ba:	609a      	str	r2, [r3, #8]
 800e1bc:	4b23      	ldr	r3, [pc, #140]	; (800e24c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	693a      	ldr	r2, [r7, #16]
 800e1c2:	6892      	ldr	r2, [r2, #8]
 800e1c4:	60da      	str	r2, [r3, #12]
 800e1c6:	4b21      	ldr	r3, [pc, #132]	; (800e24c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	689b      	ldr	r3, [r3, #8]
 800e1ce:	3204      	adds	r2, #4
 800e1d0:	605a      	str	r2, [r3, #4]
 800e1d2:	4b1e      	ldr	r3, [pc, #120]	; (800e24c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	1d1a      	adds	r2, r3, #4
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	609a      	str	r2, [r3, #8]
 800e1dc:	4b1b      	ldr	r3, [pc, #108]	; (800e24c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4a1b      	ldr	r2, [pc, #108]	; (800e250 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e1e2:	615a      	str	r2, [r3, #20]
 800e1e4:	4b1a      	ldr	r3, [pc, #104]	; (800e250 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	4a19      	ldr	r2, [pc, #100]	; (800e250 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e1ec:	6013      	str	r3, [r2, #0]
 800e1ee:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800e1f0:	e026      	b.n	800e240 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800e1f2:	697a      	ldr	r2, [r7, #20]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e1fa:	4b14      	ldr	r3, [pc, #80]	; (800e24c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	68fa      	ldr	r2, [r7, #12]
 800e200:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800e202:	68fa      	ldr	r2, [r7, #12]
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	429a      	cmp	r2, r3
 800e208:	d209      	bcs.n	800e21e <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e20a:	4b12      	ldr	r3, [pc, #72]	; (800e254 <prvAddCurrentTaskToDelayedList+0xd0>)
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	4b0f      	ldr	r3, [pc, #60]	; (800e24c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	3304      	adds	r3, #4
 800e214:	4619      	mov	r1, r3
 800e216:	4610      	mov	r0, r2
 800e218:	f7fe fe0f 	bl	800ce3a <vListInsert>
}
 800e21c:	e010      	b.n	800e240 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e21e:	4b0e      	ldr	r3, [pc, #56]	; (800e258 <prvAddCurrentTaskToDelayedList+0xd4>)
 800e220:	681a      	ldr	r2, [r3, #0]
 800e222:	4b0a      	ldr	r3, [pc, #40]	; (800e24c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	3304      	adds	r3, #4
 800e228:	4619      	mov	r1, r3
 800e22a:	4610      	mov	r0, r2
 800e22c:	f7fe fe05 	bl	800ce3a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800e230:	4b0a      	ldr	r3, [pc, #40]	; (800e25c <prvAddCurrentTaskToDelayedList+0xd8>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	429a      	cmp	r2, r3
 800e238:	d202      	bcs.n	800e240 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800e23a:	4a08      	ldr	r2, [pc, #32]	; (800e25c <prvAddCurrentTaskToDelayedList+0xd8>)
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6013      	str	r3, [r2, #0]
}
 800e240:	bf00      	nop
 800e242:	3718      	adds	r7, #24
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	20001910 	.word	0x20001910
 800e24c:	20001438 	.word	0x20001438
 800e250:	200018f8 	.word	0x200018f8
 800e254:	200018c8 	.word	0x200018c8
 800e258:	200018c4 	.word	0x200018c4
 800e25c:	2000192c 	.word	0x2000192c

0800e260 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800e260:	b580      	push	{r7, lr}
 800e262:	b088      	sub	sp, #32
 800e264:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800e266:	2300      	movs	r3, #0
 800e268:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800e26a:	f000 fa59 	bl	800e720 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800e26e:	4b18      	ldr	r3, [pc, #96]	; (800e2d0 <xTimerCreateTimerTask+0x70>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d020      	beq.n	800e2b8 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800e276:	2300      	movs	r3, #0
 800e278:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800e27a:	2300      	movs	r3, #0
 800e27c:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e27e:	463a      	mov	r2, r7
 800e280:	1d39      	adds	r1, r7, #4
 800e282:	f107 0308 	add.w	r3, r7, #8
 800e286:	4618      	mov	r0, r3
 800e288:	f7fe fd90 	bl	800cdac <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800e28c:	6839      	ldr	r1, [r7, #0]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	68ba      	ldr	r2, [r7, #8]
 800e292:	9202      	str	r2, [sp, #8]
 800e294:	9301      	str	r3, [sp, #4]
 800e296:	2302      	movs	r3, #2
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	2300      	movs	r3, #0
 800e29c:	460a      	mov	r2, r1
 800e29e:	490d      	ldr	r1, [pc, #52]	; (800e2d4 <xTimerCreateTimerTask+0x74>)
 800e2a0:	480d      	ldr	r0, [pc, #52]	; (800e2d8 <xTimerCreateTimerTask+0x78>)
 800e2a2:	f7ff f8cd 	bl	800d440 <xTaskCreateStatic>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	4a0c      	ldr	r2, [pc, #48]	; (800e2dc <xTimerCreateTimerTask+0x7c>)
 800e2aa:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800e2ac:	4b0b      	ldr	r3, [pc, #44]	; (800e2dc <xTimerCreateTimerTask+0x7c>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d001      	beq.n	800e2b8 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d102      	bne.n	800e2c4 <xTimerCreateTimerTask+0x64>
 800e2be:	f000 fbfb 	bl	800eab8 <ulSetInterruptMask>
 800e2c2:	e7fe      	b.n	800e2c2 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
    }
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3710      	adds	r7, #16
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	20001968 	.word	0x20001968
 800e2d4:	0800fb1c 	.word	0x0800fb1c
 800e2d8:	0800e385 	.word	0x0800e385
 800e2dc:	2000196c 	.word	0x2000196c

0800e2e0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e2ec:	e008      	b.n	800e300 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	699b      	ldr	r3, [r3, #24]
 800e2f2:	68ba      	ldr	r2, [r7, #8]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6a1b      	ldr	r3, [r3, #32]
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	699a      	ldr	r2, [r3, #24]
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	18d1      	adds	r1, r2, r3
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	68f8      	ldr	r0, [r7, #12]
 800e30e:	f000 f8d5 	bl	800e4bc <prvInsertTimerInActiveList>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d1ea      	bne.n	800e2ee <prvReloadTimer+0xe>
        }
    }
 800e318:	bf00      	nop
 800e31a:	bf00      	nop
 800e31c:	3710      	adds	r7, #16
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
	...

0800e324 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e32e:	4b14      	ldr	r3, [pc, #80]	; (800e380 <prvProcessExpiredTimer+0x5c>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	68db      	ldr	r3, [r3, #12]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	3304      	adds	r3, #4
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7fe fdb5 	bl	800ceac <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e348:	f003 0304 	and.w	r3, r3, #4
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d005      	beq.n	800e35c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800e350:	683a      	ldr	r2, [r7, #0]
 800e352:	6879      	ldr	r1, [r7, #4]
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f7ff ffc3 	bl	800e2e0 <prvReloadTimer>
 800e35a:	e008      	b.n	800e36e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e362:	f023 0301 	bic.w	r3, r3, #1
 800e366:	b2da      	uxtb	r2, r3
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	6a1b      	ldr	r3, [r3, #32]
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	4798      	blx	r3
    }
 800e376:	bf00      	nop
 800e378:	3710      	adds	r7, #16
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	20001960 	.word	0x20001960

0800e384 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e38c:	f107 0308 	add.w	r3, r7, #8
 800e390:	4618      	mov	r0, r3
 800e392:	f000 f84f 	bl	800e434 <prvGetNextExpireTime>
 800e396:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	4619      	mov	r1, r3
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f000 f803 	bl	800e3a8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800e3a2:	f000 f8cd 	bl	800e540 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e3a6:	e7f1      	b.n	800e38c <prvTimerTask+0x8>

0800e3a8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b084      	sub	sp, #16
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800e3b2:	f7ff f9f9 	bl	800d7a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e3b6:	f107 0308 	add.w	r3, r7, #8
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f000 f85e 	bl	800e47c <prvSampleTimeNow>
 800e3c0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d12a      	bne.n	800e41e <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d10a      	bne.n	800e3e4 <prvProcessTimerOrBlockTask+0x3c>
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d806      	bhi.n	800e3e4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800e3d6:	f7ff f9f5 	bl	800d7c4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e3da:	68f9      	ldr	r1, [r7, #12]
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7ff ffa1 	bl	800e324 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800e3e2:	e01e      	b.n	800e422 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d008      	beq.n	800e3fc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e3ea:	4b10      	ldr	r3, [pc, #64]	; (800e42c <prvProcessTimerOrBlockTask+0x84>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d101      	bne.n	800e3f8 <prvProcessTimerOrBlockTask+0x50>
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e000      	b.n	800e3fa <prvProcessTimerOrBlockTask+0x52>
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e3fc:	4b0c      	ldr	r3, [pc, #48]	; (800e430 <prvProcessTimerOrBlockTask+0x88>)
 800e3fe:	6818      	ldr	r0, [r3, #0]
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	1ad3      	subs	r3, r2, r3
 800e406:	683a      	ldr	r2, [r7, #0]
 800e408:	4619      	mov	r1, r3
 800e40a:	f7fe ffe5 	bl	800d3d8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800e40e:	f7ff f9d9 	bl	800d7c4 <xTaskResumeAll>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d104      	bne.n	800e422 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800e418:	f000 fa00 	bl	800e81c <vPortYield>
    }
 800e41c:	e001      	b.n	800e422 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800e41e:	f7ff f9d1 	bl	800d7c4 <xTaskResumeAll>
    }
 800e422:	bf00      	nop
 800e424:	3710      	adds	r7, #16
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	20001964 	.word	0x20001964
 800e430:	20001968 	.word	0x20001968

0800e434 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800e434:	b480      	push	{r7}
 800e436:	b085      	sub	sp, #20
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e43c:	4b0e      	ldr	r3, [pc, #56]	; (800e478 <prvGetNextExpireTime+0x44>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d101      	bne.n	800e44a <prvGetNextExpireTime+0x16>
 800e446:	2201      	movs	r2, #1
 800e448:	e000      	b.n	800e44c <prvGetNextExpireTime+0x18>
 800e44a:	2200      	movs	r2, #0
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d105      	bne.n	800e464 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e458:	4b07      	ldr	r3, [pc, #28]	; (800e478 <prvGetNextExpireTime+0x44>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	60fb      	str	r3, [r7, #12]
 800e462:	e001      	b.n	800e468 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800e464:	2300      	movs	r3, #0
 800e466:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800e468:	68fb      	ldr	r3, [r7, #12]
    }
 800e46a:	4618      	mov	r0, r3
 800e46c:	3714      	adds	r7, #20
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	20001960 	.word	0x20001960

0800e47c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800e484:	f7ff fa8a 	bl	800d99c <xTaskGetTickCount>
 800e488:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800e48a:	4b0b      	ldr	r3, [pc, #44]	; (800e4b8 <prvSampleTimeNow+0x3c>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	68fa      	ldr	r2, [r7, #12]
 800e490:	429a      	cmp	r2, r3
 800e492:	d205      	bcs.n	800e4a0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800e494:	f000 f91e 	bl	800e6d4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2201      	movs	r2, #1
 800e49c:	601a      	str	r2, [r3, #0]
 800e49e:	e002      	b.n	800e4a6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800e4a6:	4a04      	ldr	r2, [pc, #16]	; (800e4b8 <prvSampleTimeNow+0x3c>)
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
    }
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	20001970 	.word	0x20001970

0800e4bc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b086      	sub	sp, #24
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]
 800e4c8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	68ba      	ldr	r2, [r7, #8]
 800e4d2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	68fa      	ldr	r2, [r7, #12]
 800e4d8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800e4da:	68ba      	ldr	r2, [r7, #8]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d812      	bhi.n	800e508 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	1ad2      	subs	r2, r2, r3
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	699b      	ldr	r3, [r3, #24]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d302      	bcc.n	800e4f6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	617b      	str	r3, [r7, #20]
 800e4f4:	e01b      	b.n	800e52e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e4f6:	4b10      	ldr	r3, [pc, #64]	; (800e538 <prvInsertTimerInActiveList+0x7c>)
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	3304      	adds	r3, #4
 800e4fe:	4619      	mov	r1, r3
 800e500:	4610      	mov	r0, r2
 800e502:	f7fe fc9a 	bl	800ce3a <vListInsert>
 800e506:	e012      	b.n	800e52e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d206      	bcs.n	800e51e <prvInsertTimerInActiveList+0x62>
 800e510:	68ba      	ldr	r2, [r7, #8]
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	429a      	cmp	r2, r3
 800e516:	d302      	bcc.n	800e51e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800e518:	2301      	movs	r3, #1
 800e51a:	617b      	str	r3, [r7, #20]
 800e51c:	e007      	b.n	800e52e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e51e:	4b07      	ldr	r3, [pc, #28]	; (800e53c <prvInsertTimerInActiveList+0x80>)
 800e520:	681a      	ldr	r2, [r3, #0]
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	3304      	adds	r3, #4
 800e526:	4619      	mov	r1, r3
 800e528:	4610      	mov	r0, r2
 800e52a:	f7fe fc86 	bl	800ce3a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800e52e:	697b      	ldr	r3, [r7, #20]
    }
 800e530:	4618      	mov	r0, r3
 800e532:	3718      	adds	r7, #24
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}
 800e538:	20001964 	.word	0x20001964
 800e53c:	20001960 	.word	0x20001960

0800e540 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800e540:	b580      	push	{r7, lr}
 800e542:	b088      	sub	sp, #32
 800e544:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e546:	e0b2      	b.n	800e6ae <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	da10      	bge.n	800e570 <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e54e:	1d3b      	adds	r3, r7, #4
 800e550:	3304      	adds	r3, #4
 800e552:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d102      	bne.n	800e560 <prvProcessReceivedCommands+0x20>
 800e55a:	f000 faad 	bl	800eab8 <ulSetInterruptMask>
 800e55e:	e7fe      	b.n	800e55e <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	69fa      	ldr	r2, [r7, #28]
 800e566:	6850      	ldr	r0, [r2, #4]
 800e568:	69fa      	ldr	r2, [r7, #28]
 800e56a:	6892      	ldr	r2, [r2, #8]
 800e56c:	4611      	mov	r1, r2
 800e56e:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	f2c0 809b 	blt.w	800e6ae <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e57c:	69bb      	ldr	r3, [r7, #24]
 800e57e:	695b      	ldr	r3, [r3, #20]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d004      	beq.n	800e58e <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	3304      	adds	r3, #4
 800e588:	4618      	mov	r0, r3
 800e58a:	f7fe fc8f 	bl	800ceac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e58e:	463b      	mov	r3, r7
 800e590:	4618      	mov	r0, r3
 800e592:	f7ff ff73 	bl	800e47c <prvSampleTimeNow>
 800e596:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	3b01      	subs	r3, #1
 800e59c:	2b08      	cmp	r3, #8
 800e59e:	f200 8085 	bhi.w	800e6ac <prvProcessReceivedCommands+0x16c>
 800e5a2:	a201      	add	r2, pc, #4	; (adr r2, 800e5a8 <prvProcessReceivedCommands+0x68>)
 800e5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a8:	0800e5cd 	.word	0x0800e5cd
 800e5ac:	0800e5cd 	.word	0x0800e5cd
 800e5b0:	0800e635 	.word	0x0800e635
 800e5b4:	0800e649 	.word	0x0800e649
 800e5b8:	0800e683 	.word	0x0800e683
 800e5bc:	0800e5cd 	.word	0x0800e5cd
 800e5c0:	0800e5cd 	.word	0x0800e5cd
 800e5c4:	0800e635 	.word	0x0800e635
 800e5c8:	0800e649 	.word	0x0800e649
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5d2:	f043 0301 	orr.w	r3, r3, #1
 800e5d6:	b2da      	uxtb	r2, r3
 800e5d8:	69bb      	ldr	r3, [r7, #24]
 800e5da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e5de:	68ba      	ldr	r2, [r7, #8]
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	699b      	ldr	r3, [r3, #24]
 800e5e4:	18d1      	adds	r1, r2, r3
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	697a      	ldr	r2, [r7, #20]
 800e5ea:	69b8      	ldr	r0, [r7, #24]
 800e5ec:	f7ff ff66 	bl	800e4bc <prvInsertTimerInActiveList>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d05b      	beq.n	800e6ae <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5f6:	69bb      	ldr	r3, [r7, #24]
 800e5f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5fc:	f003 0304 	and.w	r3, r3, #4
 800e600:	2b00      	cmp	r3, #0
 800e602:	d009      	beq.n	800e618 <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800e604:	68ba      	ldr	r2, [r7, #8]
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	699b      	ldr	r3, [r3, #24]
 800e60a:	4413      	add	r3, r2
 800e60c:	697a      	ldr	r2, [r7, #20]
 800e60e:	4619      	mov	r1, r3
 800e610:	69b8      	ldr	r0, [r7, #24]
 800e612:	f7ff fe65 	bl	800e2e0 <prvReloadTimer>
 800e616:	e008      	b.n	800e62a <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e618:	69bb      	ldr	r3, [r7, #24]
 800e61a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e61e:	f023 0301 	bic.w	r3, r3, #1
 800e622:	b2da      	uxtb	r2, r3
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e62a:	69bb      	ldr	r3, [r7, #24]
 800e62c:	6a1b      	ldr	r3, [r3, #32]
 800e62e:	69b8      	ldr	r0, [r7, #24]
 800e630:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800e632:	e03c      	b.n	800e6ae <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e63a:	f023 0301 	bic.w	r3, r3, #1
 800e63e:	b2da      	uxtb	r2, r3
 800e640:	69bb      	ldr	r3, [r7, #24]
 800e642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800e646:	e032      	b.n	800e6ae <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e64e:	f043 0301 	orr.w	r3, r3, #1
 800e652:	b2da      	uxtb	r2, r3
 800e654:	69bb      	ldr	r3, [r7, #24]
 800e656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e65a:	68ba      	ldr	r2, [r7, #8]
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	699b      	ldr	r3, [r3, #24]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d102      	bne.n	800e66e <prvProcessReceivedCommands+0x12e>
 800e668:	f000 fa26 	bl	800eab8 <ulSetInterruptMask>
 800e66c:	e7fe      	b.n	800e66c <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	699a      	ldr	r2, [r3, #24]
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	18d1      	adds	r1, r2, r3
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	697a      	ldr	r2, [r7, #20]
 800e67a:	69b8      	ldr	r0, [r7, #24]
 800e67c:	f7ff ff1e 	bl	800e4bc <prvInsertTimerInActiveList>
                        break;
 800e680:	e015      	b.n	800e6ae <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e688:	f003 0302 	and.w	r3, r3, #2
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d103      	bne.n	800e698 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 800e690:	69b8      	ldr	r0, [r7, #24]
 800e692:	f000 fa71 	bl	800eb78 <vPortFree>
 800e696:	e00a      	b.n	800e6ae <prvProcessReceivedCommands+0x16e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e69e:	f023 0301 	bic.w	r3, r3, #1
 800e6a2:	b2da      	uxtb	r2, r3
 800e6a4:	69bb      	ldr	r3, [r7, #24]
 800e6a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800e6aa:	e000      	b.n	800e6ae <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800e6ac:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6ae:	4b08      	ldr	r3, [pc, #32]	; (800e6d0 <prvProcessReceivedCommands+0x190>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	1d39      	adds	r1, r7, #4
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fe fd02 	bl	800d0c0 <xQueueReceive>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	f47f af42 	bne.w	800e548 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800e6c4:	bf00      	nop
 800e6c6:	bf00      	nop
 800e6c8:	3720      	adds	r7, #32
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	20001968 	.word	0x20001968

0800e6d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e6da:	e009      	b.n	800e6f0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e6dc:	4b0e      	ldr	r3, [pc, #56]	; (800e718 <prvSwitchTimerLists+0x44>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800e6e6:	f04f 31ff 	mov.w	r1, #4294967295
 800e6ea:	6838      	ldr	r0, [r7, #0]
 800e6ec:	f7ff fe1a 	bl	800e324 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e6f0:	4b09      	ldr	r3, [pc, #36]	; (800e718 <prvSwitchTimerLists+0x44>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1f0      	bne.n	800e6dc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800e6fa:	4b07      	ldr	r3, [pc, #28]	; (800e718 <prvSwitchTimerLists+0x44>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800e700:	4b06      	ldr	r3, [pc, #24]	; (800e71c <prvSwitchTimerLists+0x48>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4a04      	ldr	r2, [pc, #16]	; (800e718 <prvSwitchTimerLists+0x44>)
 800e706:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800e708:	4a04      	ldr	r2, [pc, #16]	; (800e71c <prvSwitchTimerLists+0x48>)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6013      	str	r3, [r2, #0]
    }
 800e70e:	bf00      	nop
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	20001960 	.word	0x20001960
 800e71c:	20001964 	.word	0x20001964

0800e720 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800e726:	f000 f88b 	bl	800e840 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800e72a:	4b15      	ldr	r3, [pc, #84]	; (800e780 <prvCheckForValidListAndQueue+0x60>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d120      	bne.n	800e774 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800e732:	4814      	ldr	r0, [pc, #80]	; (800e784 <prvCheckForValidListAndQueue+0x64>)
 800e734:	f7fe fb54 	bl	800cde0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800e738:	4813      	ldr	r0, [pc, #76]	; (800e788 <prvCheckForValidListAndQueue+0x68>)
 800e73a:	f7fe fb51 	bl	800cde0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800e73e:	4b13      	ldr	r3, [pc, #76]	; (800e78c <prvCheckForValidListAndQueue+0x6c>)
 800e740:	4a10      	ldr	r2, [pc, #64]	; (800e784 <prvCheckForValidListAndQueue+0x64>)
 800e742:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800e744:	4b12      	ldr	r3, [pc, #72]	; (800e790 <prvCheckForValidListAndQueue+0x70>)
 800e746:	4a10      	ldr	r2, [pc, #64]	; (800e788 <prvCheckForValidListAndQueue+0x68>)
 800e748:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e74a:	2300      	movs	r3, #0
 800e74c:	9300      	str	r3, [sp, #0]
 800e74e:	4b11      	ldr	r3, [pc, #68]	; (800e794 <prvCheckForValidListAndQueue+0x74>)
 800e750:	4a11      	ldr	r2, [pc, #68]	; (800e798 <prvCheckForValidListAndQueue+0x78>)
 800e752:	2110      	movs	r1, #16
 800e754:	200a      	movs	r0, #10
 800e756:	f7fe fc4a 	bl	800cfee <xQueueGenericCreateStatic>
 800e75a:	4603      	mov	r3, r0
 800e75c:	4a08      	ldr	r2, [pc, #32]	; (800e780 <prvCheckForValidListAndQueue+0x60>)
 800e75e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800e760:	4b07      	ldr	r3, [pc, #28]	; (800e780 <prvCheckForValidListAndQueue+0x60>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d005      	beq.n	800e774 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e768:	4b05      	ldr	r3, [pc, #20]	; (800e780 <prvCheckForValidListAndQueue+0x60>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	490b      	ldr	r1, [pc, #44]	; (800e79c <prvCheckForValidListAndQueue+0x7c>)
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fe fdee 	bl	800d350 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800e774:	f000 f876 	bl	800e864 <vPortExitCritical>
    }
 800e778:	bf00      	nop
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	20001968 	.word	0x20001968
 800e784:	20001938 	.word	0x20001938
 800e788:	2000194c 	.word	0x2000194c
 800e78c:	20001960 	.word	0x20001960
 800e790:	20001964 	.word	0x20001964
 800e794:	20001a14 	.word	0x20001a14
 800e798:	20001974 	.word	0x20001974
 800e79c:	0800fb24 	.word	0x0800fb24

0800e7a0 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e7a4:	4b0b      	ldr	r3, [pc, #44]	; (800e7d4 <vPortSetupTimerInterrupt+0x34>)
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e7aa:	4b0b      	ldr	r3, [pc, #44]	; (800e7d8 <vPortSetupTimerInterrupt+0x38>)
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e7b0:	4b0a      	ldr	r3, [pc, #40]	; (800e7dc <vPortSetupTimerInterrupt+0x3c>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4a0a      	ldr	r2, [pc, #40]	; (800e7e0 <vPortSetupTimerInterrupt+0x40>)
 800e7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800e7ba:	099b      	lsrs	r3, r3, #6
 800e7bc:	4a09      	ldr	r2, [pc, #36]	; (800e7e4 <vPortSetupTimerInterrupt+0x44>)
 800e7be:	3b01      	subs	r3, #1
 800e7c0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800e7c2:	4b04      	ldr	r3, [pc, #16]	; (800e7d4 <vPortSetupTimerInterrupt+0x34>)
 800e7c4:	2207      	movs	r2, #7
 800e7c6:	601a      	str	r2, [r3, #0]
}
 800e7c8:	bf00      	nop
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	e000e010 	.word	0xe000e010
 800e7d8:	e000e018 	.word	0xe000e018
 800e7dc:	2000000c 	.word	0x2000000c
 800e7e0:	10624dd3 	.word	0x10624dd3
 800e7e4:	e000e014 	.word	0xe000e014

0800e7e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800e7f2:	4b09      	ldr	r3, [pc, #36]	; (800e818 <prvTaskExitError+0x30>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7fa:	d002      	beq.n	800e802 <prvTaskExitError+0x1a>
 800e7fc:	f000 f95c 	bl	800eab8 <ulSetInterruptMask>
 800e800:	e7fe      	b.n	800e800 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800e802:	f000 f959 	bl	800eab8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800e806:	bf00      	nop
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d0fc      	beq.n	800e808 <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800e80e:	bf00      	nop
 800e810:	bf00      	nop
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	20000050 	.word	0x20000050

0800e81c <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800e81c:	b480      	push	{r7}
 800e81e:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e820:	4b06      	ldr	r3, [pc, #24]	; (800e83c <vPortYield+0x20>)
 800e822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e826:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800e828:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800e82c:	f3bf 8f6f 	isb	sy
}
 800e830:	bf00      	nop
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop
 800e83c:	e000ed04 	.word	0xe000ed04

0800e840 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800e840:	b580      	push	{r7, lr}
 800e842:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800e844:	f000 f938 	bl	800eab8 <ulSetInterruptMask>
    ulCriticalNesting++;
 800e848:	4b05      	ldr	r3, [pc, #20]	; (800e860 <vPortEnterCritical+0x20>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	3301      	adds	r3, #1
 800e84e:	4a04      	ldr	r2, [pc, #16]	; (800e860 <vPortEnterCritical+0x20>)
 800e850:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800e852:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800e856:	f3bf 8f6f 	isb	sy
}
 800e85a:	bf00      	nop
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	20000050 	.word	0x20000050

0800e864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800e864:	b580      	push	{r7, lr}
 800e866:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800e868:	4b0a      	ldr	r3, [pc, #40]	; (800e894 <vPortExitCritical+0x30>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d102      	bne.n	800e876 <vPortExitCritical+0x12>
 800e870:	f000 f922 	bl	800eab8 <ulSetInterruptMask>
 800e874:	e7fe      	b.n	800e874 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800e876:	4b07      	ldr	r3, [pc, #28]	; (800e894 <vPortExitCritical+0x30>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	3b01      	subs	r3, #1
 800e87c:	4a05      	ldr	r2, [pc, #20]	; (800e894 <vPortExitCritical+0x30>)
 800e87e:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800e880:	4b04      	ldr	r3, [pc, #16]	; (800e894 <vPortExitCritical+0x30>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d102      	bne.n	800e88e <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 800e888:	2000      	movs	r0, #0
 800e88a:	f000 f922 	bl	800ead2 <vClearInterruptMask>
    }
}
 800e88e:	bf00      	nop
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	20000050 	.word	0x20000050

0800e898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e89e:	f000 f90b 	bl	800eab8 <ulSetInterruptMask>
 800e8a2:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800e8a4:	f7ff f88a 	bl	800d9bc <xTaskIncrementTick>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d003      	beq.n	800e8b6 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e8ae:	4b05      	ldr	r3, [pc, #20]	; (800e8c4 <xPortSysTickHandler+0x2c>)
 800e8b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8b4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f000 f90b 	bl	800ead2 <vClearInterruptMask>
}
 800e8bc:	bf00      	nop
 800e8be:	3708      	adds	r7, #8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	e000ed04 	.word	0xe000ed04

0800e8c8 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	699b      	ldr	r3, [r3, #24]
 800e8d4:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	3b02      	subs	r3, #2
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800e8de:	7afb      	ldrb	r3, [r7, #11]
 800e8e0:	2b02      	cmp	r3, #2
 800e8e2:	d102      	bne.n	800e8ea <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800e8e4:	f000 f8b4 	bl	800ea50 <vRestoreContextOfFirstTask>
            break;
 800e8e8:	e002      	b.n	800e8f0 <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800e8ea:	f000 f8e5 	bl	800eab8 <ulSetInterruptMask>
 800e8ee:	e7fe      	b.n	800e8ee <vPortSVCHandler_C+0x26>
    }
}
 800e8f0:	bf00      	nop
 800e8f2:	3710      	adds	r7, #16
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b085      	sub	sp, #20
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	607a      	str	r2, [r7, #4]
 800e904:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	3b04      	subs	r3, #4
 800e90a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e912:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	3b04      	subs	r3, #4
 800e918:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	3b04      	subs	r3, #4
 800e924:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800e926:	4a38      	ldr	r2, [pc, #224]	; (800ea08 <pxPortInitialiseStack+0x110>)
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	3b04      	subs	r3, #4
 800e930:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800e938:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	3b04      	subs	r3, #4
 800e93e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800e946:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	3b04      	subs	r3, #4
 800e94c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800e954:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	3b04      	subs	r3, #4
 800e95a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800e962:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	3b04      	subs	r3, #4
 800e968:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800e96a:	683a      	ldr	r2, [r7, #0]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	3b04      	subs	r3, #4
 800e974:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800e97c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	3b04      	subs	r3, #4
 800e982:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800e98a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	3b04      	subs	r3, #4
 800e990:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800e998:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	3b04      	subs	r3, #4
 800e99e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800e9a6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	3b04      	subs	r3, #4
 800e9ac:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800e9b4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	3b04      	subs	r3, #4
 800e9ba:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800e9c2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	3b04      	subs	r3, #4
 800e9c8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800e9d0:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	3b04      	subs	r3, #4
 800e9d6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800e9de:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	3b04      	subs	r3, #4
 800e9e4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800e9ec:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	3b04      	subs	r3, #4
 800e9f2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800e9f4:	68ba      	ldr	r2, [r7, #8]
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3714      	adds	r7, #20
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr
 800ea08:	0800e7e9 	.word	0x0800e7e9

0800ea0c <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800ea10:	4b0c      	ldr	r3, [pc, #48]	; (800ea44 <xPortStartScheduler+0x38>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a0b      	ldr	r2, [pc, #44]	; (800ea44 <xPortStartScheduler+0x38>)
 800ea16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea1a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800ea1c:	4b09      	ldr	r3, [pc, #36]	; (800ea44 <xPortStartScheduler+0x38>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4a08      	ldr	r2, [pc, #32]	; (800ea44 <xPortStartScheduler+0x38>)
 800ea22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea26:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800ea28:	f7ff feba 	bl	800e7a0 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800ea2c:	4b06      	ldr	r3, [pc, #24]	; (800ea48 <xPortStartScheduler+0x3c>)
 800ea2e:	2200      	movs	r2, #0
 800ea30:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800ea32:	f000 f82d 	bl	800ea90 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800ea36:	f7ff f8d1 	bl	800dbdc <vTaskSwitchContext>
    prvTaskExitError();
 800ea3a:	f7ff fed5 	bl	800e7e8 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800ea3e:	2300      	movs	r3, #0
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	e000ed20 	.word	0xe000ed20
 800ea48:	20000050 	.word	0x20000050
 800ea4c:	00000000 	.word	0x00000000

0800ea50 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ea50:	4a0b      	ldr	r2, [pc, #44]	; (800ea80 <pxCurrentTCBConst2>)
 800ea52:	6811      	ldr	r1, [r2, #0]
 800ea54:	6808      	ldr	r0, [r1, #0]
 800ea56:	c806      	ldmia	r0!, {r1, r2}
 800ea58:	f381 880b 	msr	PSPLIM, r1
 800ea5c:	2102      	movs	r1, #2
 800ea5e:	f381 8814 	msr	CONTROL, r1
 800ea62:	3020      	adds	r0, #32
 800ea64:	f380 8809 	msr	PSP, r0
 800ea68:	f3bf 8f6f 	isb	sy
 800ea6c:	f04f 0000 	mov.w	r0, #0
 800ea70:	f380 8811 	msr	BASEPRI, r0
 800ea74:	4710      	bx	r2
 800ea76:	bf00      	nop
 800ea78:	f3af 8000 	nop.w
 800ea7c:	f3af 8000 	nop.w

0800ea80 <pxCurrentTCBConst2>:
 800ea80:	20001438 	.word	0x20001438
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800ea84:	bf00      	nop
 800ea86:	bf00      	nop
	...

0800ea90 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ea90:	4807      	ldr	r0, [pc, #28]	; (800eab0 <xVTORConst>)
 800ea92:	6800      	ldr	r0, [r0, #0]
 800ea94:	6800      	ldr	r0, [r0, #0]
 800ea96:	f380 8808 	msr	MSP, r0
 800ea9a:	b662      	cpsie	i
 800ea9c:	b661      	cpsie	f
 800ea9e:	f3bf 8f4f 	dsb	sy
 800eaa2:	f3bf 8f6f 	isb	sy
 800eaa6:	df02      	svc	2
 800eaa8:	bf00      	nop
 800eaaa:	bf00      	nop
 800eaac:	f3af 8000 	nop.w

0800eab0 <xVTORConst>:
 800eab0:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800eab4:	bf00      	nop
 800eab6:	bf00      	nop

0800eab8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800eab8:	f3ef 8011 	mrs	r0, BASEPRI
 800eabc:	f04f 0150 	mov.w	r1, #80	; 0x50
 800eac0:	f381 8811 	msr	BASEPRI, r1
 800eac4:	f3bf 8f4f 	dsb	sy
 800eac8:	f3bf 8f6f 	isb	sy
 800eacc:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800eace:	bf00      	nop
 800ead0:	4618      	mov	r0, r3

0800ead2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ead2:	f380 8811 	msr	BASEPRI, r0
 800ead6:	f3bf 8f4f 	dsb	sy
 800eada:	f3bf 8f6f 	isb	sy
 800eade:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800eae0:	bf00      	nop
	...

0800eaf0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800eaf0:	f3ef 8009 	mrs	r0, PSP
 800eaf4:	f3ef 820b 	mrs	r2, PSPLIM
 800eaf8:	4673      	mov	r3, lr
 800eafa:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800eafe:	4a10      	ldr	r2, [pc, #64]	; (800eb40 <pxCurrentTCBConst>)
 800eb00:	6811      	ldr	r1, [r2, #0]
 800eb02:	6008      	str	r0, [r1, #0]
 800eb04:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eb08:	f380 8811 	msr	BASEPRI, r0
 800eb0c:	f3bf 8f4f 	dsb	sy
 800eb10:	f3bf 8f6f 	isb	sy
 800eb14:	f7ff f862 	bl	800dbdc <vTaskSwitchContext>
 800eb18:	f04f 0000 	mov.w	r0, #0
 800eb1c:	f380 8811 	msr	BASEPRI, r0
 800eb20:	4a07      	ldr	r2, [pc, #28]	; (800eb40 <pxCurrentTCBConst>)
 800eb22:	6811      	ldr	r1, [r2, #0]
 800eb24:	6808      	ldr	r0, [r1, #0]
 800eb26:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800eb2a:	f382 880b 	msr	PSPLIM, r2
 800eb2e:	f380 8809 	msr	PSP, r0
 800eb32:	4718      	bx	r3
 800eb34:	f3af 8000 	nop.w
 800eb38:	f3af 8000 	nop.w
 800eb3c:	f3af 8000 	nop.w

0800eb40 <pxCurrentTCBConst>:
 800eb40:	20001438 	.word	0x20001438
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800eb44:	bf00      	nop
 800eb46:	bf00      	nop
	...

0800eb50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800eb50:	f01e 0f04 	tst.w	lr, #4
 800eb54:	bf0c      	ite	eq
 800eb56:	f3ef 8008 	mrseq	r0, MSP
 800eb5a:	f3ef 8009 	mrsne	r0, PSP
 800eb5e:	4904      	ldr	r1, [pc, #16]	; (800eb70 <svchandler_address_const>)
 800eb60:	4708      	bx	r1
 800eb62:	bf00      	nop
 800eb64:	f3af 8000 	nop.w
 800eb68:	f3af 8000 	nop.w
 800eb6c:	f3af 8000 	nop.w

0800eb70 <svchandler_address_const>:
 800eb70:	0800e8c9 	.word	0x0800e8c9
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800eb74:	bf00      	nop
 800eb76:	bf00      	nop

0800eb78 <vPortFree>:
    return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d039      	beq.n	800ebfe <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800eb8a:	2308      	movs	r3, #8
 800eb8c:	425b      	negs	r3, r3
 800eb8e:	68fa      	ldr	r2, [r7, #12]
 800eb90:	4413      	add	r3, r2
 800eb92:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	db02      	blt.n	800eba6 <vPortFree+0x2e>
 800eba0:	f7ff ff8a 	bl	800eab8 <ulSetInterruptMask>
 800eba4:	e7fe      	b.n	800eba4 <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d002      	beq.n	800ebb4 <vPortFree+0x3c>
 800ebae:	f7ff ff83 	bl	800eab8 <ulSetInterruptMask>
 800ebb2:	e7fe      	b.n	800ebb2 <vPortFree+0x3a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	0fdb      	lsrs	r3, r3, #31
 800ebba:	f003 0301 	and.w	r3, r3, #1
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d01c      	beq.n	800ebfe <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d118      	bne.n	800ebfe <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800ebd8:	f7fe fde6 	bl	800d7a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	685a      	ldr	r2, [r3, #4]
 800ebe0:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <vPortFree+0x90>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4413      	add	r3, r2
 800ebe6:	4a08      	ldr	r2, [pc, #32]	; (800ec08 <vPortFree+0x90>)
 800ebe8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ebea:	68b8      	ldr	r0, [r7, #8]
 800ebec:	f000 f810 	bl	800ec10 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800ebf0:	4b06      	ldr	r3, [pc, #24]	; (800ec0c <vPortFree+0x94>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	4a05      	ldr	r2, [pc, #20]	; (800ec0c <vPortFree+0x94>)
 800ebf8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800ebfa:	f7fe fde3 	bl	800d7c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800ebfe:	bf00      	nop
 800ec00:	3710      	adds	r7, #16
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	20001a70 	.word	0x20001a70
 800ec0c:	20001a74 	.word	0x20001a74

0800ec10 <prvInsertBlockIntoFreeList>:
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800ec10:	b480      	push	{r7}
 800ec12:	b085      	sub	sp, #20
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec18:	4b28      	ldr	r3, [pc, #160]	; (800ecbc <prvInsertBlockIntoFreeList+0xac>)
 800ec1a:	60fb      	str	r3, [r7, #12]
 800ec1c:	e002      	b.n	800ec24 <prvInsertBlockIntoFreeList+0x14>
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	60fb      	str	r3, [r7, #12]
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d8f7      	bhi.n	800ec1e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	68ba      	ldr	r2, [r7, #8]
 800ec38:	4413      	add	r3, r2
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d108      	bne.n	800ec52 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	685a      	ldr	r2, [r3, #4]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	441a      	add	r2, r3
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	68ba      	ldr	r2, [r7, #8]
 800ec5c:	441a      	add	r2, r3
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d118      	bne.n	800ec98 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	4b15      	ldr	r3, [pc, #84]	; (800ecc0 <prvInsertBlockIntoFreeList+0xb0>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d00d      	beq.n	800ec8e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	685a      	ldr	r2, [r3, #4]
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	441a      	add	r2, r3
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	601a      	str	r2, [r3, #0]
 800ec8c:	e008      	b.n	800eca0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec8e:	4b0c      	ldr	r3, [pc, #48]	; (800ecc0 <prvInsertBlockIntoFreeList+0xb0>)
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	601a      	str	r2, [r3, #0]
 800ec96:	e003      	b.n	800eca0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800eca0:	68fa      	ldr	r2, [r7, #12]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d002      	beq.n	800ecae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ecae:	bf00      	nop
 800ecb0:	3714      	adds	r7, #20
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop
 800ecbc:	20001a64 	.word	0x20001a64
 800ecc0:	20001a6c 	.word	0x20001a6c

0800ecc4 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d005      	beq.n	800ece2 <lwrb_init+0x1e>
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d002      	beq.n	800ece2 <lwrb_init+0x1e>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d101      	bne.n	800ece6 <lwrb_init+0x22>
        return 0;
 800ece2:	2300      	movs	r3, #0
 800ece4:	e00b      	b.n	800ecfe <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 800ece6:	2214      	movs	r2, #20
 800ece8:	2100      	movs	r1, #0
 800ecea:	68f8      	ldr	r0, [r7, #12]
 800ecec:	f000 fa5c 	bl	800f1a8 <memset>

    buff->size = size;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	68ba      	ldr	r2, [r7, #8]
 800ecfa:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 800ecfc:	2301      	movs	r3, #1
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3710      	adds	r7, #16
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 800ed06:	b480      	push	{r7}
 800ed08:	b083      	sub	sp, #12
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	6078      	str	r0, [r7, #4]
 800ed0e:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d00a      	beq.n	800ed2c <lwrb_set_evt_fn+0x26>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d006      	beq.n	800ed2c <lwrb_set_evt_fn+0x26>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d002      	beq.n	800ed2c <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	683a      	ldr	r2, [r7, #0]
 800ed2a:	611a      	str	r2, [r3, #16]
    }
}
 800ed2c:	bf00      	nop
 800ed2e:	370c      	adds	r7, #12
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr

0800ed38 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b088      	sub	sp, #32
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	60f8      	str	r0, [r7, #12]
 800ed40:	60b9      	str	r1, [r7, #8]
 800ed42:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	61bb      	str	r3, [r7, #24]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d00d      	beq.n	800ed6a <lwrb_write+0x32>
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d009      	beq.n	800ed6a <lwrb_write+0x32>
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	685b      	ldr	r3, [r3, #4]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d005      	beq.n	800ed6a <lwrb_write+0x32>
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d002      	beq.n	800ed6a <lwrb_write+0x32>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d101      	bne.n	800ed6e <lwrb_write+0x36>
        return 0;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	e059      	b.n	800ee22 <lwrb_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 800ed6e:	68f8      	ldr	r0, [r7, #12]
 800ed70:	f000 f85b 	bl	800ee2a <lwrb_get_free>
 800ed74:	61f8      	str	r0, [r7, #28]

		if (free < btw) {
 800ed76:	69fa      	ldr	r2, [r7, #28]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d20d      	bcs.n	800ed9a <lwrb_write+0x62>
			BUF_SEND_EVT(buff, LWRB_EVT_FULL, free);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	691b      	ldr	r3, [r3, #16]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d005      	beq.n	800ed92 <lwrb_write+0x5a>
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	691b      	ldr	r3, [r3, #16]
 800ed8a:	69fa      	ldr	r2, [r7, #28]
 800ed8c:	2102      	movs	r1, #2
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	4798      	blx	r3
			free = lwrb_get_free(buff);
 800ed92:	68f8      	ldr	r0, [r7, #12]
 800ed94:	f000 f849 	bl	800ee2a <lwrb_get_free>
 800ed98:	61f8      	str	r0, [r7, #28]
		}
		
    btw = BUF_MIN(free, btw);
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	bf28      	it	cs
 800eda2:	4613      	movcs	r3, r2
 800eda4:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d101      	bne.n	800edb0 <lwrb_write+0x78>
        return 0;
 800edac:	2300      	movs	r3, #0
 800edae:	e038      	b.n	800ee22 <lwrb_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	685a      	ldr	r2, [r3, #4]
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	1ad3      	subs	r3, r2, r3
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	4293      	cmp	r3, r2
 800edbe:	bf28      	it	cs
 800edc0:	4613      	movcs	r3, r2
 800edc2:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	68db      	ldr	r3, [r3, #12]
 800edcc:	4413      	add	r3, r2
 800edce:	697a      	ldr	r2, [r7, #20]
 800edd0:	69b9      	ldr	r1, [r7, #24]
 800edd2:	4618      	mov	r0, r3
 800edd4:	f000 fa40 	bl	800f258 <memcpy>
    buff->w += tocopy;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	68da      	ldr	r2, [r3, #12]
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	441a      	add	r2, r3
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d00b      	beq.n	800ee0a <lwrb_write+0xd2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	6818      	ldr	r0, [r3, #0]
 800edf6:	69ba      	ldr	r2, [r7, #24]
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	4413      	add	r3, r2
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	4619      	mov	r1, r3
 800ee00:	f000 fa2a 	bl	800f258 <memcpy>
        buff->w = btw;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	687a      	ldr	r2, [r7, #4]
 800ee08:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	68da      	ldr	r2, [r3, #12]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d302      	bcc.n	800ee1c <lwrb_write+0xe4>
        buff->w = 0;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	60da      	str	r2, [r3, #12]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
    return tocopy + btw;
 800ee1c:	697a      	ldr	r2, [r7, #20]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4413      	add	r3, r2
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3720      	adds	r7, #32
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}

0800ee2a <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 800ee2a:	b480      	push	{r7}
 800ee2c:	b087      	sub	sp, #28
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d007      	beq.n	800ee48 <lwrb_get_free+0x1e>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d003      	beq.n	800ee48 <lwrb_get_free+0x1e>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d101      	bne.n	800ee4c <lwrb_get_free+0x22>
        return 0;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	e01f      	b.n	800ee8c <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	68db      	ldr	r3, [r3, #12]
 800ee50:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800ee58:	693a      	ldr	r2, [r7, #16]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d103      	bne.n	800ee68 <lwrb_get_free+0x3e>
        size = buff->size;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	617b      	str	r3, [r7, #20]
 800ee66:	e00f      	b.n	800ee88 <lwrb_get_free+0x5e>
    } else if (r > w) {
 800ee68:	68fa      	ldr	r2, [r7, #12]
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d904      	bls.n	800ee7a <lwrb_get_free+0x50>
        size = r - w;
 800ee70:	68fa      	ldr	r2, [r7, #12]
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	1ad3      	subs	r3, r2, r3
 800ee76:	617b      	str	r3, [r7, #20]
 800ee78:	e006      	b.n	800ee88 <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	685a      	ldr	r2, [r3, #4]
 800ee7e:	68f9      	ldr	r1, [r7, #12]
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	1acb      	subs	r3, r1, r3
 800ee84:	4413      	add	r3, r2
 800ee86:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	3b01      	subs	r3, #1
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	371c      	adds	r7, #28
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 800ee98:	b480      	push	{r7}
 800ee9a:	b087      	sub	sp, #28
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d007      	beq.n	800eeb6 <lwrb_get_full+0x1e>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d003      	beq.n	800eeb6 <lwrb_get_full+0x1e>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d101      	bne.n	800eeba <lwrb_get_full+0x22>
        return 0;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	e01d      	b.n	800eef6 <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	689b      	ldr	r3, [r3, #8]
 800eec4:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800eec6:	693a      	ldr	r2, [r7, #16]
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d102      	bne.n	800eed4 <lwrb_get_full+0x3c>
        size = 0;
 800eece:	2300      	movs	r3, #0
 800eed0:	617b      	str	r3, [r7, #20]
 800eed2:	e00f      	b.n	800eef4 <lwrb_get_full+0x5c>
    } else if (w > r) {
 800eed4:	693a      	ldr	r2, [r7, #16]
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d904      	bls.n	800eee6 <lwrb_get_full+0x4e>
        size = w - r;
 800eedc:	693a      	ldr	r2, [r7, #16]
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	1ad3      	subs	r3, r2, r3
 800eee2:	617b      	str	r3, [r7, #20]
 800eee4:	e006      	b.n	800eef4 <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	685a      	ldr	r2, [r3, #4]
 800eeea:	6939      	ldr	r1, [r7, #16]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	1acb      	subs	r3, r1, r3
 800eef0:	4413      	add	r3, r2
 800eef2:	617b      	str	r3, [r7, #20]
    }
    return size;
 800eef4:	697b      	ldr	r3, [r7, #20]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	371c      	adds	r7, #28
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr

0800ef02 <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 800ef02:	b480      	push	{r7}
 800ef04:	b083      	sub	sp, #12
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d007      	beq.n	800ef20 <lwrb_get_linear_block_read_address+0x1e>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d003      	beq.n	800ef20 <lwrb_get_linear_block_read_address+0x1e>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d101      	bne.n	800ef24 <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 800ef20:	2300      	movs	r3, #0
 800ef22:	e004      	b.n	800ef2e <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681a      	ldr	r2, [r3, #0]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	689b      	ldr	r3, [r3, #8]
 800ef2c:	4413      	add	r3, r2
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	370c      	adds	r7, #12
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr

0800ef3a <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 800ef3a:	b480      	push	{r7}
 800ef3c:	b087      	sub	sp, #28
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d007      	beq.n	800ef58 <lwrb_get_linear_block_read_length+0x1e>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d003      	beq.n	800ef58 <lwrb_get_linear_block_read_length+0x1e>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d101      	bne.n	800ef5c <lwrb_get_linear_block_read_length+0x22>
        return 0;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	e01b      	b.n	800ef94 <lwrb_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	68db      	ldr	r3, [r3, #12]
 800ef60:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	689b      	ldr	r3, [r3, #8]
 800ef66:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 800ef68:	693a      	ldr	r2, [r7, #16]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d904      	bls.n	800ef7a <lwrb_get_linear_block_read_length+0x40>
        len = w - r;
 800ef70:	693a      	ldr	r2, [r7, #16]
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	1ad3      	subs	r3, r2, r3
 800ef76:	617b      	str	r3, [r7, #20]
 800ef78:	e00b      	b.n	800ef92 <lwrb_get_linear_block_read_length+0x58>
    } else if (r > w) {
 800ef7a:	68fa      	ldr	r2, [r7, #12]
 800ef7c:	693b      	ldr	r3, [r7, #16]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d905      	bls.n	800ef8e <lwrb_get_linear_block_read_length+0x54>
        len = buff->size - r;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	685a      	ldr	r2, [r3, #4]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	1ad3      	subs	r3, r2, r3
 800ef8a:	617b      	str	r3, [r7, #20]
 800ef8c:	e001      	b.n	800ef92 <lwrb_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	617b      	str	r3, [r7, #20]
    }
    return len;
 800ef92:	697b      	ldr	r3, [r7, #20]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	371c      	adds	r7, #28
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr

0800efa0 <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d00a      	beq.n	800efc6 <lwrb_skip+0x26>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d006      	beq.n	800efc6 <lwrb_skip+0x26>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d002      	beq.n	800efc6 <lwrb_skip+0x26>
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d101      	bne.n	800efca <lwrb_skip+0x2a>
        return 0;
 800efc6:	2300      	movs	r3, #0
 800efc8:	e01d      	b.n	800f006 <lwrb_skip+0x66>
    }

    full = lwrb_get_full(buff);
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f7ff ff64 	bl	800ee98 <lwrb_get_full>
 800efd0:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 800efd2:	683a      	ldr	r2, [r7, #0]
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	4293      	cmp	r3, r2
 800efd8:	bf28      	it	cs
 800efda:	4613      	movcs	r3, r2
 800efdc:	603b      	str	r3, [r7, #0]
    buff->r += len;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	689a      	ldr	r2, [r3, #8]
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	441a      	add	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	689a      	ldr	r2, [r3, #8]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	685b      	ldr	r3, [r3, #4]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d306      	bcc.n	800f004 <lwrb_skip+0x64>
        buff->r -= buff->size;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	689a      	ldr	r2, [r3, #8]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	1ad2      	subs	r2, r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	609a      	str	r2, [r3, #8]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
    return len;
 800f004:	683b      	ldr	r3, [r7, #0]
}
 800f006:	4618      	mov	r0, r3
 800f008:	3710      	adds	r7, #16
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
	...

0800f010 <sbrk_aligned>:
 800f010:	b570      	push	{r4, r5, r6, lr}
 800f012:	4e0e      	ldr	r6, [pc, #56]	; (800f04c <sbrk_aligned+0x3c>)
 800f014:	460c      	mov	r4, r1
 800f016:	4605      	mov	r5, r0
 800f018:	6831      	ldr	r1, [r6, #0]
 800f01a:	b911      	cbnz	r1, 800f022 <sbrk_aligned+0x12>
 800f01c:	f000 f8e0 	bl	800f1e0 <_sbrk_r>
 800f020:	6030      	str	r0, [r6, #0]
 800f022:	4621      	mov	r1, r4
 800f024:	4628      	mov	r0, r5
 800f026:	f000 f8db 	bl	800f1e0 <_sbrk_r>
 800f02a:	1c43      	adds	r3, r0, #1
 800f02c:	d00a      	beq.n	800f044 <sbrk_aligned+0x34>
 800f02e:	1cc4      	adds	r4, r0, #3
 800f030:	f024 0403 	bic.w	r4, r4, #3
 800f034:	42a0      	cmp	r0, r4
 800f036:	d007      	beq.n	800f048 <sbrk_aligned+0x38>
 800f038:	1a21      	subs	r1, r4, r0
 800f03a:	4628      	mov	r0, r5
 800f03c:	f000 f8d0 	bl	800f1e0 <_sbrk_r>
 800f040:	3001      	adds	r0, #1
 800f042:	d101      	bne.n	800f048 <sbrk_aligned+0x38>
 800f044:	f04f 34ff 	mov.w	r4, #4294967295
 800f048:	4620      	mov	r0, r4
 800f04a:	bd70      	pop	{r4, r5, r6, pc}
 800f04c:	20001a7c 	.word	0x20001a7c

0800f050 <_malloc_r>:
 800f050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f054:	1ccd      	adds	r5, r1, #3
 800f056:	4607      	mov	r7, r0
 800f058:	f025 0503 	bic.w	r5, r5, #3
 800f05c:	3508      	adds	r5, #8
 800f05e:	2d0c      	cmp	r5, #12
 800f060:	bf38      	it	cc
 800f062:	250c      	movcc	r5, #12
 800f064:	2d00      	cmp	r5, #0
 800f066:	db01      	blt.n	800f06c <_malloc_r+0x1c>
 800f068:	42a9      	cmp	r1, r5
 800f06a:	d905      	bls.n	800f078 <_malloc_r+0x28>
 800f06c:	230c      	movs	r3, #12
 800f06e:	2600      	movs	r6, #0
 800f070:	603b      	str	r3, [r7, #0]
 800f072:	4630      	mov	r0, r6
 800f074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f078:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f14c <_malloc_r+0xfc>
 800f07c:	f000 f868 	bl	800f150 <__malloc_lock>
 800f080:	f8d8 3000 	ldr.w	r3, [r8]
 800f084:	461c      	mov	r4, r3
 800f086:	bb5c      	cbnz	r4, 800f0e0 <_malloc_r+0x90>
 800f088:	4629      	mov	r1, r5
 800f08a:	4638      	mov	r0, r7
 800f08c:	f7ff ffc0 	bl	800f010 <sbrk_aligned>
 800f090:	1c43      	adds	r3, r0, #1
 800f092:	4604      	mov	r4, r0
 800f094:	d155      	bne.n	800f142 <_malloc_r+0xf2>
 800f096:	f8d8 4000 	ldr.w	r4, [r8]
 800f09a:	4626      	mov	r6, r4
 800f09c:	2e00      	cmp	r6, #0
 800f09e:	d145      	bne.n	800f12c <_malloc_r+0xdc>
 800f0a0:	2c00      	cmp	r4, #0
 800f0a2:	d048      	beq.n	800f136 <_malloc_r+0xe6>
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	4631      	mov	r1, r6
 800f0a8:	4638      	mov	r0, r7
 800f0aa:	eb04 0903 	add.w	r9, r4, r3
 800f0ae:	f000 f897 	bl	800f1e0 <_sbrk_r>
 800f0b2:	4581      	cmp	r9, r0
 800f0b4:	d13f      	bne.n	800f136 <_malloc_r+0xe6>
 800f0b6:	6821      	ldr	r1, [r4, #0]
 800f0b8:	4638      	mov	r0, r7
 800f0ba:	1a6d      	subs	r5, r5, r1
 800f0bc:	4629      	mov	r1, r5
 800f0be:	f7ff ffa7 	bl	800f010 <sbrk_aligned>
 800f0c2:	3001      	adds	r0, #1
 800f0c4:	d037      	beq.n	800f136 <_malloc_r+0xe6>
 800f0c6:	6823      	ldr	r3, [r4, #0]
 800f0c8:	442b      	add	r3, r5
 800f0ca:	6023      	str	r3, [r4, #0]
 800f0cc:	f8d8 3000 	ldr.w	r3, [r8]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d038      	beq.n	800f146 <_malloc_r+0xf6>
 800f0d4:	685a      	ldr	r2, [r3, #4]
 800f0d6:	42a2      	cmp	r2, r4
 800f0d8:	d12b      	bne.n	800f132 <_malloc_r+0xe2>
 800f0da:	2200      	movs	r2, #0
 800f0dc:	605a      	str	r2, [r3, #4]
 800f0de:	e00f      	b.n	800f100 <_malloc_r+0xb0>
 800f0e0:	6822      	ldr	r2, [r4, #0]
 800f0e2:	1b52      	subs	r2, r2, r5
 800f0e4:	d41f      	bmi.n	800f126 <_malloc_r+0xd6>
 800f0e6:	2a0b      	cmp	r2, #11
 800f0e8:	d917      	bls.n	800f11a <_malloc_r+0xca>
 800f0ea:	1961      	adds	r1, r4, r5
 800f0ec:	42a3      	cmp	r3, r4
 800f0ee:	6025      	str	r5, [r4, #0]
 800f0f0:	bf18      	it	ne
 800f0f2:	6059      	strne	r1, [r3, #4]
 800f0f4:	6863      	ldr	r3, [r4, #4]
 800f0f6:	bf08      	it	eq
 800f0f8:	f8c8 1000 	streq.w	r1, [r8]
 800f0fc:	5162      	str	r2, [r4, r5]
 800f0fe:	604b      	str	r3, [r1, #4]
 800f100:	f104 060b 	add.w	r6, r4, #11
 800f104:	4638      	mov	r0, r7
 800f106:	f000 f829 	bl	800f15c <__malloc_unlock>
 800f10a:	1d23      	adds	r3, r4, #4
 800f10c:	f026 0607 	bic.w	r6, r6, #7
 800f110:	1af2      	subs	r2, r6, r3
 800f112:	d0ae      	beq.n	800f072 <_malloc_r+0x22>
 800f114:	1b9b      	subs	r3, r3, r6
 800f116:	50a3      	str	r3, [r4, r2]
 800f118:	e7ab      	b.n	800f072 <_malloc_r+0x22>
 800f11a:	42a3      	cmp	r3, r4
 800f11c:	6862      	ldr	r2, [r4, #4]
 800f11e:	d1dd      	bne.n	800f0dc <_malloc_r+0x8c>
 800f120:	f8c8 2000 	str.w	r2, [r8]
 800f124:	e7ec      	b.n	800f100 <_malloc_r+0xb0>
 800f126:	4623      	mov	r3, r4
 800f128:	6864      	ldr	r4, [r4, #4]
 800f12a:	e7ac      	b.n	800f086 <_malloc_r+0x36>
 800f12c:	4634      	mov	r4, r6
 800f12e:	6876      	ldr	r6, [r6, #4]
 800f130:	e7b4      	b.n	800f09c <_malloc_r+0x4c>
 800f132:	4613      	mov	r3, r2
 800f134:	e7cc      	b.n	800f0d0 <_malloc_r+0x80>
 800f136:	230c      	movs	r3, #12
 800f138:	4638      	mov	r0, r7
 800f13a:	603b      	str	r3, [r7, #0]
 800f13c:	f000 f80e 	bl	800f15c <__malloc_unlock>
 800f140:	e797      	b.n	800f072 <_malloc_r+0x22>
 800f142:	6025      	str	r5, [r4, #0]
 800f144:	e7dc      	b.n	800f100 <_malloc_r+0xb0>
 800f146:	605b      	str	r3, [r3, #4]
 800f148:	deff      	udf	#255	; 0xff
 800f14a:	bf00      	nop
 800f14c:	20001a78 	.word	0x20001a78

0800f150 <__malloc_lock>:
 800f150:	4801      	ldr	r0, [pc, #4]	; (800f158 <__malloc_lock+0x8>)
 800f152:	f000 b87f 	b.w	800f254 <__retarget_lock_acquire_recursive>
 800f156:	bf00      	nop
 800f158:	20001bbc 	.word	0x20001bbc

0800f15c <__malloc_unlock>:
 800f15c:	4801      	ldr	r0, [pc, #4]	; (800f164 <__malloc_unlock+0x8>)
 800f15e:	f000 b87a 	b.w	800f256 <__retarget_lock_release_recursive>
 800f162:	bf00      	nop
 800f164:	20001bbc 	.word	0x20001bbc

0800f168 <_vsiprintf_r>:
 800f168:	b500      	push	{lr}
 800f16a:	b09b      	sub	sp, #108	; 0x6c
 800f16c:	9100      	str	r1, [sp, #0]
 800f16e:	9104      	str	r1, [sp, #16]
 800f170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f174:	9105      	str	r1, [sp, #20]
 800f176:	9102      	str	r1, [sp, #8]
 800f178:	4905      	ldr	r1, [pc, #20]	; (800f190 <_vsiprintf_r+0x28>)
 800f17a:	9103      	str	r1, [sp, #12]
 800f17c:	4669      	mov	r1, sp
 800f17e:	f000 f91f 	bl	800f3c0 <_svfiprintf_r>
 800f182:	9b00      	ldr	r3, [sp, #0]
 800f184:	2200      	movs	r2, #0
 800f186:	701a      	strb	r2, [r3, #0]
 800f188:	b01b      	add	sp, #108	; 0x6c
 800f18a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f18e:	bf00      	nop
 800f190:	ffff0208 	.word	0xffff0208

0800f194 <vsiprintf>:
 800f194:	4613      	mov	r3, r2
 800f196:	460a      	mov	r2, r1
 800f198:	4601      	mov	r1, r0
 800f19a:	4802      	ldr	r0, [pc, #8]	; (800f1a4 <vsiprintf+0x10>)
 800f19c:	6800      	ldr	r0, [r0, #0]
 800f19e:	f7ff bfe3 	b.w	800f168 <_vsiprintf_r>
 800f1a2:	bf00      	nop
 800f1a4:	200000a0 	.word	0x200000a0

0800f1a8 <memset>:
 800f1a8:	4402      	add	r2, r0
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d100      	bne.n	800f1b2 <memset+0xa>
 800f1b0:	4770      	bx	lr
 800f1b2:	f803 1b01 	strb.w	r1, [r3], #1
 800f1b6:	e7f9      	b.n	800f1ac <memset+0x4>

0800f1b8 <strncpy>:
 800f1b8:	3901      	subs	r1, #1
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	b510      	push	{r4, lr}
 800f1be:	b132      	cbz	r2, 800f1ce <strncpy+0x16>
 800f1c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f1c4:	3a01      	subs	r2, #1
 800f1c6:	f803 4b01 	strb.w	r4, [r3], #1
 800f1ca:	2c00      	cmp	r4, #0
 800f1cc:	d1f7      	bne.n	800f1be <strncpy+0x6>
 800f1ce:	441a      	add	r2, r3
 800f1d0:	2100      	movs	r1, #0
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d100      	bne.n	800f1d8 <strncpy+0x20>
 800f1d6:	bd10      	pop	{r4, pc}
 800f1d8:	f803 1b01 	strb.w	r1, [r3], #1
 800f1dc:	e7f9      	b.n	800f1d2 <strncpy+0x1a>
	...

0800f1e0 <_sbrk_r>:
 800f1e0:	b538      	push	{r3, r4, r5, lr}
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	4d05      	ldr	r5, [pc, #20]	; (800f1fc <_sbrk_r+0x1c>)
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	4608      	mov	r0, r1
 800f1ea:	602b      	str	r3, [r5, #0]
 800f1ec:	f7f1 fffc 	bl	80011e8 <_sbrk>
 800f1f0:	1c43      	adds	r3, r0, #1
 800f1f2:	d102      	bne.n	800f1fa <_sbrk_r+0x1a>
 800f1f4:	682b      	ldr	r3, [r5, #0]
 800f1f6:	b103      	cbz	r3, 800f1fa <_sbrk_r+0x1a>
 800f1f8:	6023      	str	r3, [r4, #0]
 800f1fa:	bd38      	pop	{r3, r4, r5, pc}
 800f1fc:	20001bb8 	.word	0x20001bb8

0800f200 <__errno>:
 800f200:	4b01      	ldr	r3, [pc, #4]	; (800f208 <__errno+0x8>)
 800f202:	6818      	ldr	r0, [r3, #0]
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop
 800f208:	200000a0 	.word	0x200000a0

0800f20c <__libc_init_array>:
 800f20c:	b570      	push	{r4, r5, r6, lr}
 800f20e:	4d0d      	ldr	r5, [pc, #52]	; (800f244 <__libc_init_array+0x38>)
 800f210:	2600      	movs	r6, #0
 800f212:	4c0d      	ldr	r4, [pc, #52]	; (800f248 <__libc_init_array+0x3c>)
 800f214:	1b64      	subs	r4, r4, r5
 800f216:	10a4      	asrs	r4, r4, #2
 800f218:	42a6      	cmp	r6, r4
 800f21a:	d109      	bne.n	800f230 <__libc_init_array+0x24>
 800f21c:	4d0b      	ldr	r5, [pc, #44]	; (800f24c <__libc_init_array+0x40>)
 800f21e:	2600      	movs	r6, #0
 800f220:	4c0b      	ldr	r4, [pc, #44]	; (800f250 <__libc_init_array+0x44>)
 800f222:	f000 fbbd 	bl	800f9a0 <_init>
 800f226:	1b64      	subs	r4, r4, r5
 800f228:	10a4      	asrs	r4, r4, #2
 800f22a:	42a6      	cmp	r6, r4
 800f22c:	d105      	bne.n	800f23a <__libc_init_array+0x2e>
 800f22e:	bd70      	pop	{r4, r5, r6, pc}
 800f230:	f855 3b04 	ldr.w	r3, [r5], #4
 800f234:	3601      	adds	r6, #1
 800f236:	4798      	blx	r3
 800f238:	e7ee      	b.n	800f218 <__libc_init_array+0xc>
 800f23a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f23e:	3601      	adds	r6, #1
 800f240:	4798      	blx	r3
 800f242:	e7f2      	b.n	800f22a <__libc_init_array+0x1e>
 800f244:	0800fba8 	.word	0x0800fba8
 800f248:	0800fba8 	.word	0x0800fba8
 800f24c:	0800fba8 	.word	0x0800fba8
 800f250:	0800fbac 	.word	0x0800fbac

0800f254 <__retarget_lock_acquire_recursive>:
 800f254:	4770      	bx	lr

0800f256 <__retarget_lock_release_recursive>:
 800f256:	4770      	bx	lr

0800f258 <memcpy>:
 800f258:	440a      	add	r2, r1
 800f25a:	1e43      	subs	r3, r0, #1
 800f25c:	4291      	cmp	r1, r2
 800f25e:	d100      	bne.n	800f262 <memcpy+0xa>
 800f260:	4770      	bx	lr
 800f262:	b510      	push	{r4, lr}
 800f264:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f268:	4291      	cmp	r1, r2
 800f26a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f26e:	d1f9      	bne.n	800f264 <memcpy+0xc>
 800f270:	bd10      	pop	{r4, pc}
	...

0800f274 <_free_r>:
 800f274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f276:	2900      	cmp	r1, #0
 800f278:	d043      	beq.n	800f302 <_free_r+0x8e>
 800f27a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f27e:	1f0c      	subs	r4, r1, #4
 800f280:	9001      	str	r0, [sp, #4]
 800f282:	2b00      	cmp	r3, #0
 800f284:	bfb8      	it	lt
 800f286:	18e4      	addlt	r4, r4, r3
 800f288:	f7ff ff62 	bl	800f150 <__malloc_lock>
 800f28c:	4a1e      	ldr	r2, [pc, #120]	; (800f308 <_free_r+0x94>)
 800f28e:	9801      	ldr	r0, [sp, #4]
 800f290:	6813      	ldr	r3, [r2, #0]
 800f292:	b933      	cbnz	r3, 800f2a2 <_free_r+0x2e>
 800f294:	6063      	str	r3, [r4, #4]
 800f296:	6014      	str	r4, [r2, #0]
 800f298:	b003      	add	sp, #12
 800f29a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f29e:	f7ff bf5d 	b.w	800f15c <__malloc_unlock>
 800f2a2:	42a3      	cmp	r3, r4
 800f2a4:	d908      	bls.n	800f2b8 <_free_r+0x44>
 800f2a6:	6825      	ldr	r5, [r4, #0]
 800f2a8:	1961      	adds	r1, r4, r5
 800f2aa:	428b      	cmp	r3, r1
 800f2ac:	bf01      	itttt	eq
 800f2ae:	6819      	ldreq	r1, [r3, #0]
 800f2b0:	685b      	ldreq	r3, [r3, #4]
 800f2b2:	1949      	addeq	r1, r1, r5
 800f2b4:	6021      	streq	r1, [r4, #0]
 800f2b6:	e7ed      	b.n	800f294 <_free_r+0x20>
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	b10b      	cbz	r3, 800f2c2 <_free_r+0x4e>
 800f2be:	42a3      	cmp	r3, r4
 800f2c0:	d9fa      	bls.n	800f2b8 <_free_r+0x44>
 800f2c2:	6811      	ldr	r1, [r2, #0]
 800f2c4:	1855      	adds	r5, r2, r1
 800f2c6:	42a5      	cmp	r5, r4
 800f2c8:	d10b      	bne.n	800f2e2 <_free_r+0x6e>
 800f2ca:	6824      	ldr	r4, [r4, #0]
 800f2cc:	4421      	add	r1, r4
 800f2ce:	1854      	adds	r4, r2, r1
 800f2d0:	6011      	str	r1, [r2, #0]
 800f2d2:	42a3      	cmp	r3, r4
 800f2d4:	d1e0      	bne.n	800f298 <_free_r+0x24>
 800f2d6:	681c      	ldr	r4, [r3, #0]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	440c      	add	r4, r1
 800f2dc:	6053      	str	r3, [r2, #4]
 800f2de:	6014      	str	r4, [r2, #0]
 800f2e0:	e7da      	b.n	800f298 <_free_r+0x24>
 800f2e2:	d902      	bls.n	800f2ea <_free_r+0x76>
 800f2e4:	230c      	movs	r3, #12
 800f2e6:	6003      	str	r3, [r0, #0]
 800f2e8:	e7d6      	b.n	800f298 <_free_r+0x24>
 800f2ea:	6825      	ldr	r5, [r4, #0]
 800f2ec:	1961      	adds	r1, r4, r5
 800f2ee:	428b      	cmp	r3, r1
 800f2f0:	bf02      	ittt	eq
 800f2f2:	6819      	ldreq	r1, [r3, #0]
 800f2f4:	685b      	ldreq	r3, [r3, #4]
 800f2f6:	1949      	addeq	r1, r1, r5
 800f2f8:	6063      	str	r3, [r4, #4]
 800f2fa:	bf08      	it	eq
 800f2fc:	6021      	streq	r1, [r4, #0]
 800f2fe:	6054      	str	r4, [r2, #4]
 800f300:	e7ca      	b.n	800f298 <_free_r+0x24>
 800f302:	b003      	add	sp, #12
 800f304:	bd30      	pop	{r4, r5, pc}
 800f306:	bf00      	nop
 800f308:	20001a78 	.word	0x20001a78

0800f30c <__ssputs_r>:
 800f30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f310:	461f      	mov	r7, r3
 800f312:	688e      	ldr	r6, [r1, #8]
 800f314:	4682      	mov	sl, r0
 800f316:	460c      	mov	r4, r1
 800f318:	42be      	cmp	r6, r7
 800f31a:	4690      	mov	r8, r2
 800f31c:	680b      	ldr	r3, [r1, #0]
 800f31e:	d82c      	bhi.n	800f37a <__ssputs_r+0x6e>
 800f320:	898a      	ldrh	r2, [r1, #12]
 800f322:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f326:	d026      	beq.n	800f376 <__ssputs_r+0x6a>
 800f328:	6965      	ldr	r5, [r4, #20]
 800f32a:	6909      	ldr	r1, [r1, #16]
 800f32c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f330:	eba3 0901 	sub.w	r9, r3, r1
 800f334:	1c7b      	adds	r3, r7, #1
 800f336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f33a:	444b      	add	r3, r9
 800f33c:	106d      	asrs	r5, r5, #1
 800f33e:	429d      	cmp	r5, r3
 800f340:	bf38      	it	cc
 800f342:	461d      	movcc	r5, r3
 800f344:	0553      	lsls	r3, r2, #21
 800f346:	d527      	bpl.n	800f398 <__ssputs_r+0x8c>
 800f348:	4629      	mov	r1, r5
 800f34a:	f7ff fe81 	bl	800f050 <_malloc_r>
 800f34e:	4606      	mov	r6, r0
 800f350:	b360      	cbz	r0, 800f3ac <__ssputs_r+0xa0>
 800f352:	464a      	mov	r2, r9
 800f354:	6921      	ldr	r1, [r4, #16]
 800f356:	f7ff ff7f 	bl	800f258 <memcpy>
 800f35a:	89a3      	ldrh	r3, [r4, #12]
 800f35c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f364:	81a3      	strh	r3, [r4, #12]
 800f366:	6126      	str	r6, [r4, #16]
 800f368:	444e      	add	r6, r9
 800f36a:	6165      	str	r5, [r4, #20]
 800f36c:	eba5 0509 	sub.w	r5, r5, r9
 800f370:	6026      	str	r6, [r4, #0]
 800f372:	463e      	mov	r6, r7
 800f374:	60a5      	str	r5, [r4, #8]
 800f376:	42be      	cmp	r6, r7
 800f378:	d900      	bls.n	800f37c <__ssputs_r+0x70>
 800f37a:	463e      	mov	r6, r7
 800f37c:	4632      	mov	r2, r6
 800f37e:	4641      	mov	r1, r8
 800f380:	6820      	ldr	r0, [r4, #0]
 800f382:	f000 faad 	bl	800f8e0 <memmove>
 800f386:	68a3      	ldr	r3, [r4, #8]
 800f388:	2000      	movs	r0, #0
 800f38a:	1b9b      	subs	r3, r3, r6
 800f38c:	60a3      	str	r3, [r4, #8]
 800f38e:	6823      	ldr	r3, [r4, #0]
 800f390:	4433      	add	r3, r6
 800f392:	6023      	str	r3, [r4, #0]
 800f394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f398:	462a      	mov	r2, r5
 800f39a:	f000 fac9 	bl	800f930 <_realloc_r>
 800f39e:	4606      	mov	r6, r0
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	d1e0      	bne.n	800f366 <__ssputs_r+0x5a>
 800f3a4:	6921      	ldr	r1, [r4, #16]
 800f3a6:	4650      	mov	r0, sl
 800f3a8:	f7ff ff64 	bl	800f274 <_free_r>
 800f3ac:	230c      	movs	r3, #12
 800f3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f3b2:	f8ca 3000 	str.w	r3, [sl]
 800f3b6:	89a3      	ldrh	r3, [r4, #12]
 800f3b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3bc:	81a3      	strh	r3, [r4, #12]
 800f3be:	e7e9      	b.n	800f394 <__ssputs_r+0x88>

0800f3c0 <_svfiprintf_r>:
 800f3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c4:	4698      	mov	r8, r3
 800f3c6:	898b      	ldrh	r3, [r1, #12]
 800f3c8:	b09d      	sub	sp, #116	; 0x74
 800f3ca:	4607      	mov	r7, r0
 800f3cc:	061b      	lsls	r3, r3, #24
 800f3ce:	460d      	mov	r5, r1
 800f3d0:	4614      	mov	r4, r2
 800f3d2:	d50e      	bpl.n	800f3f2 <_svfiprintf_r+0x32>
 800f3d4:	690b      	ldr	r3, [r1, #16]
 800f3d6:	b963      	cbnz	r3, 800f3f2 <_svfiprintf_r+0x32>
 800f3d8:	2140      	movs	r1, #64	; 0x40
 800f3da:	f7ff fe39 	bl	800f050 <_malloc_r>
 800f3de:	6028      	str	r0, [r5, #0]
 800f3e0:	6128      	str	r0, [r5, #16]
 800f3e2:	b920      	cbnz	r0, 800f3ee <_svfiprintf_r+0x2e>
 800f3e4:	230c      	movs	r3, #12
 800f3e6:	603b      	str	r3, [r7, #0]
 800f3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ec:	e0d0      	b.n	800f590 <_svfiprintf_r+0x1d0>
 800f3ee:	2340      	movs	r3, #64	; 0x40
 800f3f0:	616b      	str	r3, [r5, #20]
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3f8:	f04f 0901 	mov.w	r9, #1
 800f3fc:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f5a8 <_svfiprintf_r+0x1e8>
 800f400:	9309      	str	r3, [sp, #36]	; 0x24
 800f402:	2320      	movs	r3, #32
 800f404:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f408:	2330      	movs	r3, #48	; 0x30
 800f40a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f40e:	4623      	mov	r3, r4
 800f410:	469a      	mov	sl, r3
 800f412:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f416:	b10a      	cbz	r2, 800f41c <_svfiprintf_r+0x5c>
 800f418:	2a25      	cmp	r2, #37	; 0x25
 800f41a:	d1f9      	bne.n	800f410 <_svfiprintf_r+0x50>
 800f41c:	ebba 0b04 	subs.w	fp, sl, r4
 800f420:	d00b      	beq.n	800f43a <_svfiprintf_r+0x7a>
 800f422:	465b      	mov	r3, fp
 800f424:	4622      	mov	r2, r4
 800f426:	4629      	mov	r1, r5
 800f428:	4638      	mov	r0, r7
 800f42a:	f7ff ff6f 	bl	800f30c <__ssputs_r>
 800f42e:	3001      	adds	r0, #1
 800f430:	f000 80a9 	beq.w	800f586 <_svfiprintf_r+0x1c6>
 800f434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f436:	445a      	add	r2, fp
 800f438:	9209      	str	r2, [sp, #36]	; 0x24
 800f43a:	f89a 3000 	ldrb.w	r3, [sl]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	f000 80a1 	beq.w	800f586 <_svfiprintf_r+0x1c6>
 800f444:	2300      	movs	r3, #0
 800f446:	f04f 32ff 	mov.w	r2, #4294967295
 800f44a:	f10a 0a01 	add.w	sl, sl, #1
 800f44e:	9304      	str	r3, [sp, #16]
 800f450:	9307      	str	r3, [sp, #28]
 800f452:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f456:	931a      	str	r3, [sp, #104]	; 0x68
 800f458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f45c:	4654      	mov	r4, sl
 800f45e:	2205      	movs	r2, #5
 800f460:	4851      	ldr	r0, [pc, #324]	; (800f5a8 <_svfiprintf_r+0x1e8>)
 800f462:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f466:	f000 fa55 	bl	800f914 <memchr>
 800f46a:	9a04      	ldr	r2, [sp, #16]
 800f46c:	b9d8      	cbnz	r0, 800f4a6 <_svfiprintf_r+0xe6>
 800f46e:	06d0      	lsls	r0, r2, #27
 800f470:	bf44      	itt	mi
 800f472:	2320      	movmi	r3, #32
 800f474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f478:	0711      	lsls	r1, r2, #28
 800f47a:	bf44      	itt	mi
 800f47c:	232b      	movmi	r3, #43	; 0x2b
 800f47e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f482:	f89a 3000 	ldrb.w	r3, [sl]
 800f486:	2b2a      	cmp	r3, #42	; 0x2a
 800f488:	d015      	beq.n	800f4b6 <_svfiprintf_r+0xf6>
 800f48a:	9a07      	ldr	r2, [sp, #28]
 800f48c:	4654      	mov	r4, sl
 800f48e:	2000      	movs	r0, #0
 800f490:	f04f 0c0a 	mov.w	ip, #10
 800f494:	4621      	mov	r1, r4
 800f496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f49a:	3b30      	subs	r3, #48	; 0x30
 800f49c:	2b09      	cmp	r3, #9
 800f49e:	d94d      	bls.n	800f53c <_svfiprintf_r+0x17c>
 800f4a0:	b1b0      	cbz	r0, 800f4d0 <_svfiprintf_r+0x110>
 800f4a2:	9207      	str	r2, [sp, #28]
 800f4a4:	e014      	b.n	800f4d0 <_svfiprintf_r+0x110>
 800f4a6:	eba0 0308 	sub.w	r3, r0, r8
 800f4aa:	46a2      	mov	sl, r4
 800f4ac:	fa09 f303 	lsl.w	r3, r9, r3
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	9304      	str	r3, [sp, #16]
 800f4b4:	e7d2      	b.n	800f45c <_svfiprintf_r+0x9c>
 800f4b6:	9b03      	ldr	r3, [sp, #12]
 800f4b8:	1d19      	adds	r1, r3, #4
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	9103      	str	r1, [sp, #12]
 800f4c0:	bfbb      	ittet	lt
 800f4c2:	425b      	neglt	r3, r3
 800f4c4:	f042 0202 	orrlt.w	r2, r2, #2
 800f4c8:	9307      	strge	r3, [sp, #28]
 800f4ca:	9307      	strlt	r3, [sp, #28]
 800f4cc:	bfb8      	it	lt
 800f4ce:	9204      	strlt	r2, [sp, #16]
 800f4d0:	7823      	ldrb	r3, [r4, #0]
 800f4d2:	2b2e      	cmp	r3, #46	; 0x2e
 800f4d4:	d10c      	bne.n	800f4f0 <_svfiprintf_r+0x130>
 800f4d6:	7863      	ldrb	r3, [r4, #1]
 800f4d8:	2b2a      	cmp	r3, #42	; 0x2a
 800f4da:	d134      	bne.n	800f546 <_svfiprintf_r+0x186>
 800f4dc:	9b03      	ldr	r3, [sp, #12]
 800f4de:	3402      	adds	r4, #2
 800f4e0:	1d1a      	adds	r2, r3, #4
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	9203      	str	r2, [sp, #12]
 800f4e8:	bfb8      	it	lt
 800f4ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4ee:	9305      	str	r3, [sp, #20]
 800f4f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f5b8 <_svfiprintf_r+0x1f8>
 800f4f4:	2203      	movs	r2, #3
 800f4f6:	7821      	ldrb	r1, [r4, #0]
 800f4f8:	4650      	mov	r0, sl
 800f4fa:	f000 fa0b 	bl	800f914 <memchr>
 800f4fe:	b138      	cbz	r0, 800f510 <_svfiprintf_r+0x150>
 800f500:	eba0 000a 	sub.w	r0, r0, sl
 800f504:	2240      	movs	r2, #64	; 0x40
 800f506:	9b04      	ldr	r3, [sp, #16]
 800f508:	3401      	adds	r4, #1
 800f50a:	4082      	lsls	r2, r0
 800f50c:	4313      	orrs	r3, r2
 800f50e:	9304      	str	r3, [sp, #16]
 800f510:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f514:	2206      	movs	r2, #6
 800f516:	4825      	ldr	r0, [pc, #148]	; (800f5ac <_svfiprintf_r+0x1ec>)
 800f518:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f51c:	f000 f9fa 	bl	800f914 <memchr>
 800f520:	2800      	cmp	r0, #0
 800f522:	d038      	beq.n	800f596 <_svfiprintf_r+0x1d6>
 800f524:	4b22      	ldr	r3, [pc, #136]	; (800f5b0 <_svfiprintf_r+0x1f0>)
 800f526:	bb1b      	cbnz	r3, 800f570 <_svfiprintf_r+0x1b0>
 800f528:	9b03      	ldr	r3, [sp, #12]
 800f52a:	3307      	adds	r3, #7
 800f52c:	f023 0307 	bic.w	r3, r3, #7
 800f530:	3308      	adds	r3, #8
 800f532:	9303      	str	r3, [sp, #12]
 800f534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f536:	4433      	add	r3, r6
 800f538:	9309      	str	r3, [sp, #36]	; 0x24
 800f53a:	e768      	b.n	800f40e <_svfiprintf_r+0x4e>
 800f53c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f540:	460c      	mov	r4, r1
 800f542:	2001      	movs	r0, #1
 800f544:	e7a6      	b.n	800f494 <_svfiprintf_r+0xd4>
 800f546:	2300      	movs	r3, #0
 800f548:	3401      	adds	r4, #1
 800f54a:	f04f 0c0a 	mov.w	ip, #10
 800f54e:	4619      	mov	r1, r3
 800f550:	9305      	str	r3, [sp, #20]
 800f552:	4620      	mov	r0, r4
 800f554:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f558:	3a30      	subs	r2, #48	; 0x30
 800f55a:	2a09      	cmp	r2, #9
 800f55c:	d903      	bls.n	800f566 <_svfiprintf_r+0x1a6>
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d0c6      	beq.n	800f4f0 <_svfiprintf_r+0x130>
 800f562:	9105      	str	r1, [sp, #20]
 800f564:	e7c4      	b.n	800f4f0 <_svfiprintf_r+0x130>
 800f566:	fb0c 2101 	mla	r1, ip, r1, r2
 800f56a:	4604      	mov	r4, r0
 800f56c:	2301      	movs	r3, #1
 800f56e:	e7f0      	b.n	800f552 <_svfiprintf_r+0x192>
 800f570:	ab03      	add	r3, sp, #12
 800f572:	462a      	mov	r2, r5
 800f574:	a904      	add	r1, sp, #16
 800f576:	4638      	mov	r0, r7
 800f578:	9300      	str	r3, [sp, #0]
 800f57a:	4b0e      	ldr	r3, [pc, #56]	; (800f5b4 <_svfiprintf_r+0x1f4>)
 800f57c:	f3af 8000 	nop.w
 800f580:	1c42      	adds	r2, r0, #1
 800f582:	4606      	mov	r6, r0
 800f584:	d1d6      	bne.n	800f534 <_svfiprintf_r+0x174>
 800f586:	89ab      	ldrh	r3, [r5, #12]
 800f588:	065b      	lsls	r3, r3, #25
 800f58a:	f53f af2d 	bmi.w	800f3e8 <_svfiprintf_r+0x28>
 800f58e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f590:	b01d      	add	sp, #116	; 0x74
 800f592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f596:	ab03      	add	r3, sp, #12
 800f598:	462a      	mov	r2, r5
 800f59a:	a904      	add	r1, sp, #16
 800f59c:	4638      	mov	r0, r7
 800f59e:	9300      	str	r3, [sp, #0]
 800f5a0:	4b04      	ldr	r3, [pc, #16]	; (800f5b4 <_svfiprintf_r+0x1f4>)
 800f5a2:	f000 f87d 	bl	800f6a0 <_printf_i>
 800f5a6:	e7eb      	b.n	800f580 <_svfiprintf_r+0x1c0>
 800f5a8:	0800fb6c 	.word	0x0800fb6c
 800f5ac:	0800fb76 	.word	0x0800fb76
 800f5b0:	00000000 	.word	0x00000000
 800f5b4:	0800f30d 	.word	0x0800f30d
 800f5b8:	0800fb72 	.word	0x0800fb72

0800f5bc <_printf_common>:
 800f5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5c0:	4616      	mov	r6, r2
 800f5c2:	4699      	mov	r9, r3
 800f5c4:	688a      	ldr	r2, [r1, #8]
 800f5c6:	4607      	mov	r7, r0
 800f5c8:	690b      	ldr	r3, [r1, #16]
 800f5ca:	460c      	mov	r4, r1
 800f5cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	bfb8      	it	lt
 800f5d4:	4613      	movlt	r3, r2
 800f5d6:	6033      	str	r3, [r6, #0]
 800f5d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5dc:	b10a      	cbz	r2, 800f5e2 <_printf_common+0x26>
 800f5de:	3301      	adds	r3, #1
 800f5e0:	6033      	str	r3, [r6, #0]
 800f5e2:	6823      	ldr	r3, [r4, #0]
 800f5e4:	0699      	lsls	r1, r3, #26
 800f5e6:	bf42      	ittt	mi
 800f5e8:	6833      	ldrmi	r3, [r6, #0]
 800f5ea:	3302      	addmi	r3, #2
 800f5ec:	6033      	strmi	r3, [r6, #0]
 800f5ee:	6825      	ldr	r5, [r4, #0]
 800f5f0:	f015 0506 	ands.w	r5, r5, #6
 800f5f4:	d106      	bne.n	800f604 <_printf_common+0x48>
 800f5f6:	f104 0a19 	add.w	sl, r4, #25
 800f5fa:	68e3      	ldr	r3, [r4, #12]
 800f5fc:	6832      	ldr	r2, [r6, #0]
 800f5fe:	1a9b      	subs	r3, r3, r2
 800f600:	42ab      	cmp	r3, r5
 800f602:	dc2b      	bgt.n	800f65c <_printf_common+0xa0>
 800f604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f608:	1e13      	subs	r3, r2, #0
 800f60a:	6822      	ldr	r2, [r4, #0]
 800f60c:	bf18      	it	ne
 800f60e:	2301      	movne	r3, #1
 800f610:	0692      	lsls	r2, r2, #26
 800f612:	d430      	bmi.n	800f676 <_printf_common+0xba>
 800f614:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f618:	4649      	mov	r1, r9
 800f61a:	4638      	mov	r0, r7
 800f61c:	47c0      	blx	r8
 800f61e:	3001      	adds	r0, #1
 800f620:	d023      	beq.n	800f66a <_printf_common+0xae>
 800f622:	6823      	ldr	r3, [r4, #0]
 800f624:	341a      	adds	r4, #26
 800f626:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f62a:	f003 0306 	and.w	r3, r3, #6
 800f62e:	2b04      	cmp	r3, #4
 800f630:	bf0a      	itet	eq
 800f632:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800f636:	2500      	movne	r5, #0
 800f638:	6833      	ldreq	r3, [r6, #0]
 800f63a:	f04f 0600 	mov.w	r6, #0
 800f63e:	bf08      	it	eq
 800f640:	1aed      	subeq	r5, r5, r3
 800f642:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f646:	bf08      	it	eq
 800f648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f64c:	4293      	cmp	r3, r2
 800f64e:	bfc4      	itt	gt
 800f650:	1a9b      	subgt	r3, r3, r2
 800f652:	18ed      	addgt	r5, r5, r3
 800f654:	42b5      	cmp	r5, r6
 800f656:	d11a      	bne.n	800f68e <_printf_common+0xd2>
 800f658:	2000      	movs	r0, #0
 800f65a:	e008      	b.n	800f66e <_printf_common+0xb2>
 800f65c:	2301      	movs	r3, #1
 800f65e:	4652      	mov	r2, sl
 800f660:	4649      	mov	r1, r9
 800f662:	4638      	mov	r0, r7
 800f664:	47c0      	blx	r8
 800f666:	3001      	adds	r0, #1
 800f668:	d103      	bne.n	800f672 <_printf_common+0xb6>
 800f66a:	f04f 30ff 	mov.w	r0, #4294967295
 800f66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f672:	3501      	adds	r5, #1
 800f674:	e7c1      	b.n	800f5fa <_printf_common+0x3e>
 800f676:	18e1      	adds	r1, r4, r3
 800f678:	1c5a      	adds	r2, r3, #1
 800f67a:	2030      	movs	r0, #48	; 0x30
 800f67c:	3302      	adds	r3, #2
 800f67e:	4422      	add	r2, r4
 800f680:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f684:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f68c:	e7c2      	b.n	800f614 <_printf_common+0x58>
 800f68e:	2301      	movs	r3, #1
 800f690:	4622      	mov	r2, r4
 800f692:	4649      	mov	r1, r9
 800f694:	4638      	mov	r0, r7
 800f696:	47c0      	blx	r8
 800f698:	3001      	adds	r0, #1
 800f69a:	d0e6      	beq.n	800f66a <_printf_common+0xae>
 800f69c:	3601      	adds	r6, #1
 800f69e:	e7d9      	b.n	800f654 <_printf_common+0x98>

0800f6a0 <_printf_i>:
 800f6a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6a4:	7e0f      	ldrb	r7, [r1, #24]
 800f6a6:	4691      	mov	r9, r2
 800f6a8:	4680      	mov	r8, r0
 800f6aa:	460c      	mov	r4, r1
 800f6ac:	2f78      	cmp	r7, #120	; 0x78
 800f6ae:	469a      	mov	sl, r3
 800f6b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f6b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f6b6:	d807      	bhi.n	800f6c8 <_printf_i+0x28>
 800f6b8:	2f62      	cmp	r7, #98	; 0x62
 800f6ba:	d80a      	bhi.n	800f6d2 <_printf_i+0x32>
 800f6bc:	2f00      	cmp	r7, #0
 800f6be:	f000 80d3 	beq.w	800f868 <_printf_i+0x1c8>
 800f6c2:	2f58      	cmp	r7, #88	; 0x58
 800f6c4:	f000 80bf 	beq.w	800f846 <_printf_i+0x1a6>
 800f6c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6d0:	e03a      	b.n	800f748 <_printf_i+0xa8>
 800f6d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6d6:	2b15      	cmp	r3, #21
 800f6d8:	d8f6      	bhi.n	800f6c8 <_printf_i+0x28>
 800f6da:	a101      	add	r1, pc, #4	; (adr r1, 800f6e0 <_printf_i+0x40>)
 800f6dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6e0:	0800f739 	.word	0x0800f739
 800f6e4:	0800f74d 	.word	0x0800f74d
 800f6e8:	0800f6c9 	.word	0x0800f6c9
 800f6ec:	0800f6c9 	.word	0x0800f6c9
 800f6f0:	0800f6c9 	.word	0x0800f6c9
 800f6f4:	0800f6c9 	.word	0x0800f6c9
 800f6f8:	0800f74d 	.word	0x0800f74d
 800f6fc:	0800f6c9 	.word	0x0800f6c9
 800f700:	0800f6c9 	.word	0x0800f6c9
 800f704:	0800f6c9 	.word	0x0800f6c9
 800f708:	0800f6c9 	.word	0x0800f6c9
 800f70c:	0800f84f 	.word	0x0800f84f
 800f710:	0800f779 	.word	0x0800f779
 800f714:	0800f80b 	.word	0x0800f80b
 800f718:	0800f6c9 	.word	0x0800f6c9
 800f71c:	0800f6c9 	.word	0x0800f6c9
 800f720:	0800f871 	.word	0x0800f871
 800f724:	0800f6c9 	.word	0x0800f6c9
 800f728:	0800f779 	.word	0x0800f779
 800f72c:	0800f6c9 	.word	0x0800f6c9
 800f730:	0800f6c9 	.word	0x0800f6c9
 800f734:	0800f813 	.word	0x0800f813
 800f738:	682b      	ldr	r3, [r5, #0]
 800f73a:	1d1a      	adds	r2, r3, #4
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	602a      	str	r2, [r5, #0]
 800f740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f748:	2301      	movs	r3, #1
 800f74a:	e09e      	b.n	800f88a <_printf_i+0x1ea>
 800f74c:	6820      	ldr	r0, [r4, #0]
 800f74e:	682b      	ldr	r3, [r5, #0]
 800f750:	0607      	lsls	r7, r0, #24
 800f752:	f103 0104 	add.w	r1, r3, #4
 800f756:	6029      	str	r1, [r5, #0]
 800f758:	d501      	bpl.n	800f75e <_printf_i+0xbe>
 800f75a:	681e      	ldr	r6, [r3, #0]
 800f75c:	e003      	b.n	800f766 <_printf_i+0xc6>
 800f75e:	0646      	lsls	r6, r0, #25
 800f760:	d5fb      	bpl.n	800f75a <_printf_i+0xba>
 800f762:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f766:	2e00      	cmp	r6, #0
 800f768:	da03      	bge.n	800f772 <_printf_i+0xd2>
 800f76a:	232d      	movs	r3, #45	; 0x2d
 800f76c:	4276      	negs	r6, r6
 800f76e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f772:	4859      	ldr	r0, [pc, #356]	; (800f8d8 <_printf_i+0x238>)
 800f774:	230a      	movs	r3, #10
 800f776:	e012      	b.n	800f79e <_printf_i+0xfe>
 800f778:	682b      	ldr	r3, [r5, #0]
 800f77a:	6820      	ldr	r0, [r4, #0]
 800f77c:	1d19      	adds	r1, r3, #4
 800f77e:	6029      	str	r1, [r5, #0]
 800f780:	0605      	lsls	r5, r0, #24
 800f782:	d501      	bpl.n	800f788 <_printf_i+0xe8>
 800f784:	681e      	ldr	r6, [r3, #0]
 800f786:	e002      	b.n	800f78e <_printf_i+0xee>
 800f788:	0641      	lsls	r1, r0, #25
 800f78a:	d5fb      	bpl.n	800f784 <_printf_i+0xe4>
 800f78c:	881e      	ldrh	r6, [r3, #0]
 800f78e:	2f6f      	cmp	r7, #111	; 0x6f
 800f790:	4851      	ldr	r0, [pc, #324]	; (800f8d8 <_printf_i+0x238>)
 800f792:	bf0c      	ite	eq
 800f794:	2308      	moveq	r3, #8
 800f796:	230a      	movne	r3, #10
 800f798:	2100      	movs	r1, #0
 800f79a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f79e:	6865      	ldr	r5, [r4, #4]
 800f7a0:	2d00      	cmp	r5, #0
 800f7a2:	60a5      	str	r5, [r4, #8]
 800f7a4:	bfa2      	ittt	ge
 800f7a6:	6821      	ldrge	r1, [r4, #0]
 800f7a8:	f021 0104 	bicge.w	r1, r1, #4
 800f7ac:	6021      	strge	r1, [r4, #0]
 800f7ae:	b90e      	cbnz	r6, 800f7b4 <_printf_i+0x114>
 800f7b0:	2d00      	cmp	r5, #0
 800f7b2:	d04a      	beq.n	800f84a <_printf_i+0x1aa>
 800f7b4:	4615      	mov	r5, r2
 800f7b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800f7ba:	fb03 6711 	mls	r7, r3, r1, r6
 800f7be:	5dc7      	ldrb	r7, [r0, r7]
 800f7c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f7c4:	4637      	mov	r7, r6
 800f7c6:	460e      	mov	r6, r1
 800f7c8:	42bb      	cmp	r3, r7
 800f7ca:	d9f4      	bls.n	800f7b6 <_printf_i+0x116>
 800f7cc:	2b08      	cmp	r3, #8
 800f7ce:	d10b      	bne.n	800f7e8 <_printf_i+0x148>
 800f7d0:	6823      	ldr	r3, [r4, #0]
 800f7d2:	07de      	lsls	r6, r3, #31
 800f7d4:	d508      	bpl.n	800f7e8 <_printf_i+0x148>
 800f7d6:	6923      	ldr	r3, [r4, #16]
 800f7d8:	6861      	ldr	r1, [r4, #4]
 800f7da:	4299      	cmp	r1, r3
 800f7dc:	bfde      	ittt	le
 800f7de:	2330      	movle	r3, #48	; 0x30
 800f7e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f7e8:	1b52      	subs	r2, r2, r5
 800f7ea:	6122      	str	r2, [r4, #16]
 800f7ec:	464b      	mov	r3, r9
 800f7ee:	aa03      	add	r2, sp, #12
 800f7f0:	4621      	mov	r1, r4
 800f7f2:	4640      	mov	r0, r8
 800f7f4:	f8cd a000 	str.w	sl, [sp]
 800f7f8:	f7ff fee0 	bl	800f5bc <_printf_common>
 800f7fc:	3001      	adds	r0, #1
 800f7fe:	d149      	bne.n	800f894 <_printf_i+0x1f4>
 800f800:	f04f 30ff 	mov.w	r0, #4294967295
 800f804:	b004      	add	sp, #16
 800f806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f80a:	6823      	ldr	r3, [r4, #0]
 800f80c:	f043 0320 	orr.w	r3, r3, #32
 800f810:	6023      	str	r3, [r4, #0]
 800f812:	2778      	movs	r7, #120	; 0x78
 800f814:	4831      	ldr	r0, [pc, #196]	; (800f8dc <_printf_i+0x23c>)
 800f816:	6823      	ldr	r3, [r4, #0]
 800f818:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f81c:	061f      	lsls	r7, r3, #24
 800f81e:	6829      	ldr	r1, [r5, #0]
 800f820:	f851 6b04 	ldr.w	r6, [r1], #4
 800f824:	d402      	bmi.n	800f82c <_printf_i+0x18c>
 800f826:	065f      	lsls	r7, r3, #25
 800f828:	bf48      	it	mi
 800f82a:	b2b6      	uxthmi	r6, r6
 800f82c:	07df      	lsls	r7, r3, #31
 800f82e:	6029      	str	r1, [r5, #0]
 800f830:	bf44      	itt	mi
 800f832:	f043 0320 	orrmi.w	r3, r3, #32
 800f836:	6023      	strmi	r3, [r4, #0]
 800f838:	b91e      	cbnz	r6, 800f842 <_printf_i+0x1a2>
 800f83a:	6823      	ldr	r3, [r4, #0]
 800f83c:	f023 0320 	bic.w	r3, r3, #32
 800f840:	6023      	str	r3, [r4, #0]
 800f842:	2310      	movs	r3, #16
 800f844:	e7a8      	b.n	800f798 <_printf_i+0xf8>
 800f846:	4824      	ldr	r0, [pc, #144]	; (800f8d8 <_printf_i+0x238>)
 800f848:	e7e5      	b.n	800f816 <_printf_i+0x176>
 800f84a:	4615      	mov	r5, r2
 800f84c:	e7be      	b.n	800f7cc <_printf_i+0x12c>
 800f84e:	682b      	ldr	r3, [r5, #0]
 800f850:	6826      	ldr	r6, [r4, #0]
 800f852:	1d18      	adds	r0, r3, #4
 800f854:	6961      	ldr	r1, [r4, #20]
 800f856:	6028      	str	r0, [r5, #0]
 800f858:	0635      	lsls	r5, r6, #24
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	d501      	bpl.n	800f862 <_printf_i+0x1c2>
 800f85e:	6019      	str	r1, [r3, #0]
 800f860:	e002      	b.n	800f868 <_printf_i+0x1c8>
 800f862:	0670      	lsls	r0, r6, #25
 800f864:	d5fb      	bpl.n	800f85e <_printf_i+0x1be>
 800f866:	8019      	strh	r1, [r3, #0]
 800f868:	2300      	movs	r3, #0
 800f86a:	4615      	mov	r5, r2
 800f86c:	6123      	str	r3, [r4, #16]
 800f86e:	e7bd      	b.n	800f7ec <_printf_i+0x14c>
 800f870:	682b      	ldr	r3, [r5, #0]
 800f872:	2100      	movs	r1, #0
 800f874:	1d1a      	adds	r2, r3, #4
 800f876:	602a      	str	r2, [r5, #0]
 800f878:	681d      	ldr	r5, [r3, #0]
 800f87a:	6862      	ldr	r2, [r4, #4]
 800f87c:	4628      	mov	r0, r5
 800f87e:	f000 f849 	bl	800f914 <memchr>
 800f882:	b108      	cbz	r0, 800f888 <_printf_i+0x1e8>
 800f884:	1b40      	subs	r0, r0, r5
 800f886:	6060      	str	r0, [r4, #4]
 800f888:	6863      	ldr	r3, [r4, #4]
 800f88a:	6123      	str	r3, [r4, #16]
 800f88c:	2300      	movs	r3, #0
 800f88e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f892:	e7ab      	b.n	800f7ec <_printf_i+0x14c>
 800f894:	6923      	ldr	r3, [r4, #16]
 800f896:	462a      	mov	r2, r5
 800f898:	4649      	mov	r1, r9
 800f89a:	4640      	mov	r0, r8
 800f89c:	47d0      	blx	sl
 800f89e:	3001      	adds	r0, #1
 800f8a0:	d0ae      	beq.n	800f800 <_printf_i+0x160>
 800f8a2:	6823      	ldr	r3, [r4, #0]
 800f8a4:	079b      	lsls	r3, r3, #30
 800f8a6:	d413      	bmi.n	800f8d0 <_printf_i+0x230>
 800f8a8:	68e0      	ldr	r0, [r4, #12]
 800f8aa:	9b03      	ldr	r3, [sp, #12]
 800f8ac:	4298      	cmp	r0, r3
 800f8ae:	bfb8      	it	lt
 800f8b0:	4618      	movlt	r0, r3
 800f8b2:	e7a7      	b.n	800f804 <_printf_i+0x164>
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	4632      	mov	r2, r6
 800f8b8:	4649      	mov	r1, r9
 800f8ba:	4640      	mov	r0, r8
 800f8bc:	47d0      	blx	sl
 800f8be:	3001      	adds	r0, #1
 800f8c0:	d09e      	beq.n	800f800 <_printf_i+0x160>
 800f8c2:	3501      	adds	r5, #1
 800f8c4:	68e3      	ldr	r3, [r4, #12]
 800f8c6:	9903      	ldr	r1, [sp, #12]
 800f8c8:	1a5b      	subs	r3, r3, r1
 800f8ca:	42ab      	cmp	r3, r5
 800f8cc:	dcf2      	bgt.n	800f8b4 <_printf_i+0x214>
 800f8ce:	e7eb      	b.n	800f8a8 <_printf_i+0x208>
 800f8d0:	2500      	movs	r5, #0
 800f8d2:	f104 0619 	add.w	r6, r4, #25
 800f8d6:	e7f5      	b.n	800f8c4 <_printf_i+0x224>
 800f8d8:	0800fb7d 	.word	0x0800fb7d
 800f8dc:	0800fb8e 	.word	0x0800fb8e

0800f8e0 <memmove>:
 800f8e0:	4288      	cmp	r0, r1
 800f8e2:	b510      	push	{r4, lr}
 800f8e4:	eb01 0402 	add.w	r4, r1, r2
 800f8e8:	d902      	bls.n	800f8f0 <memmove+0x10>
 800f8ea:	4284      	cmp	r4, r0
 800f8ec:	4623      	mov	r3, r4
 800f8ee:	d807      	bhi.n	800f900 <memmove+0x20>
 800f8f0:	1e43      	subs	r3, r0, #1
 800f8f2:	42a1      	cmp	r1, r4
 800f8f4:	d008      	beq.n	800f908 <memmove+0x28>
 800f8f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f8fe:	e7f8      	b.n	800f8f2 <memmove+0x12>
 800f900:	4402      	add	r2, r0
 800f902:	4601      	mov	r1, r0
 800f904:	428a      	cmp	r2, r1
 800f906:	d100      	bne.n	800f90a <memmove+0x2a>
 800f908:	bd10      	pop	{r4, pc}
 800f90a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f90e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f912:	e7f7      	b.n	800f904 <memmove+0x24>

0800f914 <memchr>:
 800f914:	b2c9      	uxtb	r1, r1
 800f916:	4402      	add	r2, r0
 800f918:	b510      	push	{r4, lr}
 800f91a:	4290      	cmp	r0, r2
 800f91c:	4603      	mov	r3, r0
 800f91e:	d101      	bne.n	800f924 <memchr+0x10>
 800f920:	2300      	movs	r3, #0
 800f922:	e003      	b.n	800f92c <memchr+0x18>
 800f924:	781c      	ldrb	r4, [r3, #0]
 800f926:	3001      	adds	r0, #1
 800f928:	428c      	cmp	r4, r1
 800f92a:	d1f6      	bne.n	800f91a <memchr+0x6>
 800f92c:	4618      	mov	r0, r3
 800f92e:	bd10      	pop	{r4, pc}

0800f930 <_realloc_r>:
 800f930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f934:	4680      	mov	r8, r0
 800f936:	4614      	mov	r4, r2
 800f938:	460e      	mov	r6, r1
 800f93a:	b921      	cbnz	r1, 800f946 <_realloc_r+0x16>
 800f93c:	4611      	mov	r1, r2
 800f93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f942:	f7ff bb85 	b.w	800f050 <_malloc_r>
 800f946:	b92a      	cbnz	r2, 800f954 <_realloc_r+0x24>
 800f948:	4625      	mov	r5, r4
 800f94a:	f7ff fc93 	bl	800f274 <_free_r>
 800f94e:	4628      	mov	r0, r5
 800f950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f954:	f000 f81b 	bl	800f98e <_malloc_usable_size_r>
 800f958:	4284      	cmp	r4, r0
 800f95a:	4607      	mov	r7, r0
 800f95c:	d802      	bhi.n	800f964 <_realloc_r+0x34>
 800f95e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f962:	d812      	bhi.n	800f98a <_realloc_r+0x5a>
 800f964:	4621      	mov	r1, r4
 800f966:	4640      	mov	r0, r8
 800f968:	f7ff fb72 	bl	800f050 <_malloc_r>
 800f96c:	4605      	mov	r5, r0
 800f96e:	2800      	cmp	r0, #0
 800f970:	d0ed      	beq.n	800f94e <_realloc_r+0x1e>
 800f972:	42bc      	cmp	r4, r7
 800f974:	4622      	mov	r2, r4
 800f976:	4631      	mov	r1, r6
 800f978:	bf28      	it	cs
 800f97a:	463a      	movcs	r2, r7
 800f97c:	f7ff fc6c 	bl	800f258 <memcpy>
 800f980:	4631      	mov	r1, r6
 800f982:	4640      	mov	r0, r8
 800f984:	f7ff fc76 	bl	800f274 <_free_r>
 800f988:	e7e1      	b.n	800f94e <_realloc_r+0x1e>
 800f98a:	4635      	mov	r5, r6
 800f98c:	e7df      	b.n	800f94e <_realloc_r+0x1e>

0800f98e <_malloc_usable_size_r>:
 800f98e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f992:	1f18      	subs	r0, r3, #4
 800f994:	2b00      	cmp	r3, #0
 800f996:	bfbc      	itt	lt
 800f998:	580b      	ldrlt	r3, [r1, r0]
 800f99a:	18c0      	addlt	r0, r0, r3
 800f99c:	4770      	bx	lr
	...

0800f9a0 <_init>:
 800f9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9a2:	bf00      	nop
 800f9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9a6:	bc08      	pop	{r3}
 800f9a8:	469e      	mov	lr, r3
 800f9aa:	4770      	bx	lr

0800f9ac <_fini>:
 800f9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ae:	bf00      	nop
 800f9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9b2:	bc08      	pop	{r3}
 800f9b4:	469e      	mov	lr, r3
 800f9b6:	4770      	bx	lr
