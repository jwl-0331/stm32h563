
stm32h563_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffc4  08000250  08000250  00010250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .Table4CLI    00000018  08010214  08010214  00020214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       00000260  0801022c  0801022c  0002022c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801048c  0801048c  00030160  2**0
                  CONTENTS
  5 .ARM          00000008  0801048c  0801048c  0002048c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08010494  08010494  00030160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08010494  08010494  00020494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08010498  08010498  00020498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000a0  20000000  0801049c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RAMVectorTable 000000c0  200000a0  0801053c  000300a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000039f0  20000160  080105fc  00030160  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20003b50  080105fc  00033b50  2**0
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY
 15 .debug_info   00030023  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000064a1  00000000  00000000  000601fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000026c0  00000000  00000000  000666a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001de0  00000000  00000000  00068d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003c31a  00000000  00000000  0006ab40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003166f  00000000  00000000  000a6e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017069a  00000000  00000000  000d84c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a938  00000000  00000000  00248b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004b  00000000  00000000  0025349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000160 	.word	0x20000160
 800026c:	00000000 	.word	0x00000000
 8000270:	080101fc 	.word	0x080101fc

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000164 	.word	0x20000164
 800028c:	080101fc 	.word	0x080101fc

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b982 	b.w	80005d0 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ea:	460d      	mov	r5, r1
 80002ec:	4604      	mov	r4, r0
 80002ee:	460f      	mov	r7, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d146      	bne.n	8000382 <__udivmoddi4+0x9e>
 80002f4:	428a      	cmp	r2, r1
 80002f6:	4694      	mov	ip, r2
 80002f8:	d95e      	bls.n	80003b8 <__udivmoddi4+0xd4>
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	b143      	cbz	r3, 8000312 <__udivmoddi4+0x2e>
 8000300:	fa02 fc03 	lsl.w	ip, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	409c      	lsls	r4, r3
 800030c:	fa20 f202 	lsr.w	r2, r0, r2
 8000310:	4317      	orrs	r7, r2
 8000312:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000316:	fa1f f58c 	uxth.w	r5, ip
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fbb7 f1fe 	udiv	r1, r7, lr
 8000320:	fb0e 7711 	mls	r7, lr, r1, r7
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800032c:	4290      	cmp	r0, r2
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x5e>
 8000330:	eb1c 0202 	adds.w	r2, ip, r2
 8000334:	f101 37ff 	add.w	r7, r1, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x5c>
 800033a:	4290      	cmp	r0, r2
 800033c:	f200 8134 	bhi.w	80005a8 <__udivmoddi4+0x2c4>
 8000340:	4639      	mov	r1, r7
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	fb00 f505 	mul.w	r5, r0, r5
 8000352:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000356:	42a5      	cmp	r5, r4
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x88>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x86>
 8000364:	42a5      	cmp	r5, r4
 8000366:	f200 8119 	bhi.w	800059c <__udivmoddi4+0x2b8>
 800036a:	4610      	mov	r0, r2
 800036c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	2100      	movs	r1, #0
 8000374:	b11e      	cbz	r6, 800037e <__udivmoddi4+0x9a>
 8000376:	40dc      	lsrs	r4, r3
 8000378:	2300      	movs	r3, #0
 800037a:	e9c6 4300 	strd	r4, r3, [r6]
 800037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0xb4>
 8000386:	2e00      	cmp	r6, #0
 8000388:	f000 80fc 	beq.w	8000584 <__udivmoddi4+0x2a0>
 800038c:	2100      	movs	r1, #0
 800038e:	e9c6 0500 	strd	r0, r5, [r6]
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	d14c      	bne.n	800043a <__udivmoddi4+0x156>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f0c0 80f2 	bcc.w	800058a <__udivmoddi4+0x2a6>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f240 80ef 	bls.w	800058a <__udivmoddi4+0x2a6>
 80003ac:	4608      	mov	r0, r1
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e5      	beq.n	800037e <__udivmoddi4+0x9a>
 80003b2:	e9c6 4700 	strd	r4, r7, [r6]
 80003b6:	e7e2      	b.n	800037e <__udivmoddi4+0x9a>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xd8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f382 	clz	r3, r2
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 809f 	bne.w	8000504 <__udivmoddi4+0x220>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f5fe 	udiv	r5, r2, lr
 80003d6:	fb0e 2015 	mls	r0, lr, r5, r2
 80003da:	0c22      	lsrs	r2, r4, #16
 80003dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e0:	fb07 f005 	mul.w	r0, r7, r5
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d90f      	bls.n	8000408 <__udivmoddi4+0x124>
 80003e8:	eb1c 0202 	adds.w	r2, ip, r2
 80003ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f0:	bf2c      	ite	cs
 80003f2:	f04f 0901 	movcs.w	r9, #1
 80003f6:	f04f 0900 	movcc.w	r9, #0
 80003fa:	4290      	cmp	r0, r2
 80003fc:	d903      	bls.n	8000406 <__udivmoddi4+0x122>
 80003fe:	f1b9 0f00 	cmp.w	r9, #0
 8000402:	f000 80ce 	beq.w	80005a2 <__udivmoddi4+0x2be>
 8000406:	4645      	mov	r5, r8
 8000408:	1a12      	subs	r2, r2, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000410:	fb0e 2210 	mls	r2, lr, r0, r2
 8000414:	fb00 f707 	mul.w	r7, r0, r7
 8000418:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041c:	42a7      	cmp	r7, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x14e>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 32ff 	add.w	r2, r0, #4294967295
 8000428:	d202      	bcs.n	8000430 <__udivmoddi4+0x14c>
 800042a:	42a7      	cmp	r7, r4
 800042c:	f200 80b3 	bhi.w	8000596 <__udivmoddi4+0x2b2>
 8000430:	4610      	mov	r0, r2
 8000432:	1be4      	subs	r4, r4, r7
 8000434:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000438:	e79c      	b.n	8000374 <__udivmoddi4+0x90>
 800043a:	f1c1 0420 	rsb	r4, r1, #32
 800043e:	408b      	lsls	r3, r1
 8000440:	fa05 fc01 	lsl.w	ip, r5, r1
 8000444:	fa22 f704 	lsr.w	r7, r2, r4
 8000448:	40e5      	lsrs	r5, r4
 800044a:	408a      	lsls	r2, r1
 800044c:	431f      	orrs	r7, r3
 800044e:	fa20 f304 	lsr.w	r3, r0, r4
 8000452:	4088      	lsls	r0, r1
 8000454:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000458:	ea43 030c 	orr.w	r3, r3, ip
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb5 fef8 	udiv	lr, r5, r8
 8000468:	fb08 551e 	mls	r5, r8, lr, r5
 800046c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000470:	fb0e f90c 	mul.w	r9, lr, ip
 8000474:	45a9      	cmp	r9, r5
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1b2>
 8000478:	197d      	adds	r5, r7, r5
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a9      	cmp	r9, r5
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b0>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 808d 	beq.w	80005ae <__udivmoddi4+0x2ca>
 8000494:	46d6      	mov	lr, sl
 8000496:	eba5 0509 	sub.w	r5, r5, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb5 f3f8 	udiv	r3, r5, r8
 80004a2:	fb08 5513 	mls	r5, r8, r3, r5
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004ae:	45ac      	cmp	ip, r5
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1dc>
 80004b2:	197d      	adds	r5, r7, r5
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1da>
 80004ba:	45ac      	cmp	ip, r5
 80004bc:	d87e      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004c4:	eba5 050c 	sub.w	r5, r5, ip
 80004c8:	fba3 9802 	umull	r9, r8, r3, r2
 80004cc:	4545      	cmp	r5, r8
 80004ce:	46ce      	mov	lr, r9
 80004d0:	46c4      	mov	ip, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1f6>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x200>
 80004d6:	4548      	cmp	r0, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x200>
 80004da:	3b01      	subs	r3, #1
 80004dc:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e0:	eb68 0c07 	sbc.w	ip, r8, r7
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d06f      	beq.n	80005c8 <__udivmoddi4+0x2e4>
 80004e8:	ebb0 020e 	subs.w	r2, r0, lr
 80004ec:	eb65 050c 	sbc.w	r5, r5, ip
 80004f0:	40ca      	lsrs	r2, r1
 80004f2:	fa05 f404 	lsl.w	r4, r5, r4
 80004f6:	40cd      	lsrs	r5, r1
 80004f8:	4618      	mov	r0, r3
 80004fa:	4314      	orrs	r4, r2
 80004fc:	2100      	movs	r1, #0
 80004fe:	e9c6 4500 	strd	r4, r5, [r6]
 8000502:	e73c      	b.n	800037e <__udivmoddi4+0x9a>
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	f1c3 0220 	rsb	r2, r3, #32
 800050c:	4099      	lsls	r1, r3
 800050e:	409c      	lsls	r4, r3
 8000510:	40d5      	lsrs	r5, r2
 8000512:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000516:	fa20 f202 	lsr.w	r2, r0, r2
 800051a:	fa1f f78c 	uxth.w	r7, ip
 800051e:	fbb5 f0fe 	udiv	r0, r5, lr
 8000522:	430a      	orrs	r2, r1
 8000524:	fb0e 5510 	mls	r5, lr, r0, r5
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052e:	fb00 f507 	mul.w	r5, r0, r7
 8000532:	428d      	cmp	r5, r1
 8000534:	d90e      	bls.n	8000554 <__udivmoddi4+0x270>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	bf2c      	ite	cs
 8000540:	f04f 0901 	movcs.w	r9, #1
 8000544:	f04f 0900 	movcc.w	r9, #0
 8000548:	428d      	cmp	r5, r1
 800054a:	d902      	bls.n	8000552 <__udivmoddi4+0x26e>
 800054c:	f1b9 0f00 	cmp.w	r9, #0
 8000550:	d031      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 8000552:	4640      	mov	r0, r8
 8000554:	1b49      	subs	r1, r1, r5
 8000556:	b292      	uxth	r2, r2
 8000558:	fbb1 f5fe 	udiv	r5, r1, lr
 800055c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000560:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000564:	fb05 f107 	mul.w	r1, r5, r7
 8000568:	4291      	cmp	r1, r2
 800056a:	d907      	bls.n	800057c <__udivmoddi4+0x298>
 800056c:	eb1c 0202 	adds.w	r2, ip, r2
 8000570:	f105 38ff 	add.w	r8, r5, #4294967295
 8000574:	d201      	bcs.n	800057a <__udivmoddi4+0x296>
 8000576:	4291      	cmp	r1, r2
 8000578:	d823      	bhi.n	80005c2 <__udivmoddi4+0x2de>
 800057a:	4645      	mov	r5, r8
 800057c:	1a52      	subs	r2, r2, r1
 800057e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000582:	e726      	b.n	80003d2 <__udivmoddi4+0xee>
 8000584:	4631      	mov	r1, r6
 8000586:	4630      	mov	r0, r6
 8000588:	e6f9      	b.n	800037e <__udivmoddi4+0x9a>
 800058a:	1a84      	subs	r4, r0, r2
 800058c:	eb65 0203 	sbc.w	r2, r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	4617      	mov	r7, r2
 8000594:	e70b      	b.n	80003ae <__udivmoddi4+0xca>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74a      	b.n	8000432 <__udivmoddi4+0x14e>
 800059c:	4464      	add	r4, ip
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e4      	b.n	800036c <__udivmoddi4+0x88>
 80005a2:	3d02      	subs	r5, #2
 80005a4:	4462      	add	r2, ip
 80005a6:	e72f      	b.n	8000408 <__udivmoddi4+0x124>
 80005a8:	3902      	subs	r1, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e6c9      	b.n	8000342 <__udivmoddi4+0x5e>
 80005ae:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b2:	443d      	add	r5, r7
 80005b4:	e76f      	b.n	8000496 <__udivmoddi4+0x1b2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4461      	add	r1, ip
 80005ba:	e7cb      	b.n	8000554 <__udivmoddi4+0x270>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443d      	add	r5, r7
 80005c0:	e77e      	b.n	80004c0 <__udivmoddi4+0x1dc>
 80005c2:	3d02      	subs	r5, #2
 80005c4:	4462      	add	r2, ip
 80005c6:	e7d9      	b.n	800057c <__udivmoddi4+0x298>
 80005c8:	4618      	mov	r0, r3
 80005ca:	4631      	mov	r1, r6
 80005cc:	e6d7      	b.n	800037e <__udivmoddi4+0x9a>
 80005ce:	bf00      	nop

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AppMain>:
svTaskTimer_DEF(svTimer, 10);

void MX_FREERTOS_Init(void);

void AppMain(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005d8:	b662      	cpsie	i
}
 80005da:	bf00      	nop
  __enable_irq();
  RTC_Init();
 80005dc:	f001 f854 	bl	8001688 <RTC_Init>
  Reset_Init();
 80005e0:	f001 f8c0 	bl	8001764 <Reset_Init>
  //Flash_Init();
  svTaskTimer_InitTimers(&svTimer, HAL_GetTick);
 80005e4:	490d      	ldr	r1, [pc, #52]	; (800061c <AppMain+0x48>)
 80005e6:	480e      	ldr	r0, [pc, #56]	; (8000620 <AppMain+0x4c>)
 80005e8:	f00c fb93 	bl	800cd12 <svTaskTimer_InitTimers>
  UART_Init(_DEF_UART1, 115200);
 80005ec:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005f0:	2000      	movs	r0, #0
 80005f2:	f001 f8ff 	bl	80017f4 <UART_Init>
  svDebugInit();
 80005f6:	f001 fb29 	bl	8001c4c <svDebugInit>
  LED_Init();
 80005fa:	f000 ff95 	bl	8001528 <LED_Init>
  LED_SimpleAnimation();
 80005fe:	f000 ffed 	bl	80015dc <LED_SimpleAnimation>
  //DebugMsg(DEBUGMSG_APP, "\r\n<< svCLI TEST : >>\r\n");
  //uint32_t pre_time = HAL_GetTick();

  /* Init scheduler */
  osKernelInitialize();
 8000602:	f00c fd75 	bl	800d0f0 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000606:	f000 f80d 	bl	8000624 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800060a:	f00c fd97 	bl	800d13c <osKernelStart>
  while(1)
  {
    svDebugProcess();
 800060e:	f001 fac5 	bl	8001b9c <svDebugProcess>
    svTaskTimer_CheckTimers(&svTimer);
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <AppMain+0x4c>)
 8000614:	f00c fc6f 	bl	800cef6 <svTaskTimer_CheckTimers>
    svDebugProcess();
 8000618:	e7f9      	b.n	800060e <AppMain+0x3a>
 800061a:	bf00      	nop
 800061c:	08001d59 	.word	0x08001d59
 8000620:	20000000 	.word	0x20000000

08000624 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
  xTaskCreate(vTask1, "Task1", 128, NULL, 1, NULL);
 800062a:	2300      	movs	r3, #0
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2301      	movs	r3, #1
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	4919      	ldr	r1, [pc, #100]	; (800069c <MX_FREERTOS_Init+0x78>)
 8000638:	4819      	ldr	r0, [pc, #100]	; (80006a0 <MX_FREERTOS_Init+0x7c>)
 800063a:	f00d fa03 	bl	800da44 <xTaskCreate>
  xTaskCreate(vTask2, "Task2", 128, NULL, 1, NULL);
 800063e:	2300      	movs	r3, #0
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	4916      	ldr	r1, [pc, #88]	; (80006a4 <MX_FREERTOS_Init+0x80>)
 800064c:	4816      	ldr	r0, [pc, #88]	; (80006a8 <MX_FREERTOS_Init+0x84>)
 800064e:	f00d f9f9 	bl	800da44 <xTaskCreate>
  xTaskCreate(vTask3, "Task3", 128, NULL, 50, NULL);
 8000652:	2300      	movs	r3, #0
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2332      	movs	r3, #50	; 0x32
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	4913      	ldr	r1, [pc, #76]	; (80006ac <MX_FREERTOS_Init+0x88>)
 8000660:	4813      	ldr	r0, [pc, #76]	; (80006b0 <MX_FREERTOS_Init+0x8c>)
 8000662:	f00d f9ef 	bl	800da44 <xTaskCreate>

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000666:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <MX_FREERTOS_Init+0x90>)
 8000668:	2100      	movs	r1, #0
 800066a:	4813      	ldr	r0, [pc, #76]	; (80006b8 <MX_FREERTOS_Init+0x94>)
 800066c:	f00c fd90 	bl	800d190 <osThreadNew>
 8000670:	4603      	mov	r3, r0
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_FREERTOS_Init+0x98>)
 8000674:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <MX_FREERTOS_Init+0x9c>)
 8000678:	2100      	movs	r1, #0
 800067a:	4812      	ldr	r0, [pc, #72]	; (80006c4 <MX_FREERTOS_Init+0xa0>)
 800067c:	f00c fd88 	bl	800d190 <osThreadNew>
 8000680:	4603      	mov	r3, r0
 8000682:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <MX_FREERTOS_Init+0xa4>)
 8000684:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000686:	4a11      	ldr	r2, [pc, #68]	; (80006cc <MX_FREERTOS_Init+0xa8>)
 8000688:	2100      	movs	r1, #0
 800068a:	4811      	ldr	r0, [pc, #68]	; (80006d0 <MX_FREERTOS_Init+0xac>)
 800068c:	f00c fd80 	bl	800d190 <osThreadNew>
 8000690:	4603      	mov	r3, r0
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <MX_FREERTOS_Init+0xb0>)
 8000694:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	08010250 	.word	0x08010250
 80006a0:	08000729 	.word	0x08000729
 80006a4:	08010258 	.word	0x08010258
 80006a8:	08000745 	.word	0x08000745
 80006ac:	08010260 	.word	0x08010260
 80006b0:	08000761 	.word	0x08000761
 80006b4:	080103ac 	.word	0x080103ac
 80006b8:	080006d9 	.word	0x080006d9
 80006bc:	2000026c 	.word	0x2000026c
 80006c0:	080103d0 	.word	0x080103d0
 80006c4:	080006e9 	.word	0x080006e9
 80006c8:	20000270 	.word	0x20000270
 80006cc:	080103f4 	.word	0x080103f4
 80006d0:	08000709 	.word	0x08000709
 80006d4:	20000274 	.word	0x20000274

080006d8 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006e0:	2001      	movs	r0, #1
 80006e2:	f00c fde6 	bl	800d2b2 <osDelay>
 80006e6:	e7fb      	b.n	80006e0 <StartDefaultTask+0x8>

080006e8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN myTask02 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_4);
 80006f0:	2110      	movs	r1, #16
 80006f2:	4804      	ldr	r0, [pc, #16]	; (8000704 <StartTask02+0x1c>)
 80006f4:	f002 fbe6 	bl	8002ec4 <HAL_GPIO_TogglePin>
    osDelay(500);
 80006f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fc:	f00c fdd9 	bl	800d2b2 <osDelay>
    HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_4);
 8000700:	e7f6      	b.n	80006f0 <StartTask02+0x8>
 8000702:	bf00      	nop
 8000704:	42021400 	.word	0x42021400

08000708 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN myTask03 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000710:	2101      	movs	r1, #1
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <StartTask03+0x1c>)
 8000714:	f002 fbd6 	bl	8002ec4 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000718:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071c:	f00c fdc9 	bl	800d2b2 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000720:	e7f6      	b.n	8000710 <StartTask03+0x8>
 8000722:	bf00      	nop
 8000724:	42020400 	.word	0x42020400

08000728 <vTask1>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void vTask1(void *pvParameters)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  while(1)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000730:	2101      	movs	r1, #1
 8000732:	4803      	ldr	r0, [pc, #12]	; (8000740 <vTask1+0x18>)
 8000734:	f002 fbc6 	bl	8002ec4 <HAL_GPIO_TogglePin>
    vTaskDelay(1);
 8000738:	2001      	movs	r0, #1
 800073a:	f00d fadd 	bl	800dcf8 <vTaskDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800073e:	e7f7      	b.n	8000730 <vTask1+0x8>
 8000740:	42020400 	.word	0x42020400

08000744 <vTask2>:
  }
}
void vTask2(void *pvParameters)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  while(1)
  {
    HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
 800074c:	2110      	movs	r1, #16
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <vTask2+0x18>)
 8000750:	f002 fbb8 	bl	8002ec4 <HAL_GPIO_TogglePin>
    vTaskDelay(1);
 8000754:	2001      	movs	r0, #1
 8000756:	f00d facf 	bl	800dcf8 <vTaskDelay>
    HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
 800075a:	e7f7      	b.n	800074c <vTask2+0x8>
 800075c:	42021400 	.word	0x42021400

08000760 <vTask3>:
  }
}
void vTask3(void *pvParameters)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  while(1)
  {
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_4);
 8000768:	2110      	movs	r1, #16
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <vTask3+0x18>)
 800076c:	f002 fbaa 	bl	8002ec4 <HAL_GPIO_TogglePin>
    vTaskDelay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f00d fac1 	bl	800dcf8 <vTaskDelay>
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_4);
 8000776:	e7f7      	b.n	8000768 <vTask3+0x8>
 8000778:	42021800 	.word	0x42021800

0800077c <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000786:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800078a:	4909      	ldr	r1, [pc, #36]	; (80007b0 <LL_AHB2_GRP1_EnableClock+0x34>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4313      	orrs	r3, r2
 8000790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000796:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4013      	ands	r3, r2
 800079e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007a0:	68fb      	ldr	r3, [r7, #12]
}
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	44020c00 	.word	0x44020c00

080007b4 <LL_APB1_GRP2_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1HENR, Periphs);
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <LL_APB1_GRP2_EnableClock+0x34>)
 80007be:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80007c2:	4909      	ldr	r1, [pc, #36]	; (80007e8 <LL_APB1_GRP2_EnableClock+0x34>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1HENR, Periphs);
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <LL_APB1_GRP2_EnableClock+0x34>)
 80007ce:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4013      	ands	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007d8:	68fb      	ldr	r3, [r7, #12]
}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	44020c00 	.word	0x44020c00

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  g_RCC_CSR = RCC->RSR;         // Get Boot Reason
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <main+0x68>)
 80007f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007f8:	4a17      	ldr	r2, [pc, #92]	; (8000858 <main+0x6c>)
 80007fa:	6013      	str	r3, [r2, #0]
  /* Copy the vector table from the Flash (mapped at the base of the application
    load address 0x08006000) to the base address of the SRAM at 0x20000000. */
  for(int i = 0; i < 48; i++)
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	e00d      	b.n	800081e <main+0x32>
  {
    VectorTable[i] = *(__IO uint32_t*)(APPLICATION_ADDRESS + (i<<2));
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800080a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4912      	ldr	r1, [pc, #72]	; (800085c <main+0x70>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < 48; i++)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3301      	adds	r3, #1
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b2f      	cmp	r3, #47	; 0x2f
 8000822:	ddee      	ble.n	8000802 <main+0x16>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f001 fa5e 	bl	8001ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f81a 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082c:	f000 f938 	bl	8000aa0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000830:	f000 f888 	bl	8000944 <MX_ETH_Init>
  MX_UCPD1_Init();
 8000834:	f000 f8de 	bl	80009f4 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000838:	f000 f900 	bl	8000a3c <MX_USB_PCD_Init>
  MX_ICACHE_Init();
 800083c:	f000 f8ce 	bl	80009dc <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  AppMain();
 8000840:	f7ff fec8 	bl	80005d4 <AppMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000844:	f00c fc54 	bl	800d0f0 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000848:	f7ff feec 	bl	8000624 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800084c:	f00c fc76 	bl	800d13c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000850:	e7fe      	b.n	8000850 <main+0x64>
 8000852:	bf00      	nop
 8000854:	44020c00 	.word	0x44020c00
 8000858:	20000728 	.word	0x20000728
 800085c:	200000a0 	.word	0x200000a0

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b09c      	sub	sp, #112	; 0x70
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2250      	movs	r2, #80	; 0x50
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f00f f8e2 	bl	800fa38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <SystemClock_Config+0xe0>)
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	4a2d      	ldr	r2, [pc, #180]	; (8000940 <SystemClock_Config+0xe0>)
 800088c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000890:	6113      	str	r3, [r2, #16]
 8000892:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <SystemClock_Config+0xe0>)
 8000894:	691b      	ldr	r3, [r3, #16]
 8000896:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800089e:	bf00      	nop
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <SystemClock_Config+0xe0>)
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	f003 0308 	and.w	r3, r3, #8
 80008a8:	2b08      	cmp	r3, #8
 80008aa:	d1f9      	bne.n	80008a0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80008ac:	232b      	movs	r3, #43	; 0x2b
 80008ae:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b6:	2301      	movs	r3, #1
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80008ba:	2308      	movs	r3, #8
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008be:	2340      	movs	r3, #64	; 0x40
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80008c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80008d2:	2303      	movs	r3, #3
 80008d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008da:	2310      	movs	r3, #16
 80008dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008de:	2302      	movs	r3, #2
 80008e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80008ea:	230c      	movs	r3, #12
 80008ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 fc0a 	bl	8003114 <HAL_RCC_OscConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000906:	f000 f9b3 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	231f      	movs	r3, #31
 800090c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090e:	2303      	movs	r3, #3
 8000910:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	2103      	movs	r1, #3
 8000928:	4618      	mov	r0, r3
 800092a:	f003 f82b 	bl	8003984 <HAL_RCC_ClockConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000934:	f000 f99c 	bl	8000c70 <Error_Handler>
  }
}
 8000938:	bf00      	nop
 800093a:	3770      	adds	r7, #112	; 0x70
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	44020800 	.word	0x44020800

08000944 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_ETH_Init+0x80>)
 800094a:	4a1f      	ldr	r2, [pc, #124]	; (80009c8 <MX_ETH_Init+0x84>)
 800094c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MX_ETH_Init+0x88>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_ETH_Init+0x88>)
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_ETH_Init+0x88>)
 800095c:	22e1      	movs	r2, #225	; 0xe1
 800095e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_ETH_Init+0x88>)
 8000962:	2200      	movs	r2, #0
 8000964:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_ETH_Init+0x88>)
 8000968:	2200      	movs	r2, #0
 800096a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_ETH_Init+0x88>)
 800096e:	2200      	movs	r2, #0
 8000970:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_ETH_Init+0x80>)
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <MX_ETH_Init+0x88>)
 8000976:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_ETH_Init+0x80>)
 800097a:	2201      	movs	r2, #1
 800097c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_ETH_Init+0x80>)
 8000980:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <MX_ETH_Init+0x8c>)
 8000982:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_ETH_Init+0x80>)
 8000986:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <MX_ETH_Init+0x90>)
 8000988:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_ETH_Init+0x80>)
 800098c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000990:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_ETH_Init+0x80>)
 8000994:	f001 fbac 	bl	80020f0 <HAL_ETH_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800099e:	f000 f967 	bl	8000c70 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009a2:	2238      	movs	r2, #56	; 0x38
 80009a4:	2100      	movs	r1, #0
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_ETH_Init+0x94>)
 80009a8:	f00f f846 	bl	800fa38 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_ETH_Init+0x94>)
 80009ae:	2221      	movs	r2, #33	; 0x21
 80009b0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_ETH_Init+0x94>)
 80009b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009b8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_ETH_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000370 	.word	0x20000370
 80009c8:	40028000 	.word	0x40028000
 80009cc:	2000072c 	.word	0x2000072c
 80009d0:	20000310 	.word	0x20000310
 80009d4:	200002b0 	.word	0x200002b0
 80009d8:	20000278 	.word	0x20000278

080009dc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80009e0:	f002 fa8a 	bl	8002ef8 <HAL_ICACHE_Enable>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80009ea:	f000 f941 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
 8000a08:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000a0a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a0e:	f7ff fed1 	bl	80007b4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a12:	2002      	movs	r0, #2
 8000a14:	f7ff feb2 	bl	800077c <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB13   ------> UCPD1_CC1
  PB14   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 8000a18:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a1c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	463b      	mov	r3, r7
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4803      	ldr	r0, [pc, #12]	; (8000a38 <MX_UCPD1_Init+0x44>)
 8000a2c:	f00b fa3b 	bl	800bea6 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	42020400 	.word	0x42020400

08000a3c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a42:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <MX_USB_PCD_Init+0x60>)
 8000a44:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a48:	2208      	movs	r2, #8
 8000a4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USB_PCD_Init+0x5c>)
 8000a84:	f002 fa48 	bl	8002f18 <HAL_PCD_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8000a8e:	f000 f8ef 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000420 	.word	0x20000420
 8000a9c:	40016000 	.word	0x40016000

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b5f      	ldr	r3, [pc, #380]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000abc:	4a5d      	ldr	r2, [pc, #372]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ac6:	4b5b      	ldr	r3, [pc, #364]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000acc:	f003 0304 	and.w	r3, r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad4:	4b57      	ldr	r3, [pc, #348]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ada:	4a56      	ldr	r2, [pc, #344]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000adc:	f043 0320 	orr.w	r3, r3, #32
 8000ae0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ae4:	4b53      	ldr	r3, [pc, #332]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aea:	f003 0320 	and.w	r3, r3, #32
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	4b50      	ldr	r3, [pc, #320]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000af8:	4a4e      	ldr	r2, [pc, #312]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b02:	4b4c      	ldr	r3, [pc, #304]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b48      	ldr	r3, [pc, #288]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b16:	4a47      	ldr	r2, [pc, #284]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b20:	4b44      	ldr	r3, [pc, #272]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b41      	ldr	r3, [pc, #260]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b34:	4a3f      	ldr	r2, [pc, #252]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000b36:	f043 0302 	orr.w	r3, r3, #2
 8000b3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b3e:	4b3d      	ldr	r3, [pc, #244]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4c:	4b39      	ldr	r3, [pc, #228]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b52:	4a38      	ldr	r2, [pc, #224]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b5c:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b6a:	4b32      	ldr	r3, [pc, #200]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b70:	4a30      	ldr	r2, [pc, #192]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b7a:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <MX_GPIO_Init+0x194>)
 8000b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	482a      	ldr	r0, [pc, #168]	; (8000c38 <MX_GPIO_Init+0x198>)
 8000b8e:	f002 f981 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2101      	movs	r1, #1
 8000b96:	4829      	ldr	r0, [pc, #164]	; (8000c3c <MX_GPIO_Init+0x19c>)
 8000b98:	f002 f97c 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	4827      	ldr	r0, [pc, #156]	; (8000c40 <MX_GPIO_Init+0x1a0>)
 8000ba2:	f002 f977 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000ba6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bac:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <MX_GPIO_Init+0x1a4>)
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4823      	ldr	r0, [pc, #140]	; (8000c48 <MX_GPIO_Init+0x1a8>)
 8000bbc:	f002 f818 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4818      	ldr	r0, [pc, #96]	; (8000c38 <MX_GPIO_Init+0x198>)
 8000bd8:	f002 f80a 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <MX_GPIO_Init+0x19c>)
 8000bf4:	f001 fffc 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480c      	ldr	r0, [pc, #48]	; (8000c40 <MX_GPIO_Init+0x1a0>)
 8000c10:	f001 ffee 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <MX_GPIO_Init+0x1a4>)
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <MX_GPIO_Init+0x1a0>)
 8000c28:	f001 ffe2 	bl	8002bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2c:	bf00      	nop
 8000c2e:	3730      	adds	r7, #48	; 0x30
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	44020c00 	.word	0x44020c00
 8000c38:	42021400 	.word	0x42021400
 8000c3c:	42020400 	.word	0x42020400
 8000c40:	42021800 	.word	0x42021800
 8000c44:	10110000 	.word	0x10110000
 8000c48:	42020800 	.word	0x42020800

08000c4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c5e:	f001 f867 	bl	8001d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40001000 	.word	0x40001000

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>

08000c7a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	210f      	movs	r1, #15
 8000c82:	f06f 0001 	mvn.w	r0, #1
 8000c86:	f001 f965 	bl	8001f54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	; 0x38
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a51      	ldr	r2, [pc, #324]	; (8000df4 <HAL_ETH_MspInit+0x164>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	f040 809b 	bne.w	8000dea <HAL_ETH_MspInit+0x15a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cb4:	4b50      	ldr	r3, [pc, #320]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cba:	4a4f      	ldr	r2, [pc, #316]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000cbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000cc4:	4b4c      	ldr	r3, [pc, #304]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cce:	623b      	str	r3, [r7, #32]
 8000cd0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8000cd2:	4b49      	ldr	r3, [pc, #292]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd8:	4a47      	ldr	r2, [pc, #284]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000ce2:	4b45      	ldr	r3, [pc, #276]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8000cf0:	4b41      	ldr	r3, [pc, #260]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a40      	ldr	r2, [pc, #256]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000d00:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d14:	4a38      	ldr	r2, [pc, #224]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d1e:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d32:	4a31      	ldr	r2, [pc, #196]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d3c:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d50:	4a29      	ldr	r2, [pc, #164]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000d52:	f043 0302 	orr.w	r3, r3, #2
 8000d56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d5a:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <HAL_ETH_MspInit+0x168>)
 8000d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB15     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d68:	2332      	movs	r3, #50	; 0x32
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d74:	2302      	movs	r3, #2
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d78:	230b      	movs	r3, #11
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	481e      	ldr	r0, [pc, #120]	; (8000dfc <HAL_ETH_MspInit+0x16c>)
 8000d84:	f001 ff34 	bl	8002bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_7;
 8000d88:	23a6      	movs	r3, #166	; 0xa6
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d94:	2302      	movs	r3, #2
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d98:	230b      	movs	r3, #11
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	4817      	ldr	r0, [pc, #92]	; (8000e00 <HAL_ETH_MspInit+0x170>)
 8000da4:	f001 ff24 	bl	8002bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8000da8:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db6:	2302      	movs	r3, #2
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dba:	230b      	movs	r3, #11
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480f      	ldr	r0, [pc, #60]	; (8000e04 <HAL_ETH_MspInit+0x174>)
 8000dc6:	f001 ff13 	bl	8002bf0 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2105      	movs	r1, #5
 8000dce:	206a      	movs	r0, #106	; 0x6a
 8000dd0:	f001 f8c0 	bl	8001f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000dd4:	206a      	movs	r0, #106	; 0x6a
 8000dd6:	f001 f8d7 	bl	8001f88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2105      	movs	r1, #5
 8000dde:	206b      	movs	r0, #107	; 0x6b
 8000de0:	f001 f8b8 	bl	8001f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8000de4:	206b      	movs	r0, #107	; 0x6b
 8000de6:	f001 f8cf 	bl	8001f88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3738      	adds	r7, #56	; 0x38
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40028000 	.word	0x40028000
 8000df8:	44020c00 	.word	0x44020c00
 8000dfc:	42020800 	.word	0x42020800
 8000e00:	42020000 	.word	0x42020000
 8000e04:	42020400 	.word	0x42020400

08000e08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0c6      	sub	sp, #280	; 0x118
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e16:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e18:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e20:	4618      	mov	r0, r3
 8000e22:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000e26:	461a      	mov	r2, r3
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f00e fe05 	bl	800fa38 <memset>
  if(hrtc->Instance==RTC)
 8000e2e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a21      	ldr	r2, [pc, #132]	; (8000ec0 <HAL_RTC_MspInit+0xb8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d13a      	bne.n	8000eb6 <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e40:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e44:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8000e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 f905 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8000e74:	f7ff fefc 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_RTC_MspInit+0xbc>)
 8000e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e7e:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <HAL_RTC_MspInit+0xbc>)
 8000e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_RTC_MspInit+0xbc>)
 8000e8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_RTC_MspInit+0xbc>)
 8000e90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e94:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_RTC_MspInit+0xbc>)
 8000e9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e9e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8000ea2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ea6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000eb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000eb4:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	44007800 	.word	0x44007800
 8000ec4:	44020c00 	.word	0x44020c00

08000ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0ce      	sub	sp, #312	; 0x138
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ed2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000ed6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000eec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	2100      	movs	r1, #0
 8000efa:	f00e fd9d 	bl	800fa38 <memset>
  if(huart->Instance==USART1)
 8000efe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f02:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a6e      	ldr	r2, [pc, #440]	; (80010c4 <HAL_UART_MspInit+0x1fc>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d165      	bne.n	8000fdc <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f14:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000f18:	f04f 0201 	mov.w	r2, #1
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f28:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	65da      	str	r2, [r3, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 f89f 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8000f40:	f7ff fe96 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f44:	4b60      	ldr	r3, [pc, #384]	; (80010c8 <HAL_UART_MspInit+0x200>)
 8000f46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f4a:	4a5f      	ldr	r2, [pc, #380]	; (80010c8 <HAL_UART_MspInit+0x200>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000f54:	4b5c      	ldr	r3, [pc, #368]	; (80010c8 <HAL_UART_MspInit+0x200>)
 8000f56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f5a:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8000f5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f62:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f6c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f70:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	4b55      	ldr	r3, [pc, #340]	; (80010c8 <HAL_UART_MspInit+0x200>)
 8000f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f78:	4a53      	ldr	r2, [pc, #332]	; (80010c8 <HAL_UART_MspInit+0x200>)
 8000f7a:	f043 0302 	orr.w	r3, r3, #2
 8000f7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f82:	4b51      	ldr	r3, [pc, #324]	; (80010c8 <HAL_UART_MspInit+0x200>)
 8000f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f88:	f003 0202 	and.w	r2, r3, #2
 8000f8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f90:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f9e:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fa0:	23c0      	movs	r3, #192	; 0xc0
 8000fa2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbe:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4841      	ldr	r0, [pc, #260]	; (80010cc <HAL_UART_MspInit+0x204>)
 8000fc6:	f001 fe13 	bl	8002bf0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2105      	movs	r1, #5
 8000fce:	203a      	movs	r0, #58	; 0x3a
 8000fd0:	f000 ffc0 	bl	8001f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fd4:	203a      	movs	r0, #58	; 0x3a
 8000fd6:	f000 ffd7 	bl	8001f88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fda:	e06e      	b.n	80010ba <HAL_UART_MspInit+0x1f2>
  else if(huart->Instance==USART3)
 8000fdc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000fe0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a39      	ldr	r2, [pc, #228]	; (80010d0 <HAL_UART_MspInit+0x208>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d165      	bne.n	80010ba <HAL_UART_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ff2:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000ff6:	f04f 0204 	mov.w	r2, #4
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001002:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001006:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800100a:	2200      	movs	r2, #0
 800100c:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100e:	f107 0318 	add.w	r3, r7, #24
 8001012:	4618      	mov	r0, r3
 8001014:	f003 f830 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_UART_MspInit+0x15a>
      Error_Handler();
 800101e:	f7ff fe27 	bl	8000c70 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <HAL_UART_MspInit+0x200>)
 8001024:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001028:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <HAL_UART_MspInit+0x200>)
 800102a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800102e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001032:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <HAL_UART_MspInit+0x200>)
 8001034:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001038:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 800103c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001040:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800104a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800104e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <HAL_UART_MspInit+0x200>)
 8001052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001056:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <HAL_UART_MspInit+0x200>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_UART_MspInit+0x200>)
 8001062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001066:	f003 0208 	and.w	r2, r3, #8
 800106a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800106e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800107c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800107e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001082:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001098:	2307      	movs	r3, #7
 800109a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80010a2:	4619      	mov	r1, r3
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <HAL_UART_MspInit+0x20c>)
 80010a6:	f001 fda3 	bl	8002bf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2105      	movs	r1, #5
 80010ae:	203c      	movs	r0, #60	; 0x3c
 80010b0:	f000 ff50 	bl	8001f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010b4:	203c      	movs	r0, #60	; 0x3c
 80010b6:	f000 ff67 	bl	8001f88 <HAL_NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40013800 	.word	0x40013800
 80010c8:	44020c00 	.word	0x44020c00
 80010cc:	42020400 	.word	0x42020400
 80010d0:	40004800 	.word	0x40004800
 80010d4:	42020c00 	.word	0x42020c00

080010d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0cc      	sub	sp, #304	; 0x130
 80010dc:	af00      	add	r7, sp, #0
 80010de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80010e6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001100:	4618      	mov	r0, r3
 8001102:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001106:	461a      	mov	r2, r3
 8001108:	2100      	movs	r1, #0
 800110a:	f00e fc95 	bl	800fa38 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800110e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a33      	ldr	r2, [pc, #204]	; (80011e8 <HAL_PCD_MspInit+0x110>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d15e      	bne.n	80011de <HAL_PCD_MspInit+0x106>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001124:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	f04f 0310 	mov.w	r3, #16
 8001130:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001138:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800113c:	2230      	movs	r2, #48	; 0x30
 800113e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	4618      	mov	r0, r3
 8001148:	f002 ff96 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_PCD_MspInit+0x7e>
    {
      Error_Handler();
 8001152:	f7ff fd8d 	bl	8000c70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <HAL_PCD_MspInit+0x114>)
 8001158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800115c:	4a23      	ldr	r2, [pc, #140]	; (80011ec <HAL_PCD_MspInit+0x114>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_PCD_MspInit+0x114>)
 8001168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800116c:	f003 0201 	and.w	r2, r3, #1
 8001170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001174:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800117e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001182:	681b      	ldr	r3, [r3, #0]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001184:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001188:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800119e:	230a      	movs	r3, #10
 80011a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80011a8:	4619      	mov	r1, r3
 80011aa:	4811      	ldr	r0, [pc, #68]	; (80011f0 <HAL_PCD_MspInit+0x118>)
 80011ac:	f001 fd20 	bl	8002bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_PCD_MspInit+0x114>)
 80011b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011b6:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <HAL_PCD_MspInit+0x114>)
 80011b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011bc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_PCD_MspInit+0x114>)
 80011c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011c6:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 80011ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80011dc:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40016000 	.word	0x40016000
 80011ec:	44020c00 	.word	0x44020c00
 80011f0:	42020000 	.word	0x42020000

080011f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	; 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011fc:	4b33      	ldr	r3, [pc, #204]	; (80012cc <HAL_InitTick+0xd8>)
 80011fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001202:	4a32      	ldr	r2, [pc, #200]	; (80012cc <HAL_InitTick+0xd8>)
 8001204:	f043 0310 	orr.w	r3, r3, #16
 8001208:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <HAL_InitTick+0xd8>)
 800120e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800121a:	f107 020c 	add.w	r2, r7, #12
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f002 feef 	bl	8004008 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001230:	2b00      	cmp	r3, #0
 8001232:	d103      	bne.n	800123c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001234:	f002 fea6 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 8001238:	6378      	str	r0, [r7, #52]	; 0x34
 800123a:	e004      	b.n	8001246 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800123c:	f002 fea2 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 8001240:	4603      	mov	r3, r0
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8001246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001248:	095b      	lsrs	r3, r3, #5
 800124a:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <HAL_InitTick+0xdc>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	09db      	lsrs	r3, r3, #7
 8001252:	3b01      	subs	r3, #1
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_InitTick+0xe0>)
 8001258:	4a1f      	ldr	r2, [pc, #124]	; (80012d8 <HAL_InitTick+0xe4>)
 800125a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_InitTick+0xe0>)
 800125e:	2263      	movs	r2, #99	; 0x63
 8001260:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <HAL_InitTick+0xe0>)
 8001264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001266:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_InitTick+0xe0>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_InitTick+0xe0>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001274:	4817      	ldr	r0, [pc, #92]	; (80012d4 <HAL_InitTick+0xe0>)
 8001276:	f008 f8db 	bl	8009430 <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001280:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001284:	2b00      	cmp	r3, #0
 8001286:	d118      	bne.n	80012ba <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001288:	4812      	ldr	r0, [pc, #72]	; (80012d4 <HAL_InitTick+0xe0>)
 800128a:	f008 f933 	bl	80094f4 <HAL_TIM_Base_Start_IT>
 800128e:	4603      	mov	r3, r0
 8001290:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001294:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10e      	bne.n	80012ba <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b0f      	cmp	r3, #15
 80012a0:	d808      	bhi.n	80012b4 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80012a2:	2200      	movs	r2, #0
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	2031      	movs	r0, #49	; 0x31
 80012a8:	f000 fe54 	bl	8001f54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <HAL_InitTick+0xe8>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e002      	b.n	80012ba <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80012ba:	2031      	movs	r0, #49	; 0x31
 80012bc:	f000 fe64 	bl	8001f88 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 80012c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3738      	adds	r7, #56	; 0x38
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	44020c00 	.word	0x44020c00
 80012d0:	0a7c5ac5 	.word	0x0a7c5ac5
 80012d4:	20000734 	.word	0x20000734
 80012d8:	40001000 	.word	0x40001000
 80012dc:	2000002c 	.word	0x2000002c

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e4:	e7fe      	b.n	80012e4 <NMI_Handler+0x4>

080012e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <MemManage_Handler+0x4>

080012f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler+0x4>

080012fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <TIM6_IRQHandler+0x10>)
 8001312:	f008 f99d 	bl	8009650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000734 	.word	0x20000734

08001320 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <USART1_IRQHandler+0x10>)
 8001326:	f008 fdb9 	bl	8009e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200007cc 	.word	0x200007cc

08001334 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <USART3_IRQHandler+0x10>)
 800133a:	f008 fdaf 	bl	8009e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000860 	.word	0x20000860

08001348 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <ETH_IRQHandler+0x10>)
 800134e:	f000 ffb5 	bl	80022bc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000370 	.word	0x20000370

0800135c <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet Wakeup global interrupt.
  */
void ETH_WKUP_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <ETH_WKUP_IRQHandler+0x10>)
 8001362:	f000 ffab 	bl	80022bc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000370 	.word	0x20000370

08001370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <_sbrk+0x5c>)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <_sbrk+0x60>)
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <_sbrk+0x64>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <_sbrk+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	d207      	bcs.n	80013b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a0:	f00e fb76 	bl	800fa90 <__errno>
 80013a4:	4603      	mov	r3, r0
 80013a6:	220c      	movs	r2, #12
 80013a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	e009      	b.n	80013c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <_sbrk+0x64>)
 80013c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200a0000 	.word	0x200a0000
 80013d0:	00000400 	.word	0x00000400
 80013d4:	20000780 	.word	0x20000780
 80013d8:	20003b50 	.word	0x20003b50

080013dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013e2:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <SystemInit+0xdc>)
 80013e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e8:	4a33      	ldr	r2, [pc, #204]	; (80014b8 <SystemInit+0xdc>)
 80013ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80013f2:	4b32      	ldr	r3, [pc, #200]	; (80014bc <SystemInit+0xe0>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80013f8:	4b30      	ldr	r3, [pc, #192]	; (80014bc <SystemInit+0xe0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80013fe:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <SystemInit+0xe0>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001404:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <SystemInit+0xe0>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	492c      	ldr	r1, [pc, #176]	; (80014bc <SystemInit+0xe0>)
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <SystemInit+0xe4>)
 800140c:	4013      	ands	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001410:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <SystemInit+0xe0>)
 8001412:	2200      	movs	r2, #0
 8001414:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001416:	4b29      	ldr	r3, [pc, #164]	; (80014bc <SystemInit+0xe0>)
 8001418:	2200      	movs	r2, #0
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <SystemInit+0xe0>)
 800141e:	2200      	movs	r2, #0
 8001420:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <SystemInit+0xe0>)
 8001424:	4a27      	ldr	r2, [pc, #156]	; (80014c4 <SystemInit+0xe8>)
 8001426:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <SystemInit+0xe0>)
 800142a:	2200      	movs	r2, #0
 800142c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <SystemInit+0xe0>)
 8001430:	4a24      	ldr	r2, [pc, #144]	; (80014c4 <SystemInit+0xe8>)
 8001432:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001434:	4b21      	ldr	r3, [pc, #132]	; (80014bc <SystemInit+0xe0>)
 8001436:	2200      	movs	r2, #0
 8001438:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <SystemInit+0xe0>)
 800143c:	4a21      	ldr	r2, [pc, #132]	; (80014c4 <SystemInit+0xe8>)
 800143e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <SystemInit+0xe0>)
 8001442:	2200      	movs	r2, #0
 8001444:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <SystemInit+0xe0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <SystemInit+0xe0>)
 800144c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001450:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <SystemInit+0xe0>)
 8001454:	2200      	movs	r2, #0
 8001456:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <SystemInit+0xdc>)
 800145a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800145e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <SystemInit+0xec>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001468:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001470:	d003      	beq.n	800147a <SystemInit+0x9e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001478:	d117      	bne.n	80014aa <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <SystemInit+0xec>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <SystemInit+0xec>)
 8001488:	4a10      	ldr	r2, [pc, #64]	; (80014cc <SystemInit+0xf0>)
 800148a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <SystemInit+0xec>)
 800148e:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <SystemInit+0xf4>)
 8001490:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <SystemInit+0xec>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <SystemInit+0xec>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <SystemInit+0xec>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <SystemInit+0xec>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	61d3      	str	r3, [r2, #28]
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00
 80014bc:	44020c00 	.word	0x44020c00
 80014c0:	eae2eae3 	.word	0xeae2eae3
 80014c4:	01010280 	.word	0x01010280
 80014c8:	40022000 	.word	0x40022000
 80014cc:	08192a3b 	.word	0x08192a3b
 80014d0:	4c5d6e7f 	.word	0x4c5d6e7f

080014d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014d8:	f7ff ff80 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <LoopForever+0x6>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	; (8001514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <LoopForever+0xe>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	; (8001520 <LoopForever+0x16>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001502:	f00e facb 	bl	800fa9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001506:	f7ff f971 	bl	80007ec <main>

0800150a <LoopForever>:

LoopForever:
    b LoopForever
 800150a:	e7fe      	b.n	800150a <LoopForever>
  ldr   r0, =_estack
 800150c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001518:	0801049c 	.word	0x0801049c
  ldr r2, =_sbss
 800151c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001520:	20003b50 	.word	0x20003b50

08001524 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC1_IRQHandler>
	...

08001528 <LED_Init>:
static BOOL s_bLEDInit = FALSE;
static BOOL s_bLEDEnable = FALSE;

// Function Declarations
void LED_Init(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  s_bLEDInit = TRUE;
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <LED_Init+0x1c>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]
  s_bLEDEnable = TRUE;
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <LED_Init+0x20>)
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000784 	.word	0x20000784
 8001548:	20000788 	.word	0x20000788

0800154c <LED_OnOff>:
{
  s_bLEDEnable = bEnable;
}

void LED_OnOff(LED_e eLED, BOOL bOn)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if(FALSE == s_bLEDEnable)
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <LED_OnOff+0x7c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d02d      	beq.n	80015bc <LED_OnOff+0x70>
    return;
  }

  GPIO_TypeDef* LED_GPIO_Port;
  uint16_t LED_GPIO_Pin;
  if(s_bLEDInit)
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <LED_OnOff+0x80>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d02c      	beq.n	80015c2 <LED_OnOff+0x76>
  {
    switch(eLED){
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d010      	beq.n	8001590 <LED_OnOff+0x44>
 800156e:	2b03      	cmp	r3, #3
 8001570:	dc26      	bgt.n	80015c0 <LED_OnOff+0x74>
 8001572:	2b01      	cmp	r3, #1
 8001574:	d002      	beq.n	800157c <LED_OnOff+0x30>
 8001576:	2b02      	cmp	r3, #2
 8001578:	d005      	beq.n	8001586 <LED_OnOff+0x3a>
      case LED_RED:
        LED_GPIO_Port = LED3_RED_GPIO_Port;
        LED_GPIO_Pin = LED3_RED_Pin;
        break;
      default:
        return;
 800157a:	e021      	b.n	80015c0 <LED_OnOff+0x74>
        LED_GPIO_Port = LED1_GREEN_GPIO_Port;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <LED_OnOff+0x84>)
 800157e:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED1_GREEN_Pin;
 8001580:	2301      	movs	r3, #1
 8001582:	817b      	strh	r3, [r7, #10]
        break;
 8001584:	e009      	b.n	800159a <LED_OnOff+0x4e>
        LED_GPIO_Port = LED2_YELLOW_GPIO_Port;
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <LED_OnOff+0x88>)
 8001588:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED2_YELLOW_Pin;
 800158a:	2310      	movs	r3, #16
 800158c:	817b      	strh	r3, [r7, #10]
        break;
 800158e:	e004      	b.n	800159a <LED_OnOff+0x4e>
        LED_GPIO_Port = LED3_RED_GPIO_Port;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <LED_OnOff+0x8c>)
 8001592:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED3_RED_Pin;
 8001594:	2310      	movs	r3, #16
 8001596:	817b      	strh	r3, [r7, #10]
        break;
 8001598:	bf00      	nop
        break;
    }
    if(bOn)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d006      	beq.n	80015ae <LED_OnOff+0x62>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
 80015a0:	897b      	ldrh	r3, [r7, #10]
 80015a2:	2201      	movs	r2, #1
 80015a4:	4619      	mov	r1, r3
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f001 fc74 	bl	8002e94 <HAL_GPIO_WritePin>
 80015ac:	e009      	b.n	80015c2 <LED_OnOff+0x76>
    }
    else
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 80015ae:	897b      	ldrh	r3, [r7, #10]
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f001 fc6d 	bl	8002e94 <HAL_GPIO_WritePin>
 80015ba:	e002      	b.n	80015c2 <LED_OnOff+0x76>
    return;
 80015bc:	bf00      	nop
 80015be:	e000      	b.n	80015c2 <LED_OnOff+0x76>
        return;
 80015c0:	bf00      	nop
    }
  }
}
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000788 	.word	0x20000788
 80015cc:	20000784 	.word	0x20000784
 80015d0:	42020400 	.word	0x42020400
 80015d4:	42021400 	.word	0x42021400
 80015d8:	42021800 	.word	0x42021800

080015dc <LED_SimpleAnimation>:
  LED_OnOff(LED_YELLOW, bOn);
  LED_OnOff(LED_RED, bOn);
}

void LED_SimpleAnimation(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
  for(int i =0; i<3; i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	e02c      	b.n	8001642 <LED_SimpleAnimation+0x66>
  {
    LED_OnOff(LED_GREEN, TRUE);
 80015e8:	2101      	movs	r1, #1
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff ffae 	bl	800154c <LED_OnOff>
    HAL_Delay(50);
 80015f0:	2032      	movs	r0, #50	; 0x32
 80015f2:	f000 fbbd 	bl	8001d70 <HAL_Delay>
    LED_OnOff(LED_YELLOW, TRUE);
 80015f6:	2101      	movs	r1, #1
 80015f8:	2002      	movs	r0, #2
 80015fa:	f7ff ffa7 	bl	800154c <LED_OnOff>
    HAL_Delay(50);
 80015fe:	2032      	movs	r0, #50	; 0x32
 8001600:	f000 fbb6 	bl	8001d70 <HAL_Delay>
    LED_OnOff(LED_RED, TRUE);
 8001604:	2101      	movs	r1, #1
 8001606:	2003      	movs	r0, #3
 8001608:	f7ff ffa0 	bl	800154c <LED_OnOff>
    HAL_Delay(50);
 800160c:	2032      	movs	r0, #50	; 0x32
 800160e:	f000 fbaf 	bl	8001d70 <HAL_Delay>
    LED_OnOff(LED_GREEN, FALSE);
 8001612:	2100      	movs	r1, #0
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff ff99 	bl	800154c <LED_OnOff>
    HAL_Delay(50);
 800161a:	2032      	movs	r0, #50	; 0x32
 800161c:	f000 fba8 	bl	8001d70 <HAL_Delay>
    LED_OnOff(LED_YELLOW, FALSE);
 8001620:	2100      	movs	r1, #0
 8001622:	2002      	movs	r0, #2
 8001624:	f7ff ff92 	bl	800154c <LED_OnOff>
    HAL_Delay(50);
 8001628:	2032      	movs	r0, #50	; 0x32
 800162a:	f000 fba1 	bl	8001d70 <HAL_Delay>
    LED_OnOff(LED_RED, FALSE);
 800162e:	2100      	movs	r1, #0
 8001630:	2003      	movs	r0, #3
 8001632:	f7ff ff8b 	bl	800154c <LED_OnOff>
    HAL_Delay(50);
 8001636:	2032      	movs	r0, #50	; 0x32
 8001638:	f000 fb9a 	bl	8001d70 <HAL_Delay>
  for(int i =0; i<3; i++)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3301      	adds	r3, #1
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b02      	cmp	r3, #2
 8001646:	ddcf      	ble.n	80015e8 <LED_SimpleAnimation+0xc>
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <CLI_LEDTest>:

#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (LED_TEST,"LED","LED [1~11] [0,1,2] ",CLI_LEDTest);

static void CLI_LEDTest(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	603b      	str	r3, [r7, #0]
  if (nCount == 2) {
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d10b      	bne.n	800167e <CLI_LEDTest+0x2c>
    LED_OnOff((LED_e)nFirst, (BOOL)(nSecond != 0));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf14      	ite	ne
 8001670:	2301      	movne	r3, #1
 8001672:	2300      	moveq	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4619      	mov	r1, r3
 8001678:	4610      	mov	r0, r2
 800167a:	f7ff ff67 	bl	800154c <LED_OnOff>
  }
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <RTC_Init>:
#include "RTC.h"

static RTC_HandleTypeDef hrtc;

BOOL RTC_Init()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 800168e:	2301      	movs	r3, #1
 8001690:	61fb      	str	r3, [r7, #28]
  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001692:	463b      	mov	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
 80016a0:	615a      	str	r2, [r3, #20]
 80016a2:	619a      	str	r2, [r3, #24]

  hrtc.Instance = RTC;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <RTC_Init+0x94>)
 80016a6:	4a1e      	ldr	r2, [pc, #120]	; (8001720 <RTC_Init+0x98>)
 80016a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <RTC_Init+0x94>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <RTC_Init+0x94>)
 80016b2:	227f      	movs	r2, #127	; 0x7f
 80016b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <RTC_Init+0x94>)
 80016b8:	22ff      	movs	r2, #255	; 0xff
 80016ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <RTC_Init+0x94>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <RTC_Init+0x94>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <RTC_Init+0x94>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <RTC_Init+0x94>)
 80016d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <RTC_Init+0x94>)
 80016d8:	2200      	movs	r2, #0
 80016da:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016dc:	480f      	ldr	r0, [pc, #60]	; (800171c <RTC_Init+0x94>)
 80016de:	f007 fd1d 	bl	800911c <HAL_RTC_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <RTC_Init+0x64>
  {
    Error_Handler();
 80016e8:	f7ff fac2 	bl	8000c70 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80016ec:	2300      	movs	r3, #0
 80016ee:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	4619      	mov	r1, r3
 8001700:	4806      	ldr	r0, [pc, #24]	; (800171c <RTC_Init+0x94>)
 8001702:	f007 fe67 	bl	80093d4 <HAL_RTCEx_PrivilegeModeSet>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <RTC_Init+0x88>
  {
    Error_Handler();
 800170c:	f7ff fab0 	bl	8000c70 <Error_Handler>
  }

  return ret;
 8001710:	69fb      	ldr	r3, [r7, #28]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3720      	adds	r7, #32
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000078c 	.word	0x2000078c
 8001720:	44007800 	.word	0x44007800

08001724 <RTC_BackupRegRead>:

uint32_t RTC_BackupRegRead(uint32_t index)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4804      	ldr	r0, [pc, #16]	; (8001740 <RTC_BackupRegRead+0x1c>)
 8001730:	f007 fe3a 	bl	80093a8 <HAL_RTCEx_BKUPRead>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000078c 	.word	0x2000078c

08001744 <RTC_BackupRegWrite>:
void RTC_BackupRegWrite(uint32_t index, uint32_t data)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4803      	ldr	r0, [pc, #12]	; (8001760 <RTC_BackupRegWrite+0x1c>)
 8001754:	f007 fe10 	bl	8009378 <HAL_RTCEx_BKUPWrite>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	2000078c 	.word	0x2000078c

08001764 <Reset_Init>:
    }
  }
}

BOOL Reset_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 800176a:	2301      	movs	r3, #1
 800176c:	603b      	str	r3, [r7, #0]

  BOOL is_debug = FALSE;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
  // 만약 디버거가 연결된 경우, Debug Flag True
  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <Reset_Init+0x80>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <Reset_Init+0x1e>
  {
    is_debug = TRUE;
 800177e:	2301      	movs	r3, #1
 8001780:	607b      	str	r3, [r7, #4]
  }
  RTC_BackupRegWrite(RESET_REG_COUNT+1, RESET_REG_MAGICNUMBER);
 8001782:	4919      	ldr	r1, [pc, #100]	; (80017e8 <Reset_Init+0x84>)
 8001784:	2002      	movs	r0, #2
 8001786:	f7ff ffdd 	bl	8001744 <RTC_BackupRegWrite>

  // Reset 핀이 눌리고 , Debug 모드가 아니라면
  // 0.5초 안에 누른 Reset만 증가
  if((RCC->RSR & (1<<26) && is_debug != TRUE) && RTC_BackupRegRead(RESET_REG_COUNT+1) == RESET_REG_MAGICNUMBER)
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <Reset_Init+0x88>)
 800178c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001790:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01c      	beq.n	80017d2 <Reset_Init+0x6e>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d019      	beq.n	80017d2 <Reset_Init+0x6e>
 800179e:	2002      	movs	r0, #2
 80017a0:	f7ff ffc0 	bl	8001724 <RTC_BackupRegRead>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <Reset_Init+0x84>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d112      	bne.n	80017d2 <Reset_Init+0x6e>
  {
    RTC_BackupRegWrite(RESET_REG_COUNT, RTC_BackupRegRead(RESET_REG_COUNT) + 1);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff ffb9 	bl	8001724 <RTC_BackupRegRead>
 80017b2:	4603      	mov	r3, r0
 80017b4:	3301      	adds	r3, #1
 80017b6:	4619      	mov	r1, r3
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff ffc3 	bl	8001744 <RTC_BackupRegWrite>
    HAL_Delay(500);
 80017be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017c2:	f000 fad5 	bl	8001d70 <HAL_Delay>
    s_ResetCount = RTC_BackupRegRead(RESET_REG_COUNT);   //For getting reset count
 80017c6:	2001      	movs	r0, #1
 80017c8:	f7ff ffac 	bl	8001724 <RTC_BackupRegRead>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <Reset_Init+0x8c>)
 80017d0:	6013      	str	r3, [r2, #0]
  }


  //clear 다시 0으로
  RTC_BackupRegWrite(RESET_REG_COUNT,0);
 80017d2:	2100      	movs	r1, #0
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7ff ffb5 	bl	8001744 <RTC_BackupRegWrite>

  return ret;
 80017da:	683b      	ldr	r3, [r7, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	e000edf0 	.word	0xe000edf0
 80017e8:	20240215 	.word	0x20240215
 80017ec:	44020c00 	.word	0x44020c00
 80017f0:	200007bc 	.word	0x200007bc

080017f4 <UART_Init>:

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

void  UART_Init(uint8_t ch, uint32_t baud)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  switch(ch)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <UART_Init+0x1a>
 8001806:	2b01      	cmp	r3, #1
 8001808:	f000 8085 	beq.w	8001916 <UART_Init+0x122>
      {
        s_bUARTConnected[ch] = TRUE;
        g_bDebugTx = TRUE;
      }
    default:
      break;
 800180c:	e106      	b.n	8001a1c <UART_Init+0x228>
      huart1.Instance = USART1;
 800180e:	4b86      	ldr	r3, [pc, #536]	; (8001a28 <UART_Init+0x234>)
 8001810:	4a86      	ldr	r2, [pc, #536]	; (8001a2c <UART_Init+0x238>)
 8001812:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 8001814:	4a84      	ldr	r2, [pc, #528]	; (8001a28 <UART_Init+0x234>)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b83      	ldr	r3, [pc, #524]	; (8001a28 <UART_Init+0x234>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b81      	ldr	r3, [pc, #516]	; (8001a28 <UART_Init+0x234>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 8001826:	4b80      	ldr	r3, [pc, #512]	; (8001a28 <UART_Init+0x234>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b7e      	ldr	r3, [pc, #504]	; (8001a28 <UART_Init+0x234>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b7d      	ldr	r3, [pc, #500]	; (8001a28 <UART_Init+0x234>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001838:	4b7b      	ldr	r3, [pc, #492]	; (8001a28 <UART_Init+0x234>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183e:	4b7a      	ldr	r3, [pc, #488]	; (8001a28 <UART_Init+0x234>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001844:	4b78      	ldr	r3, [pc, #480]	; (8001a28 <UART_Init+0x234>)
 8001846:	2200      	movs	r2, #0
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800184a:	4b77      	ldr	r3, [pc, #476]	; (8001a28 <UART_Init+0x234>)
 800184c:	2200      	movs	r2, #0
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart1) != HAL_OK)
 8001850:	4875      	ldr	r0, [pc, #468]	; (8001a28 <UART_Init+0x234>)
 8001852:	f008 f9d3 	bl	8009bfc <HAL_UART_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00a      	beq.n	8001872 <UART_Init+0x7e>
        Error_Handler();
 800185c:	f7ff fa08 	bl	8000c70 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	4a73      	ldr	r2, [pc, #460]	; (8001a30 <UART_Init+0x23c>)
 8001864:	2100      	movs	r1, #0
 8001866:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 800186a:	4b72      	ldr	r3, [pc, #456]	; (8001a34 <UART_Init+0x240>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e037      	b.n	80018e2 <UART_Init+0xee>
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001872:	2100      	movs	r1, #0
 8001874:	486c      	ldr	r0, [pc, #432]	; (8001a28 <UART_Init+0x234>)
 8001876:	f00a f900 	bl	800ba7a <HAL_UARTEx_SetTxFifoThreshold>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00a      	beq.n	8001896 <UART_Init+0xa2>
        Error_Handler();
 8001880:	f7ff f9f6 	bl	8000c70 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	4a6a      	ldr	r2, [pc, #424]	; (8001a30 <UART_Init+0x23c>)
 8001888:	2100      	movs	r1, #0
 800188a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 800188e:	4b69      	ldr	r3, [pc, #420]	; (8001a34 <UART_Init+0x240>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e025      	b.n	80018e2 <UART_Init+0xee>
      else if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001896:	2100      	movs	r1, #0
 8001898:	4863      	ldr	r0, [pc, #396]	; (8001a28 <UART_Init+0x234>)
 800189a:	f00a f92c 	bl	800baf6 <HAL_UARTEx_SetRxFifoThreshold>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00a      	beq.n	80018ba <UART_Init+0xc6>
        Error_Handler();
 80018a4:	f7ff f9e4 	bl	8000c70 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	4a61      	ldr	r2, [pc, #388]	; (8001a30 <UART_Init+0x23c>)
 80018ac:	2100      	movs	r1, #0
 80018ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 80018b2:	4b60      	ldr	r3, [pc, #384]	; (8001a34 <UART_Init+0x240>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	e013      	b.n	80018e2 <UART_Init+0xee>
      else if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018ba:	485b      	ldr	r0, [pc, #364]	; (8001a28 <UART_Init+0x234>)
 80018bc:	f00a f8a4 	bl	800ba08 <HAL_UARTEx_DisableFifoMode>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00a      	beq.n	80018dc <UART_Init+0xe8>
        Error_Handler();
 80018c6:	f7ff f9d3 	bl	8000c70 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4a58      	ldr	r2, [pc, #352]	; (8001a30 <UART_Init+0x23c>)
 80018ce:	2100      	movs	r1, #0
 80018d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 80018d4:	4b57      	ldr	r3, [pc, #348]	; (8001a34 <UART_Init+0x240>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e002      	b.n	80018e2 <UART_Init+0xee>
        svRingBuffer_Reset(&g_uartRxBuff);
 80018dc:	4856      	ldr	r0, [pc, #344]	; (8001a38 <UART_Init+0x244>)
 80018de:	f00b f9ae 	bl	800cc3e <svRingBuffer_Reset>
      if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data,1) != HAL_OK)
 80018e2:	2201      	movs	r2, #1
 80018e4:	4955      	ldr	r1, [pc, #340]	; (8001a3c <UART_Init+0x248>)
 80018e6:	4850      	ldr	r0, [pc, #320]	; (8001a28 <UART_Init+0x234>)
 80018e8:	f008 fa76 	bl	8009dd8 <HAL_UART_Receive_IT>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <UART_Init+0x110>
        s_bUARTConnected[ch] = FALSE;
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <UART_Init+0x23c>)
 80018f6:	2100      	movs	r1, #0
 80018f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 80018fc:	4b4d      	ldr	r3, [pc, #308]	; (8001a34 <UART_Init+0x240>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
      break;
 8001902:	e08c      	b.n	8001a1e <UART_Init+0x22a>
        s_bUARTConnected[ch] = TRUE;
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4a4a      	ldr	r2, [pc, #296]	; (8001a30 <UART_Init+0x23c>)
 8001908:	2101      	movs	r1, #1
 800190a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = TRUE;
 800190e:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <UART_Init+0x240>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]
      break;
 8001914:	e083      	b.n	8001a1e <UART_Init+0x22a>
      huart3.Instance = USART3;
 8001916:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <UART_Init+0x24c>)
 8001918:	4a4a      	ldr	r2, [pc, #296]	; (8001a44 <UART_Init+0x250>)
 800191a:	601a      	str	r2, [r3, #0]
      huart3.Init.BaudRate = baud;
 800191c:	4a48      	ldr	r2, [pc, #288]	; (8001a40 <UART_Init+0x24c>)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6053      	str	r3, [r2, #4]
      huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b47      	ldr	r3, [pc, #284]	; (8001a40 <UART_Init+0x24c>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
      huart3.Init.StopBits = UART_STOPBITS_1;
 8001928:	4b45      	ldr	r3, [pc, #276]	; (8001a40 <UART_Init+0x24c>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
      huart3.Init.Parity = UART_PARITY_NONE;
 800192e:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <UART_Init+0x24c>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
      huart3.Init.Mode = UART_MODE_TX_RX;
 8001934:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <UART_Init+0x24c>)
 8001936:	220c      	movs	r2, #12
 8001938:	615a      	str	r2, [r3, #20]
      huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193a:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <UART_Init+0x24c>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
      huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001940:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <UART_Init+0x24c>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
      huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001946:	4b3e      	ldr	r3, [pc, #248]	; (8001a40 <UART_Init+0x24c>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
      huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800194c:	4b3c      	ldr	r3, [pc, #240]	; (8001a40 <UART_Init+0x24c>)
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	; 0x24
      huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001952:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <UART_Init+0x24c>)
 8001954:	2200      	movs	r2, #0
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart3) != HAL_OK)
 8001958:	4839      	ldr	r0, [pc, #228]	; (8001a40 <UART_Init+0x24c>)
 800195a:	f008 f94f 	bl	8009bfc <HAL_UART_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00a      	beq.n	800197a <UART_Init+0x186>
        Error_Handler();
 8001964:	f7ff f984 	bl	8000c70 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	4a31      	ldr	r2, [pc, #196]	; (8001a30 <UART_Init+0x23c>)
 800196c:	2100      	movs	r1, #0
 800196e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <UART_Init+0x240>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e037      	b.n	80019ea <UART_Init+0x1f6>
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800197a:	2100      	movs	r1, #0
 800197c:	4830      	ldr	r0, [pc, #192]	; (8001a40 <UART_Init+0x24c>)
 800197e:	f00a f87c 	bl	800ba7a <HAL_UARTEx_SetTxFifoThreshold>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00a      	beq.n	800199e <UART_Init+0x1aa>
        Error_Handler();
 8001988:	f7ff f972 	bl	8000c70 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	4a28      	ldr	r2, [pc, #160]	; (8001a30 <UART_Init+0x23c>)
 8001990:	2100      	movs	r1, #0
 8001992:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <UART_Init+0x240>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e025      	b.n	80019ea <UART_Init+0x1f6>
      else if(HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800199e:	2100      	movs	r1, #0
 80019a0:	4827      	ldr	r0, [pc, #156]	; (8001a40 <UART_Init+0x24c>)
 80019a2:	f00a f8a8 	bl	800baf6 <HAL_UARTEx_SetRxFifoThreshold>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00a      	beq.n	80019c2 <UART_Init+0x1ce>
        Error_Handler();
 80019ac:	f7ff f960 	bl	8000c70 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	4a1f      	ldr	r2, [pc, #124]	; (8001a30 <UART_Init+0x23c>)
 80019b4:	2100      	movs	r1, #0
 80019b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <UART_Init+0x240>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	e013      	b.n	80019ea <UART_Init+0x1f6>
      else if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019c2:	481f      	ldr	r0, [pc, #124]	; (8001a40 <UART_Init+0x24c>)
 80019c4:	f00a f820 	bl	800ba08 <HAL_UARTEx_DisableFifoMode>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00a      	beq.n	80019e4 <UART_Init+0x1f0>
        Error_Handler();
 80019ce:	f7ff f94f 	bl	8000c70 <Error_Handler>
        s_bUARTConnected[ch] = FALSE;
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <UART_Init+0x23c>)
 80019d6:	2100      	movs	r1, #0
 80019d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <UART_Init+0x240>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e002      	b.n	80019ea <UART_Init+0x1f6>
        svRingBuffer_Reset(&g_uartRxBuff);
 80019e4:	4814      	ldr	r0, [pc, #80]	; (8001a38 <UART_Init+0x244>)
 80019e6:	f00b f92a 	bl	800cc3e <svRingBuffer_Reset>
      if(HAL_UART_Receive_IT(&huart3, (uint8_t*)&rx_data,1) != HAL_OK)
 80019ea:	2201      	movs	r2, #1
 80019ec:	4913      	ldr	r1, [pc, #76]	; (8001a3c <UART_Init+0x248>)
 80019ee:	4814      	ldr	r0, [pc, #80]	; (8001a40 <UART_Init+0x24c>)
 80019f0:	f008 f9f2 	bl	8009dd8 <HAL_UART_Receive_IT>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d008      	beq.n	8001a0c <UART_Init+0x218>
        s_bUARTConnected[ch] = FALSE;
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <UART_Init+0x23c>)
 80019fe:	2100      	movs	r1, #0
 8001a00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = FALSE;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <UART_Init+0x240>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
      break;
 8001a0a:	e007      	b.n	8001a1c <UART_Init+0x228>
        s_bUARTConnected[ch] = TRUE;
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <UART_Init+0x23c>)
 8001a10:	2101      	movs	r1, #1
 8001a12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_bDebugTx = TRUE;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <UART_Init+0x240>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
      break;
 8001a1c:	bf00      	nop
  }
  return;
 8001a1e:	bf00      	nop
}
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200007cc 	.word	0x200007cc
 8001a2c:	40013800 	.word	0x40013800
 8001a30:	200007c4 	.word	0x200007c4
 8001a34:	20000974 	.word	0x20000974
 8001a38:	20000010 	.word	0x20000010
 8001a3c:	200007c0 	.word	0x200007c0
 8001a40:	20000860 	.word	0x20000860
 8001a44:	40004800 	.word	0x40004800

08001a48 <IsUartConnected>:

BOOL  IsUartConnected(uint8_t ch)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  return s_bUARTConnected[ch];
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <IsUartConnected+0x20>)
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	200007c4 	.word	0x200007c4

08001a6c <UART_Write>:

uint32_t  UART_Write(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status;

  switch(ch)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <UART_Write+0x20>
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d011      	beq.n	8001aae <UART_Write+0x42>
        ret = Len;
        g_bDebugTx = TRUE;
      }
      break;
    default:
      break;
 8001a8a:	e024      	b.n	8001ad6 <UART_Write+0x6a>
      status = HAL_UART_Transmit(&huart1, Buf, Len, 100);
 8001a8c:	88ba      	ldrh	r2, [r7, #4]
 8001a8e:	2364      	movs	r3, #100	; 0x64
 8001a90:	6839      	ldr	r1, [r7, #0]
 8001a92:	4813      	ldr	r0, [pc, #76]	; (8001ae0 <UART_Write+0x74>)
 8001a94:	f008 f902 	bl	8009c9c <HAL_UART_Transmit>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	72fb      	strb	r3, [r7, #11]
      if(status == HAL_OK)
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d116      	bne.n	8001ad0 <UART_Write+0x64>
        ret = Len;
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <UART_Write+0x78>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
      break;
 8001aac:	e010      	b.n	8001ad0 <UART_Write+0x64>
      status = HAL_UART_Transmit(&huart3, Buf, Len, 100);
 8001aae:	88ba      	ldrh	r2, [r7, #4]
 8001ab0:	2364      	movs	r3, #100	; 0x64
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <UART_Write+0x7c>)
 8001ab6:	f008 f8f1 	bl	8009c9c <HAL_UART_Transmit>
 8001aba:	4603      	mov	r3, r0
 8001abc:	72fb      	strb	r3, [r7, #11]
      if(status == HAL_OK)
 8001abe:	7afb      	ldrb	r3, [r7, #11]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <UART_Write+0x68>
        ret = Len;
 8001ac4:	88bb      	ldrh	r3, [r7, #4]
 8001ac6:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <UART_Write+0x78>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	601a      	str	r2, [r3, #0]
      break;
 8001ace:	e001      	b.n	8001ad4 <UART_Write+0x68>
      break;
 8001ad0:	bf00      	nop
 8001ad2:	e000      	b.n	8001ad6 <UART_Write+0x6a>
      break;
 8001ad4:	bf00      	nop
  }
  return ret;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200007cc 	.word	0x200007cc
 8001ae4:	20000974 	.word	0x20000974
 8001ae8:	20000860 	.word	0x20000860

08001aec <HAL_UART_RxCpltCallback>:
  return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <HAL_UART_RxCpltCallback+0x74>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d113      	bne.n	8001b26 <HAL_UART_RxCpltCallback+0x3a>
  {
    // For UART Test
    // UART_Printf(_DEF_UART1, "RxData : 0x%X\n", rx_data);
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_UART_RxCpltCallback+0x78>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4818      	ldr	r0, [pc, #96]	; (8001b68 <HAL_UART_RxCpltCallback+0x7c>)
 8001b06:	f00b f8b2 	bl	800cc6e <svRingBuffer_Push>
 8001b0a:	60b8      	str	r0, [r7, #8]
    if(result == -2 )
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f113 0f02 	cmn.w	r3, #2
 8001b12:	d102      	bne.n	8001b1a <HAL_UART_RxCpltCallback+0x2e>
    {
      svRingBuffer_Reset(&g_uartRxBuff);
 8001b14:	4814      	ldr	r0, [pc, #80]	; (8001b68 <HAL_UART_RxCpltCallback+0x7c>)
 8001b16:	f00b f892 	bl	800cc3e <svRingBuffer_Reset>
    }else
    {

    }
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data, 1);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4911      	ldr	r1, [pc, #68]	; (8001b64 <HAL_UART_RxCpltCallback+0x78>)
 8001b1e:	4813      	ldr	r0, [pc, #76]	; (8001b6c <HAL_UART_RxCpltCallback+0x80>)
 8001b20:	f008 f95a 	bl	8009dd8 <HAL_UART_Receive_IT>
    {

    }
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
  }
}
 8001b24:	e017      	b.n	8001b56 <HAL_UART_RxCpltCallback+0x6a>
  else if(huart->Instance == USART3)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_UART_RxCpltCallback+0x84>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d112      	bne.n	8001b56 <HAL_UART_RxCpltCallback+0x6a>
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_UART_RxCpltCallback+0x78>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	480c      	ldr	r0, [pc, #48]	; (8001b68 <HAL_UART_RxCpltCallback+0x7c>)
 8001b38:	f00b f899 	bl	800cc6e <svRingBuffer_Push>
 8001b3c:	60f8      	str	r0, [r7, #12]
    if(result == -2 )
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f113 0f02 	cmn.w	r3, #2
 8001b44:	d102      	bne.n	8001b4c <HAL_UART_RxCpltCallback+0x60>
      svRingBuffer_Reset(&g_uartRxBuff);
 8001b46:	4808      	ldr	r0, [pc, #32]	; (8001b68 <HAL_UART_RxCpltCallback+0x7c>)
 8001b48:	f00b f879 	bl	800cc3e <svRingBuffer_Reset>
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4905      	ldr	r1, [pc, #20]	; (8001b64 <HAL_UART_RxCpltCallback+0x78>)
 8001b50:	4808      	ldr	r0, [pc, #32]	; (8001b74 <HAL_UART_RxCpltCallback+0x88>)
 8001b52:	f008 f941 	bl	8009dd8 <HAL_UART_Receive_IT>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40013800 	.word	0x40013800
 8001b64:	200007c0 	.word	0x200007c0
 8001b68:	20000010 	.word	0x20000010
 8001b6c:	200007cc 	.word	0x200007cc
 8001b70:	40004800 	.word	0x40004800
 8001b74:	20000860 	.word	0x20000860

08001b78 <svDebugRxChar>:
  return ch;
}
#endif

char svDebugRxChar(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	if (svRingBuffer_GetCount(&g_rbDebugRx) > 0) {
 8001b7c:	4806      	ldr	r0, [pc, #24]	; (8001b98 <svDebugRxChar+0x20>)
 8001b7e:	f00b f83c 	bl	800cbfa <svRingBuffer_GetCount>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d004      	beq.n	8001b92 <svDebugRxChar+0x1a>
		return svRingBuffer_Pop(&g_rbDebugRx);
 8001b88:	4803      	ldr	r0, [pc, #12]	; (8001b98 <svDebugRxChar+0x20>)
 8001b8a:	f00b f8a4 	bl	800ccd6 <svRingBuffer_Pop>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	e000      	b.n	8001b94 <svDebugRxChar+0x1c>
	}
	else {
		return 0;
 8001b92:	2300      	movs	r3, #0
	}
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000010 	.word	0x20000010

08001b9c <svDebugProcess>:

void svDebugProcess(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
	if (IsUartConnected(_DEF_UART1)) {
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff ff50 	bl	8001a48 <IsUartConnected>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01a      	beq.n	8001be4 <svDebugProcess+0x48>
	  svCLI_Handler();
 8001bae:	f00a fed1 	bl	800c954 <svCLI_Handler>
		if (g_bDebugTx == TRUE) {
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <svDebugProcess+0x50>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d114      	bne.n	8001be4 <svDebugProcess+0x48>
			size_t nLength = lwrb_get_linear_block_read_length(&g_lwrbDebugTx);
 8001bba:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <svDebugProcess+0x54>)
 8001bbc:	f00d fdeb 	bl	800f796 <lwrb_get_linear_block_read_length>
 8001bc0:	6078      	str	r0, [r7, #4]
			if (nLength > 0) {
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00d      	beq.n	8001be4 <svDebugProcess+0x48>
			  /*
				if (nLength > UART_TX_DATA_SIZE) {
					nLength = UART_TX_DATA_SIZE;
				}
				*/
				UART_Write(_DEF_UART1, lwrb_get_linear_block_read_address(&g_lwrbDebugTx), nLength);
 8001bc8:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <svDebugProcess+0x54>)
 8001bca:	f00d fdc8 	bl	800f75e <lwrb_get_linear_block_read_address>
 8001bce:	4601      	mov	r1, r0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff ff48 	bl	8001a6c <UART_Write>
				lwrb_skip(&g_lwrbDebugTx, nLength);
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <svDebugProcess+0x54>)
 8001be0:	f00d fe0c 	bl	800f7fc <lwrb_skip>
				g_bDebugTx = TRUE;
		  }
		}
		*/
	}
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000974 	.word	0x20000974
 8001bf0:	20000978 	.word	0x20000978

08001bf4 <svDebugCallback>:

void svDebugCallback(LWRB_VOLATILE struct lwrb* buff, lwrb_evt_type_t evt, size_t bp)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	72fb      	strb	r3, [r7, #11]
	if (evt == LWRB_EVT_FULL) {
 8001c02:	7afb      	ldrb	r3, [r7, #11]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d11a      	bne.n	8001c3e <svDebugCallback+0x4a>
		if (IsUartConnected(_DEF_UART1)) {
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f7ff ff1d 	bl	8001a48 <IsUartConnected>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d014      	beq.n	8001c3e <svDebugCallback+0x4a>
			uint32_t uTick = HAL_GetTick();
 8001c14:	f000 f8a0 	bl	8001d58 <HAL_GetTick>
 8001c18:	6178      	str	r0, [r7, #20]
			while (GetElapsedTime(uTick) < 100) {
 8001c1a:	e003      	b.n	8001c24 <svDebugCallback+0x30>
				if (g_bDebugTx == TRUE) {
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <svDebugCallback+0x54>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d006      	beq.n	8001c32 <svDebugCallback+0x3e>
			while (GetElapsedTime(uTick) < 100) {
 8001c24:	6978      	ldr	r0, [r7, #20]
 8001c26:	f000 f845 	bl	8001cb4 <GetElapsedTime>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b63      	cmp	r3, #99	; 0x63
 8001c2e:	d9f5      	bls.n	8001c1c <svDebugCallback+0x28>
 8001c30:	e000      	b.n	8001c34 <svDebugCallback+0x40>
					break;
 8001c32:	bf00      	nop
				}
				// HAL_Delay(1);
			}
      g_bDebugTx = TRUE;
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <svDebugCallback+0x54>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
			svDebugProcess();
 8001c3a:	f7ff ffaf 	bl	8001b9c <svDebugProcess>
		}
	}
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000974 	.word	0x20000974

08001c4c <svDebugInit>:
{
	return lwrb_get_free(&g_lwrbDebugTx);
}

void svDebugInit(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	svRingBuffer_Reset(&g_rbDebugRx);
 8001c50:	4809      	ldr	r0, [pc, #36]	; (8001c78 <svDebugInit+0x2c>)
 8001c52:	f00a fff4 	bl	800cc3e <svRingBuffer_Reset>
	svCLI_Init(&svDebugRxChar, &svDebugPutChar, NULL);
 8001c56:	2200      	movs	r2, #0
 8001c58:	4908      	ldr	r1, [pc, #32]	; (8001c7c <svDebugInit+0x30>)
 8001c5a:	4809      	ldr	r0, [pc, #36]	; (8001c80 <svDebugInit+0x34>)
 8001c5c:	f00a f9fc 	bl	800c058 <svCLI_Init>

  lwrb_init(&g_lwrbDebugTx, &s_byDebugTxRingBuffer[0], DEBUG_TX_BUFFER_SIZE);
 8001c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <svDebugInit+0x38>)
 8001c66:	4808      	ldr	r0, [pc, #32]	; (8001c88 <svDebugInit+0x3c>)
 8001c68:	f00d fc5a 	bl	800f520 <lwrb_init>
	lwrb_set_evt_fn(&g_lwrbDebugTx, svDebugCallback);
 8001c6c:	4907      	ldr	r1, [pc, #28]	; (8001c8c <svDebugInit+0x40>)
 8001c6e:	4806      	ldr	r0, [pc, #24]	; (8001c88 <svDebugInit+0x3c>)
 8001c70:	f00d fc77 	bl	800f562 <lwrb_set_evt_fn>
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000010 	.word	0x20000010
 8001c7c:	08001c91 	.word	0x08001c91
 8001c80:	08001b79 	.word	0x08001b79
 8001c84:	2000098c 	.word	0x2000098c
 8001c88:	20000978 	.word	0x20000978
 8001c8c:	08001bf5 	.word	0x08001bf5

08001c90 <svDebugPutChar>:
		uDebugMsgLevel = DEBUG_VERBOSE;
	g_DebugMsgLevel = uDebugMsgLevel;
}

void svDebugPutChar(char cPut)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
	lwrb_write(&g_lwrbDebugTx, (const void*)(&cPut), 1);
 8001c9a:	1dfb      	adds	r3, r7, #7
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <svDebugPutChar+0x20>)
 8001ca2:	f00d fc77 	bl	800f594 <lwrb_write>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000978 	.word	0x20000978

08001cb4 <GetElapsedTime>:
#include <math.h>


// Functions
uint32_t GetElapsedTime(uint32_t tickRef)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	uint32_t tickCurrent = HAL_GetTick();
 8001cbc:	f000 f84c 	bl	8001d58 <HAL_GetTick>
 8001cc0:	60f8      	str	r0, [r7, #12]
	// Check Wrap around
	if (tickCurrent < tickRef) {
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d204      	bcs.n	8001cd4 <GetElapsedTime+0x20>
		return (0xffffffff - tickRef + tickCurrent);
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	e002      	b.n	8001cda <GetElapsedTime+0x26>
	}
	else {
		return tickCurrent - tickRef;
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	1ad3      	subs	r3, r2, r3
	}
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f000 f928 	bl	8001f3e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001cee:	f002 f801 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_Init+0x40>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	490a      	ldr	r1, [pc, #40]	; (8001d28 <HAL_Init+0x44>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
 8001d04:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_Init+0x48>)
 8001d06:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d08:	200f      	movs	r0, #15
 8001d0a:	f7ff fa73 	bl	80011f4 <HAL_InitTick>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e002      	b.n	8001d1e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d18:	f7fe ffaf 	bl	8000c7a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	44020c00 	.word	0x44020c00
 8001d28:	08010418 	.word	0x08010418
 8001d2c:	2000000c 	.word	0x2000000c

08001d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_IncTick+0x20>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_IncTick+0x24>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_IncTick+0x24>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000030 	.word	0x20000030
 8001d54:	20000b90 	.word	0x20000b90

08001d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <HAL_GetTick+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000b90 	.word	0x20000b90

08001d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff ffee 	bl	8001d58 <HAL_GetTick>
 8001d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d005      	beq.n	8001d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_Delay+0x44>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d96:	bf00      	nop
 8001d98:	f7ff ffde 	bl	8001d58 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d8f7      	bhi.n	8001d98 <HAL_Delay+0x28>
  {
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000030 	.word	0x20000030

08001db8 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001dc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001dc6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001dca:	4905      	ldr	r1, [pc, #20]	; (8001de0 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	44000400 	.word	0x44000400

08001de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db0b      	blt.n	8001e72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4907      	ldr	r1, [pc, #28]	; (8001e80 <__NVIC_EnableIRQ+0x38>)
 8001e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2001      	movs	r0, #1
 8001e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000e100 	.word	0xe000e100

08001e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db0a      	blt.n	8001eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	490c      	ldr	r1, [pc, #48]	; (8001ed0 <__NVIC_SetPriority+0x4c>)
 8001e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eac:	e00a      	b.n	8001ec4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4908      	ldr	r1, [pc, #32]	; (8001ed4 <__NVIC_SetPriority+0x50>)
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3b04      	subs	r3, #4
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	761a      	strb	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f1c3 0307 	rsb	r3, r3, #7
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	bf28      	it	cs
 8001ef6:	2304      	movcs	r3, #4
 8001ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d902      	bls.n	8001f08 <NVIC_EncodePriority+0x30>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3b03      	subs	r3, #3
 8001f06:	e000      	b.n	8001f0a <NVIC_EncodePriority+0x32>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	4313      	orrs	r3, r2
         );
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff4c 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f62:	f7ff ff63 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001f66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	6978      	ldr	r0, [r7, #20]
 8001f6e:	f7ff ffb3 	bl	8001ed8 <NVIC_EncodePriority>
 8001f72:	4602      	mov	r2, r0
 8001f74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff82 	bl	8001e84 <__NVIC_SetPriority>
}
 8001f80:	bf00      	nop
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff56 	bl	8001e48 <__NVIC_EnableIRQ>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001fac:	f7ff fed4 	bl	8001d58 <HAL_GetTick>
 8001fb0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e06b      	b.n	8002094 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d008      	beq.n	8001fda <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e05c      	b.n	8002094 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0204 	orr.w	r2, r2, #4
 8001fe8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2205      	movs	r2, #5
 8001fee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001ff2:	e020      	b.n	8002036 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001ff4:	f7ff feb0 	bl	8001d58 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b05      	cmp	r3, #5
 8002000:	d919      	bls.n	8002036 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	f043 0210 	orr.w	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2203      	movs	r2, #3
 8002012:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002026:	2201      	movs	r2, #1
 8002028:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e02e      	b.n	8002094 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0d7      	beq.n	8001ff4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0202 	orr.w	r2, r2, #2
 8002052:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2204      	movs	r2, #4
 8002058:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002064:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207e:	2201      	movs	r2, #1
 8002080:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2200      	movs	r2, #0
 8002088:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e019      	b.n	80020e2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d004      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2220      	movs	r2, #32
 80020be:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e00e      	b.n	80020e2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2204      	movs	r2, #4
 80020c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0d2      	b.n	80022a8 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002108:	2b00      	cmp	r3, #0
 800210a:	d106      	bne.n	800211a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2223      	movs	r2, #35	; 0x23
 8002110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7fe fdbb 	bl	8000c90 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 800211a:	4b65      	ldr	r3, [pc, #404]	; (80022b0 <HAL_ETH_Init+0x1c0>)
 800211c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002120:	4a63      	ldr	r2, [pc, #396]	; (80022b0 <HAL_ETH_Init+0x1c0>)
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800212a:	4b61      	ldr	r3, [pc, #388]	; (80022b0 <HAL_ETH_Init+0x1c0>)
 800212c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7a1b      	ldrb	r3, [r3, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d103      	bne.n	8002148 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8002140:	2000      	movs	r0, #0
 8002142:	f7ff fe39 	bl	8001db8 <HAL_SBS_ETHInterfaceSelect>
 8002146:	e003      	b.n	8002150 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8002148:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800214c:	f7ff fe34 	bl	8001db8 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8002150:	4b58      	ldr	r3, [pc, #352]	; (80022b4 <HAL_ETH_Init+0x1c4>)
 8002152:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800216c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800216e:	f7ff fdf3 	bl	8001d58 <HAL_GetTick>
 8002172:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002174:	e011      	b.n	800219a <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002176:	f7ff fdef 	bl	8001d58 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002184:	d909      	bls.n	800219a <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2204      	movs	r2, #4
 800218a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	22e0      	movs	r2, #224	; 0xe0
 8002192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e086      	b.n	80022a8 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e4      	bne.n	8002176 <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f9d1 	bl	8002554 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80021b2:	f001 fecb 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4a3f      	ldr	r2, [pc, #252]	; (80022b8 <HAL_ETH_Init+0x1c8>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	0c9a      	lsrs	r2, r3, #18
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3a01      	subs	r2, #1
 80021c6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fbcc 	bl	8002968 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80021dc:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d009      	beq.n	8002210 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	22e0      	movs	r2, #224	; 0xe0
 8002208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e04b      	b.n	80022a8 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002218:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800221c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002220:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6952      	ldr	r2, [r2, #20]
 8002228:	0051      	lsls	r1, r2, #1
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	430b      	orrs	r3, r1
 8002230:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002234:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fc32 	bl	8002aa2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fc78 	bl	8002b34 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	3305      	adds	r3, #5
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	021a      	lsls	r2, r3, #8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	3304      	adds	r3, #4
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	4619      	mov	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	3303      	adds	r3, #3
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	061a      	lsls	r2, r3, #24
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	3302      	adds	r3, #2
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	041b      	lsls	r3, r3, #16
 8002276:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	3301      	adds	r3, #1
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002282:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002290:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002292:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2210      	movs	r2, #16
 80022a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	44020c00 	.word	0x44020c00
 80022b4:	44000400 	.word	0x44000400
 80022b8:	431bde83 	.word	0x431bde83

080022bc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;

  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022cc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80022d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d4:	2b40      	cmp	r3, #64	; 0x40
 80022d6:	d115      	bne.n	8002304 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80022e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e8:	2b40      	cmp	r3, #64	; 0x40
 80022ea:	d10b      	bne.n	8002304 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f4:	461a      	mov	r2, r3
 80022f6:	f248 0340 	movw	r3, #32832	; 0x8040
 80022fa:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f8f6 	bl	80024f0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b01      	cmp	r3, #1
 8002316:	d115      	bne.n	8002344 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002320:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b01      	cmp	r3, #1
 800232a:	d10b      	bne.n	8002344 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002334:	461a      	mov	r2, r3
 8002336:	f248 0301 	movw	r3, #32769	; 0x8001
 800233a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8cc 	bl	80024dc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002358:	d153      	bne.n	8002402 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002362:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800236e:	d148      	bne.n	8002402 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f043 0208 	orr.w	r2, r3, #8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002388:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800238c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002394:	d11e      	bne.n	80023d4 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80023a2:	f241 1302 	movw	r3, #4354	; 0x1102
 80023a6:	4013      	ands	r3, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80023c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023c6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	22e0      	movs	r2, #224	; 0xe0
 80023ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80023d2:	e013      	b.n	80023fc <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80023e0:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f2:	461a      	mov	r2, r3
 80023f4:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 80023f8:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f881 	bl	8002504 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800240a:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d104      	bne.n	8002420 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800241c:	2b00      	cmp	r3, #0
 800241e:	d019      	beq.n	8002454 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	f043 0210 	orr.w	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	22e0      	movs	r2, #224	; 0xe0
 8002442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f85c 	bl	8002504 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b10      	cmp	r3, #16
 8002462:	d10f      	bne.n	8002484 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800246c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f84e 	bl	8002518 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b20      	cmp	r3, #32
 8002492:	d10f      	bne.n	80024b4 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800249c:	f003 020f 	and.w	r2, r3, #15
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f840 	bl	800252c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_ETH_IRQHandler+0x21c>)
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d006      	beq.n	80024ce <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_ETH_IRQHandler+0x21c>)
 80024c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f839 	bl	8002540 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	44022000 	.word	0x44022000

080024dc <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002564:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800256c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800256e:	f001 fced 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8002572:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4a25      	ldr	r2, [pc, #148]	; (800260c <HAL_ETH_SetMDIOClockRange+0xb8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d908      	bls.n	800258e <HAL_ETH_SetMDIOClockRange+0x3a>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4a24      	ldr	r2, [pc, #144]	; (8002610 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d804      	bhi.n	800258e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	e034      	b.n	80025f8 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4a1f      	ldr	r2, [pc, #124]	; (8002610 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d908      	bls.n	80025a8 <HAL_ETH_SetMDIOClockRange+0x54>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	4a1e      	ldr	r2, [pc, #120]	; (8002614 <HAL_ETH_SetMDIOClockRange+0xc0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d204      	bcs.n	80025a8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	e027      	b.n	80025f8 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <HAL_ETH_SetMDIOClockRange+0xc0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d303      	bcc.n	80025b8 <HAL_ETH_SetMDIOClockRange+0x64>
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4a19      	ldr	r2, [pc, #100]	; (8002618 <HAL_ETH_SetMDIOClockRange+0xc4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d91e      	bls.n	80025f6 <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4a17      	ldr	r2, [pc, #92]	; (8002618 <HAL_ETH_SetMDIOClockRange+0xc4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d908      	bls.n	80025d2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4a16      	ldr	r2, [pc, #88]	; (800261c <HAL_ETH_SetMDIOClockRange+0xc8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d804      	bhi.n	80025d2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	e012      	b.n	80025f8 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	4a11      	ldr	r2, [pc, #68]	; (800261c <HAL_ETH_SetMDIOClockRange+0xc8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d908      	bls.n	80025ec <HAL_ETH_SetMDIOClockRange+0x98>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4a10      	ldr	r2, [pc, #64]	; (8002620 <HAL_ETH_SetMDIOClockRange+0xcc>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d804      	bhi.n	80025ec <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	e005      	b.n	80025f8 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	e000      	b.n	80025f8 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80025f6:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	01312cff 	.word	0x01312cff
 8002610:	02160ebf 	.word	0x02160ebf
 8002614:	03938700 	.word	0x03938700
 8002618:	05f5e0ff 	.word	0x05f5e0ff
 800261c:	08f0d17f 	.word	0x08f0d17f
 8002620:	0ee6b280 	.word	0x0ee6b280

08002624 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002636:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	791b      	ldrb	r3, [r3, #4]
 800263c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800263e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	7b1b      	ldrb	r3, [r3, #12]
 8002644:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002646:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	7b5b      	ldrb	r3, [r3, #13]
 800264c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800264e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	7b9b      	ldrb	r3, [r3, #14]
 8002654:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	7bdb      	ldrb	r3, [r3, #15]
 800265c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800265e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	7c12      	ldrb	r2, [r2, #16]
 8002664:	2a00      	cmp	r2, #0
 8002666:	d102      	bne.n	800266e <ETH_SetMACConfig+0x4a>
 8002668:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800266c:	e000      	b.n	8002670 <ETH_SetMACConfig+0x4c>
 800266e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002670:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	7c52      	ldrb	r2, [r2, #17]
 8002676:	2a00      	cmp	r2, #0
 8002678:	d102      	bne.n	8002680 <ETH_SetMACConfig+0x5c>
 800267a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800267e:	e000      	b.n	8002682 <ETH_SetMACConfig+0x5e>
 8002680:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002682:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	7c9b      	ldrb	r3, [r3, #18]
 8002688:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800268a:	431a      	orrs	r2, r3
               macconf->Speed |
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002690:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002696:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	7f1b      	ldrb	r3, [r3, #28]
 800269c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800269e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	7f5b      	ldrb	r3, [r3, #29]
 80026a4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80026a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	7f92      	ldrb	r2, [r2, #30]
 80026ac:	2a00      	cmp	r2, #0
 80026ae:	d102      	bne.n	80026b6 <ETH_SetMACConfig+0x92>
 80026b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026b4:	e000      	b.n	80026b8 <ETH_SetMACConfig+0x94>
 80026b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80026b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	7fdb      	ldrb	r3, [r3, #31]
 80026be:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80026c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026c8:	2a00      	cmp	r2, #0
 80026ca:	d102      	bne.n	80026d2 <ETH_SetMACConfig+0xae>
 80026cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026d0:	e000      	b.n	80026d4 <ETH_SetMACConfig+0xb0>
 80026d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80026d4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80026da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026e2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80026e4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b57      	ldr	r3, [pc, #348]	; (8002854 <ETH_SetMACConfig+0x230>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	68f9      	ldr	r1, [r7, #12]
 80026fe:	430b      	orrs	r3, r1
 8002700:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800270e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002710:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002718:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800271a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002722:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002724:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800272c:	2a00      	cmp	r2, #0
 800272e:	d102      	bne.n	8002736 <ETH_SetMACConfig+0x112>
 8002730:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002734:	e000      	b.n	8002738 <ETH_SetMACConfig+0x114>
 8002736:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002738:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4b43      	ldr	r3, [pc, #268]	; (8002858 <ETH_SetMACConfig+0x234>)
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	68f9      	ldr	r1, [r7, #12]
 8002752:	430b      	orrs	r3, r1
 8002754:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800275c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	68f9      	ldr	r1, [r7, #12]
 800277a:	430b      	orrs	r3, r1
 800277c:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002784:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800278a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002792:	2a00      	cmp	r2, #0
 8002794:	d101      	bne.n	800279a <ETH_SetMACConfig+0x176>
 8002796:	2280      	movs	r2, #128	; 0x80
 8002798:	e000      	b.n	800279c <ETH_SetMACConfig+0x178>
 800279a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800279c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027ae:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80027b2:	4013      	ands	r3, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	68f9      	ldr	r1, [r7, #12]
 80027ba:	430b      	orrs	r3, r1
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80027c4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80027cc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	f023 0103 	bic.w	r1, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80027f2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800280e:	2a00      	cmp	r2, #0
 8002810:	d101      	bne.n	8002816 <ETH_SetMACConfig+0x1f2>
 8002812:	2240      	movs	r2, #64	; 0x40
 8002814:	e000      	b.n	8002818 <ETH_SetMACConfig+0x1f4>
 8002816:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002818:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002820:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002822:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800282a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800282c:	4313      	orrs	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002838:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	430a      	orrs	r2, r1
 8002844:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	00048083 	.word	0x00048083
 8002858:	c0f88000 	.word	0xc0f88000

0800285c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002874:	f023 0302 	bic.w	r3, r3, #2
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	6811      	ldr	r1, [r2, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	430b      	orrs	r3, r1
 8002882:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002886:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	791b      	ldrb	r3, [r3, #4]
 800288c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002892:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	7b1b      	ldrb	r3, [r3, #12]
 8002898:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	68f9      	ldr	r1, [r7, #12]
 80028b6:	430b      	orrs	r3, r1
 80028b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028bc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	7b5b      	ldrb	r3, [r3, #13]
 80028c2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80028d8:	4b21      	ldr	r3, [pc, #132]	; (8002960 <ETH_SetDMAConfig+0x104>)
 80028da:	4013      	ands	r3, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	68f9      	ldr	r1, [r7, #12]
 80028e2:	430b      	orrs	r3, r1
 80028e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	7d1b      	ldrb	r3, [r3, #20]
 80028f4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80028f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	7f5b      	ldrb	r3, [r3, #29]
 80028fc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800290a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800290e:	4b15      	ldr	r3, [pc, #84]	; (8002964 <ETH_SetDMAConfig+0x108>)
 8002910:	4013      	ands	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	430b      	orrs	r3, r1
 800291a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800291e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	7f1b      	ldrb	r3, [r3, #28]
 8002926:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002938:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800293c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002940:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	68f9      	ldr	r1, [r7, #12]
 800294a:	430b      	orrs	r3, r1
 800294c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002950:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	fffec000 	.word	0xfffec000
 8002964:	ffc0efef 	.word	0xffc0efef

08002968 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0a4      	sub	sp, #144	; 0x90
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002970:	2301      	movs	r3, #1
 8002972:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002976:	2300      	movs	r3, #0
 8002978:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800297a:	2300      	movs	r3, #0
 800297c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800298c:	2301      	movs	r3, #1
 800298e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800299e:	2301      	movs	r3, #1
 80029a0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029a8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80029c0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80029c4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80029cc:	2300      	movs	r3, #0
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80029e2:	2300      	movs	r3, #0
 80029e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80029ea:	2300      	movs	r3, #0
 80029ec:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002a00:	2320      	movs	r3, #32
 8002a02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002a12:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002a24:	2302      	movs	r3, #2
 8002a26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002a42:	2300      	movs	r3, #0
 8002a44:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a50:	4619      	mov	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff fde6 	bl	8002624 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a72:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002a88:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a8e:	f107 0308 	add.w	r3, r7, #8
 8002a92:	4619      	mov	r1, r3
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff fee1 	bl	800285c <ETH_SetDMAConfig>
}
 8002a9a:	bf00      	nop
 8002a9c:	3790      	adds	r7, #144	; 0x90
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	e01d      	b.n	8002aec <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68d9      	ldr	r1, [r3, #12]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	440b      	add	r3, r1
 8002ac0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2200      	movs	r2, #0
 8002acc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	3206      	adds	r2, #6
 8002ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d9de      	bls.n	8002ab0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b00:	461a      	mov	r2, r3
 8002b02:	2303      	movs	r3, #3
 8002b04:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b14:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b24:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e023      	b.n	8002b8a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6919      	ldr	r1, [r3, #16]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2200      	movs	r2, #0
 8002b76:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	3212      	adds	r2, #18
 8002b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3301      	adds	r3, #1
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d9d8      	bls.n	8002b42 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2303      	movs	r3, #3
 8002bba:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bca:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002bfe:	e136      	b.n	8002e6e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	2101      	movs	r1, #1
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8128 	beq.w	8002e68 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x38>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b12      	cmp	r3, #18
 8002c26:	d125      	bne.n	8002c74 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	08da      	lsrs	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3208      	adds	r2, #8
 8002c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c34:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	220f      	movs	r2, #15
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f003 020f 	and.w	r2, r3, #15
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	08da      	lsrs	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	6979      	ldr	r1, [r7, #20]
 8002c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2203      	movs	r2, #3
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0203 	and.w	r2, r3, #3
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d00b      	beq.n	8002cc8 <HAL_GPIO_Init+0xd8>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d007      	beq.n	8002cc8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cbc:	2b11      	cmp	r3, #17
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b12      	cmp	r3, #18
 8002cc6:	d130      	bne.n	8002d2a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cfe:	2201      	movs	r2, #1
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	f003 0201 	and.w	r2, r3, #1
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d017      	beq.n	8002d62 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4013      	ands	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d07c      	beq.n	8002e68 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002d6e:	4a47      	ldr	r2, [pc, #284]	; (8002e8c <HAL_GPIO_Init+0x29c>)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3318      	adds	r3, #24
 8002d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	220f      	movs	r2, #15
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0a9a      	lsrs	r2, r3, #10
 8002d96:	4b3e      	ldr	r3, [pc, #248]	; (8002e90 <HAL_GPIO_Init+0x2a0>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	f002 0203 	and.w	r2, r2, #3
 8002da0:	00d2      	lsls	r2, r2, #3
 8002da2:	4093      	lsls	r3, r2
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002daa:	4938      	ldr	r1, [pc, #224]	; (8002e8c <HAL_GPIO_Init+0x29c>)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	3318      	adds	r3, #24
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002db8:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <HAL_GPIO_Init+0x29c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002ddc:	4a2b      	ldr	r2, [pc, #172]	; (8002e8c <HAL_GPIO_Init+0x29c>)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002de2:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <HAL_GPIO_Init+0x29c>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4013      	ands	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002e06:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <HAL_GPIO_Init+0x29c>)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <HAL_GPIO_Init+0x29c>)
 8002e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e12:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002e32:	4a16      	ldr	r2, [pc, #88]	; (8002e8c <HAL_GPIO_Init+0x29c>)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_GPIO_Init+0x29c>)
 8002e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e40:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002e60:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <HAL_GPIO_Init+0x29c>)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f47f aec1 	bne.w	8002c00 <HAL_GPIO_Init+0x10>
  }
}
 8002e7e:	bf00      	nop
 8002e80:	bf00      	nop
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	44022000 	.word	0x44022000
 8002e90:	002f7f7f 	.word	0x002f7f7f

08002e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ea4:	787b      	ldrb	r3, [r7, #1]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eaa:	887a      	ldrh	r2, [r7, #2]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002eb0:	e002      	b.n	8002eb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ed6:	887a      	ldrh	r2, [r7, #2]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4013      	ands	r3, r2
 8002edc:	041a      	lsls	r2, r3, #16
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	43d9      	mvns	r1, r3
 8002ee2:	887b      	ldrh	r3, [r7, #2]
 8002ee4:	400b      	ands	r3, r1
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	619a      	str	r2, [r3, #24]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_ICACHE_Enable+0x1c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <HAL_ICACHE_Enable+0x1c>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40030400 	.word	0x40030400

08002f18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1a:	b08f      	sub	sp, #60	; 0x3c
 8002f1c:	af0a      	add	r7, sp, #40	; 0x28
 8002f1e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e0cd      	b.n	80030c6 <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fe f8ca 	bl	80010d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2203      	movs	r2, #3
 8002f48:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f009 f826 	bl	800bfa2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	e03e      	b.n	8002fda <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	333d      	adds	r3, #61	; 0x3d
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	440b      	add	r3, r1
 8002f7e:	333c      	adds	r3, #60	; 0x3c
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	333f      	adds	r3, #63	; 0x3f
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	440b      	add	r3, r1
 8002fa6:	334c      	adds	r3, #76	; 0x4c
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	440b      	add	r3, r1
 8002fba:	3350      	adds	r3, #80	; 0x50
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fc0:	7bfa      	ldrb	r2, [r7, #15]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	440b      	add	r3, r1
 8002fce:	3354      	adds	r3, #84	; 0x54
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d3bb      	bcc.n	8002f5c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	73fb      	strb	r3, [r7, #15]
 8002fe8:	e044      	b.n	8003074 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	f203 137d 	addw	r3, r3, #381	; 0x17d
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003000:	7bfa      	ldrb	r2, [r7, #15]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	440b      	add	r3, r1
 800300e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003012:	7bfa      	ldrb	r2, [r7, #15]
 8003014:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	440b      	add	r3, r1
 8003024:	f203 137f 	addw	r3, r3, #383	; 0x17f
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800302c:	7bfa      	ldrb	r2, [r7, #15]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003042:	7bfa      	ldrb	r2, [r7, #15]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	440b      	add	r3, r1
 8003050:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003058:	7bfa      	ldrb	r2, [r7, #15]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	440b      	add	r3, r1
 8003066:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	3301      	adds	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d3b5      	bcc.n	8002fea <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	687e      	ldr	r6, [r7, #4]
 8003086:	466d      	mov	r5, sp
 8003088:	f106 0410 	add.w	r4, r6, #16
 800308c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003094:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003098:	e885 0003 	stmia.w	r5, {r0, r1}
 800309c:	1d33      	adds	r3, r6, #4
 800309e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a0:	6838      	ldr	r0, [r7, #0]
 80030a2:	f008 ffb6 	bl	800c012 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d102      	bne.n	80030c4 <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f805 	bl	80030ce <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	f043 0201 	orr.w	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	f043 0202 	orr.w	r2, r3, #2
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f000 bc28 	b.w	8003978 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003128:	4b94      	ldr	r3, [pc, #592]	; (800337c <HAL_RCC_OscConfig+0x268>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f003 0318 	and.w	r3, r3, #24
 8003130:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003132:	4b92      	ldr	r3, [pc, #584]	; (800337c <HAL_RCC_OscConfig+0x268>)
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d05b      	beq.n	8003200 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b08      	cmp	r3, #8
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x46>
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2b18      	cmp	r3, #24
 8003152:	d114      	bne.n	800317e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d111      	bne.n	800317e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	f000 bc08 	b.w	8003978 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003168:	4b84      	ldr	r3, [pc, #528]	; (800337c <HAL_RCC_OscConfig+0x268>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	041b      	lsls	r3, r3, #16
 8003176:	4981      	ldr	r1, [pc, #516]	; (800337c <HAL_RCC_OscConfig+0x268>)
 8003178:	4313      	orrs	r3, r2
 800317a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800317c:	e040      	b.n	8003200 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d023      	beq.n	80031ce <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003186:	4b7d      	ldr	r3, [pc, #500]	; (800337c <HAL_RCC_OscConfig+0x268>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a7c      	ldr	r2, [pc, #496]	; (800337c <HAL_RCC_OscConfig+0x268>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7fe fde1 	bl	8001d58 <HAL_GetTick>
 8003196:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800319a:	f7fe fddd 	bl	8001d58 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e3e5      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80031ac:	4b73      	ldr	r3, [pc, #460]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80031b8:	4b70      	ldr	r3, [pc, #448]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	041b      	lsls	r3, r3, #16
 80031c6:	496d      	ldr	r1, [pc, #436]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	618b      	str	r3, [r1, #24]
 80031cc:	e018      	b.n	8003200 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031ce:	4b6b      	ldr	r3, [pc, #428]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a6a      	ldr	r2, [pc, #424]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80031d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031da:	f7fe fdbd 	bl	8001d58 <HAL_GetTick>
 80031de:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80031e2:	f7fe fdb9 	bl	8001d58 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e3c1      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80031f4:	4b61      	ldr	r3, [pc, #388]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f0      	bne.n	80031e2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80a0 	beq.w	800334e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2b10      	cmp	r3, #16
 8003212:	d005      	beq.n	8003220 <HAL_RCC_OscConfig+0x10c>
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	2b18      	cmp	r3, #24
 8003218:	d109      	bne.n	800322e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d106      	bne.n	800322e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	f040 8092 	bne.w	800334e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e3a4      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003236:	d106      	bne.n	8003246 <HAL_RCC_OscConfig+0x132>
 8003238:	4b50      	ldr	r3, [pc, #320]	; (800337c <HAL_RCC_OscConfig+0x268>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a4f      	ldr	r2, [pc, #316]	; (800337c <HAL_RCC_OscConfig+0x268>)
 800323e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	e058      	b.n	80032f8 <HAL_RCC_OscConfig+0x1e4>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d112      	bne.n	8003274 <HAL_RCC_OscConfig+0x160>
 800324e:	4b4b      	ldr	r3, [pc, #300]	; (800337c <HAL_RCC_OscConfig+0x268>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a4a      	ldr	r2, [pc, #296]	; (800337c <HAL_RCC_OscConfig+0x268>)
 8003254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b48      	ldr	r3, [pc, #288]	; (800337c <HAL_RCC_OscConfig+0x268>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a47      	ldr	r2, [pc, #284]	; (800337c <HAL_RCC_OscConfig+0x268>)
 8003260:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b45      	ldr	r3, [pc, #276]	; (800337c <HAL_RCC_OscConfig+0x268>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a44      	ldr	r2, [pc, #272]	; (800337c <HAL_RCC_OscConfig+0x268>)
 800326c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e041      	b.n	80032f8 <HAL_RCC_OscConfig+0x1e4>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800327c:	d112      	bne.n	80032a4 <HAL_RCC_OscConfig+0x190>
 800327e:	4b3f      	ldr	r3, [pc, #252]	; (800337c <HAL_RCC_OscConfig+0x268>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a3e      	ldr	r2, [pc, #248]	; (800337c <HAL_RCC_OscConfig+0x268>)
 8003284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b3c      	ldr	r3, [pc, #240]	; (800337c <HAL_RCC_OscConfig+0x268>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a3b      	ldr	r2, [pc, #236]	; (800337c <HAL_RCC_OscConfig+0x268>)
 8003290:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	4b39      	ldr	r3, [pc, #228]	; (800337c <HAL_RCC_OscConfig+0x268>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a38      	ldr	r2, [pc, #224]	; (800337c <HAL_RCC_OscConfig+0x268>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e029      	b.n	80032f8 <HAL_RCC_OscConfig+0x1e4>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80032ac:	d112      	bne.n	80032d4 <HAL_RCC_OscConfig+0x1c0>
 80032ae:	4b33      	ldr	r3, [pc, #204]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a32      	ldr	r2, [pc, #200]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80032b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	4b30      	ldr	r3, [pc, #192]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a2f      	ldr	r2, [pc, #188]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80032c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	4b2d      	ldr	r3, [pc, #180]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a2c      	ldr	r2, [pc, #176]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e011      	b.n	80032f8 <HAL_RCC_OscConfig+0x1e4>
 80032d4:	4b29      	ldr	r3, [pc, #164]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a28      	ldr	r2, [pc, #160]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80032da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b26      	ldr	r3, [pc, #152]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a25      	ldr	r2, [pc, #148]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80032e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b23      	ldr	r3, [pc, #140]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a22      	ldr	r2, [pc, #136]	; (800337c <HAL_RCC_OscConfig+0x268>)
 80032f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80032f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d013      	beq.n	8003328 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fe fd2a 	bl	8001d58 <HAL_GetTick>
 8003304:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003308:	f7fe fd26 	bl	8001d58 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e32e      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331a:	4b18      	ldr	r3, [pc, #96]	; (800337c <HAL_RCC_OscConfig+0x268>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x1f4>
 8003326:	e012      	b.n	800334e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fd16 	bl	8001d58 <HAL_GetTick>
 800332c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003330:	f7fe fd12 	bl	8001d58 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e31a      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_RCC_OscConfig+0x268>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 809a 	beq.w	8003490 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_RCC_OscConfig+0x25a>
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	2b18      	cmp	r3, #24
 8003366:	d149      	bne.n	80033fc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d146      	bne.n	80033fc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d104      	bne.n	8003380 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e2fe      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
 800337a:	bf00      	nop
 800337c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d11c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003386:	4b9a      	ldr	r3, [pc, #616]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0218 	and.w	r2, r3, #24
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	429a      	cmp	r2, r3
 8003394:	d014      	beq.n	80033c0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003396:	4b96      	ldr	r3, [pc, #600]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 0218 	bic.w	r2, r3, #24
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	4993      	ldr	r1, [pc, #588]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80033a8:	f000 fdd0 	bl	8003f4c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033ac:	4b91      	ldr	r3, [pc, #580]	; (80035f4 <HAL_RCC_OscConfig+0x4e0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd ff1f 	bl	80011f4 <HAL_InitTick>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e2db      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fe fcca 	bl	8001d58 <HAL_GetTick>
 80033c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80033c8:	f7fe fcc6 	bl	8001d58 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e2ce      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033da:	4b85      	ldr	r3, [pc, #532]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80033e6:	4b82      	ldr	r3, [pc, #520]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	497e      	ldr	r1, [pc, #504]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80033fa:	e049      	b.n	8003490 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d02c      	beq.n	800345e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003404:	4b7a      	ldr	r3, [pc, #488]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f023 0218 	bic.w	r2, r3, #24
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	4977      	ldr	r1, [pc, #476]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003416:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a75      	ldr	r2, [pc, #468]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fe fc99 	bl	8001d58 <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800342a:	f7fe fc95 	bl	8001d58 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e29d      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800343c:	4b6c      	ldr	r3, [pc, #432]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003448:	4b69      	ldr	r3, [pc, #420]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	4966      	ldr	r1, [pc, #408]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	610b      	str	r3, [r1, #16]
 800345c:	e018      	b.n	8003490 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345e:	4b64      	ldr	r3, [pc, #400]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a63      	ldr	r2, [pc, #396]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7fe fc75 	bl	8001d58 <HAL_GetTick>
 800346e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003472:	f7fe fc71 	bl	8001d58 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e279      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003484:	4b5a      	ldr	r3, [pc, #360]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f0      	bne.n	8003472 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b00      	cmp	r3, #0
 800349a:	d03c      	beq.n	8003516 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01c      	beq.n	80034de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a4:	4b52      	ldr	r3, [pc, #328]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80034a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034aa:	4a51      	ldr	r2, [pc, #324]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80034ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fe fc50 	bl	8001d58 <HAL_GetTick>
 80034b8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80034bc:	f7fe fc4c 	bl	8001d58 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e254      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80034ce:	4b48      	ldr	r3, [pc, #288]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80034d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ef      	beq.n	80034bc <HAL_RCC_OscConfig+0x3a8>
 80034dc:	e01b      	b.n	8003516 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034de:	4b44      	ldr	r3, [pc, #272]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80034e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034e4:	4a42      	ldr	r2, [pc, #264]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80034e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ee:	f7fe fc33 	bl	8001d58 <HAL_GetTick>
 80034f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80034f6:	f7fe fc2f 	bl	8001d58 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e237      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003508:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800350a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800350e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1ef      	bne.n	80034f6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80d2 	beq.w	80036c8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003524:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <HAL_RCC_OscConfig+0x4e4>)
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d118      	bne.n	8003562 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003530:	4b31      	ldr	r3, [pc, #196]	; (80035f8 <HAL_RCC_OscConfig+0x4e4>)
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	4a30      	ldr	r2, [pc, #192]	; (80035f8 <HAL_RCC_OscConfig+0x4e4>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353c:	f7fe fc0c 	bl	8001d58 <HAL_GetTick>
 8003540:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003544:	f7fe fc08 	bl	8001d58 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e210      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003556:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <HAL_RCC_OscConfig+0x4e4>)
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d108      	bne.n	800357c <HAL_RCC_OscConfig+0x468>
 800356a:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800356c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003570:	4a1f      	ldr	r2, [pc, #124]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800357a:	e074      	b.n	8003666 <HAL_RCC_OscConfig+0x552>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d118      	bne.n	80035b6 <HAL_RCC_OscConfig+0x4a2>
 8003584:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800358a:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003594:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 8003596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800359a:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 800359c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80035a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035aa:	4a11      	ldr	r2, [pc, #68]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035b4:	e057      	b.n	8003666 <HAL_RCC_OscConfig+0x552>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b05      	cmp	r3, #5
 80035bc:	d11e      	bne.n	80035fc <HAL_RCC_OscConfig+0x4e8>
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80035c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035c4:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035ce:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80035d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035d4:	4a06      	ldr	r2, [pc, #24]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80035d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035de:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80035e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035e4:	4a02      	ldr	r2, [pc, #8]	; (80035f0 <HAL_RCC_OscConfig+0x4dc>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035ee:	e03a      	b.n	8003666 <HAL_RCC_OscConfig+0x552>
 80035f0:	44020c00 	.word	0x44020c00
 80035f4:	2000002c 	.word	0x2000002c
 80035f8:	44020800 	.word	0x44020800
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b85      	cmp	r3, #133	; 0x85
 8003602:	d118      	bne.n	8003636 <HAL_RCC_OscConfig+0x522>
 8003604:	4ba2      	ldr	r3, [pc, #648]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800360a:	4aa1      	ldr	r2, [pc, #644]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 800360c:	f043 0304 	orr.w	r3, r3, #4
 8003610:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003614:	4b9e      	ldr	r3, [pc, #632]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800361a:	4a9d      	ldr	r2, [pc, #628]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 800361c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003620:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003624:	4b9a      	ldr	r3, [pc, #616]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800362a:	4a99      	ldr	r2, [pc, #612]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003634:	e017      	b.n	8003666 <HAL_RCC_OscConfig+0x552>
 8003636:	4b96      	ldr	r3, [pc, #600]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800363c:	4a94      	ldr	r2, [pc, #592]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003646:	4b92      	ldr	r3, [pc, #584]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800364c:	4a90      	ldr	r2, [pc, #576]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 800364e:	f023 0304 	bic.w	r3, r3, #4
 8003652:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003656:	4b8e      	ldr	r3, [pc, #568]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800365c:	4a8c      	ldr	r2, [pc, #560]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 800365e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003662:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d016      	beq.n	800369c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366e:	f7fe fb73 	bl	8001d58 <HAL_GetTick>
 8003672:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003674:	e00a      	b.n	800368c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003676:	f7fe fb6f 	bl	8001d58 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	f241 3288 	movw	r2, #5000	; 0x1388
 8003684:	4293      	cmp	r3, r2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e175      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800368c:	4b80      	ldr	r3, [pc, #512]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 800368e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0ed      	beq.n	8003676 <HAL_RCC_OscConfig+0x562>
 800369a:	e015      	b.n	80036c8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fe fb5c 	bl	8001d58 <HAL_GetTick>
 80036a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fe fb58 	bl	8001d58 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e15e      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ba:	4b75      	ldr	r3, [pc, #468]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 80036bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ed      	bne.n	80036a4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d036      	beq.n	8003742 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d019      	beq.n	8003710 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036dc:	4b6c      	ldr	r3, [pc, #432]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a6b      	ldr	r2, [pc, #428]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 80036e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fe fb36 	bl	8001d58 <HAL_GetTick>
 80036ec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80036f0:	f7fe fb32 	bl	8001d58 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e13a      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003702:	4b63      	ldr	r3, [pc, #396]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x5dc>
 800370e:	e018      	b.n	8003742 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003710:	4b5f      	ldr	r3, [pc, #380]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a5e      	ldr	r2, [pc, #376]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800371a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fe fb1c 	bl	8001d58 <HAL_GetTick>
 8003720:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003724:	f7fe fb18 	bl	8001d58 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e120      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003736:	4b56      	ldr	r3, [pc, #344]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8115 	beq.w	8003976 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b18      	cmp	r3, #24
 8003750:	f000 80af 	beq.w	80038b2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	2b02      	cmp	r3, #2
 800375a:	f040 8086 	bne.w	800386a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800375e:	4b4c      	ldr	r3, [pc, #304]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a4b      	ldr	r2, [pc, #300]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003764:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376a:	f7fe faf5 	bl	8001d58 <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003772:	f7fe faf1 	bl	8001d58 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0f9      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003784:	4b42      	ldr	r3, [pc, #264]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f0      	bne.n	8003772 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003790:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003798:	f023 0303 	bic.w	r3, r3, #3
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037a4:	0212      	lsls	r2, r2, #8
 80037a6:	430a      	orrs	r2, r1
 80037a8:	4939      	ldr	r1, [pc, #228]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	628b      	str	r3, [r1, #40]	; 0x28
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b2:	3b01      	subs	r3, #1
 80037b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	3b01      	subs	r3, #1
 80037be:	025b      	lsls	r3, r3, #9
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	3b01      	subs	r3, #1
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	3b01      	subs	r3, #1
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037de:	492c      	ldr	r1, [pc, #176]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80037e4:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	4a29      	ldr	r2, [pc, #164]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 80037ea:	f023 0310 	bic.w	r3, r3, #16
 80037ee:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f4:	4a26      	ldr	r2, [pc, #152]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80037fa:	4b25      	ldr	r3, [pc, #148]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	4a24      	ldr	r2, [pc, #144]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003800:	f043 0310 	orr.w	r3, r3, #16
 8003804:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003806:	4b22      	ldr	r3, [pc, #136]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	f023 020c 	bic.w	r2, r3, #12
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	491f      	ldr	r1, [pc, #124]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003814:	4313      	orrs	r3, r2
 8003816:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	f023 0220 	bic.w	r2, r3, #32
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003824:	491a      	ldr	r1, [pc, #104]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003826:	4313      	orrs	r3, r2
 8003828:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800382a:	4b19      	ldr	r3, [pc, #100]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	4a18      	ldr	r2, [pc, #96]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003834:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003836:	4b16      	ldr	r3, [pc, #88]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a15      	ldr	r2, [pc, #84]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 800383c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fe fa89 	bl	8001d58 <HAL_GetTick>
 8003846:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800384a:	f7fe fa85 	bl	8001d58 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e08d      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x736>
 8003868:	e085      	b.n	8003976 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a08      	ldr	r2, [pc, #32]	; (8003890 <HAL_RCC_OscConfig+0x77c>)
 8003870:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fe fa6f 	bl	8001d58 <HAL_GetTick>
 800387a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800387e:	f7fe fa6b 	bl	8001d58 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d903      	bls.n	8003894 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e073      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
 8003890:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003894:	4b3a      	ldr	r3, [pc, #232]	; (8003980 <HAL_RCC_OscConfig+0x86c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ee      	bne.n	800387e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80038a0:	4b37      	ldr	r3, [pc, #220]	; (8003980 <HAL_RCC_OscConfig+0x86c>)
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	4a36      	ldr	r2, [pc, #216]	; (8003980 <HAL_RCC_OscConfig+0x86c>)
 80038a6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	6293      	str	r3, [r2, #40]	; 0x28
 80038b0:	e061      	b.n	8003976 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80038b2:	4b33      	ldr	r3, [pc, #204]	; (8003980 <HAL_RCC_OscConfig+0x86c>)
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038b8:	4b31      	ldr	r3, [pc, #196]	; (8003980 <HAL_RCC_OscConfig+0x86c>)
 80038ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038bc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d031      	beq.n	800392a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f003 0203 	and.w	r2, r3, #3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d12a      	bne.n	800392a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d122      	bne.n	800392a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ee:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d11a      	bne.n	800392a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	0a5b      	lsrs	r3, r3, #9
 80038f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d111      	bne.n	800392a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	0c1b      	lsrs	r3, r3, #16
 800390a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003914:	429a      	cmp	r2, r3
 8003916:	d108      	bne.n	800392a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	0e1b      	lsrs	r3, r3, #24
 800391c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e024      	b.n	8003978 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800392e:	4b14      	ldr	r3, [pc, #80]	; (8003980 <HAL_RCC_OscConfig+0x86c>)
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	08db      	lsrs	r3, r3, #3
 8003934:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800393c:	429a      	cmp	r2, r3
 800393e:	d01a      	beq.n	8003976 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <HAL_RCC_OscConfig+0x86c>)
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	4a0e      	ldr	r2, [pc, #56]	; (8003980 <HAL_RCC_OscConfig+0x86c>)
 8003946:	f023 0310 	bic.w	r3, r3, #16
 800394a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fe fa04 	bl	8001d58 <HAL_GetTick>
 8003950:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003952:	bf00      	nop
 8003954:	f7fe fa00 	bl	8001d58 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	4293      	cmp	r3, r2
 800395e:	d0f9      	beq.n	8003954 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003964:	4a06      	ldr	r2, [pc, #24]	; (8003980 <HAL_RCC_OscConfig+0x86c>)
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_RCC_OscConfig+0x86c>)
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	4a04      	ldr	r2, [pc, #16]	; (8003980 <HAL_RCC_OscConfig+0x86c>)
 8003970:	f043 0310 	orr.w	r3, r3, #16
 8003974:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3720      	adds	r7, #32
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	44020c00 	.word	0x44020c00

08003984 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e19e      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003998:	4b83      	ldr	r3, [pc, #524]	; (8003ba8 <HAL_RCC_ClockConfig+0x224>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d910      	bls.n	80039c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a6:	4b80      	ldr	r3, [pc, #512]	; (8003ba8 <HAL_RCC_ClockConfig+0x224>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 020f 	bic.w	r2, r3, #15
 80039ae:	497e      	ldr	r1, [pc, #504]	; (8003ba8 <HAL_RCC_ClockConfig+0x224>)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b7c      	ldr	r3, [pc, #496]	; (8003ba8 <HAL_RCC_ClockConfig+0x224>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e186      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d012      	beq.n	80039fa <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	4b74      	ldr	r3, [pc, #464]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	0a1b      	lsrs	r3, r3, #8
 80039de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d909      	bls.n	80039fa <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80039e6:	4b71      	ldr	r3, [pc, #452]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	496d      	ldr	r1, [pc, #436]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d012      	beq.n	8003a2c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	4b68      	ldr	r3, [pc, #416]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d909      	bls.n	8003a2c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003a18:	4b64      	ldr	r3, [pc, #400]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	4961      	ldr	r1, [pc, #388]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d010      	beq.n	8003a5a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	4b5b      	ldr	r3, [pc, #364]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d908      	bls.n	8003a5a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003a48:	4b58      	ldr	r3, [pc, #352]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4955      	ldr	r1, [pc, #340]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d010      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	4b50      	ldr	r3, [pc, #320]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d908      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003a76:	4b4d      	ldr	r3, [pc, #308]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f023 020f 	bic.w	r2, r3, #15
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	494a      	ldr	r1, [pc, #296]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8093 	beq.w	8003bbc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003a9e:	4b43      	ldr	r3, [pc, #268]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d121      	bne.n	8003aee <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e113      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d107      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ab6:	4b3d      	ldr	r3, [pc, #244]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d115      	bne.n	8003aee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e107      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003ace:	4b37      	ldr	r3, [pc, #220]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0fb      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ade:	4b33      	ldr	r3, [pc, #204]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0f3      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003aee:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f023 0203 	bic.w	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	492c      	ldr	r1, [pc, #176]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fe f92a 	bl	8001d58 <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d112      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003b10:	f7fe f922 	bl	8001d58 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e0d7      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b26:	4b21      	ldr	r3, [pc, #132]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f003 0318 	and.w	r3, r3, #24
 8003b2e:	2b18      	cmp	r3, #24
 8003b30:	d1ee      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x18c>
 8003b32:	e043      	b.n	8003bbc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d112      	bne.n	8003b62 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b3c:	e00a      	b.n	8003b54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3e:	f7fe f90b 	bl	8001d58 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e0c0      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b54:	4b15      	ldr	r3, [pc, #84]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	f003 0318 	and.w	r3, r3, #24
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d1ee      	bne.n	8003b3e <HAL_RCC_ClockConfig+0x1ba>
 8003b60:	e02c      	b.n	8003bbc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d122      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7fe f8f4 	bl	8001d58 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e0a9      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <HAL_RCC_ClockConfig+0x228>)
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f003 0318 	and.w	r3, r3, #24
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d1ee      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x1e8>
 8003b8e:	e015      	b.n	8003bbc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003b90:	f7fe f8e2 	bl	8001d58 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d906      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e097      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x352>
 8003ba6:	bf00      	nop
 8003ba8:	40022000 	.word	0x40022000
 8003bac:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bb0:	4b4b      	ldr	r3, [pc, #300]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f003 0318 	and.w	r3, r3, #24
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e9      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d010      	beq.n	8003bea <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	4b44      	ldr	r3, [pc, #272]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d208      	bcs.n	8003bea <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003bd8:	4b41      	ldr	r3, [pc, #260]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f023 020f 	bic.w	r2, r3, #15
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	493e      	ldr	r1, [pc, #248]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bea:	4b3e      	ldr	r3, [pc, #248]	; (8003ce4 <HAL_RCC_ClockConfig+0x360>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d210      	bcs.n	8003c1a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf8:	4b3a      	ldr	r3, [pc, #232]	; (8003ce4 <HAL_RCC_ClockConfig+0x360>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f023 020f 	bic.w	r2, r3, #15
 8003c00:	4938      	ldr	r1, [pc, #224]	; (8003ce4 <HAL_RCC_ClockConfig+0x360>)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c08:	4b36      	ldr	r3, [pc, #216]	; (8003ce4 <HAL_RCC_ClockConfig+0x360>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e05d      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d010      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	4b2d      	ldr	r3, [pc, #180]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d208      	bcs.n	8003c48 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003c36:	4b2a      	ldr	r3, [pc, #168]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	4927      	ldr	r1, [pc, #156]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d012      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d209      	bcs.n	8003c7a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003c66:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	491a      	ldr	r1, [pc, #104]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d012      	beq.n	8003cac <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695a      	ldr	r2, [r3, #20]
 8003c8a:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d209      	bcs.n	8003cac <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	490e      	ldr	r1, [pc, #56]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003cac:	f000 f822 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_RCC_ClockConfig+0x35c>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	490b      	ldr	r1, [pc, #44]	; (8003ce8 <HAL_RCC_ClockConfig+0x364>)
 8003cbc:	5ccb      	ldrb	r3, [r1, r3]
 8003cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <HAL_RCC_ClockConfig+0x368>)
 8003cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <HAL_RCC_ClockConfig+0x36c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd fa92 	bl	80011f4 <HAL_InitTick>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003cd4:	7afb      	ldrb	r3, [r7, #11]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	44020c00 	.word	0x44020c00
 8003ce4:	40022000 	.word	0x40022000
 8003ce8:	08010418 	.word	0x08010418
 8003cec:	2000000c 	.word	0x2000000c
 8003cf0:	2000002c 	.word	0x2000002c

08003cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b089      	sub	sp, #36	; 0x24
 8003cf8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003cfa:	4b8c      	ldr	r3, [pc, #560]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f003 0318 	and.w	r3, r3, #24
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d102      	bne.n	8003d0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003d06:	4b8a      	ldr	r3, [pc, #552]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	e107      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d0c:	4b87      	ldr	r3, [pc, #540]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f003 0318 	and.w	r3, r3, #24
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d112      	bne.n	8003d3e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003d18:	4b84      	ldr	r3, [pc, #528]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d24:	4b81      	ldr	r3, [pc, #516]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	4a81      	ldr	r2, [pc, #516]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x240>)
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	e0f1      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003d38:	4b7e      	ldr	r3, [pc, #504]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x240>)
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	e0ee      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d3e:	4b7b      	ldr	r3, [pc, #492]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f003 0318 	and.w	r3, r3, #24
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d102      	bne.n	8003d50 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d4a:	4b7b      	ldr	r3, [pc, #492]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x244>)
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	e0e5      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d50:	4b76      	ldr	r3, [pc, #472]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f003 0318 	and.w	r3, r3, #24
 8003d58:	2b18      	cmp	r3, #24
 8003d5a:	f040 80dd 	bne.w	8003f18 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003d5e:	4b73      	ldr	r3, [pc, #460]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003d68:	4b70      	ldr	r3, [pc, #448]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003d74:	4b6d      	ldr	r3, [pc, #436]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003d80:	4b6a      	ldr	r3, [pc, #424]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003d84:	08db      	lsrs	r3, r3, #3
 8003d86:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	ee07 3a90 	vmov	s15, r3
 8003d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d98:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 80b7 	beq.w	8003f12 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d003      	beq.n	8003db2 <HAL_RCC_GetSysClockFreq+0xbe>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d056      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x16a>
 8003db0:	e077      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003db2:	4b5e      	ldr	r3, [pc, #376]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d02d      	beq.n	8003e1a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003dbe:	4b5b      	ldr	r3, [pc, #364]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	08db      	lsrs	r3, r3, #3
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	4a5a      	ldr	r2, [pc, #360]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x240>)
 8003dca:	fa22 f303 	lsr.w	r3, r2, r3
 8003dce:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	ee07 3a90 	vmov	s15, r3
 8003de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de8:	4b50      	ldr	r3, [pc, #320]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df0:	ee07 3a90 	vmov	s15, r3
 8003df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003df8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dfc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003f3c <HAL_RCC_GetSysClockFreq+0x248>
 8003e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e14:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003e18:	e065      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	ee07 3a90 	vmov	s15, r3
 8003e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e24:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003f40 <HAL_RCC_GetSysClockFreq+0x24c>
 8003e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2c:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e34:	ee07 3a90 	vmov	s15, r3
 8003e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e40:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003f3c <HAL_RCC_GetSysClockFreq+0x248>
 8003e44:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e58:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003e5c:	e043      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	ee07 3a90 	vmov	s15, r3
 8003e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e68:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003f44 <HAL_RCC_GetSysClockFreq+0x250>
 8003e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e70:	4b2e      	ldr	r3, [pc, #184]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e78:	ee07 3a90 	vmov	s15, r3
 8003e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e80:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e84:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003f3c <HAL_RCC_GetSysClockFreq+0x248>
 8003e88:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e94:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003ea0:	e021      	b.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	ee07 3a90 	vmov	s15, r3
 8003ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eac:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f48 <HAL_RCC_GetSysClockFreq+0x254>
 8003eb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ebc:	ee07 3a90 	vmov	s15, r3
 8003ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ec4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ec8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003f3c <HAL_RCC_GetSysClockFreq+0x248>
 8003ecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003ee4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x238>)
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eea:	0a5b      	lsrs	r3, r3, #9
 8003eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003efe:	edd7 6a06 	vldr	s13, [r7, #24]
 8003f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f0a:	ee17 3a90 	vmov	r3, s15
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	e004      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	e001      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x240>)
 8003f1a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3724      	adds	r7, #36	; 0x24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	44020c00 	.word	0x44020c00
 8003f30:	003d0900 	.word	0x003d0900
 8003f34:	03d09000 	.word	0x03d09000
 8003f38:	007a1200 	.word	0x007a1200
 8003f3c:	46000000 	.word	0x46000000
 8003f40:	4c742400 	.word	0x4c742400
 8003f44:	4af42400 	.word	0x4af42400
 8003f48:	4a742400 	.word	0x4a742400

08003f4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003f50:	f7ff fed0 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003f5a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003f5e:	4907      	ldr	r1, [pc, #28]	; (8003f7c <HAL_RCC_GetHCLKFreq+0x30>)
 8003f60:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003f62:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003f66:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6a:	4a05      	ldr	r2, [pc, #20]	; (8003f80 <HAL_RCC_GetHCLKFreq+0x34>)
 8003f6c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003f6e:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <HAL_RCC_GetHCLKFreq+0x34>)
 8003f70:	681b      	ldr	r3, [r3, #0]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	44020c00 	.word	0x44020c00
 8003f7c:	08010418 	.word	0x08010418
 8003f80:	2000000c 	.word	0x2000000c

08003f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003f88:	f7ff ffe0 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4904      	ldr	r1, [pc, #16]	; (8003fac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	44020c00 	.word	0x44020c00
 8003fac:	08010428 	.word	0x08010428

08003fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003fb4:	f7ff ffca 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	4904      	ldr	r1, [pc, #16]	; (8003fd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fc6:	5ccb      	ldrb	r3, [r1, r3]
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	44020c00 	.word	0x44020c00
 8003fd8:	08010428 	.word	0x08010428

08003fdc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003fe0:	f7ff ffb4 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	0b1b      	lsrs	r3, r3, #12
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	4904      	ldr	r1, [pc, #16]	; (8004004 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003ff2:	5ccb      	ldrb	r3, [r1, r3]
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	44020c00 	.word	0x44020c00
 8004004:	08010428 	.word	0x08010428

08004008 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	221f      	movs	r2, #31
 8004016:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004018:	4b15      	ldr	r3, [pc, #84]	; (8004070 <HAL_RCC_GetClockConfig+0x68>)
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f003 0203 	and.w	r2, r3, #3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8004024:	4b12      	ldr	r3, [pc, #72]	; (8004070 <HAL_RCC_GetClockConfig+0x68>)
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f003 020f 	and.w	r2, r3, #15
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <HAL_RCC_GetClockConfig+0x6c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 020f 	and.w	r2, r3, #15
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	601a      	str	r2, [r3, #0]
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	44020c00 	.word	0x44020c00
 8004074:	40022000 	.word	0x40022000

08004078 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800407c:	b0d8      	sub	sp, #352	; 0x160
 800407e:	af00      	add	r7, sp, #0
 8004080:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004084:	2300      	movs	r3, #0
 8004086:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800408a:	2300      	movs	r3, #0
 800408c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004090:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 800409c:	2500      	movs	r5, #0
 800409e:	ea54 0305 	orrs.w	r3, r4, r5
 80040a2:	d00b      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80040a4:	4bcd      	ldr	r3, [pc, #820]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80040a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040aa:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80040ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	4ac9      	ldr	r2, [pc, #804]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80040b6:	430b      	orrs	r3, r1
 80040b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f002 0801 	and.w	r8, r2, #1
 80040c8:	f04f 0900 	mov.w	r9, #0
 80040cc:	ea58 0309 	orrs.w	r3, r8, r9
 80040d0:	d042      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80040d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	2b05      	cmp	r3, #5
 80040da:	d823      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80040dc:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	0800412d 	.word	0x0800412d
 80040e8:	080040fd 	.word	0x080040fd
 80040ec:	08004111 	.word	0x08004111
 80040f0:	0800412d 	.word	0x0800412d
 80040f4:	0800412d 	.word	0x0800412d
 80040f8:	0800412d 	.word	0x0800412d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004100:	3308      	adds	r3, #8
 8004102:	4618      	mov	r0, r3
 8004104:	f004 feda 	bl	8008ebc <RCCEx_PLL2_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800410e:	e00e      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004110:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004114:	3330      	adds	r3, #48	; 0x30
 8004116:	4618      	mov	r0, r3
 8004118:	f004 ff68 	bl	8008fec <RCCEx_PLL3_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004122:	e004      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800412a:	e000      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800412c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10c      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004136:	4ba9      	ldr	r3, [pc, #676]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004138:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800413c:	f023 0107 	bic.w	r1, r3, #7
 8004140:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004146:	4aa5      	ldr	r2, [pc, #660]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004148:	430b      	orrs	r3, r1
 800414a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800414e:	e003      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004150:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004154:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004158:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f002 0a02 	and.w	sl, r2, #2
 8004164:	f04f 0b00 	mov.w	fp, #0
 8004168:	ea5a 030b 	orrs.w	r3, sl, fp
 800416c:	f000 8088 	beq.w	8004280 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004170:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004176:	2b28      	cmp	r3, #40	; 0x28
 8004178:	d868      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800417a:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	08004255 	.word	0x08004255
 8004184:	0800424d 	.word	0x0800424d
 8004188:	0800424d 	.word	0x0800424d
 800418c:	0800424d 	.word	0x0800424d
 8004190:	0800424d 	.word	0x0800424d
 8004194:	0800424d 	.word	0x0800424d
 8004198:	0800424d 	.word	0x0800424d
 800419c:	0800424d 	.word	0x0800424d
 80041a0:	08004225 	.word	0x08004225
 80041a4:	0800424d 	.word	0x0800424d
 80041a8:	0800424d 	.word	0x0800424d
 80041ac:	0800424d 	.word	0x0800424d
 80041b0:	0800424d 	.word	0x0800424d
 80041b4:	0800424d 	.word	0x0800424d
 80041b8:	0800424d 	.word	0x0800424d
 80041bc:	0800424d 	.word	0x0800424d
 80041c0:	08004239 	.word	0x08004239
 80041c4:	0800424d 	.word	0x0800424d
 80041c8:	0800424d 	.word	0x0800424d
 80041cc:	0800424d 	.word	0x0800424d
 80041d0:	0800424d 	.word	0x0800424d
 80041d4:	0800424d 	.word	0x0800424d
 80041d8:	0800424d 	.word	0x0800424d
 80041dc:	0800424d 	.word	0x0800424d
 80041e0:	08004255 	.word	0x08004255
 80041e4:	0800424d 	.word	0x0800424d
 80041e8:	0800424d 	.word	0x0800424d
 80041ec:	0800424d 	.word	0x0800424d
 80041f0:	0800424d 	.word	0x0800424d
 80041f4:	0800424d 	.word	0x0800424d
 80041f8:	0800424d 	.word	0x0800424d
 80041fc:	0800424d 	.word	0x0800424d
 8004200:	08004255 	.word	0x08004255
 8004204:	0800424d 	.word	0x0800424d
 8004208:	0800424d 	.word	0x0800424d
 800420c:	0800424d 	.word	0x0800424d
 8004210:	0800424d 	.word	0x0800424d
 8004214:	0800424d 	.word	0x0800424d
 8004218:	0800424d 	.word	0x0800424d
 800421c:	0800424d 	.word	0x0800424d
 8004220:	08004255 	.word	0x08004255
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004224:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004228:	3308      	adds	r3, #8
 800422a:	4618      	mov	r0, r3
 800422c:	f004 fe46 	bl	8008ebc <RCCEx_PLL2_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004236:	e00e      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004238:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800423c:	3330      	adds	r3, #48	; 0x30
 800423e:	4618      	mov	r0, r3
 8004240:	f004 fed4 	bl	8008fec <RCCEx_PLL3_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800424a:	e004      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004252:	e000      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004256:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10c      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800425e:	4b5f      	ldr	r3, [pc, #380]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004260:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004264:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004268:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800426c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800426e:	4a5b      	ldr	r2, [pc, #364]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004270:	430b      	orrs	r3, r1
 8004272:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004276:	e003      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004278:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800427c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004280:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	f002 0304 	and.w	r3, r2, #4
 800428c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004290:	2300      	movs	r3, #0
 8004292:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004296:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800429a:	460b      	mov	r3, r1
 800429c:	4313      	orrs	r3, r2
 800429e:	d04e      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80042a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80042aa:	d02c      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80042ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80042b0:	d825      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80042b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b6:	d028      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80042b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042bc:	d81f      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80042be:	2bc0      	cmp	r3, #192	; 0xc0
 80042c0:	d025      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x296>
 80042c2:	2bc0      	cmp	r3, #192	; 0xc0
 80042c4:	d81b      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80042c6:	2b80      	cmp	r3, #128	; 0x80
 80042c8:	d00f      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x272>
 80042ca:	2b80      	cmp	r3, #128	; 0x80
 80042cc:	d817      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01f      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d113      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042da:	3308      	adds	r3, #8
 80042dc:	4618      	mov	r0, r3
 80042de:	f004 fded 	bl	8008ebc <RCCEx_PLL2_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80042e8:	e014      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042ee:	3330      	adds	r3, #48	; 0x30
 80042f0:	4618      	mov	r0, r3
 80042f2:	f004 fe7b 	bl	8008fec <RCCEx_PLL3_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80042fc:	e00a      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004304:	e006      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004306:	bf00      	nop
 8004308:	e004      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800430a:	bf00      	nop
 800430c:	e002      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800430e:	bf00      	nop
 8004310:	e000      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004314:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10c      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800431c:	4b2f      	ldr	r3, [pc, #188]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800431e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004322:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004326:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800432a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800432c:	4a2b      	ldr	r2, [pc, #172]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800432e:	430b      	orrs	r3, r1
 8004330:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004334:	e003      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004336:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800433a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800433e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f002 0308 	and.w	r3, r2, #8
 800434a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8004354:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d056      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800435e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004364:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004368:	d031      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x356>
 800436a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800436e:	d82a      	bhi.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004374:	d02d      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800437a:	d824      	bhi.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800437c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004380:	d029      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004382:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004386:	d81e      	bhi.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438c:	d011      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800438e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004392:	d818      	bhi.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d023      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800439c:	d113      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800439e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043a2:	3308      	adds	r3, #8
 80043a4:	4618      	mov	r0, r3
 80043a6:	f004 fd89 	bl	8008ebc <RCCEx_PLL2_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80043b0:	e017      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043b6:	3330      	adds	r3, #48	; 0x30
 80043b8:	4618      	mov	r0, r3
 80043ba:	f004 fe17 	bl	8008fec <RCCEx_PLL3_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80043c4:	e00d      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043cc:	e009      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80043ce:	bf00      	nop
 80043d0:	e007      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80043d2:	bf00      	nop
 80043d4:	e005      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80043d6:	bf00      	nop
 80043d8:	e003      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80043da:	bf00      	nop
 80043dc:	44020c00 	.word	0x44020c00
        break;
 80043e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10c      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80043ea:	4bbb      	ldr	r3, [pc, #748]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80043ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80043f0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80043f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043fa:	4ab7      	ldr	r2, [pc, #732]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80043fc:	430b      	orrs	r3, r1
 80043fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004402:	e003      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004404:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004408:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800440c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f002 0310 	and.w	r3, r2, #16
 8004418:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800441c:	2300      	movs	r3, #0
 800441e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004422:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8004426:	460b      	mov	r3, r1
 8004428:	4313      	orrs	r3, r2
 800442a:	d053      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800442c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004432:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004436:	d031      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004438:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800443c:	d82a      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800443e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004442:	d02d      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004448:	d824      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800444a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800444e:	d029      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004450:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004454:	d81e      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445a:	d011      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800445c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004460:	d818      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d020      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446a:	d113      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800446c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004470:	3308      	adds	r3, #8
 8004472:	4618      	mov	r0, r3
 8004474:	f004 fd22 	bl	8008ebc <RCCEx_PLL2_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800447e:	e014      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004480:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004484:	3330      	adds	r3, #48	; 0x30
 8004486:	4618      	mov	r0, r3
 8004488:	f004 fdb0 	bl	8008fec <RCCEx_PLL3_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004492:	e00a      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800449a:	e006      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800449c:	bf00      	nop
 800449e:	e004      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80044a0:	bf00      	nop
 80044a2:	e002      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80044a4:	bf00      	nop
 80044a6:	e000      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80044a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10c      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80044b2:	4b89      	ldr	r3, [pc, #548]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80044b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80044b8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80044bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c2:	4a85      	ldr	r2, [pc, #532]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80044c4:	430b      	orrs	r3, r1
 80044c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80044ca:	e003      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044d0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80044d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f002 0320 	and.w	r3, r2, #32
 80044e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80044e4:	2300      	movs	r3, #0
 80044e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80044ea:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80044ee:	460b      	mov	r3, r1
 80044f0:	4313      	orrs	r3, r2
 80044f2:	d053      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80044f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80044fe:	d031      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004500:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004504:	d82a      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800450a:	d02d      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800450c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004510:	d824      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004512:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004516:	d029      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004518:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800451c:	d81e      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800451e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004522:	d011      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d818      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d020      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800452e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004532:	d113      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004534:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004538:	3308      	adds	r3, #8
 800453a:	4618      	mov	r0, r3
 800453c:	f004 fcbe 	bl	8008ebc <RCCEx_PLL2_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004546:	e014      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004548:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800454c:	3330      	adds	r3, #48	; 0x30
 800454e:	4618      	mov	r0, r3
 8004550:	f004 fd4c 	bl	8008fec <RCCEx_PLL3_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800455a:	e00a      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004562:	e006      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004564:	bf00      	nop
 8004566:	e004      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004568:	bf00      	nop
 800456a:	e002      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800456c:	bf00      	nop
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004572:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10c      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800457a:	4b57      	ldr	r3, [pc, #348]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800457c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004580:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8004584:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	4a53      	ldr	r2, [pc, #332]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800458c:	430b      	orrs	r3, r1
 800458e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004592:	e003      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004594:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004598:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800459c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80045a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80045ac:	2300      	movs	r3, #0
 80045ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80045b2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80045b6:	460b      	mov	r3, r1
 80045b8:	4313      	orrs	r3, r2
 80045ba:	d053      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80045bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80045c6:	d031      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80045c8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80045cc:	d82a      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80045ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d2:	d02d      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80045d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d8:	d824      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80045da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80045de:	d029      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80045e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80045e4:	d81e      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80045e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045ea:	d011      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80045ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045f0:	d818      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d020      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80045f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045fa:	d113      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004600:	3308      	adds	r3, #8
 8004602:	4618      	mov	r0, r3
 8004604:	f004 fc5a 	bl	8008ebc <RCCEx_PLL2_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800460e:	e014      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004610:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004614:	3330      	adds	r3, #48	; 0x30
 8004616:	4618      	mov	r0, r3
 8004618:	f004 fce8 	bl	8008fec <RCCEx_PLL3_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004622:	e00a      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800462a:	e006      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800462c:	bf00      	nop
 800462e:	e004      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004630:	bf00      	nop
 8004632:	e002      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004634:	bf00      	nop
 8004636:	e000      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800463a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10c      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8004642:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004648:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 800464c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004652:	4a21      	ldr	r2, [pc, #132]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004654:	430b      	orrs	r3, r1
 8004656:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800465a:	e003      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004660:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004664:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004670:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004674:	2300      	movs	r3, #0
 8004676:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800467a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 800467e:	460b      	mov	r3, r1
 8004680:	4313      	orrs	r3, r2
 8004682:	d055      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8004684:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800468a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800468e:	d033      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004690:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004694:	d82c      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004696:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800469a:	d02f      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x684>
 800469c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046a0:	d826      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80046a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046a6:	d02b      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80046a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046ac:	d820      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80046ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b2:	d013      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80046b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b8:	d81a      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d022      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80046be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046c2:	d115      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046c8:	3308      	adds	r3, #8
 80046ca:	4618      	mov	r0, r3
 80046cc:	f004 fbf6 	bl	8008ebc <RCCEx_PLL2_Config>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80046d6:	e016      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80046d8:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046e0:	3330      	adds	r3, #48	; 0x30
 80046e2:	4618      	mov	r0, r3
 80046e4:	f004 fc82 	bl	8008fec <RCCEx_PLL3_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80046ee:	e00a      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80046f6:	e006      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80046f8:	bf00      	nop
 80046fa:	e004      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80046fc:	bf00      	nop
 80046fe:	e002      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004700:	bf00      	nop
 8004702:	e000      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004706:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10c      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800470e:	4bbb      	ldr	r3, [pc, #748]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004710:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004714:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004718:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800471c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800471e:	4ab7      	ldr	r2, [pc, #732]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004720:	430b      	orrs	r3, r1
 8004722:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004726:	e003      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800472c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004730:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800473c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004740:	2300      	movs	r3, #0
 8004742:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004746:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800474a:	460b      	mov	r3, r1
 800474c:	4313      	orrs	r3, r2
 800474e:	d053      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8004750:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004756:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800475a:	d031      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800475c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004760:	d82a      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004762:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004766:	d02d      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004768:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800476c:	d824      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800476e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004772:	d029      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8004774:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004778:	d81e      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800477a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800477e:	d011      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8004780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004784:	d818      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d020      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x754>
 800478a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800478e:	d113      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004790:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004794:	3308      	adds	r3, #8
 8004796:	4618      	mov	r0, r3
 8004798:	f004 fb90 	bl	8008ebc <RCCEx_PLL2_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80047a2:	e014      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047a8:	3330      	adds	r3, #48	; 0x30
 80047aa:	4618      	mov	r0, r3
 80047ac:	f004 fc1e 	bl	8008fec <RCCEx_PLL3_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80047b6:	e00a      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80047be:	e006      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80047c0:	bf00      	nop
 80047c2:	e004      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80047c4:	bf00      	nop
 80047c6:	e002      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80047c8:	bf00      	nop
 80047ca:	e000      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80047cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80047d6:	4b89      	ldr	r3, [pc, #548]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80047d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80047dc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80047e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e6:	4a85      	ldr	r2, [pc, #532]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80047e8:	430b      	orrs	r3, r1
 80047ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80047ee:	e003      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047f4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80047f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004804:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004808:	2300      	movs	r3, #0
 800480a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800480e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004812:	460b      	mov	r3, r1
 8004814:	4313      	orrs	r3, r2
 8004816:	d055      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004818:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800481c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004820:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004824:	d031      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x812>
 8004826:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800482a:	d82a      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800482c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004830:	d02d      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004836:	d824      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004838:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800483c:	d029      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800483e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004842:	d81e      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004848:	d011      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800484a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800484e:	d818      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d020      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8004854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004858:	d113      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800485a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800485e:	3308      	adds	r3, #8
 8004860:	4618      	mov	r0, r3
 8004862:	f004 fb2b 	bl	8008ebc <RCCEx_PLL2_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800486c:	e014      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800486e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004872:	3330      	adds	r3, #48	; 0x30
 8004874:	4618      	mov	r0, r3
 8004876:	f004 fbb9 	bl	8008fec <RCCEx_PLL3_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004880:	e00a      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004888:	e006      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800488a:	bf00      	nop
 800488c:	e004      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800488e:	bf00      	nop
 8004890:	e002      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004898:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10d      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80048a0:	4b56      	ldr	r3, [pc, #344]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80048a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80048a6:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 80048aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b2:	4a52      	ldr	r2, [pc, #328]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80048b4:	430b      	orrs	r3, r1
 80048b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80048ba:	e003      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048bc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048c0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80048c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80048d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80048d4:	2300      	movs	r3, #0
 80048d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80048da:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80048de:	460b      	mov	r3, r1
 80048e0:	4313      	orrs	r3, r2
 80048e2:	d044      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80048e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ec:	2b05      	cmp	r3, #5
 80048ee:	d823      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80048f0:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80048f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f6:	bf00      	nop
 80048f8:	08004941 	.word	0x08004941
 80048fc:	08004911 	.word	0x08004911
 8004900:	08004925 	.word	0x08004925
 8004904:	08004941 	.word	0x08004941
 8004908:	08004941 	.word	0x08004941
 800490c:	08004941 	.word	0x08004941
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004910:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004914:	3308      	adds	r3, #8
 8004916:	4618      	mov	r0, r3
 8004918:	f004 fad0 	bl	8008ebc <RCCEx_PLL2_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004922:	e00e      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004924:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004928:	3330      	adds	r3, #48	; 0x30
 800492a:	4618      	mov	r0, r3
 800492c:	f004 fb5e 	bl	8008fec <RCCEx_PLL3_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004936:	e004      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800493e:	e000      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8004940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004942:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10d      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800494a:	4b2c      	ldr	r3, [pc, #176]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800494c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004950:	f023 0107 	bic.w	r1, r3, #7
 8004954:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800495c:	4a27      	ldr	r2, [pc, #156]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800495e:	430b      	orrs	r3, r1
 8004960:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004964:	e003      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004966:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800496a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800496e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800497a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800497e:	2300      	movs	r3, #0
 8004980:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004984:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004988:	460b      	mov	r3, r1
 800498a:	4313      	orrs	r3, r2
 800498c:	d04f      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800498e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004996:	2b50      	cmp	r3, #80	; 0x50
 8004998:	d029      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x976>
 800499a:	2b50      	cmp	r3, #80	; 0x50
 800499c:	d823      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d027      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80049a2:	2b40      	cmp	r3, #64	; 0x40
 80049a4:	d81f      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80049a6:	2b30      	cmp	r3, #48	; 0x30
 80049a8:	d025      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80049aa:	2b30      	cmp	r3, #48	; 0x30
 80049ac:	d81b      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d00f      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d817      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d022      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d113      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049c2:	3308      	adds	r3, #8
 80049c4:	4618      	mov	r0, r3
 80049c6:	f004 fa79 	bl	8008ebc <RCCEx_PLL2_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80049d0:	e017      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049d6:	3330      	adds	r3, #48	; 0x30
 80049d8:	4618      	mov	r0, r3
 80049da:	f004 fb07 	bl	8008fec <RCCEx_PLL3_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80049e4:	e00d      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80049ec:	e009      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80049ee:	bf00      	nop
 80049f0:	e007      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80049f2:	bf00      	nop
 80049f4:	e005      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80049f6:	bf00      	nop
 80049f8:	e003      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80049fa:	bf00      	nop
 80049fc:	44020c00 	.word	0x44020c00
        break;
 8004a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a02:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10d      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8004a0a:	4baf      	ldr	r3, [pc, #700]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004a0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004a10:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004a14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	4aaa      	ldr	r2, [pc, #680]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004a24:	e003      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a26:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a2a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004a3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004a44:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	d055      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004a4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a56:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004a5a:	d031      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8004a5c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004a60:	d82a      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004a62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a66:	d02d      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004a68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a6c:	d824      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004a6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a72:	d029      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8004a74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a78:	d81e      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a7e:	d011      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8004a80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a84:	d818      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d020      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8004a8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a8e:	d113      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a94:	3308      	adds	r3, #8
 8004a96:	4618      	mov	r0, r3
 8004a98:	f004 fa10 	bl	8008ebc <RCCEx_PLL2_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004aa2:	e014      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aa8:	3330      	adds	r3, #48	; 0x30
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f004 fa9e 	bl	8008fec <RCCEx_PLL3_Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004ab6:	e00a      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004abe:	e006      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004ac0:	bf00      	nop
 8004ac2:	e004      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004ac4:	bf00      	nop
 8004ac6:	e002      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004ac8:	bf00      	nop
 8004aca:	e000      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ace:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10d      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004ad6:	4b7c      	ldr	r3, [pc, #496]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004adc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae8:	4a77      	ldr	r2, [pc, #476]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004aea:	430b      	orrs	r3, r1
 8004aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004af0:	e003      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004af6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004afa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004b06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004b10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004b14:	460b      	mov	r3, r1
 8004b16:	4313      	orrs	r3, r2
 8004b18:	d03d      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004b1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b26:	d01b      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004b28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b2c:	d814      	bhi.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b32:	d017      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8004b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b38:	d80e      	bhi.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d014      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b42:	d109      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b48:	3330      	adds	r3, #48	; 0x30
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f004 fa4e 	bl	8008fec <RCCEx_PLL3_Config>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004b56:	e008      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b5e:	e004      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004b60:	bf00      	nop
 8004b62:	e002      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004b64:	bf00      	nop
 8004b66:	e000      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10d      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004b72:	4b55      	ldr	r3, [pc, #340]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004b74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b78:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004b7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b84:	4a50      	ldr	r2, [pc, #320]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004b86:	430b      	orrs	r3, r1
 8004b88:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004b8c:	e003      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b92:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004ba2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bac:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	d03d      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004bb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bbe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004bc2:	d01b      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8004bc4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004bc8:	d814      	bhi.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004bca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bce:	d017      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004bd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bd4:	d80e      	bhi.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d014      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004bda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bde:	d109      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004be0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004be4:	3330      	adds	r3, #48	; 0x30
 8004be6:	4618      	mov	r0, r3
 8004be8:	f004 fa00 	bl	8008fec <RCCEx_PLL3_Config>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004bf2:	e008      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004bfa:	e004      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004bfc:	bf00      	nop
 8004bfe:	e002      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004c00:	bf00      	nop
 8004c02:	e000      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10d      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004c0e:	4b2e      	ldr	r3, [pc, #184]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004c10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c14:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c20:	4a29      	ldr	r2, [pc, #164]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004c22:	430b      	orrs	r3, r1
 8004c24:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004c28:	e003      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c2e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c42:	2300      	movs	r3, #0
 8004c44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004c48:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	d040      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004c52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c5e:	d01b      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8004c60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c64:	d814      	bhi.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c6a:	d017      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004c6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c70:	d80e      	bhi.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d014      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c7a:	d109      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c80:	3330      	adds	r3, #48	; 0x30
 8004c82:	4618      	mov	r0, r3
 8004c84:	f004 f9b2 	bl	8008fec <RCCEx_PLL3_Config>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004c96:	e004      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004c98:	bf00      	nop
 8004c9a:	e002      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004c9c:	bf00      	nop
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ca2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d110      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004caa:	4b07      	ldr	r3, [pc, #28]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004cac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004cb0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004cb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cbc:	4a02      	ldr	r2, [pc, #8]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004cc4:	e006      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004cc6:	bf00      	nop
 8004cc8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ccc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004cd0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	2100      	movs	r1, #0
 8004cde:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004cea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	d03d      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8004cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cfc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d00:	d01b      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004d02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d06:	d814      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004d08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d0c:	d017      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004d0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d12:	d80e      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d014      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8004d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d1c:	d109      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d22:	3330      	adds	r3, #48	; 0x30
 8004d24:	4618      	mov	r0, r3
 8004d26:	f004 f961 	bl	8008fec <RCCEx_PLL3_Config>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004d30:	e008      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d38:	e004      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004d3a:	bf00      	nop
 8004d3c:	e002      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004d3e:	bf00      	nop
 8004d40:	e000      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10d      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004d4c:	4bbe      	ldr	r3, [pc, #760]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d52:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d5e:	4aba      	ldr	r2, [pc, #744]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d60:	430b      	orrs	r3, r1
 8004d62:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004d66:	e003      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d68:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d6c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004d70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d80:	2300      	movs	r3, #0
 8004d82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	d035      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004d90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d9c:	d015      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8004d9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004da2:	d80e      	bhi.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d012      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dac:	d109      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004db2:	3330      	adds	r3, #48	; 0x30
 8004db4:	4618      	mov	r0, r3
 8004db6:	f004 f919 	bl	8008fec <RCCEx_PLL3_Config>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004dc0:	e006      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004dc8:	e002      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004dca:	bf00      	nop
 8004dcc:	e000      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dd0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10d      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004dd8:	4b9b      	ldr	r3, [pc, #620]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004dda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004dde:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8004de2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004de6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004dea:	4a97      	ldr	r2, [pc, #604]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004dec:	430b      	orrs	r3, r1
 8004dee:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004df2:	e003      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004df8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	2100      	movs	r1, #0
 8004e06:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004e1c:	4b8a      	ldr	r3, [pc, #552]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	4a89      	ldr	r2, [pc, #548]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e26:	61d3      	str	r3, [r2, #28]
 8004e28:	4b87      	ldr	r3, [pc, #540]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e2a:	69d9      	ldr	r1, [r3, #28]
 8004e2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e30:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004e34:	4a84      	ldr	r2, [pc, #528]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e36:	430b      	orrs	r3, r1
 8004e38:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004e46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004e50:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004e54:	460b      	mov	r3, r1
 8004e56:	4313      	orrs	r3, r2
 8004e58:	d055      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004e5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e62:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004e66:	d031      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8004e68:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004e6c:	d82a      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e72:	d02d      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e78:	d824      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e7e:	d029      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004e80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e84:	d81e      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e8a:	d011      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e90:	d818      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d020      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e9a:	d113      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f004 f80a 	bl	8008ebc <RCCEx_PLL2_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004eae:	e014      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004eb4:	3330      	adds	r3, #48	; 0x30
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f004 f898 	bl	8008fec <RCCEx_PLL3_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004ec2:	e00a      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004eca:	e006      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004ecc:	bf00      	nop
 8004ece:	e004      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004ed0:	bf00      	nop
 8004ed2:	e002      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004ed4:	bf00      	nop
 8004ed6:	e000      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eda:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10d      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004ee2:	4b59      	ldr	r3, [pc, #356]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004ee4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004ee8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004eec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ef0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ef4:	4a54      	ldr	r2, [pc, #336]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004efc:	e003      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f02:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f16:	2300      	movs	r3, #0
 8004f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f1c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004f20:	460b      	mov	r3, r1
 8004f22:	4313      	orrs	r3, r2
 8004f24:	d055      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004f26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f2e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004f32:	d031      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004f34:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004f38:	d82a      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f3e:	d02d      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f44:	d824      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004f46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f4a:	d029      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004f4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f50:	d81e      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f56:	d011      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5c:	d818      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d020      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f66:	d113      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f003 ffa4 	bl	8008ebc <RCCEx_PLL2_Config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004f7a:	e014      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f80:	3330      	adds	r3, #48	; 0x30
 8004f82:	4618      	mov	r0, r3
 8004f84:	f004 f832 	bl	8008fec <RCCEx_PLL3_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f96:	e006      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004f98:	bf00      	nop
 8004f9a:	e004      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004f9c:	bf00      	nop
 8004f9e:	e002      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004fa0:	bf00      	nop
 8004fa2:	e000      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10d      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004fae:	4b26      	ldr	r3, [pc, #152]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004fb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004fb4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fc0:	4a21      	ldr	r2, [pc, #132]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004fc2:	430b      	orrs	r3, r1
 8004fc4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004fc8:	e003      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004fd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	2100      	movs	r1, #0
 8004fdc:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fe8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fec:	460b      	mov	r3, r1
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	d057      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004ff2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ff6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ffa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ffe:	d033      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005004:	d82c      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005006:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800500a:	d02f      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800500c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005010:	d826      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005012:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005016:	d02b      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005018:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800501c:	d820      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800501e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005022:	d013      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005028:	d81a      	bhi.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d022      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800502e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005032:	d115      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005034:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005038:	3308      	adds	r3, #8
 800503a:	4618      	mov	r0, r3
 800503c:	f003 ff3e 	bl	8008ebc <RCCEx_PLL2_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005046:	e016      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005048:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800504c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005050:	3330      	adds	r3, #48	; 0x30
 8005052:	4618      	mov	r0, r3
 8005054:	f003 ffca 	bl	8008fec <RCCEx_PLL3_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800505e:	e00a      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005066:	e006      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005068:	bf00      	nop
 800506a:	e004      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800506c:	bf00      	nop
 800506e:	e002      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005070:	bf00      	nop
 8005072:	e000      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005076:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10d      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800507e:	4bbb      	ldr	r3, [pc, #748]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005080:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005084:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005088:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800508c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005090:	4ab6      	ldr	r2, [pc, #728]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005092:	430b      	orrs	r3, r1
 8005094:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005098:	e003      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800509e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80050a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	2100      	movs	r1, #0
 80050ac:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80050b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80050bc:	460b      	mov	r3, r1
 80050be:	4313      	orrs	r3, r2
 80050c0:	d055      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80050c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050ca:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80050ce:	d031      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80050d0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80050d4:	d82a      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80050d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050da:	d02d      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80050dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e0:	d824      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80050e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050e6:	d029      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80050e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050ec:	d81e      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80050ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050f2:	d011      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80050f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050f8:	d818      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d020      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80050fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005102:	d113      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005104:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005108:	3308      	adds	r3, #8
 800510a:	4618      	mov	r0, r3
 800510c:	f003 fed6 	bl	8008ebc <RCCEx_PLL2_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005116:	e014      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005118:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800511c:	3330      	adds	r3, #48	; 0x30
 800511e:	4618      	mov	r0, r3
 8005120:	f003 ff64 	bl	8008fec <RCCEx_PLL3_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800512a:	e00a      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005132:	e006      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005134:	bf00      	nop
 8005136:	e004      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005138:	bf00      	nop
 800513a:	e002      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800513c:	bf00      	nop
 800513e:	e000      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005142:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10d      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800514a:	4b88      	ldr	r3, [pc, #544]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800514c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005150:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8005154:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005158:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800515c:	4a83      	ldr	r2, [pc, #524]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800515e:	430b      	orrs	r3, r1
 8005160:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005164:	e003      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005166:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800516a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800516e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	2100      	movs	r1, #0
 8005178:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800517c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005184:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005188:	460b      	mov	r3, r1
 800518a:	4313      	orrs	r3, r2
 800518c:	d055      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800518e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005192:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005196:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800519a:	d031      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800519c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80051a0:	d82a      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80051a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051a6:	d02d      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80051a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051ac:	d824      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80051ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051b2:	d029      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80051b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051b8:	d81e      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80051ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051be:	d011      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80051c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051c4:	d818      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d020      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80051ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051ce:	d113      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051d4:	3308      	adds	r3, #8
 80051d6:	4618      	mov	r0, r3
 80051d8:	f003 fe70 	bl	8008ebc <RCCEx_PLL2_Config>
 80051dc:	4603      	mov	r3, r0
 80051de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80051e2:	e014      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051e8:	3330      	adds	r3, #48	; 0x30
 80051ea:	4618      	mov	r0, r3
 80051ec:	f003 fefe 	bl	8008fec <RCCEx_PLL3_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80051f6:	e00a      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80051fe:	e006      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005200:	bf00      	nop
 8005202:	e004      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005204:	bf00      	nop
 8005206:	e002      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005208:	bf00      	nop
 800520a:	e000      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800520c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800520e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10d      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005216:	4b55      	ldr	r3, [pc, #340]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005218:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800521c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005220:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005224:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005228:	4a50      	ldr	r2, [pc, #320]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800522a:	430b      	orrs	r3, r1
 800522c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005230:	e003      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005232:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005236:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800523a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	2100      	movs	r1, #0
 8005244:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8005248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005250:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005254:	460b      	mov	r3, r1
 8005256:	4313      	orrs	r3, r2
 8005258:	d055      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800525a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800525e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005266:	d031      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8005268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800526c:	d82a      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800526e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005272:	d02d      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8005274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005278:	d824      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800527a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800527e:	d029      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005280:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005284:	d81e      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800528a:	d011      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800528c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005290:	d818      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d020      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8005296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800529a:	d113      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800529c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052a0:	3308      	adds	r3, #8
 80052a2:	4618      	mov	r0, r3
 80052a4:	f003 fe0a 	bl	8008ebc <RCCEx_PLL2_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80052ae:	e014      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052b4:	3330      	adds	r3, #48	; 0x30
 80052b6:	4618      	mov	r0, r3
 80052b8:	f003 fe98 	bl	8008fec <RCCEx_PLL3_Config>
 80052bc:	4603      	mov	r3, r0
 80052be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80052c2:	e00a      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80052ca:	e006      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80052cc:	bf00      	nop
 80052ce:	e004      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80052d0:	bf00      	nop
 80052d2:	e002      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80052d4:	bf00      	nop
 80052d6:	e000      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80052d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10d      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80052e2:	4b22      	ldr	r3, [pc, #136]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80052e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80052e8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80052ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80052f4:	4a1d      	ldr	r2, [pc, #116]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80052f6:	430b      	orrs	r3, r1
 80052f8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80052fc:	e003      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005302:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005306:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005312:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005316:	2300      	movs	r3, #0
 8005318:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800531c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005320:	460b      	mov	r3, r1
 8005322:	4313      	orrs	r3, r2
 8005324:	d055      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005326:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800532a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800532e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005332:	d035      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005334:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005338:	d82e      	bhi.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800533a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800533e:	d031      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005340:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005344:	d828      	bhi.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800534a:	d01b      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800534c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005350:	d822      	bhi.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8005356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800535a:	d009      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800535c:	e01c      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800535e:	4b03      	ldr	r3, [pc, #12]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	4a02      	ldr	r2, [pc, #8]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005368:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800536a:	e01c      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800536c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005370:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005374:	3308      	adds	r3, #8
 8005376:	4618      	mov	r0, r3
 8005378:	f003 fda0 	bl	8008ebc <RCCEx_PLL2_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005382:	e010      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005384:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005388:	3330      	adds	r3, #48	; 0x30
 800538a:	4618      	mov	r0, r3
 800538c:	f003 fe2e 	bl	8008fec <RCCEx_PLL3_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005396:	e006      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800539e:	e002      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80053a0:	bf00      	nop
 80053a2:	e000      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80053a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10d      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80053ae:	4bc3      	ldr	r3, [pc, #780]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80053b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80053b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80053c0:	4abe      	ldr	r2, [pc, #760]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80053c2:	430b      	orrs	r3, r1
 80053c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80053c8:	e003      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053ce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80053d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053da:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80053de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053e2:	2300      	movs	r3, #0
 80053e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053e8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80053ec:	460b      	mov	r3, r1
 80053ee:	4313      	orrs	r3, r2
 80053f0:	d051      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80053f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80053fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053fe:	d033      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005404:	d82c      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005406:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800540a:	d02d      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800540c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005410:	d826      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005416:	d019      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800541c:	d820      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005422:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005426:	d007      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005428:	e01a      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800542a:	4ba4      	ldr	r3, [pc, #656]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800542c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542e:	4aa3      	ldr	r2, [pc, #652]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005434:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005436:	e018      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005438:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800543c:	3308      	adds	r3, #8
 800543e:	4618      	mov	r0, r3
 8005440:	f003 fd3c 	bl	8008ebc <RCCEx_PLL2_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800544a:	e00e      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800544c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005450:	3330      	adds	r3, #48	; 0x30
 8005452:	4618      	mov	r0, r3
 8005454:	f003 fdca 	bl	8008fec <RCCEx_PLL3_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800545e:	e004      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005466:	e000      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10d      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005472:	4b92      	ldr	r3, [pc, #584]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005478:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 800547c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005480:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005484:	4a8d      	ldr	r2, [pc, #564]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005486:	430b      	orrs	r3, r1
 8005488:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800548c:	e003      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005492:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005496:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80054a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80054a4:	2300      	movs	r3, #0
 80054a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80054ac:	460b      	mov	r3, r1
 80054ae:	4313      	orrs	r3, r2
 80054b0:	d032      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80054b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80054ba:	2b05      	cmp	r3, #5
 80054bc:	d80f      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d211      	bcs.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d911      	bls.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d109      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054ce:	3308      	adds	r3, #8
 80054d0:	4618      	mov	r0, r3
 80054d2:	f003 fcf3 	bl	8008ebc <RCCEx_PLL2_Config>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80054dc:	e006      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80054e4:	e002      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80054e6:	bf00      	nop
 80054e8:	e000      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80054ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10d      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80054f4:	4b71      	ldr	r3, [pc, #452]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054fa:	f023 0107 	bic.w	r1, r3, #7
 80054fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005502:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005506:	4a6d      	ldr	r2, [pc, #436]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005508:	430b      	orrs	r3, r1
 800550a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800550e:	e003      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005510:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005514:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005518:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	2100      	movs	r1, #0
 8005522:	6739      	str	r1, [r7, #112]	; 0x70
 8005524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005528:	677b      	str	r3, [r7, #116]	; 0x74
 800552a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800552e:	460b      	mov	r3, r1
 8005530:	4313      	orrs	r3, r2
 8005532:	d024      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005534:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8005540:	2b08      	cmp	r3, #8
 8005542:	d005      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800554a:	e002      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800554c:	bf00      	nop
 800554e:	e000      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005552:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10d      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800555a:	4b58      	ldr	r3, [pc, #352]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800555c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005560:	f023 0108 	bic.w	r1, r3, #8
 8005564:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005568:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800556c:	4a53      	ldr	r2, [pc, #332]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800556e:	430b      	orrs	r3, r1
 8005570:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005574:	e003      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005576:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800557a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800557e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800558a:	66bb      	str	r3, [r7, #104]	; 0x68
 800558c:	2300      	movs	r3, #0
 800558e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005590:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005594:	460b      	mov	r3, r1
 8005596:	4313      	orrs	r3, r2
 8005598:	f000 80b9 	beq.w	800570e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800559c:	4b48      	ldr	r3, [pc, #288]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	4a47      	ldr	r2, [pc, #284]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055a8:	f7fc fbd6 	bl	8001d58 <HAL_GetTick>
 80055ac:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80055b0:	e00b      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055b2:	f7fc fbd1 	bl	8001d58 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d903      	bls.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80055c8:	e005      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80055ca:	4b3d      	ldr	r3, [pc, #244]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0ed      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80055d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f040 8093 	bne.w	8005706 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055e0:	4b36      	ldr	r3, [pc, #216]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80055e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80055ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d023      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80055f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055fa:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80055fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005602:	4293      	cmp	r3, r2
 8005604:	d01b      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005606:	4b2d      	ldr	r3, [pc, #180]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800560c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005610:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005614:	4b29      	ldr	r3, [pc, #164]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800561a:	4a28      	ldr	r2, [pc, #160]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800561c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005620:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005624:	4b25      	ldr	r3, [pc, #148]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800562a:	4a24      	ldr	r2, [pc, #144]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800562c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005630:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005634:	4a21      	ldr	r2, [pc, #132]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005636:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800563a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800563e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d019      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564a:	f7fc fb85 	bl	8001d58 <HAL_GetTick>
 800564e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005652:	e00d      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005654:	f7fc fb80 	bl	8001d58 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800565e:	1ad2      	subs	r2, r2, r3
 8005660:	f241 3388 	movw	r3, #5000	; 0x1388
 8005664:	429a      	cmp	r2, r3
 8005666:	d903      	bls.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 800566e:	e006      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005670:	4b12      	ldr	r3, [pc, #72]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0ea      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800567e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005682:	2b00      	cmp	r3, #0
 8005684:	d13a      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005686:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800568a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800568e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005696:	d115      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8005698:	4b08      	ldr	r3, [pc, #32]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80056a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056a4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80056a8:	091b      	lsrs	r3, r3, #4
 80056aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80056ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80056b2:	4a02      	ldr	r2, [pc, #8]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80056b4:	430b      	orrs	r3, r1
 80056b6:	61d3      	str	r3, [r2, #28]
 80056b8:	e00a      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80056ba:	bf00      	nop
 80056bc:	44020c00 	.word	0x44020c00
 80056c0:	44020800 	.word	0x44020800
 80056c4:	4b9f      	ldr	r3, [pc, #636]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	4a9e      	ldr	r2, [pc, #632]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80056ce:	61d3      	str	r3, [r2, #28]
 80056d0:	4b9c      	ldr	r3, [pc, #624]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056d6:	4a9b      	ldr	r2, [pc, #620]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80056e0:	4b98      	ldr	r3, [pc, #608]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056e2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80056e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056ea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80056ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f2:	4a94      	ldr	r2, [pc, #592]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056f4:	430b      	orrs	r3, r1
 80056f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80056fa:	e008      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056fc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005700:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8005704:	e003      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005706:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800570a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800570e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800571a:	663b      	str	r3, [r7, #96]	; 0x60
 800571c:	2300      	movs	r3, #0
 800571e:	667b      	str	r3, [r7, #100]	; 0x64
 8005720:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005724:	460b      	mov	r3, r1
 8005726:	4313      	orrs	r3, r2
 8005728:	d035      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800572a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800572e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005732:	2b30      	cmp	r3, #48	; 0x30
 8005734:	d014      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8005736:	2b30      	cmp	r3, #48	; 0x30
 8005738:	d80e      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800573a:	2b20      	cmp	r3, #32
 800573c:	d012      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800573e:	2b20      	cmp	r3, #32
 8005740:	d80a      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d010      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8005746:	2b10      	cmp	r3, #16
 8005748:	d106      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800574a:	4b7e      	ldr	r3, [pc, #504]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574e:	4a7d      	ldr	r2, [pc, #500]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005754:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005756:	e008      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800575e:	e004      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005760:	bf00      	nop
 8005762:	e002      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005764:	bf00      	nop
 8005766:	e000      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800576a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10d      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005772:	4b74      	ldr	r3, [pc, #464]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005774:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005778:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800577c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005780:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005784:	4a6f      	ldr	r2, [pc, #444]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005786:	430b      	orrs	r3, r1
 8005788:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800578c:	e003      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005792:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005796:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80057a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80057a4:	2300      	movs	r3, #0
 80057a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057a8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80057ac:	460b      	mov	r3, r1
 80057ae:	4313      	orrs	r3, r2
 80057b0:	d033      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80057b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80057be:	2b40      	cmp	r3, #64	; 0x40
 80057c0:	d007      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80057c2:	e010      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c4:	4b5f      	ldr	r3, [pc, #380]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	4a5e      	ldr	r2, [pc, #376]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ce:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80057d0:	e00d      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057d6:	3308      	adds	r3, #8
 80057d8:	4618      	mov	r0, r3
 80057da:	f003 fb6f 	bl	8008ebc <RCCEx_PLL2_Config>
 80057de:	4603      	mov	r3, r0
 80057e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80057e4:	e003      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80057ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10d      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80057f6:	4b53      	ldr	r3, [pc, #332]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80057fc:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005800:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005804:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005808:	4a4e      	ldr	r2, [pc, #312]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800580a:	430b      	orrs	r3, r1
 800580c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005810:	e003      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005812:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005816:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800581a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800581e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005822:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005826:	653b      	str	r3, [r7, #80]	; 0x50
 8005828:	2300      	movs	r3, #0
 800582a:	657b      	str	r3, [r7, #84]	; 0x54
 800582c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005830:	460b      	mov	r3, r1
 8005832:	4313      	orrs	r3, r2
 8005834:	d033      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8005836:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800583a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8005842:	2b80      	cmp	r3, #128	; 0x80
 8005844:	d007      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8005846:	e010      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005848:	4b3e      	ldr	r3, [pc, #248]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	4a3d      	ldr	r2, [pc, #244]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800584e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005852:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005854:	e00d      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005856:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800585a:	3308      	adds	r3, #8
 800585c:	4618      	mov	r0, r3
 800585e:	f003 fb2d 	bl	8008ebc <RCCEx_PLL2_Config>
 8005862:	4603      	mov	r3, r0
 8005864:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005868:	e003      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005872:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10d      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800587a:	4b32      	ldr	r3, [pc, #200]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800587c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005880:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005884:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005888:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800588c:	4a2d      	ldr	r2, [pc, #180]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800588e:	430b      	orrs	r3, r1
 8005890:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005894:	e003      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005896:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800589a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800589e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80058aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ac:	2300      	movs	r3, #0
 80058ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80058b4:	460b      	mov	r3, r1
 80058b6:	4313      	orrs	r3, r2
 80058b8:	d04a      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80058ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d827      	bhi.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80058c6:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	080058e1 	.word	0x080058e1
 80058d0:	080058ef 	.word	0x080058ef
 80058d4:	08005903 	.word	0x08005903
 80058d8:	0800591f 	.word	0x0800591f
 80058dc:	0800591f 	.word	0x0800591f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e0:	4b18      	ldr	r3, [pc, #96]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80058e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e4:	4a17      	ldr	r2, [pc, #92]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80058e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ea:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80058ec:	e018      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058f2:	3308      	adds	r3, #8
 80058f4:	4618      	mov	r0, r3
 80058f6:	f003 fae1 	bl	8008ebc <RCCEx_PLL2_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005900:	e00e      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005902:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005906:	3330      	adds	r3, #48	; 0x30
 8005908:	4618      	mov	r0, r3
 800590a:	f003 fb6f 	bl	8008fec <RCCEx_PLL3_Config>
 800590e:	4603      	mov	r3, r0
 8005910:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005914:	e004      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800591c:	e000      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800591e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005920:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10f      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005928:	4b06      	ldr	r3, [pc, #24]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800592a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800592e:	f023 0107 	bic.w	r1, r3, #7
 8005932:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800593a:	4a02      	ldr	r2, [pc, #8]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800593c:	430b      	orrs	r3, r1
 800593e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005942:	e005      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8005944:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005948:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800594c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005950:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800595c:	643b      	str	r3, [r7, #64]	; 0x40
 800595e:	2300      	movs	r3, #0
 8005960:	647b      	str	r3, [r7, #68]	; 0x44
 8005962:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005966:	460b      	mov	r3, r1
 8005968:	4313      	orrs	r3, r2
 800596a:	f000 8081 	beq.w	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800596e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005972:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005976:	2b20      	cmp	r3, #32
 8005978:	d85f      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800597a:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	08005a05 	.word	0x08005a05
 8005984:	08005a3b 	.word	0x08005a3b
 8005988:	08005a3b 	.word	0x08005a3b
 800598c:	08005a3b 	.word	0x08005a3b
 8005990:	08005a3b 	.word	0x08005a3b
 8005994:	08005a3b 	.word	0x08005a3b
 8005998:	08005a3b 	.word	0x08005a3b
 800599c:	08005a3b 	.word	0x08005a3b
 80059a0:	08005a13 	.word	0x08005a13
 80059a4:	08005a3b 	.word	0x08005a3b
 80059a8:	08005a3b 	.word	0x08005a3b
 80059ac:	08005a3b 	.word	0x08005a3b
 80059b0:	08005a3b 	.word	0x08005a3b
 80059b4:	08005a3b 	.word	0x08005a3b
 80059b8:	08005a3b 	.word	0x08005a3b
 80059bc:	08005a3b 	.word	0x08005a3b
 80059c0:	08005a27 	.word	0x08005a27
 80059c4:	08005a3b 	.word	0x08005a3b
 80059c8:	08005a3b 	.word	0x08005a3b
 80059cc:	08005a3b 	.word	0x08005a3b
 80059d0:	08005a3b 	.word	0x08005a3b
 80059d4:	08005a3b 	.word	0x08005a3b
 80059d8:	08005a3b 	.word	0x08005a3b
 80059dc:	08005a3b 	.word	0x08005a3b
 80059e0:	08005a43 	.word	0x08005a43
 80059e4:	08005a3b 	.word	0x08005a3b
 80059e8:	08005a3b 	.word	0x08005a3b
 80059ec:	08005a3b 	.word	0x08005a3b
 80059f0:	08005a3b 	.word	0x08005a3b
 80059f4:	08005a3b 	.word	0x08005a3b
 80059f8:	08005a3b 	.word	0x08005a3b
 80059fc:	08005a3b 	.word	0x08005a3b
 8005a00:	08005a43 	.word	0x08005a43
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a04:	4bab      	ldr	r3, [pc, #684]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	4aaa      	ldr	r2, [pc, #680]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a0e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005a10:	e018      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a16:	3308      	adds	r3, #8
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f003 fa4f 	bl	8008ebc <RCCEx_PLL2_Config>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005a24:	e00e      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a2a:	3330      	adds	r3, #48	; 0x30
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f003 fadd 	bl	8008fec <RCCEx_PLL3_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005a38:	e004      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005a40:	e000      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8005a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10d      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005a4c:	4b99      	ldr	r3, [pc, #612]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a52:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005a56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a5e:	4a95      	ldr	r2, [pc, #596]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a66:	e003      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a68:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a6c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005a70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005a7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a7e:	2300      	movs	r3, #0
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a82:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005a86:	460b      	mov	r3, r1
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	d04e      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005a8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a98:	d02e      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8005a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a9e:	d827      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005aa0:	2bc0      	cmp	r3, #192	; 0xc0
 8005aa2:	d02b      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8005aa4:	2bc0      	cmp	r3, #192	; 0xc0
 8005aa6:	d823      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005aa8:	2b80      	cmp	r3, #128	; 0x80
 8005aaa:	d017      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8005aac:	2b80      	cmp	r3, #128	; 0x80
 8005aae:	d81f      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8005ab4:	2b40      	cmp	r3, #64	; 0x40
 8005ab6:	d007      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8005ab8:	e01a      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aba:	4b7e      	ldr	r3, [pc, #504]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abe:	4a7d      	ldr	r2, [pc, #500]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac4:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005ac6:	e01a      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005acc:	3308      	adds	r3, #8
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f003 f9f4 	bl	8008ebc <RCCEx_PLL2_Config>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005ada:	e010      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005adc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ae0:	3330      	adds	r3, #48	; 0x30
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f003 fa82 	bl	8008fec <RCCEx_PLL3_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005aee:	e006      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005af6:	e002      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005af8:	bf00      	nop
 8005afa:	e000      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005afe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10d      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005b06:	4b6b      	ldr	r3, [pc, #428]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b0c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005b10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b18:	4a66      	ldr	r2, [pc, #408]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b20:	e003      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b26:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005b36:	633b      	str	r3, [r7, #48]	; 0x30
 8005b38:	2300      	movs	r3, #0
 8005b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b3c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005b40:	460b      	mov	r3, r1
 8005b42:	4313      	orrs	r3, r2
 8005b44:	d055      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005b46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b4a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005b4e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005b52:	d031      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8005b54:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005b58:	d82a      	bhi.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b5e:	d02d      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b64:	d824      	bhi.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005b66:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b6a:	d029      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005b6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b70:	d81e      	bhi.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b76:	d011      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7c:	d818      	bhi.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d020      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8005b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b86:	d113      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f003 f994 	bl	8008ebc <RCCEx_PLL2_Config>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005b9a:	e014      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ba0:	3330      	adds	r3, #48	; 0x30
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f003 fa22 	bl	8008fec <RCCEx_PLL3_Config>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005bae:	e00a      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005bb6:	e006      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005bb8:	bf00      	nop
 8005bba:	e004      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005bbc:	bf00      	nop
 8005bbe:	e002      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005bc0:	bf00      	nop
 8005bc2:	e000      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bc6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10d      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005bce:	4b39      	ldr	r3, [pc, #228]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bd4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bdc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005be0:	4a34      	ldr	r2, [pc, #208]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005be2:	430b      	orrs	r3, r1
 8005be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005be8:	e003      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005bee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8005bf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c00:	2300      	movs	r3, #0
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	d058      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8005c0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c16:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005c1a:	d031      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8005c1c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005c20:	d82a      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005c22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c26:	d02d      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8005c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c2c:	d824      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005c2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c32:	d029      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8005c34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c38:	d81e      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3e:	d011      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8005c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c44:	d818      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d020      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8005c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4e:	d113      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c54:	3308      	adds	r3, #8
 8005c56:	4618      	mov	r0, r3
 8005c58:	f003 f930 	bl	8008ebc <RCCEx_PLL2_Config>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005c62:	e014      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c68:	3330      	adds	r3, #48	; 0x30
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f003 f9be 	bl	8008fec <RCCEx_PLL3_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005c76:	e00a      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005c7e:	e006      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005c80:	bf00      	nop
 8005c82:	e004      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005c84:	bf00      	nop
 8005c86:	e002      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005c88:	bf00      	nop
 8005c8a:	e000      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d110      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8005c96:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c9c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ca8:	4902      	ldr	r1, [pc, #8]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005cb0:	e006      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8005cb2:	bf00      	nop
 8005cb4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005cbc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	2100      	movs	r1, #0
 8005cca:	6239      	str	r1, [r7, #32]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	d055      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8005cdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ce4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005ce8:	d031      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8005cea:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005cee:	d82a      	bhi.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cf4:	d02d      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8005cf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cfa:	d824      	bhi.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005cfc:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005d00:	d029      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8005d02:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005d06:	d81e      	bhi.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0c:	d011      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8005d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d12:	d818      	bhi.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d020      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8005d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d1c:	d113      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d22:	3308      	adds	r3, #8
 8005d24:	4618      	mov	r0, r3
 8005d26:	f003 f8c9 	bl	8008ebc <RCCEx_PLL2_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d30:	e014      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d36:	3330      	adds	r3, #48	; 0x30
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f003 f957 	bl	8008fec <RCCEx_PLL3_Config>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d44:	e00a      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005d4c:	e006      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005d4e:	bf00      	nop
 8005d50:	e004      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005d52:	bf00      	nop
 8005d54:	e002      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005d56:	bf00      	nop
 8005d58:	e000      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10d      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8005d64:	4b88      	ldr	r3, [pc, #544]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d6a:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8005d6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d76:	4984      	ldr	r1, [pc, #528]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005d7e:	e003      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d80:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d84:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	2100      	movs	r1, #0
 8005d92:	61b9      	str	r1, [r7, #24]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4313      	orrs	r3, r2
 8005da2:	d03d      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005da4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005da8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d81c      	bhi.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8005db0:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005df3 	.word	0x08005df3
 8005dbc:	08005dc9 	.word	0x08005dc9
 8005dc0:	08005dd7 	.word	0x08005dd7
 8005dc4:	08005df3 	.word	0x08005df3
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc8:	4b6f      	ldr	r3, [pc, #444]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	4a6e      	ldr	r2, [pc, #440]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dd2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005dd4:	e00e      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005dd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005dda:	3308      	adds	r3, #8
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f003 f86d 	bl	8008ebc <RCCEx_PLL2_Config>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005de8:	e004      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005df0:	e000      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8005df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005dfc:	4b62      	ldr	r3, [pc, #392]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005dfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e02:	f023 0203 	bic.w	r2, r3, #3
 8005e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005e0e:	495e      	ldr	r1, [pc, #376]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005e16:	e003      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e18:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e1c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	2100      	movs	r1, #0
 8005e2a:	6139      	str	r1, [r7, #16]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005e36:	460b      	mov	r3, r1
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	d03a      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e48:	d00e      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8005e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4e:	d815      	bhi.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d017      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8005e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e58:	d110      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e5a:	4b4b      	ldr	r3, [pc, #300]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	4a4a      	ldr	r2, [pc, #296]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e64:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005e66:	e00e      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f003 f824 	bl	8008ebc <RCCEx_PLL2_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005e7a:	e004      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005e82:	e000      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8005e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10d      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005e8e:	4b3e      	ldr	r3, [pc, #248]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005ea0:	4939      	ldr	r1, [pc, #228]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8005ea8:	e003      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eaa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005eae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005eb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	2100      	movs	r1, #0
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	f003 0310 	and.w	r3, r3, #16
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	d038      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ed2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005ed6:	2b30      	cmp	r3, #48	; 0x30
 8005ed8:	d01b      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8005eda:	2b30      	cmp	r3, #48	; 0x30
 8005edc:	d815      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8005ede:	2b10      	cmp	r3, #16
 8005ee0:	d002      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8005ee2:	2b20      	cmp	r3, #32
 8005ee4:	d007      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8005ee6:	e010      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee8:	4b27      	ldr	r3, [pc, #156]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	4a26      	ldr	r2, [pc, #152]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ef2:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ef4:	e00e      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ef6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005efa:	3330      	adds	r3, #48	; 0x30
 8005efc:	4618      	mov	r0, r3
 8005efe:	f003 f875 	bl	8008fec <RCCEx_PLL3_Config>
 8005f02:	4603      	mov	r3, r0
 8005f04:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005f08:	e004      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005f10:	e000      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8005f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f14:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10d      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005f1c:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005f1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005f2e:	4916      	ldr	r1, [pc, #88]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005f36:	e003      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f38:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f3c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	2100      	movs	r1, #0
 8005f4a:	6039      	str	r1, [r7, #0]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	607b      	str	r3, [r7, #4]
 8005f52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f56:	460b      	mov	r3, r1
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	d00c      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f6a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005f6e:	4906      	ldr	r1, [pc, #24]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8005f76:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8005f80:	46bd      	mov	sp, r7
 8005f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f86:	bf00      	nop
 8005f88:	44020c00 	.word	0x44020c00

08005f8c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b08b      	sub	sp, #44	; 0x2c
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005f94:	4bad      	ldr	r3, [pc, #692]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005f9e:	4bab      	ldr	r3, [pc, #684]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005fa8:	4ba8      	ldr	r3, [pc, #672]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	0a1b      	lsrs	r3, r3, #8
 8005fae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb2:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005fb4:	4ba5      	ldr	r3, [pc, #660]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005fbe:	4ba3      	ldr	r3, [pc, #652]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	08db      	lsrs	r3, r3, #3
 8005fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8126 	beq.w	800622e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d053      	beq.n	8006090 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d86f      	bhi.n	80060ce <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d003      	beq.n	8005ffc <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d02b      	beq.n	8006052 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8005ffa:	e068      	b.n	80060ce <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ffc:	4b93      	ldr	r3, [pc, #588]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	08db      	lsrs	r3, r3, #3
 8006002:	f003 0303 	and.w	r3, r3, #3
 8006006:	4a92      	ldr	r2, [pc, #584]	; (8006250 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
 800600c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	ee07 3a90 	vmov	s15, r3
 8006014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	ee07 3a90 	vmov	s15, r3
 800602c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006030:	ed97 6a04 	vldr	s12, [r7, #16]
 8006034:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006254 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006050:	e068      	b.n	8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	ee07 3a90 	vmov	s15, r3
 8006058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006258 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006072:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006254 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800608e:	e049      	b.n	8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800625c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800609e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	ee07 3a90 	vmov	s15, r3
 80060a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ac:	ed97 6a04 	vldr	s12, [r7, #16]
 80060b0:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006254 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80060b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80060cc:	e02a      	b.n	8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80060ce:	4b5f      	ldr	r3, [pc, #380]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	08db      	lsrs	r3, r3, #3
 80060d4:	f003 0303 	and.w	r3, r3, #3
 80060d8:	4a5d      	ldr	r2, [pc, #372]	; (8006250 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80060da:	fa22 f303 	lsr.w	r3, r2, r3
 80060de:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	ee07 3a90 	vmov	s15, r3
 80060f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006102:	ed97 6a04 	vldr	s12, [r7, #16]
 8006106:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006254 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800610a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006122:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006124:	4b49      	ldr	r3, [pc, #292]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006130:	d121      	bne.n	8006176 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006132:	4b46      	ldr	r3, [pc, #280]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d017      	beq.n	800616e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800613e:	4b43      	ldr	r3, [pc, #268]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006142:	0a5b      	lsrs	r3, r3, #9
 8006144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006148:	ee07 3a90 	vmov	s15, r3
 800614c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006154:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006158:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800615c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006164:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	e006      	b.n	800617c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	e002      	b.n	800617c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800617c:	4b33      	ldr	r3, [pc, #204]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006184:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006188:	d121      	bne.n	80061ce <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800618a:	4b30      	ldr	r3, [pc, #192]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d017      	beq.n	80061c6 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006196:	4b2d      	ldr	r3, [pc, #180]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619a:	0c1b      	lsrs	r3, r3, #16
 800619c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a0:	ee07 3a90 	vmov	s15, r3
 80061a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80061a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061ac:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80061b0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80061b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061bc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	605a      	str	r2, [r3, #4]
 80061c4:	e006      	b.n	80061d4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	605a      	str	r2, [r3, #4]
 80061cc:	e002      	b.n	80061d4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061d4:	4b1d      	ldr	r3, [pc, #116]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061e0:	d121      	bne.n	8006226 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80061e2:	4b1a      	ldr	r3, [pc, #104]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d017      	beq.n	800621e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80061ee:	4b17      	ldr	r3, [pc, #92]	; (800624c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80061f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f2:	0e1b      	lsrs	r3, r3, #24
 80061f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f8:	ee07 3a90 	vmov	s15, r3
 80061fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006204:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006208:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800620c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006214:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800621c:	e010      	b.n	8006240 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	e00c      	b.n	8006240 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	609a      	str	r2, [r3, #8]
}
 800622c:	e008      	b.n	8006240 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	bf00      	nop
 8006242:	372c      	adds	r7, #44	; 0x2c
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	44020c00 	.word	0x44020c00
 8006250:	03d09000 	.word	0x03d09000
 8006254:	46000000 	.word	0x46000000
 8006258:	4a742400 	.word	0x4a742400
 800625c:	4af42400 	.word	0x4af42400

08006260 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006260:	b480      	push	{r7}
 8006262:	b08b      	sub	sp, #44	; 0x2c
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006268:	4bad      	ldr	r3, [pc, #692]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800626a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006270:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006272:	4bab      	ldr	r3, [pc, #684]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800627c:	4ba8      	ldr	r3, [pc, #672]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	0a1b      	lsrs	r3, r3, #8
 8006282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006286:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006288:	4ba5      	ldr	r3, [pc, #660]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006292:	4ba3      	ldr	r3, [pc, #652]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	08db      	lsrs	r3, r3, #3
 8006298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	fb02 f303 	mul.w	r3, r2, r3
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062aa:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8126 	beq.w	8006502 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d053      	beq.n	8006364 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d86f      	bhi.n	80063a2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d003      	beq.n	80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d02b      	beq.n	8006326 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80062ce:	e068      	b.n	80063a2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062d0:	4b93      	ldr	r3, [pc, #588]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	08db      	lsrs	r3, r3, #3
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	4a92      	ldr	r2, [pc, #584]	; (8006524 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80062dc:	fa22 f303 	lsr.w	r3, r2, r3
 80062e0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	ee07 3a90 	vmov	s15, r3
 80062e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	ee07 3a90 	vmov	s15, r3
 8006300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006304:	ed97 6a04 	vldr	s12, [r7, #16]
 8006308:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800630c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006310:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006314:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800631c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006320:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006324:	e068      	b.n	80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	ee07 3a90 	vmov	s15, r3
 800632c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006330:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800652c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006342:	ed97 6a04 	vldr	s12, [r7, #16]
 8006346:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800634a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800635a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006362:	e049      	b.n	80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	ee07 3a90 	vmov	s15, r3
 800637c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006380:	ed97 6a04 	vldr	s12, [r7, #16]
 8006384:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006390:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80063a0:	e02a      	b.n	80063f8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063a2:	4b5f      	ldr	r3, [pc, #380]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	08db      	lsrs	r3, r3, #3
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	4a5d      	ldr	r2, [pc, #372]	; (8006524 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80063ae:	fa22 f303 	lsr.w	r3, r2, r3
 80063b2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	ee07 3a90 	vmov	s15, r3
 80063c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d6:	ed97 6a04 	vldr	s12, [r7, #16]
 80063da:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80063de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80063f6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063f8:	4b49      	ldr	r3, [pc, #292]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006404:	d121      	bne.n	800644a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006406:	4b46      	ldr	r3, [pc, #280]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d017      	beq.n	8006442 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006412:	4b43      	ldr	r3, [pc, #268]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	0a5b      	lsrs	r3, r3, #9
 8006418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800641c:	ee07 3a90 	vmov	s15, r3
 8006420:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006424:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006428:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800642c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006438:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	e006      	b.n	8006450 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	e002      	b.n	8006450 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006450:	4b33      	ldr	r3, [pc, #204]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800645c:	d121      	bne.n	80064a2 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800645e:	4b30      	ldr	r3, [pc, #192]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d017      	beq.n	800649a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800646a:	4b2d      	ldr	r3, [pc, #180]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800646c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646e:	0c1b      	lsrs	r3, r3, #16
 8006470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800647c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006480:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006484:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800648c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006490:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	605a      	str	r2, [r3, #4]
 8006498:	e006      	b.n	80064a8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	605a      	str	r2, [r3, #4]
 80064a0:	e002      	b.n	80064a8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064a8:	4b1d      	ldr	r3, [pc, #116]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064b4:	d121      	bne.n	80064fa <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80064b6:	4b1a      	ldr	r3, [pc, #104]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d017      	beq.n	80064f2 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064c2:	4b17      	ldr	r3, [pc, #92]	; (8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80064c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c6:	0e1b      	lsrs	r3, r3, #24
 80064c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064cc:	ee07 3a90 	vmov	s15, r3
 80064d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80064d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064d8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80064dc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80064e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064e8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80064f0:	e010      	b.n	8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	609a      	str	r2, [r3, #8]
}
 80064f8:	e00c      	b.n	8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	609a      	str	r2, [r3, #8]
}
 8006500:	e008      	b.n	8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	609a      	str	r2, [r3, #8]
}
 8006514:	bf00      	nop
 8006516:	372c      	adds	r7, #44	; 0x2c
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	44020c00 	.word	0x44020c00
 8006524:	03d09000 	.word	0x03d09000
 8006528:	46000000 	.word	0x46000000
 800652c:	4a742400 	.word	0x4a742400
 8006530:	4af42400 	.word	0x4af42400

08006534 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006534:	b480      	push	{r7}
 8006536:	b08b      	sub	sp, #44	; 0x2c
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800653c:	4bad      	ldr	r3, [pc, #692]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800653e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006544:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006546:	4bab      	ldr	r3, [pc, #684]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006550:	4ba8      	ldr	r3, [pc, #672]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	0a1b      	lsrs	r3, r3, #8
 8006556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800655a:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800655c:	4ba5      	ldr	r3, [pc, #660]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006566:	4ba3      	ldr	r3, [pc, #652]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800656a:	08db      	lsrs	r3, r3, #3
 800656c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	fb02 f303 	mul.w	r3, r2, r3
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800657e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8126 	beq.w	80067d6 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	2b03      	cmp	r3, #3
 800658e:	d053      	beq.n	8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	2b03      	cmp	r3, #3
 8006594:	d86f      	bhi.n	8006676 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d003      	beq.n	80065a4 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d02b      	beq.n	80065fa <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80065a2:	e068      	b.n	8006676 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065a4:	4b93      	ldr	r3, [pc, #588]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	08db      	lsrs	r3, r3, #3
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	4a92      	ldr	r2, [pc, #584]	; (80067f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
 80065b4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	ee07 3a90 	vmov	s15, r3
 80065bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d8:	ed97 6a04 	vldr	s12, [r7, #16]
 80065dc:	eddf 5a87 	vldr	s11, [pc, #540]	; 80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80065e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80065f8:	e068      	b.n	80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	ee07 3a90 	vmov	s15, r3
 8006600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006604:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006800 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	ee07 3a90 	vmov	s15, r3
 8006612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006616:	ed97 6a04 	vldr	s12, [r7, #16]
 800661a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800661e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800662a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800662e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006632:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006636:	e049      	b.n	80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006642:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006804 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8006646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	ee07 3a90 	vmov	s15, r3
 8006650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006654:	ed97 6a04 	vldr	s12, [r7, #16]
 8006658:	eddf 5a68 	vldr	s11, [pc, #416]	; 80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800665c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800666c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006670:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006674:	e02a      	b.n	80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006676:	4b5f      	ldr	r3, [pc, #380]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	08db      	lsrs	r3, r3, #3
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	4a5d      	ldr	r2, [pc, #372]	; (80067f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006682:	fa22 f303 	lsr.w	r3, r2, r3
 8006686:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	ee07 3a90 	vmov	s15, r3
 8006698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	ee07 3a90 	vmov	s15, r3
 80066a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80066ae:	eddf 5a53 	vldr	s11, [pc, #332]	; 80067fc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80066b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80066ca:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066cc:	4b49      	ldr	r3, [pc, #292]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d8:	d121      	bne.n	800671e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80066da:	4b46      	ldr	r3, [pc, #280]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d017      	beq.n	8006716 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80066e6:	4b43      	ldr	r3, [pc, #268]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80066e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ea:	0a5b      	lsrs	r3, r3, #9
 80066ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80066f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066fc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006700:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800670c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	e006      	b.n	8006724 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	e002      	b.n	8006724 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006724:	4b33      	ldr	r3, [pc, #204]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800672c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006730:	d121      	bne.n	8006776 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006732:	4b30      	ldr	r3, [pc, #192]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d017      	beq.n	800676e <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800673e:	4b2d      	ldr	r3, [pc, #180]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006742:	0c1b      	lsrs	r3, r3, #16
 8006744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006748:	ee07 3a90 	vmov	s15, r3
 800674c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006750:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006754:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006758:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800675c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006764:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	605a      	str	r2, [r3, #4]
 800676c:	e006      	b.n	800677c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	605a      	str	r2, [r3, #4]
 8006774:	e002      	b.n	800677c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800677c:	4b1d      	ldr	r3, [pc, #116]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006788:	d121      	bne.n	80067ce <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800678a:	4b1a      	ldr	r3, [pc, #104]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d017      	beq.n	80067c6 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006796:	4b17      	ldr	r3, [pc, #92]	; (80067f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679a:	0e1b      	lsrs	r3, r3, #24
 800679c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067a0:	ee07 3a90 	vmov	s15, r3
 80067a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80067a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067ac:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80067b0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80067b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067bc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80067c4:	e010      	b.n	80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	609a      	str	r2, [r3, #8]
}
 80067cc:	e00c      	b.n	80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	609a      	str	r2, [r3, #8]
}
 80067d4:	e008      	b.n	80067e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	609a      	str	r2, [r3, #8]
}
 80067e8:	bf00      	nop
 80067ea:	372c      	adds	r7, #44	; 0x2c
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	44020c00 	.word	0x44020c00
 80067f8:	03d09000 	.word	0x03d09000
 80067fc:	46000000 	.word	0x46000000
 8006800:	4a742400 	.word	0x4a742400
 8006804:	4af42400 	.word	0x4af42400

08006808 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006808:	b590      	push	{r4, r7, lr}
 800680a:	b08f      	sub	sp, #60	; 0x3c
 800680c:	af00      	add	r7, sp, #0
 800680e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006812:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006816:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800681a:	4321      	orrs	r1, r4
 800681c:	d150      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800681e:	4b26      	ldr	r3, [pc, #152]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006828:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800682a:	4b23      	ldr	r3, [pc, #140]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800682c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b02      	cmp	r3, #2
 8006836:	d108      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683e:	d104      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006844:	637b      	str	r3, [r7, #52]	; 0x34
 8006846:	f002 bb2a 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800684a:	4b1b      	ldr	r3, [pc, #108]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800684c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006858:	d108      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006860:	d104      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006862:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006866:	637b      	str	r3, [r7, #52]	; 0x34
 8006868:	f002 bb19 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800686c:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006878:	d119      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006880:	d115      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006882:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800688a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800688e:	d30a      	bcc.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006890:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	0a1b      	lsrs	r3, r3, #8
 8006896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800689a:	4a08      	ldr	r2, [pc, #32]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800689c:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80068a2:	f002 bafc 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80068aa:	f002 baf8 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	637b      	str	r3, [r7, #52]	; 0x34
 80068b2:	f002 baf4 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80068b6:	bf00      	nop
 80068b8:	44020c00 	.word	0x44020c00
 80068bc:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80068c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068c4:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80068c8:	ea50 0104 	orrs.w	r1, r0, r4
 80068cc:	f001 8275 	beq.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80068d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068d4:	2801      	cmp	r0, #1
 80068d6:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 80068da:	f082 82dd 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068e2:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 80068e6:	ea50 0104 	orrs.w	r1, r0, r4
 80068ea:	f001 816c 	beq.w	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80068ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068f2:	2801      	cmp	r0, #1
 80068f4:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 80068f8:	f082 82ce 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006900:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8006904:	ea50 0104 	orrs.w	r1, r0, r4
 8006908:	f001 8602 	beq.w	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800690c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006910:	2801      	cmp	r0, #1
 8006912:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8006916:	f082 82bf 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800691a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800691e:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8006922:	ea50 0104 	orrs.w	r1, r0, r4
 8006926:	f001 854c 	beq.w	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800692a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800692e:	2801      	cmp	r0, #1
 8006930:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8006934:	f082 82b0 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800693c:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8006940:	ea50 0104 	orrs.w	r1, r0, r4
 8006944:	f001 849e 	beq.w	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8006948:	e9d7 0100 	ldrd	r0, r1, [r7]
 800694c:	2801      	cmp	r0, #1
 800694e:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8006952:	f082 82a1 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006956:	e9d7 0100 	ldrd	r0, r1, [r7]
 800695a:	f1a1 0420 	sub.w	r4, r1, #32
 800695e:	ea50 0104 	orrs.w	r1, r0, r4
 8006962:	f001 83e8 	beq.w	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8006966:	e9d7 0100 	ldrd	r0, r1, [r7]
 800696a:	2801      	cmp	r0, #1
 800696c:	f171 0120 	sbcs.w	r1, r1, #32
 8006970:	f082 8292 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006974:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006978:	f1a1 0410 	sub.w	r4, r1, #16
 800697c:	ea50 0104 	orrs.w	r1, r0, r4
 8006980:	f002 8256 	beq.w	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006984:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006988:	2801      	cmp	r0, #1
 800698a:	f171 0110 	sbcs.w	r1, r1, #16
 800698e:	f082 8283 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006996:	f1a1 0408 	sub.w	r4, r1, #8
 800699a:	ea50 0104 	orrs.w	r1, r0, r4
 800699e:	f002 81cc 	beq.w	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80069a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069a6:	2801      	cmp	r0, #1
 80069a8:	f171 0108 	sbcs.w	r1, r1, #8
 80069ac:	f082 8274 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069b4:	1f0c      	subs	r4, r1, #4
 80069b6:	ea50 0104 	orrs.w	r1, r0, r4
 80069ba:	f001 8648 	beq.w	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80069be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069c2:	2801      	cmp	r0, #1
 80069c4:	f171 0104 	sbcs.w	r1, r1, #4
 80069c8:	f082 8266 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069d0:	1e8c      	subs	r4, r1, #2
 80069d2:	ea50 0104 	orrs.w	r1, r0, r4
 80069d6:	f002 8143 	beq.w	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80069da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069de:	2801      	cmp	r0, #1
 80069e0:	f171 0102 	sbcs.w	r1, r1, #2
 80069e4:	f082 8258 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ec:	1e4c      	subs	r4, r1, #1
 80069ee:	ea50 0104 	orrs.w	r1, r0, r4
 80069f2:	f002 80ce 	beq.w	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80069f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069fa:	2801      	cmp	r0, #1
 80069fc:	f171 0101 	sbcs.w	r1, r1, #1
 8006a00:	f082 824a 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a08:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8006a0c:	4321      	orrs	r1, r4
 8006a0e:	f002 8059 	beq.w	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8006a12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a16:	4cd9      	ldr	r4, [pc, #868]	; (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	f171 0100 	sbcs.w	r1, r1, #0
 8006a1e:	f082 823b 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a26:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8006a2a:	4321      	orrs	r1, r4
 8006a2c:	f001 87d9 	beq.w	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8006a30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a34:	4cd2      	ldr	r4, [pc, #840]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006a36:	42a0      	cmp	r0, r4
 8006a38:	f171 0100 	sbcs.w	r1, r1, #0
 8006a3c:	f082 822c 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a44:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8006a48:	4321      	orrs	r1, r4
 8006a4a:	f001 8751 	beq.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8006a4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a52:	4ccc      	ldr	r4, [pc, #816]	; (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006a54:	42a0      	cmp	r0, r4
 8006a56:	f171 0100 	sbcs.w	r1, r1, #0
 8006a5a:	f082 821d 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a62:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8006a66:	4321      	orrs	r1, r4
 8006a68:	f001 869a 	beq.w	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8006a6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a70:	4cc5      	ldr	r4, [pc, #788]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006a72:	42a0      	cmp	r0, r4
 8006a74:	f171 0100 	sbcs.w	r1, r1, #0
 8006a78:	f082 820e 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a80:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8006a84:	4321      	orrs	r1, r4
 8006a86:	f001 8612 	beq.w	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8006a8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a8e:	4cbf      	ldr	r4, [pc, #764]	; (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8006a90:	42a0      	cmp	r0, r4
 8006a92:	f171 0100 	sbcs.w	r1, r1, #0
 8006a96:	f082 81ff 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a9e:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8006aa2:	4321      	orrs	r1, r4
 8006aa4:	f002 817e 	beq.w	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8006aa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aac:	4cb8      	ldr	r4, [pc, #736]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006aae:	42a0      	cmp	r0, r4
 8006ab0:	f171 0100 	sbcs.w	r1, r1, #0
 8006ab4:	f082 81f0 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006abc:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8006ac0:	4321      	orrs	r1, r4
 8006ac2:	f000 829e 	beq.w	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8006ac6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aca:	4cb2      	ldr	r4, [pc, #712]	; (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006acc:	42a0      	cmp	r0, r4
 8006ace:	f171 0100 	sbcs.w	r1, r1, #0
 8006ad2:	f082 81e1 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ad6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ada:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8006ade:	4321      	orrs	r1, r4
 8006ae0:	f000 826d 	beq.w	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8006ae4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ae8:	4cab      	ldr	r4, [pc, #684]	; (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006aea:	42a0      	cmp	r0, r4
 8006aec:	f171 0100 	sbcs.w	r1, r1, #0
 8006af0:	f082 81d2 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006af4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006af8:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8006afc:	4321      	orrs	r1, r4
 8006afe:	f001 800d 	beq.w	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8006b02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b06:	4ca5      	ldr	r4, [pc, #660]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006b08:	42a0      	cmp	r0, r4
 8006b0a:	f171 0100 	sbcs.w	r1, r1, #0
 8006b0e:	f082 81c3 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b16:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8006b1a:	4321      	orrs	r1, r4
 8006b1c:	f000 81d0 	beq.w	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006b20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b24:	4c9e      	ldr	r4, [pc, #632]	; (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006b26:	42a0      	cmp	r0, r4
 8006b28:	f171 0100 	sbcs.w	r1, r1, #0
 8006b2c:	f082 81b4 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b34:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8006b38:	4321      	orrs	r1, r4
 8006b3a:	f000 8142 	beq.w	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8006b3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b42:	4c98      	ldr	r4, [pc, #608]	; (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006b44:	42a0      	cmp	r0, r4
 8006b46:	f171 0100 	sbcs.w	r1, r1, #0
 8006b4a:	f082 81a5 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b52:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8006b56:	4321      	orrs	r1, r4
 8006b58:	f001 824e 	beq.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8006b5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b60:	4c91      	ldr	r4, [pc, #580]	; (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006b62:	42a0      	cmp	r0, r4
 8006b64:	f171 0100 	sbcs.w	r1, r1, #0
 8006b68:	f082 8196 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b70:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8006b74:	4321      	orrs	r1, r4
 8006b76:	f001 8197 	beq.w	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8006b7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b7e:	4c8b      	ldr	r4, [pc, #556]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006b80:	42a0      	cmp	r0, r4
 8006b82:	f171 0100 	sbcs.w	r1, r1, #0
 8006b86:	f082 8187 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b8e:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8006b92:	4321      	orrs	r1, r4
 8006b94:	f001 8154 	beq.w	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8006b98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b9c:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8006ba0:	f171 0100 	sbcs.w	r1, r1, #0
 8006ba4:	f082 8178 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ba8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bac:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8006bb0:	4321      	orrs	r1, r4
 8006bb2:	f001 80b7 	beq.w	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006bb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bba:	f248 0401 	movw	r4, #32769	; 0x8001
 8006bbe:	42a0      	cmp	r0, r4
 8006bc0:	f171 0100 	sbcs.w	r1, r1, #0
 8006bc4:	f082 8168 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bcc:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8006bd0:	4321      	orrs	r1, r4
 8006bd2:	f001 8064 	beq.w	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8006bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bda:	f244 0401 	movw	r4, #16385	; 0x4001
 8006bde:	42a0      	cmp	r0, r4
 8006be0:	f171 0100 	sbcs.w	r1, r1, #0
 8006be4:	f082 8158 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006be8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bec:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8006bf0:	4321      	orrs	r1, r4
 8006bf2:	f001 8011 	beq.w	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8006bf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bfa:	f242 0401 	movw	r4, #8193	; 0x2001
 8006bfe:	42a0      	cmp	r0, r4
 8006c00:	f171 0100 	sbcs.w	r1, r1, #0
 8006c04:	f082 8148 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c0c:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8006c10:	4321      	orrs	r1, r4
 8006c12:	f000 871e 	beq.w	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8006c16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c1a:	f241 0401 	movw	r4, #4097	; 0x1001
 8006c1e:	42a0      	cmp	r0, r4
 8006c20:	f171 0100 	sbcs.w	r1, r1, #0
 8006c24:	f082 8138 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c2c:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8006c30:	4321      	orrs	r1, r4
 8006c32:	f000 86a8 	beq.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8006c36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c3a:	f640 0401 	movw	r4, #2049	; 0x801
 8006c3e:	42a0      	cmp	r0, r4
 8006c40:	f171 0100 	sbcs.w	r1, r1, #0
 8006c44:	f082 8128 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c4c:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8006c50:	4321      	orrs	r1, r4
 8006c52:	f000 8632 	beq.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8006c56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c5a:	f240 4401 	movw	r4, #1025	; 0x401
 8006c5e:	42a0      	cmp	r0, r4
 8006c60:	f171 0100 	sbcs.w	r1, r1, #0
 8006c64:	f082 8118 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c6c:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8006c70:	4321      	orrs	r1, r4
 8006c72:	f000 85b0 	beq.w	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8006c76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c7a:	f240 2401 	movw	r4, #513	; 0x201
 8006c7e:	42a0      	cmp	r0, r4
 8006c80:	f171 0100 	sbcs.w	r1, r1, #0
 8006c84:	f082 8108 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c8c:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8006c90:	4321      	orrs	r1, r4
 8006c92:	f000 8535 	beq.w	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006c96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c9a:	f240 1401 	movw	r4, #257	; 0x101
 8006c9e:	42a0      	cmp	r0, r4
 8006ca0:	f171 0100 	sbcs.w	r1, r1, #0
 8006ca4:	f082 80f8 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ca8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cac:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8006cb0:	4321      	orrs	r1, r4
 8006cb2:	f000 84ba 	beq.w	800762a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8006cb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cba:	2881      	cmp	r0, #129	; 0x81
 8006cbc:	f171 0100 	sbcs.w	r1, r1, #0
 8006cc0:	f082 80ea 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cc8:	2821      	cmp	r0, #33	; 0x21
 8006cca:	f171 0100 	sbcs.w	r1, r1, #0
 8006cce:	d26f      	bcs.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cd4:	4301      	orrs	r1, r0
 8006cd6:	f002 80df 	beq.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cde:	1e42      	subs	r2, r0, #1
 8006ce0:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006ce4:	2a20      	cmp	r2, #32
 8006ce6:	f173 0100 	sbcs.w	r1, r3, #0
 8006cea:	f082 80d5 	bcs.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cee:	2a1f      	cmp	r2, #31
 8006cf0:	f202 80d2 	bhi.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cf4:	a101      	add	r1, pc, #4	; (adr r1, 8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8006cf6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	0800705d 	.word	0x0800705d
 8006d00:	08007129 	.word	0x08007129
 8006d04:	08008e99 	.word	0x08008e99
 8006d08:	080071e9 	.word	0x080071e9
 8006d0c:	08008e99 	.word	0x08008e99
 8006d10:	08008e99 	.word	0x08008e99
 8006d14:	08008e99 	.word	0x08008e99
 8006d18:	080072b9 	.word	0x080072b9
 8006d1c:	08008e99 	.word	0x08008e99
 8006d20:	08008e99 	.word	0x08008e99
 8006d24:	08008e99 	.word	0x08008e99
 8006d28:	08008e99 	.word	0x08008e99
 8006d2c:	08008e99 	.word	0x08008e99
 8006d30:	08008e99 	.word	0x08008e99
 8006d34:	08008e99 	.word	0x08008e99
 8006d38:	0800739b 	.word	0x0800739b
 8006d3c:	08008e99 	.word	0x08008e99
 8006d40:	08008e99 	.word	0x08008e99
 8006d44:	08008e99 	.word	0x08008e99
 8006d48:	08008e99 	.word	0x08008e99
 8006d4c:	08008e99 	.word	0x08008e99
 8006d50:	08008e99 	.word	0x08008e99
 8006d54:	08008e99 	.word	0x08008e99
 8006d58:	08008e99 	.word	0x08008e99
 8006d5c:	08008e99 	.word	0x08008e99
 8006d60:	08008e99 	.word	0x08008e99
 8006d64:	08008e99 	.word	0x08008e99
 8006d68:	08008e99 	.word	0x08008e99
 8006d6c:	08008e99 	.word	0x08008e99
 8006d70:	08008e99 	.word	0x08008e99
 8006d74:	08008e99 	.word	0x08008e99
 8006d78:	08007471 	.word	0x08007471
 8006d7c:	80000001 	.word	0x80000001
 8006d80:	40000001 	.word	0x40000001
 8006d84:	20000001 	.word	0x20000001
 8006d88:	10000001 	.word	0x10000001
 8006d8c:	08000001 	.word	0x08000001
 8006d90:	04000001 	.word	0x04000001
 8006d94:	00800001 	.word	0x00800001
 8006d98:	00400001 	.word	0x00400001
 8006d9c:	00200001 	.word	0x00200001
 8006da0:	00100001 	.word	0x00100001
 8006da4:	00080001 	.word	0x00080001
 8006da8:	00040001 	.word	0x00040001
 8006dac:	00020001 	.word	0x00020001
 8006db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db4:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006db8:	430b      	orrs	r3, r1
 8006dba:	f000 83c4 	beq.w	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006dbe:	f002 b86b 	b.w	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006dc2:	4ba1      	ldr	r3, [pc, #644]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006dc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dc8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dd4:	d036      	beq.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ddc:	d86b      	bhi.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006de4:	d02b      	beq.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dec:	d863      	bhi.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006df4:	d01b      	beq.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dfc:	d85b      	bhi.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d004      	beq.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e0a:	d008      	beq.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8006e0c:	e053      	b.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e0e:	f107 0320 	add.w	r3, r7, #32
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff f8ba 	bl	8005f8c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e1c:	e04e      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e1e:	f107 0314 	add.w	r3, r7, #20
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7ff fa1c 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e2c:	e046      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e2e:	f107 0308 	add.w	r3, r7, #8
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff fb7e 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e3c:	e03e      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006e3e:	4b83      	ldr	r3, [pc, #524]	; (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006e40:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e42:	e03b      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e44:	4b80      	ldr	r3, [pc, #512]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e4a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e4e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e50:	4b7d      	ldr	r3, [pc, #500]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d10c      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8006e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d109      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e62:	4b79      	ldr	r3, [pc, #484]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	08db      	lsrs	r3, r3, #3
 8006e68:	f003 0303 	and.w	r3, r3, #3
 8006e6c:	4a78      	ldr	r2, [pc, #480]	; (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e72:	637b      	str	r3, [r7, #52]	; 0x34
 8006e74:	e01e      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e76:	4b74      	ldr	r3, [pc, #464]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e82:	d106      	bne.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e8a:	d102      	bne.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e8c:	4b71      	ldr	r3, [pc, #452]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e90:	e010      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e92:	4b6d      	ldr	r3, [pc, #436]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e9e:	d106      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ea6:	d102      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006ea8:	4b6b      	ldr	r3, [pc, #428]	; (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8006eac:	e002      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006eb2:	e003      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8006eb4:	e002      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006eba:	bf00      	nop
          }
        }
        break;
 8006ebc:	f001 bfef 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006ec0:	4b61      	ldr	r3, [pc, #388]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ec2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ec6:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006eca:	633b      	str	r3, [r7, #48]	; 0x30
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ed2:	d036      	beq.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eda:	d86b      	bhi.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006ee2:	d02b      	beq.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006eea:	d863      	bhi.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ef2:	d01b      	beq.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006efa:	d85b      	bhi.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d004      	beq.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f08:	d008      	beq.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8006f0a:	e053      	b.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f0c:	f107 0320 	add.w	r3, r7, #32
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff f83b 	bl	8005f8c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f1a:	e04e      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f1c:	f107 0314 	add.w	r3, r7, #20
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff f99d 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f2a:	e046      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f2c:	f107 0308 	add.w	r3, r7, #8
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff faff 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f3a:	e03e      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006f3c:	4b43      	ldr	r3, [pc, #268]	; (800704c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006f3e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f40:	e03b      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f42:	4b41      	ldr	r3, [pc, #260]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f48:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006f4c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f4e:	4b3e      	ldr	r3, [pc, #248]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d10c      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d109      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f60:	4b39      	ldr	r3, [pc, #228]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	08db      	lsrs	r3, r3, #3
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	4a39      	ldr	r2, [pc, #228]	; (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f70:	637b      	str	r3, [r7, #52]	; 0x34
 8006f72:	e01e      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f74:	4b34      	ldr	r3, [pc, #208]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f80:	d106      	bne.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f88:	d102      	bne.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f8a:	4b32      	ldr	r3, [pc, #200]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f8e:	e010      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f90:	4b2d      	ldr	r3, [pc, #180]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f9c:	d106      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fa4:	d102      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006fa6:	4b2c      	ldr	r3, [pc, #176]	; (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8006faa:	e002      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006fb0:	e003      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8006fb2:	e002      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fb8:	bf00      	nop
          }
        }
        break;
 8006fba:	f001 bf70 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006fbe:	4b22      	ldr	r3, [pc, #136]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006fc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc8:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d108      	bne.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fd0:	f107 0320 	add.w	r3, r7, #32
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fe ffd9 	bl	8005f8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fde:	f001 bf5e 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d108      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe8:	f107 0314 	add.w	r3, r7, #20
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff f937 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ff6:	f001 bf52 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ffe:	f001 bf4e 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007002:	4b11      	ldr	r3, [pc, #68]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007004:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007010:	2b00      	cmp	r3, #0
 8007012:	d108      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007014:	f107 0320 	add.w	r3, r7, #32
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe ffb7 	bl	8005f8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007022:	f001 bf3c 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8007026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007028:	2b80      	cmp	r3, #128	; 0x80
 800702a:	d108      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800702c:	f107 0314 	add.w	r3, r7, #20
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff f915 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800703a:	f001 bf30 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007042:	f001 bf2c 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007046:	bf00      	nop
 8007048:	44020c00 	.word	0x44020c00
 800704c:	00bb8000 	.word	0x00bb8000
 8007050:	03d09000 	.word	0x03d09000
 8007054:	003d0900 	.word	0x003d0900
 8007058:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800705c:	4b9d      	ldr	r3, [pc, #628]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800705e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	2b00      	cmp	r3, #0
 800706c:	d104      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800706e:	f7fc ff9f 	bl	8003fb0 <HAL_RCC_GetPCLK2Freq>
 8007072:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007074:	f001 bf13 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007078:	4b96      	ldr	r3, [pc, #600]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007084:	d10a      	bne.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	2b01      	cmp	r3, #1
 800708a:	d107      	bne.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800708c:	f107 0314 	add.w	r3, r7, #20
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff f8e5 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
 800709a:	e043      	b.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800709c:	4b8d      	ldr	r3, [pc, #564]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070a8:	d10a      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d107      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070b0:	f107 0308 	add.w	r3, r7, #8
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff fa3d 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	637b      	str	r3, [r7, #52]	; 0x34
 80070be:	e031      	b.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80070c0:	4b84      	ldr	r3, [pc, #528]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d10c      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80070cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d109      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070d2:	4b80      	ldr	r3, [pc, #512]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	08db      	lsrs	r3, r3, #3
 80070d8:	f003 0303 	and.w	r3, r3, #3
 80070dc:	4a7e      	ldr	r2, [pc, #504]	; (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80070de:	fa22 f303 	lsr.w	r3, r2, r3
 80070e2:	637b      	str	r3, [r7, #52]	; 0x34
 80070e4:	e01e      	b.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80070e6:	4b7b      	ldr	r3, [pc, #492]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070f2:	d105      	bne.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d102      	bne.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80070fa:	4b78      	ldr	r3, [pc, #480]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80070fc:	637b      	str	r3, [r7, #52]	; 0x34
 80070fe:	e011      	b.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007100:	4b74      	ldr	r3, [pc, #464]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b02      	cmp	r3, #2
 800710c:	d106      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	2b05      	cmp	r3, #5
 8007112:	d103      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007118:	637b      	str	r3, [r7, #52]	; 0x34
 800711a:	e003      	b.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007120:	f001 bebd 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007124:	f001 bebb 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007128:	4b6a      	ldr	r3, [pc, #424]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800712a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800712e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007132:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	2b00      	cmp	r3, #0
 8007138:	d104      	bne.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800713a:	f7fc ff23 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 800713e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007140:	f001 bead 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007144:	4b63      	ldr	r3, [pc, #396]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800714c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007150:	d10a      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	2b08      	cmp	r3, #8
 8007156:	d107      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007158:	f107 0314 	add.w	r3, r7, #20
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff f87f 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	637b      	str	r3, [r7, #52]	; 0x34
 8007166:	e03d      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	2b10      	cmp	r3, #16
 800716c:	d108      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800716e:	f107 0308 	add.w	r3, r7, #8
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff f9de 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800717c:	f001 be8f 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007180:	4b54      	ldr	r3, [pc, #336]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b02      	cmp	r3, #2
 800718a:	d10c      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	2b18      	cmp	r3, #24
 8007190:	d109      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007192:	4b50      	ldr	r3, [pc, #320]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	08db      	lsrs	r3, r3, #3
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	4a4e      	ldr	r2, [pc, #312]	; (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800719e:	fa22 f303 	lsr.w	r3, r2, r3
 80071a2:	637b      	str	r3, [r7, #52]	; 0x34
 80071a4:	e01e      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80071a6:	4b4b      	ldr	r3, [pc, #300]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b2:	d105      	bne.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	d102      	bne.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80071ba:	4b48      	ldr	r3, [pc, #288]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80071bc:	637b      	str	r3, [r7, #52]	; 0x34
 80071be:	e011      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80071c0:	4b44      	ldr	r3, [pc, #272]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80071c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d106      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	2b28      	cmp	r3, #40	; 0x28
 80071d2:	d103      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80071d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071d8:	637b      	str	r3, [r7, #52]	; 0x34
 80071da:	e003      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071e0:	f001 be5d 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80071e4:	f001 be5b 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80071e8:	4b3a      	ldr	r3, [pc, #232]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80071ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80071ee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80071f2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d104      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80071fa:	f7fc fec3 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 80071fe:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007200:	f001 be4d 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007204:	4b33      	ldr	r3, [pc, #204]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800720c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007210:	d10a      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	2b40      	cmp	r3, #64	; 0x40
 8007216:	d107      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007218:	f107 0314 	add.w	r3, r7, #20
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff f81f 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
 8007226:	e045      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007228:	4b2a      	ldr	r3, [pc, #168]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007234:	d10a      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	2b80      	cmp	r3, #128	; 0x80
 800723a:	d107      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800723c:	f107 0308 	add.w	r3, r7, #8
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff f977 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	637b      	str	r3, [r7, #52]	; 0x34
 800724a:	e033      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800724c:	4b21      	ldr	r3, [pc, #132]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b02      	cmp	r3, #2
 8007256:	d10c      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8007258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725a:	2bc0      	cmp	r3, #192	; 0xc0
 800725c:	d109      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800725e:	4b1d      	ldr	r3, [pc, #116]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	08db      	lsrs	r3, r3, #3
 8007264:	f003 0303 	and.w	r3, r3, #3
 8007268:	4a1b      	ldr	r2, [pc, #108]	; (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800726a:	fa22 f303 	lsr.w	r3, r2, r3
 800726e:	637b      	str	r3, [r7, #52]	; 0x34
 8007270:	e020      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007272:	4b18      	ldr	r3, [pc, #96]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800727a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800727e:	d106      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007286:	d102      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8007288:	4b14      	ldr	r3, [pc, #80]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800728a:	637b      	str	r3, [r7, #52]	; 0x34
 800728c:	e012      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800728e:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b02      	cmp	r3, #2
 800729a:	d107      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80072a2:	d103      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80072a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072a8:	637b      	str	r3, [r7, #52]	; 0x34
 80072aa:	e003      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072b0:	f001 bdf5 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80072b4:	f001 bdf3 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80072b8:	4b06      	ldr	r3, [pc, #24]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80072ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80072be:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80072c2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10a      	bne.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80072ca:	f7fc fe5b 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 80072ce:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80072d0:	f001 bde5 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80072d4:	44020c00 	.word	0x44020c00
 80072d8:	03d09000 	.word	0x03d09000
 80072dc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80072e0:	4ba0      	ldr	r3, [pc, #640]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072ec:	d10b      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f4:	d107      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072f6:	f107 0314 	add.w	r3, r7, #20
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe ffb0 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	637b      	str	r3, [r7, #52]	; 0x34
 8007304:	e047      	b.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007306:	4b97      	ldr	r3, [pc, #604]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800730e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007312:	d10b      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800731a:	d107      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800731c:	f107 0308 	add.w	r3, r7, #8
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff f907 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	637b      	str	r3, [r7, #52]	; 0x34
 800732a:	e034      	b.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800732c:	4b8d      	ldr	r3, [pc, #564]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b02      	cmp	r3, #2
 8007336:	d10d      	bne.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800733e:	d109      	bne.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007340:	4b88      	ldr	r3, [pc, #544]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	08db      	lsrs	r3, r3, #3
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	4a87      	ldr	r2, [pc, #540]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800734c:	fa22 f303 	lsr.w	r3, r2, r3
 8007350:	637b      	str	r3, [r7, #52]	; 0x34
 8007352:	e020      	b.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007354:	4b83      	ldr	r3, [pc, #524]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800735c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007360:	d106      	bne.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007368:	d102      	bne.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800736a:	4b80      	ldr	r3, [pc, #512]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800736c:	637b      	str	r3, [r7, #52]	; 0x34
 800736e:	e012      	b.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007370:	4b7c      	ldr	r3, [pc, #496]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b02      	cmp	r3, #2
 800737c:	d107      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007384:	d103      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8007386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800738a:	637b      	str	r3, [r7, #52]	; 0x34
 800738c:	e003      	b.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007392:	f001 bd84 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007396:	f001 bd82 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800739a:	4b72      	ldr	r3, [pc, #456]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800739c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80073a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80073a4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d104      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80073ac:	f7fc fdea 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 80073b0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80073b2:	f001 bd74 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80073b6:	4b6b      	ldr	r3, [pc, #428]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073c2:	d10b      	bne.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ca:	d107      	bne.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073cc:	f107 0314 	add.w	r3, r7, #20
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fe ff45 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	637b      	str	r3, [r7, #52]	; 0x34
 80073da:	e047      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80073dc:	4b61      	ldr	r3, [pc, #388]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073e8:	d10b      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073f0:	d107      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073f2:	f107 0308 	add.w	r3, r7, #8
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff f89c 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007400:	e034      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007402:	4b58      	ldr	r3, [pc, #352]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b02      	cmp	r3, #2
 800740c:	d10d      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007414:	d109      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007416:	4b53      	ldr	r3, [pc, #332]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	08db      	lsrs	r3, r3, #3
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	4a51      	ldr	r2, [pc, #324]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007422:	fa22 f303 	lsr.w	r3, r2, r3
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
 8007428:	e020      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800742a:	4b4e      	ldr	r3, [pc, #312]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007436:	d106      	bne.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800743e:	d102      	bne.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007440:	4b4a      	ldr	r3, [pc, #296]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007442:	637b      	str	r3, [r7, #52]	; 0x34
 8007444:	e012      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007446:	4b47      	ldr	r3, [pc, #284]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b02      	cmp	r3, #2
 8007452:	d107      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800745a:	d103      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800745c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007460:	637b      	str	r3, [r7, #52]	; 0x34
 8007462:	e003      	b.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007468:	f001 bd19 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800746c:	f001 bd17 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007470:	4b3c      	ldr	r3, [pc, #240]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007472:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007476:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800747a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	2b00      	cmp	r3, #0
 8007480:	d104      	bne.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007482:	f7fc fd7f 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 8007486:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007488:	f001 bd09 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800748c:	4b35      	ldr	r3, [pc, #212]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007498:	d10b      	bne.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074a0:	d107      	bne.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074a2:	f107 0314 	add.w	r3, r7, #20
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe feda 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	637b      	str	r3, [r7, #52]	; 0x34
 80074b0:	e047      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80074b2:	4b2c      	ldr	r3, [pc, #176]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074be:	d10b      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c6:	d107      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074c8:	f107 0308 	add.w	r3, r7, #8
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff f831 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
 80074d6:	e034      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80074d8:	4b22      	ldr	r3, [pc, #136]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d10d      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80074ea:	d109      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074ec:	4b1d      	ldr	r3, [pc, #116]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	08db      	lsrs	r3, r3, #3
 80074f2:	f003 0303 	and.w	r3, r3, #3
 80074f6:	4a1c      	ldr	r2, [pc, #112]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80074f8:	fa22 f303 	lsr.w	r3, r2, r3
 80074fc:	637b      	str	r3, [r7, #52]	; 0x34
 80074fe:	e020      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007500:	4b18      	ldr	r3, [pc, #96]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800750c:	d106      	bne.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007514:	d102      	bne.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8007516:	4b15      	ldr	r3, [pc, #84]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007518:	637b      	str	r3, [r7, #52]	; 0x34
 800751a:	e012      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800751c:	4b11      	ldr	r3, [pc, #68]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800751e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b02      	cmp	r3, #2
 8007528:	d107      	bne.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007530:	d103      	bne.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8007532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007536:	637b      	str	r3, [r7, #52]	; 0x34
 8007538:	e003      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800753e:	f001 bcae 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007542:	f001 bcac 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8007546:	4b07      	ldr	r3, [pc, #28]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007548:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800754c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8007550:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10b      	bne.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007558:	f7fc fd14 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 800755c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800755e:	f001 bc9e 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007562:	bf00      	nop
 8007564:	44020c00 	.word	0x44020c00
 8007568:	03d09000 	.word	0x03d09000
 800756c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8007570:	4ba0      	ldr	r3, [pc, #640]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800757c:	d10b      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007584:	d107      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007586:	f107 0314 	add.w	r3, r7, #20
 800758a:	4618      	mov	r0, r3
 800758c:	f7fe fe68 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
 8007594:	e047      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8007596:	4b97      	ldr	r3, [pc, #604]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800759e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075a2:	d10b      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80075aa:	d107      	bne.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ac:	f107 0308 	add.w	r3, r7, #8
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe ffbf 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
 80075ba:	e034      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80075bc:	4b8d      	ldr	r3, [pc, #564]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d10d      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80075ce:	d109      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075d0:	4b88      	ldr	r3, [pc, #544]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	08db      	lsrs	r3, r3, #3
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	4a87      	ldr	r2, [pc, #540]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80075dc:	fa22 f303 	lsr.w	r3, r2, r3
 80075e0:	637b      	str	r3, [r7, #52]	; 0x34
 80075e2:	e020      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80075e4:	4b83      	ldr	r3, [pc, #524]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f0:	d106      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075f8:	d102      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80075fa:	4b80      	ldr	r3, [pc, #512]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80075fc:	637b      	str	r3, [r7, #52]	; 0x34
 80075fe:	e012      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007600:	4b7c      	ldr	r3, [pc, #496]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b02      	cmp	r3, #2
 800760c:	d107      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007614:	d103      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8007616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800761a:	637b      	str	r3, [r7, #52]	; 0x34
 800761c:	e003      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007622:	f001 bc3c 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007626:	f001 bc3a 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800762a:	4b72      	ldr	r3, [pc, #456]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800762c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007630:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007634:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	2b00      	cmp	r3, #0
 800763a:	d104      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800763c:	f7fc fca2 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 8007640:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8007642:	f001 bc2c 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8007646:	4b6b      	ldr	r3, [pc, #428]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800764e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007652:	d10b      	bne.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800765a:	d107      	bne.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800765c:	f107 0314 	add.w	r3, r7, #20
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe fdfd 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	637b      	str	r3, [r7, #52]	; 0x34
 800766a:	e047      	b.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800766c:	4b61      	ldr	r3, [pc, #388]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007678:	d10b      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007680:	d107      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007682:	f107 0308 	add.w	r3, r7, #8
 8007686:	4618      	mov	r0, r3
 8007688:	f7fe ff54 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
 8007690:	e034      	b.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8007692:	4b58      	ldr	r3, [pc, #352]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b02      	cmp	r3, #2
 800769c:	d10d      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076a4:	d109      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076a6:	4b53      	ldr	r3, [pc, #332]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	08db      	lsrs	r3, r3, #3
 80076ac:	f003 0303 	and.w	r3, r3, #3
 80076b0:	4a51      	ldr	r2, [pc, #324]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80076b2:	fa22 f303 	lsr.w	r3, r2, r3
 80076b6:	637b      	str	r3, [r7, #52]	; 0x34
 80076b8:	e020      	b.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80076ba:	4b4e      	ldr	r3, [pc, #312]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c6:	d106      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076ce:	d102      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80076d0:	4b4a      	ldr	r3, [pc, #296]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80076d2:	637b      	str	r3, [r7, #52]	; 0x34
 80076d4:	e012      	b.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80076d6:	4b47      	ldr	r3, [pc, #284]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d107      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80076ea:	d103      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80076ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
 80076f2:	e003      	b.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076f8:	f001 bbd1 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076fc:	f001 bbcf 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8007700:	4b3c      	ldr	r3, [pc, #240]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007702:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007706:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800770a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	2b00      	cmp	r3, #0
 8007710:	d104      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007712:	f7fc fc37 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 8007716:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8007718:	f001 bbc1 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800771c:	4b35      	ldr	r3, [pc, #212]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007728:	d10b      	bne.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007730:	d107      	bne.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007732:	f107 0314 	add.w	r3, r7, #20
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe fd92 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
 8007740:	e047      	b.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8007742:	4b2c      	ldr	r3, [pc, #176]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800774a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800774e:	d10b      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007756:	d107      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007758:	f107 0308 	add.w	r3, r7, #8
 800775c:	4618      	mov	r0, r3
 800775e:	f7fe fee9 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
 8007766:	e034      	b.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8007768:	4b22      	ldr	r3, [pc, #136]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b02      	cmp	r3, #2
 8007772:	d10d      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800777a:	d109      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800777c:	4b1d      	ldr	r3, [pc, #116]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	08db      	lsrs	r3, r3, #3
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	4a1c      	ldr	r2, [pc, #112]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007788:	fa22 f303 	lsr.w	r3, r2, r3
 800778c:	637b      	str	r3, [r7, #52]	; 0x34
 800778e:	e020      	b.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8007790:	4b18      	ldr	r3, [pc, #96]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800779c:	d106      	bne.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077a4:	d102      	bne.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80077a6:	4b15      	ldr	r3, [pc, #84]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80077a8:	637b      	str	r3, [r7, #52]	; 0x34
 80077aa:	e012      	b.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80077ac:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80077ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d107      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80077c0:	d103      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80077c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077c6:	637b      	str	r3, [r7, #52]	; 0x34
 80077c8:	e003      	b.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077ce:	f001 bb66 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077d2:	f001 bb64 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80077d6:	4b07      	ldr	r3, [pc, #28]	; (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80077d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80077dc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80077e0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10b      	bne.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80077e8:	f7fc fbcc 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 80077ec:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80077ee:	f001 bb56 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077f2:	bf00      	nop
 80077f4:	44020c00 	.word	0x44020c00
 80077f8:	03d09000 	.word	0x03d09000
 80077fc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007800:	4ba1      	ldr	r3, [pc, #644]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800780c:	d10b      	bne.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007814:	d107      	bne.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007816:	f107 0314 	add.w	r3, r7, #20
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe fd20 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	637b      	str	r3, [r7, #52]	; 0x34
 8007824:	e047      	b.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8007826:	4b98      	ldr	r3, [pc, #608]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800782e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007832:	d10b      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800783a:	d107      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800783c:	f107 0308 	add.w	r3, r7, #8
 8007840:	4618      	mov	r0, r3
 8007842:	f7fe fe77 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	637b      	str	r3, [r7, #52]	; 0x34
 800784a:	e034      	b.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800784c:	4b8e      	ldr	r3, [pc, #568]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b02      	cmp	r3, #2
 8007856:	d10d      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800785e:	d109      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007860:	4b89      	ldr	r3, [pc, #548]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	08db      	lsrs	r3, r3, #3
 8007866:	f003 0303 	and.w	r3, r3, #3
 800786a:	4a88      	ldr	r2, [pc, #544]	; (8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800786c:	fa22 f303 	lsr.w	r3, r2, r3
 8007870:	637b      	str	r3, [r7, #52]	; 0x34
 8007872:	e020      	b.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8007874:	4b84      	ldr	r3, [pc, #528]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800787c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007880:	d106      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007888:	d102      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800788a:	4b81      	ldr	r3, [pc, #516]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800788c:	637b      	str	r3, [r7, #52]	; 0x34
 800788e:	e012      	b.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8007890:	4b7d      	ldr	r3, [pc, #500]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b02      	cmp	r3, #2
 800789c:	d107      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80078a4:	d103      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80078a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078aa:	637b      	str	r3, [r7, #52]	; 0x34
 80078ac:	e003      	b.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078b2:	f001 baf4 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80078b6:	f001 baf2 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80078ba:	4b73      	ldr	r3, [pc, #460]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d104      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80078cc:	f7fc fb5a 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 80078d0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80078d2:	f001 bae4 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80078d6:	4b6c      	ldr	r3, [pc, #432]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078e2:	d10a      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d107      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078ea:	f107 0314 	add.w	r3, r7, #20
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fe fcb6 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	637b      	str	r3, [r7, #52]	; 0x34
 80078f8:	e043      	b.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80078fa:	4b63      	ldr	r3, [pc, #396]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007906:	d10a      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	2b02      	cmp	r3, #2
 800790c:	d107      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800790e:	f107 0308 	add.w	r3, r7, #8
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fe0e 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	637b      	str	r3, [r7, #52]	; 0x34
 800791c:	e031      	b.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800791e:	4b5a      	ldr	r3, [pc, #360]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b02      	cmp	r3, #2
 8007928:	d10c      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	2b03      	cmp	r3, #3
 800792e:	d109      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007930:	4b55      	ldr	r3, [pc, #340]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	08db      	lsrs	r3, r3, #3
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	4a54      	ldr	r2, [pc, #336]	; (8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800793c:	fa22 f303 	lsr.w	r3, r2, r3
 8007940:	637b      	str	r3, [r7, #52]	; 0x34
 8007942:	e01e      	b.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8007944:	4b50      	ldr	r3, [pc, #320]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800794c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007950:	d105      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8007952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007954:	2b04      	cmp	r3, #4
 8007956:	d102      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8007958:	4b4d      	ldr	r3, [pc, #308]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800795a:	637b      	str	r3, [r7, #52]	; 0x34
 800795c:	e011      	b.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800795e:	4b4a      	ldr	r3, [pc, #296]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b02      	cmp	r3, #2
 800796a:	d106      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	2b05      	cmp	r3, #5
 8007970:	d103      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8007972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007976:	637b      	str	r3, [r7, #52]	; 0x34
 8007978:	e003      	b.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800797e:	f001 ba8e 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007982:	f001 ba8c 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8007986:	4b40      	ldr	r3, [pc, #256]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007988:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800798c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007990:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	2b00      	cmp	r3, #0
 8007996:	d104      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007998:	f7fc faf4 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 800799c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800799e:	f001 ba7e 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80079a2:	4b39      	ldr	r3, [pc, #228]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079ae:	d10a      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	2b10      	cmp	r3, #16
 80079b4:	d107      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079b6:	f107 0314 	add.w	r3, r7, #20
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fc50 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	637b      	str	r3, [r7, #52]	; 0x34
 80079c4:	e043      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80079c6:	4b30      	ldr	r3, [pc, #192]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079d2:	d10a      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	2b20      	cmp	r3, #32
 80079d8:	d107      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079da:	f107 0308 	add.w	r3, r7, #8
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fe fda8 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	637b      	str	r3, [r7, #52]	; 0x34
 80079e8:	e031      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80079ea:	4b27      	ldr	r3, [pc, #156]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d10c      	bne.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	2b30      	cmp	r3, #48	; 0x30
 80079fa:	d109      	bne.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079fc:	4b22      	ldr	r3, [pc, #136]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	08db      	lsrs	r3, r3, #3
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	4a21      	ldr	r2, [pc, #132]	; (8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007a08:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a0e:	e01e      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8007a10:	4b1d      	ldr	r3, [pc, #116]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a1c:	d105      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	2b40      	cmp	r3, #64	; 0x40
 8007a22:	d102      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8007a24:	4b1a      	ldr	r3, [pc, #104]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007a26:	637b      	str	r3, [r7, #52]	; 0x34
 8007a28:	e011      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8007a2a:	4b17      	ldr	r3, [pc, #92]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d106      	bne.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	2b50      	cmp	r3, #80	; 0x50
 8007a3c:	d103      	bne.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8007a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a42:	637b      	str	r3, [r7, #52]	; 0x34
 8007a44:	e003      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a4a:	f001 ba28 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a4e:	f001 ba26 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007a52:	4b0d      	ldr	r3, [pc, #52]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a58:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007a5c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007a64:	f7fc faba 	bl	8003fdc <HAL_RCC_GetPCLK3Freq>
 8007a68:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a6a:	f001 ba18 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a74:	d10e      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a76:	f107 0314 	add.w	r3, r7, #20
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fbf0 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a84:	f001 ba0b 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a88:	44020c00 	.word	0x44020c00
 8007a8c:	03d09000 	.word	0x03d09000
 8007a90:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a9a:	d108      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a9c:	f107 0308 	add.w	r3, r7, #8
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fe fd47 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aaa:	f001 b9f8 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007aae:	4ba4      	ldr	r3, [pc, #656]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d10d      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ac0:	d109      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ac2:	4b9f      	ldr	r3, [pc, #636]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	08db      	lsrs	r3, r3, #3
 8007ac8:	f003 0303 	and.w	r3, r3, #3
 8007acc:	4a9d      	ldr	r2, [pc, #628]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007ace:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad4:	e020      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007ad6:	4b9a      	ldr	r3, [pc, #616]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae2:	d106      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007aea:	d102      	bne.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8007aec:	4b96      	ldr	r3, [pc, #600]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007aee:	637b      	str	r3, [r7, #52]	; 0x34
 8007af0:	e012      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007af2:	4b93      	ldr	r3, [pc, #588]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d107      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8007b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b02:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007b06:	d103      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8007b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0e:	e003      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b14:	f001 b9c3 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b18:	f001 b9c1 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007b1c:	4b88      	ldr	r3, [pc, #544]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b22:	f003 0307 	and.w	r3, r3, #7
 8007b26:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007b2e:	f7fc fa0d 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8007b32:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8007b34:	f001 b9b3 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d104      	bne.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8007b3e:	f7fc f8d9 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8007b42:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007b44:	f001 b9ab 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d108      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b4e:	f107 0314 	add.w	r3, r7, #20
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe fb84 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b5c:	f001 b99f 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007b60:	4b77      	ldr	r3, [pc, #476]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b6c:	d105      	bne.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	2b03      	cmp	r3, #3
 8007b72:	d102      	bne.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8007b74:	4b75      	ldr	r3, [pc, #468]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8007b76:	637b      	str	r3, [r7, #52]	; 0x34
 8007b78:	e023      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007b7a:	4b71      	ldr	r3, [pc, #452]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d10c      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d109      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b8c:	4b6c      	ldr	r3, [pc, #432]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	08db      	lsrs	r3, r3, #3
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	4a6b      	ldr	r2, [pc, #428]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007b98:	fa22 f303 	lsr.w	r3, r2, r3
 8007b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b9e:	e010      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007ba0:	4b67      	ldr	r3, [pc, #412]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bac:	d105      	bne.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	2b05      	cmp	r3, #5
 8007bb2:	d102      	bne.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8007bb4:	4b64      	ldr	r3, [pc, #400]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb8:	e003      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bbe:	f001 b96e 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bc2:	f001 b96c 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007bc6:	4b5e      	ldr	r3, [pc, #376]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007bcc:	f003 0308 	and.w	r3, r3, #8
 8007bd0:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007bd2:	4b5b      	ldr	r3, [pc, #364]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bd8:	f003 0302 	and.w	r3, r3, #2
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d106      	bne.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d103      	bne.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8007be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
 8007bec:	e012      	b.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8007bee:	4b54      	ldr	r3, [pc, #336]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bfc:	d106      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	d103      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8007c04:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c08:	637b      	str	r3, [r7, #52]	; 0x34
 8007c0a:	e003      	b.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007c10:	f001 b945 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c14:	f001 b943 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007c18:	4b49      	ldr	r3, [pc, #292]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c22:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d104      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c2a:	f7fc f9ab 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 8007c2e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c30:	f001 b935 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8007c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c3a:	d108      	bne.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c3c:	f107 0308 	add.w	r3, r7, #8
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe fc77 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c4a:	f001 b928 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007c4e:	4b3c      	ldr	r3, [pc, #240]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d10d      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c60:	d109      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c62:	4b37      	ldr	r3, [pc, #220]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	08db      	lsrs	r3, r3, #3
 8007c68:	f003 0303 	and.w	r3, r3, #3
 8007c6c:	4a35      	ldr	r2, [pc, #212]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34
 8007c74:	e011      	b.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8007c76:	4b32      	ldr	r3, [pc, #200]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c82:	d106      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c8a:	d102      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8007c8c:	4b2e      	ldr	r3, [pc, #184]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c90:	e003      	b.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c96:	f001 b902 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c9a:	f001 b900 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007c9e:	4b28      	ldr	r3, [pc, #160]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ca0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ca4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007ca8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d104      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007cb0:	f7fc f968 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 8007cb4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007cb6:	f001 b8f2 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007cc0:	d108      	bne.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cc2:	f107 0308 	add.w	r3, r7, #8
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe fc34 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cd0:	f001 b8e5 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007cd4:	4b1a      	ldr	r3, [pc, #104]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d10d      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ce6:	d109      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ce8:	4b15      	ldr	r3, [pc, #84]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	08db      	lsrs	r3, r3, #3
 8007cee:	f003 0303 	and.w	r3, r3, #3
 8007cf2:	4a14      	ldr	r2, [pc, #80]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8007cfa:	e011      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007cfc:	4b10      	ldr	r3, [pc, #64]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d08:	d106      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007d10:	d102      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8007d12:	4b0d      	ldr	r3, [pc, #52]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007d14:	637b      	str	r3, [r7, #52]	; 0x34
 8007d16:	e003      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d1c:	f001 b8bf 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d20:	f001 b8bd 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007d24:	4b06      	ldr	r3, [pc, #24]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007d26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007d2a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007d2e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10c      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007d36:	f7fc f951 	bl	8003fdc <HAL_RCC_GetPCLK3Freq>
 8007d3a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d3c:	f001 b8af 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d40:	44020c00 	.word	0x44020c00
 8007d44:	03d09000 	.word	0x03d09000
 8007d48:	003d0900 	.word	0x003d0900
 8007d4c:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d56:	d108      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d58:	f107 0308 	add.w	r3, r7, #8
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe fbe9 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d66:	f001 b89a 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007d6a:	4b9f      	ldr	r3, [pc, #636]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d10d      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8007d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d7c:	d109      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d7e:	4b9a      	ldr	r3, [pc, #616]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	08db      	lsrs	r3, r3, #3
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	4a98      	ldr	r2, [pc, #608]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d90:	e011      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8007d92:	4b95      	ldr	r3, [pc, #596]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d9e:	d106      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007da6:	d102      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8007da8:	4b91      	ldr	r3, [pc, #580]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007daa:	637b      	str	r3, [r7, #52]	; 0x34
 8007dac:	e003      	b.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8007dae:	2300      	movs	r3, #0
 8007db0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007db2:	f001 b874 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007db6:	f001 b872 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007dba:	4b8b      	ldr	r3, [pc, #556]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007dbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007dc0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007dc4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d104      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007dcc:	f7fc f906 	bl	8003fdc <HAL_RCC_GetPCLK3Freq>
 8007dd0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007dd2:	f001 b864 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ddc:	d108      	bne.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dde:	f107 0308 	add.w	r3, r7, #8
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fe fba6 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dec:	f001 b857 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007df0:	4b7d      	ldr	r3, [pc, #500]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d10d      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e02:	d109      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e04:	4b78      	ldr	r3, [pc, #480]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	08db      	lsrs	r3, r3, #3
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	4a77      	ldr	r2, [pc, #476]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007e10:	fa22 f303 	lsr.w	r3, r2, r3
 8007e14:	637b      	str	r3, [r7, #52]	; 0x34
 8007e16:	e011      	b.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8007e18:	4b73      	ldr	r3, [pc, #460]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e24:	d106      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007e2c:	d102      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8007e2e:	4b70      	ldr	r3, [pc, #448]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007e30:	637b      	str	r3, [r7, #52]	; 0x34
 8007e32:	e003      	b.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e38:	f001 b831 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e3c:	f001 b82f 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007e40:	4b69      	ldr	r3, [pc, #420]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007e46:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007e4a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d104      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e52:	f7fc f897 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 8007e56:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e58:	f001 b821 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e62:	d108      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e64:	f107 0308 	add.w	r3, r7, #8
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fe fb63 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e72:	f001 b814 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007e76:	4b5c      	ldr	r3, [pc, #368]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d10e      	bne.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e88:	d10a      	bne.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e8a:	4b57      	ldr	r3, [pc, #348]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	08db      	lsrs	r3, r3, #3
 8007e90:	f003 0303 	and.w	r3, r3, #3
 8007e94:	4a55      	ldr	r2, [pc, #340]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007e96:	fa22 f303 	lsr.w	r3, r2, r3
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e9c:	f000 bfff 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ea4:	f000 bffb 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007ea8:	4b4f      	ldr	r3, [pc, #316]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007eaa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007eae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007eba:	d056      	beq.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007ec2:	f200 808b 	bhi.w	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ecc:	d03e      	beq.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8007ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed4:	f200 8082 	bhi.w	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ede:	d027      	beq.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ee6:	d879      	bhi.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eee:	d017      	beq.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef6:	d871      	bhi.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d004      	beq.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f04:	d004      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8007f06:	e069      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007f08:	f7fc f868 	bl	8003fdc <HAL_RCC_GetPCLK3Freq>
 8007f0c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007f0e:	e068      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f10:	f107 0314 	add.w	r3, r7, #20
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fe f9a3 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f1e:	e060      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f20:	f107 0308 	add.w	r3, r7, #8
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fe fb05 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f2e:	e058      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f30:	4b2d      	ldr	r3, [pc, #180]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f36:	f003 0302 	and.w	r3, r3, #2
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d103      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8007f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f42:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007f44:	e04d      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f4a:	e04a      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007f4c:	4b26      	ldr	r3, [pc, #152]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007f4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f5a:	d103      	bne.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8007f5c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f60:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007f62:	e03e      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f68:	e03b      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f6a:	4b1f      	ldr	r3, [pc, #124]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f70:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f76:	4b1c      	ldr	r3, [pc, #112]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d10c      	bne.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8007f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d109      	bne.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f88:	4b17      	ldr	r3, [pc, #92]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	08db      	lsrs	r3, r3, #3
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	4a16      	ldr	r2, [pc, #88]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007f94:	fa22 f303 	lsr.w	r3, r2, r3
 8007f98:	637b      	str	r3, [r7, #52]	; 0x34
 8007f9a:	e01e      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f9c:	4b12      	ldr	r3, [pc, #72]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fa8:	d106      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb0:	d102      	bne.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007fb2:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb6:	e010      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fb8:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fc4:	d106      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8007fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fcc:	d102      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007fce:	4b09      	ldr	r3, [pc, #36]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8007fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd2:	e002      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007fd8:	e003      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8007fda:	e002      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fe0:	bf00      	nop
          }
        }
        break;
 8007fe2:	f000 bf5c 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007fe6:	bf00      	nop
 8007fe8:	44020c00 	.word	0x44020c00
 8007fec:	03d09000 	.word	0x03d09000
 8007ff0:	003d0900 	.word	0x003d0900
 8007ff4:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007ff8:	4b9e      	ldr	r3, [pc, #632]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007ffa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007ffe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008002:	633b      	str	r3, [r7, #48]	; 0x30
 8008004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008006:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800800a:	d056      	beq.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008012:	f200 808b 	bhi.w	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800801c:	d03e      	beq.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008024:	f200 8082 	bhi.w	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800802e:	d027      	beq.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008036:	d879      	bhi.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800803e:	d017      	beq.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008046:	d871      	bhi.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	2b00      	cmp	r3, #0
 800804c:	d004      	beq.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008054:	d004      	beq.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8008056:	e069      	b.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008058:	f7fb ff94 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 800805c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800805e:	e068      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008060:	f107 0314 	add.w	r3, r7, #20
 8008064:	4618      	mov	r0, r3
 8008066:	f7fe f8fb 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800806e:	e060      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008070:	f107 0308 	add.w	r3, r7, #8
 8008074:	4618      	mov	r0, r3
 8008076:	f7fe fa5d 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800807e:	e058      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008080:	4b7c      	ldr	r3, [pc, #496]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b02      	cmp	r3, #2
 800808c:	d103      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800808e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008092:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008094:	e04d      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800809a:	e04a      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800809c:	4b75      	ldr	r3, [pc, #468]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800809e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080aa:	d103      	bne.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80080ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80080b0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80080b2:	e03e      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080b8:	e03b      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080ba:	4b6e      	ldr	r3, [pc, #440]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80080bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80080c0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80080c4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080c6:	4b6b      	ldr	r3, [pc, #428]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d10c      	bne.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80080d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d109      	bne.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080d8:	4b66      	ldr	r3, [pc, #408]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	08db      	lsrs	r3, r3, #3
 80080de:	f003 0303 	and.w	r3, r3, #3
 80080e2:	4a65      	ldr	r2, [pc, #404]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80080e4:	fa22 f303 	lsr.w	r3, r2, r3
 80080e8:	637b      	str	r3, [r7, #52]	; 0x34
 80080ea:	e01e      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080ec:	4b61      	ldr	r3, [pc, #388]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080f8:	d106      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80080fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008100:	d102      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008102:	4b5e      	ldr	r3, [pc, #376]	; (800827c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008104:	637b      	str	r3, [r7, #52]	; 0x34
 8008106:	e010      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008108:	4b5a      	ldr	r3, [pc, #360]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008114:	d106      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8008116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800811c:	d102      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800811e:	4b58      	ldr	r3, [pc, #352]	; (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008120:	637b      	str	r3, [r7, #52]	; 0x34
 8008122:	e002      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008128:	e003      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800812a:	e002      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800812c:	2300      	movs	r3, #0
 800812e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008130:	bf00      	nop
          }
        }
        break;
 8008132:	f000 beb4 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008136:	4b4f      	ldr	r3, [pc, #316]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008138:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800813c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008140:	633b      	str	r3, [r7, #48]	; 0x30
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008148:	d056      	beq.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008150:	f200 808b 	bhi.w	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800815a:	d03e      	beq.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008162:	f200 8082 	bhi.w	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800816c:	d027      	beq.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008174:	d879      	bhi.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800817c:	d017      	beq.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008184:	d871      	bhi.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	2b00      	cmp	r3, #0
 800818a:	d004      	beq.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008192:	d004      	beq.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8008194:	e069      	b.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008196:	f7fb ff21 	bl	8003fdc <HAL_RCC_GetPCLK3Freq>
 800819a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800819c:	e068      	b.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800819e:	f107 0314 	add.w	r3, r7, #20
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fe f85c 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081ac:	e060      	b.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081ae:	f107 0308 	add.w	r3, r7, #8
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe f9be 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081bc:	e058      	b.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80081be:	4b2d      	ldr	r3, [pc, #180]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80081c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d103      	bne.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80081cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081d0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80081d2:	e04d      	b.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081d8:	e04a      	b.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80081da:	4b26      	ldr	r3, [pc, #152]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80081dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80081e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081e8:	d103      	bne.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80081ea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80081ee:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80081f0:	e03e      	b.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081f6:	e03b      	b.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081f8:	4b1e      	ldr	r3, [pc, #120]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80081fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081fe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008202:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008204:	4b1b      	ldr	r3, [pc, #108]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0302 	and.w	r3, r3, #2
 800820c:	2b02      	cmp	r3, #2
 800820e:	d10c      	bne.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d109      	bne.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008216:	4b17      	ldr	r3, [pc, #92]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	08db      	lsrs	r3, r3, #3
 800821c:	f003 0303 	and.w	r3, r3, #3
 8008220:	4a15      	ldr	r2, [pc, #84]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008222:	fa22 f303 	lsr.w	r3, r2, r3
 8008226:	637b      	str	r3, [r7, #52]	; 0x34
 8008228:	e01e      	b.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800822a:	4b12      	ldr	r3, [pc, #72]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008236:	d106      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8008238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800823e:	d102      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008240:	4b0e      	ldr	r3, [pc, #56]	; (800827c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008242:	637b      	str	r3, [r7, #52]	; 0x34
 8008244:	e010      	b.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008246:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800824e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008252:	d106      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8008254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800825a:	d102      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800825c:	4b08      	ldr	r3, [pc, #32]	; (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800825e:	637b      	str	r3, [r7, #52]	; 0x34
 8008260:	e002      	b.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008266:	e003      	b.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8008268:	e002      	b.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800826e:	bf00      	nop
          }
        }
        break;
 8008270:	f000 be15 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008274:	44020c00 	.word	0x44020c00
 8008278:	03d09000 	.word	0x03d09000
 800827c:	003d0900 	.word	0x003d0900
 8008280:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008284:	4b9e      	ldr	r3, [pc, #632]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008286:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800828a:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800828e:	633b      	str	r3, [r7, #48]	; 0x30
 8008290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008292:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8008296:	d056      	beq.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8008298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800829e:	f200 808b 	bhi.w	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082a8:	d03e      	beq.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082b0:	f200 8082 	bhi.w	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082ba:	d027      	beq.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082c2:	d879      	bhi.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082ca:	d017      	beq.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80082cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082d2:	d871      	bhi.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80082d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082e0:	d004      	beq.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80082e2:	e069      	b.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80082e4:	f7fb fe7a 	bl	8003fdc <HAL_RCC_GetPCLK3Freq>
 80082e8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80082ea:	e068      	b.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082ec:	f107 0314 	add.w	r3, r7, #20
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fd ffb5 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082fa:	e060      	b.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082fc:	f107 0308 	add.w	r3, r7, #8
 8008300:	4618      	mov	r0, r3
 8008302:	f7fe f917 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800830a:	e058      	b.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800830c:	4b7c      	ldr	r3, [pc, #496]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800830e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b02      	cmp	r3, #2
 8008318:	d103      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800831a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800831e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008320:	e04d      	b.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008326:	e04a      	b.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008328:	4b75      	ldr	r3, [pc, #468]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800832a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800832e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008336:	d103      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8008338:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800833c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800833e:	e03e      	b.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008344:	e03b      	b.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008346:	4b6e      	ldr	r3, [pc, #440]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800834c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008350:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008352:	4b6b      	ldr	r3, [pc, #428]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b02      	cmp	r3, #2
 800835c:	d10c      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	2b00      	cmp	r3, #0
 8008362:	d109      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008364:	4b66      	ldr	r3, [pc, #408]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	08db      	lsrs	r3, r3, #3
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	4a65      	ldr	r2, [pc, #404]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008370:	fa22 f303 	lsr.w	r3, r2, r3
 8008374:	637b      	str	r3, [r7, #52]	; 0x34
 8008376:	e01e      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008378:	4b61      	ldr	r3, [pc, #388]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008384:	d106      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8008386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800838c:	d102      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800838e:	4b5e      	ldr	r3, [pc, #376]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008390:	637b      	str	r3, [r7, #52]	; 0x34
 8008392:	e010      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008394:	4b5a      	ldr	r3, [pc, #360]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800839c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083a0:	d106      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80083a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083a8:	d102      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80083aa:	4b58      	ldr	r3, [pc, #352]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34
 80083ae:	e002      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80083b4:	e003      	b.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80083b6:	e002      	b.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80083bc:	bf00      	nop
          }
        }
        break;
 80083be:	f000 bd6e 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80083c2:	4b4f      	ldr	r3, [pc, #316]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80083c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80083c8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80083cc:	633b      	str	r3, [r7, #48]	; 0x30
 80083ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80083d4:	d056      	beq.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80083dc:	f200 808b 	bhi.w	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083e6:	d03e      	beq.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083ee:	f200 8082 	bhi.w	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80083f8:	d027      	beq.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008400:	d879      	bhi.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008408:	d017      	beq.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008410:	d871      	bhi.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	2b00      	cmp	r3, #0
 8008416:	d004      	beq.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800841e:	d004      	beq.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008420:	e069      	b.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008422:	f7fb fddb 	bl	8003fdc <HAL_RCC_GetPCLK3Freq>
 8008426:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008428:	e068      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800842a:	f107 0314 	add.w	r3, r7, #20
 800842e:	4618      	mov	r0, r3
 8008430:	f7fd ff16 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008438:	e060      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800843a:	f107 0308 	add.w	r3, r7, #8
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe f878 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008448:	e058      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800844a:	4b2d      	ldr	r3, [pc, #180]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800844c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008450:	f003 0302 	and.w	r3, r3, #2
 8008454:	2b02      	cmp	r3, #2
 8008456:	d103      	bne.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800845c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800845e:	e04d      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008460:	2300      	movs	r3, #0
 8008462:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008464:	e04a      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008466:	4b26      	ldr	r3, [pc, #152]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800846c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008474:	d103      	bne.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8008476:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800847a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800847c:	e03e      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008482:	e03b      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008484:	4b1e      	ldr	r3, [pc, #120]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008486:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800848a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800848e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008490:	4b1b      	ldr	r3, [pc, #108]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	2b02      	cmp	r3, #2
 800849a:	d10c      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d109      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084a2:	4b17      	ldr	r3, [pc, #92]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	08db      	lsrs	r3, r3, #3
 80084a8:	f003 0303 	and.w	r3, r3, #3
 80084ac:	4a15      	ldr	r2, [pc, #84]	; (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80084ae:	fa22 f303 	lsr.w	r3, r2, r3
 80084b2:	637b      	str	r3, [r7, #52]	; 0x34
 80084b4:	e01e      	b.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084b6:	4b12      	ldr	r3, [pc, #72]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084c2:	d106      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ca:	d102      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80084cc:	4b0e      	ldr	r3, [pc, #56]	; (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80084ce:	637b      	str	r3, [r7, #52]	; 0x34
 80084d0:	e010      	b.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084d2:	4b0b      	ldr	r3, [pc, #44]	; (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084de:	d106      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80084e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084e6:	d102      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80084e8:	4b08      	ldr	r3, [pc, #32]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80084ea:	637b      	str	r3, [r7, #52]	; 0x34
 80084ec:	e002      	b.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80084f2:	e003      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80084f4:	e002      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084fa:	bf00      	nop
          }
        }
        break;
 80084fc:	f000 bccf 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008500:	44020c00 	.word	0x44020c00
 8008504:	03d09000 	.word	0x03d09000
 8008508:	003d0900 	.word	0x003d0900
 800850c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008510:	4b9e      	ldr	r3, [pc, #632]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008512:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008516:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800851a:	633b      	str	r3, [r7, #48]	; 0x30
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008522:	d056      	beq.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800852a:	f200 808b 	bhi.w	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008534:	d03e      	beq.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800853c:	f200 8082 	bhi.w	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008546:	d027      	beq.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800854e:	d879      	bhi.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008556:	d017      	beq.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8008558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800855e:	d871      	bhi.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008562:	2b00      	cmp	r3, #0
 8008564:	d004      	beq.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800856c:	d004      	beq.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800856e:	e069      	b.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008570:	f7fb fd34 	bl	8003fdc <HAL_RCC_GetPCLK3Freq>
 8008574:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008576:	e068      	b.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008578:	f107 0314 	add.w	r3, r7, #20
 800857c:	4618      	mov	r0, r3
 800857e:	f7fd fe6f 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008586:	e060      	b.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008588:	f107 0308 	add.w	r3, r7, #8
 800858c:	4618      	mov	r0, r3
 800858e:	f7fd ffd1 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008596:	e058      	b.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008598:	4b7c      	ldr	r3, [pc, #496]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800859a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d103      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80085a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085aa:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80085ac:	e04d      	b.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80085ae:	2300      	movs	r3, #0
 80085b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085b2:	e04a      	b.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80085b4:	4b75      	ldr	r3, [pc, #468]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80085b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085c2:	d103      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80085c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80085c8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80085ca:	e03e      	b.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085d0:	e03b      	b.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085d2:	4b6e      	ldr	r3, [pc, #440]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80085d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80085d8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80085dc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085de:	4b6b      	ldr	r3, [pc, #428]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d10c      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80085ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d109      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085f0:	4b66      	ldr	r3, [pc, #408]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	08db      	lsrs	r3, r3, #3
 80085f6:	f003 0303 	and.w	r3, r3, #3
 80085fa:	4a65      	ldr	r2, [pc, #404]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80085fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008600:	637b      	str	r3, [r7, #52]	; 0x34
 8008602:	e01e      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008604:	4b61      	ldr	r3, [pc, #388]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800860c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008610:	d106      	bne.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8008612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008618:	d102      	bne.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800861a:	4b5e      	ldr	r3, [pc, #376]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800861c:	637b      	str	r3, [r7, #52]	; 0x34
 800861e:	e010      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008620:	4b5a      	ldr	r3, [pc, #360]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800862c:	d106      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800862e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008634:	d102      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008636:	4b58      	ldr	r3, [pc, #352]	; (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008638:	637b      	str	r3, [r7, #52]	; 0x34
 800863a:	e002      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008640:	e003      	b.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8008642:	e002      	b.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8008644:	2300      	movs	r3, #0
 8008646:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008648:	bf00      	nop
          }
        }
        break;
 800864a:	f000 bc28 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800864e:	4b4f      	ldr	r3, [pc, #316]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008658:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800865a:	4b4c      	ldr	r3, [pc, #304]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008662:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008666:	d106      	bne.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	2b00      	cmp	r3, #0
 800866c:	d103      	bne.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800866e:	4b4a      	ldr	r3, [pc, #296]	; (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008670:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008672:	f000 bc14 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800867c:	d108      	bne.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800867e:	f107 0320 	add.w	r3, r7, #32
 8008682:	4618      	mov	r0, r3
 8008684:	f7fd fc82 	bl	8005f8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800868c:	f000 bc07 	b.w	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008696:	d107      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008698:	f107 0314 	add.w	r3, r7, #20
 800869c:	4618      	mov	r0, r3
 800869e:	f7fd fddf 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086a6:	e3fa      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086ac:	e3f7      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80086ae:	4b37      	ldr	r3, [pc, #220]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80086b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086b4:	f003 0307 	and.w	r3, r3, #7
 80086b8:	633b      	str	r3, [r7, #48]	; 0x30
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	2b04      	cmp	r3, #4
 80086be:	d861      	bhi.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80086c0:	a201      	add	r2, pc, #4	; (adr r2, 80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80086c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c6:	bf00      	nop
 80086c8:	080086dd 	.word	0x080086dd
 80086cc:	080086ed 	.word	0x080086ed
 80086d0:	080086fd 	.word	0x080086fd
 80086d4:	0800870d 	.word	0x0800870d
 80086d8:	08008713 	.word	0x08008713
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086dc:	f107 0320 	add.w	r3, r7, #32
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fd fc53 	bl	8005f8c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086ea:	e04e      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ec:	f107 0314 	add.w	r3, r7, #20
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fd fdb5 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086fa:	e046      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086fc:	f107 0308 	add.w	r3, r7, #8
 8008700:	4618      	mov	r0, r3
 8008702:	f7fd ff17 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800870a:	e03e      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800870c:	4b23      	ldr	r3, [pc, #140]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800870e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008710:	e03b      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008712:	4b1e      	ldr	r3, [pc, #120]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008718:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800871c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800871e:	4b1b      	ldr	r3, [pc, #108]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b02      	cmp	r3, #2
 8008728:	d10c      	bne.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800872a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d109      	bne.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008730:	4b16      	ldr	r3, [pc, #88]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	08db      	lsrs	r3, r3, #3
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	4a15      	ldr	r2, [pc, #84]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800873c:	fa22 f303 	lsr.w	r3, r2, r3
 8008740:	637b      	str	r3, [r7, #52]	; 0x34
 8008742:	e01e      	b.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008744:	4b11      	ldr	r3, [pc, #68]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800874c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008750:	d106      	bne.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008758:	d102      	bne.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800875a:	4b0e      	ldr	r3, [pc, #56]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
 800875e:	e010      	b.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008760:	4b0a      	ldr	r3, [pc, #40]	; (800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800876c:	d106      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008774:	d102      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008776:	4b08      	ldr	r3, [pc, #32]	; (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008778:	637b      	str	r3, [r7, #52]	; 0x34
 800877a:	e002      	b.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008780:	e003      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8008782:	e002      	b.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8008784:	2300      	movs	r3, #0
 8008786:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008788:	bf00      	nop
          }
        }
        break;
 800878a:	e388      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800878c:	44020c00 	.word	0x44020c00
 8008790:	03d09000 	.word	0x03d09000
 8008794:	003d0900 	.word	0x003d0900
 8008798:	007a1200 	.word	0x007a1200
 800879c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80087a0:	4ba9      	ldr	r3, [pc, #676]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80087a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087aa:	633b      	str	r3, [r7, #48]	; 0x30
 80087ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ae:	2b20      	cmp	r3, #32
 80087b0:	f200 809a 	bhi.w	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80087b4:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80087b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ba:	bf00      	nop
 80087bc:	08008841 	.word	0x08008841
 80087c0:	080088e9 	.word	0x080088e9
 80087c4:	080088e9 	.word	0x080088e9
 80087c8:	080088e9 	.word	0x080088e9
 80087cc:	080088e9 	.word	0x080088e9
 80087d0:	080088e9 	.word	0x080088e9
 80087d4:	080088e9 	.word	0x080088e9
 80087d8:	080088e9 	.word	0x080088e9
 80087dc:	08008851 	.word	0x08008851
 80087e0:	080088e9 	.word	0x080088e9
 80087e4:	080088e9 	.word	0x080088e9
 80087e8:	080088e9 	.word	0x080088e9
 80087ec:	080088e9 	.word	0x080088e9
 80087f0:	080088e9 	.word	0x080088e9
 80087f4:	080088e9 	.word	0x080088e9
 80087f8:	080088e9 	.word	0x080088e9
 80087fc:	08008861 	.word	0x08008861
 8008800:	080088e9 	.word	0x080088e9
 8008804:	080088e9 	.word	0x080088e9
 8008808:	080088e9 	.word	0x080088e9
 800880c:	080088e9 	.word	0x080088e9
 8008810:	080088e9 	.word	0x080088e9
 8008814:	080088e9 	.word	0x080088e9
 8008818:	080088e9 	.word	0x080088e9
 800881c:	08008871 	.word	0x08008871
 8008820:	080088e9 	.word	0x080088e9
 8008824:	080088e9 	.word	0x080088e9
 8008828:	080088e9 	.word	0x080088e9
 800882c:	080088e9 	.word	0x080088e9
 8008830:	080088e9 	.word	0x080088e9
 8008834:	080088e9 	.word	0x080088e9
 8008838:	080088e9 	.word	0x080088e9
 800883c:	08008877 	.word	0x08008877
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008840:	f107 0320 	add.w	r3, r7, #32
 8008844:	4618      	mov	r0, r3
 8008846:	f7fd fba1 	bl	8005f8c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800884e:	e04e      	b.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008850:	f107 0314 	add.w	r3, r7, #20
 8008854:	4618      	mov	r0, r3
 8008856:	f7fd fd03 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800885e:	e046      	b.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008860:	f107 0308 	add.w	r3, r7, #8
 8008864:	4618      	mov	r0, r3
 8008866:	f7fd fe65 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800886e:	e03e      	b.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008870:	4b76      	ldr	r3, [pc, #472]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008872:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008874:	e03b      	b.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008876:	4b74      	ldr	r3, [pc, #464]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008878:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800887c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008882:	4b71      	ldr	r3, [pc, #452]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	2b02      	cmp	r3, #2
 800888c:	d10c      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800888e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008890:	2b00      	cmp	r3, #0
 8008892:	d109      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008894:	4b6c      	ldr	r3, [pc, #432]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	08db      	lsrs	r3, r3, #3
 800889a:	f003 0303 	and.w	r3, r3, #3
 800889e:	4a6c      	ldr	r2, [pc, #432]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80088a0:	fa22 f303 	lsr.w	r3, r2, r3
 80088a4:	637b      	str	r3, [r7, #52]	; 0x34
 80088a6:	e01e      	b.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088a8:	4b67      	ldr	r3, [pc, #412]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088b4:	d106      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088bc:	d102      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80088be:	4b65      	ldr	r3, [pc, #404]	; (8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80088c0:	637b      	str	r3, [r7, #52]	; 0x34
 80088c2:	e010      	b.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088c4:	4b60      	ldr	r3, [pc, #384]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088d0:	d106      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80088d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088d8:	d102      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80088da:	4b5f      	ldr	r3, [pc, #380]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80088dc:	637b      	str	r3, [r7, #52]	; 0x34
 80088de:	e002      	b.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80088e4:	e003      	b.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80088e6:	e002      	b.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80088ec:	bf00      	nop
          }
        }
        break;
 80088ee:	e2d6      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80088f0:	4b55      	ldr	r3, [pc, #340]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80088f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088f6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80088fa:	633b      	str	r3, [r7, #48]	; 0x30
 80088fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008902:	d031      	beq.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8008904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800890a:	d866      	bhi.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	2bc0      	cmp	r3, #192	; 0xc0
 8008910:	d027      	beq.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8008912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008914:	2bc0      	cmp	r3, #192	; 0xc0
 8008916:	d860      	bhi.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	2b80      	cmp	r3, #128	; 0x80
 800891c:	d019      	beq.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	2b80      	cmp	r3, #128	; 0x80
 8008922:	d85a      	bhi.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	2b40      	cmp	r3, #64	; 0x40
 800892e:	d008      	beq.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8008930:	e053      	b.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008932:	f107 0320 	add.w	r3, r7, #32
 8008936:	4618      	mov	r0, r3
 8008938:	f7fd fb28 	bl	8005f8c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008940:	e04e      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008942:	f107 0314 	add.w	r3, r7, #20
 8008946:	4618      	mov	r0, r3
 8008948:	f7fd fc8a 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008950:	e046      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008952:	f107 0308 	add.w	r3, r7, #8
 8008956:	4618      	mov	r0, r3
 8008958:	f7fd fdec 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008960:	e03e      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008962:	4b3a      	ldr	r3, [pc, #232]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008964:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008966:	e03b      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008968:	4b37      	ldr	r3, [pc, #220]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800896a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800896e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008972:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008974:	4b34      	ldr	r3, [pc, #208]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0302 	and.w	r3, r3, #2
 800897c:	2b02      	cmp	r3, #2
 800897e:	d10c      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8008980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008982:	2b00      	cmp	r3, #0
 8008984:	d109      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008986:	4b30      	ldr	r3, [pc, #192]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	08db      	lsrs	r3, r3, #3
 800898c:	f003 0303 	and.w	r3, r3, #3
 8008990:	4a2f      	ldr	r2, [pc, #188]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008992:	fa22 f303 	lsr.w	r3, r2, r3
 8008996:	637b      	str	r3, [r7, #52]	; 0x34
 8008998:	e01e      	b.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800899a:	4b2b      	ldr	r3, [pc, #172]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089a6:	d106      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 80089a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ae:	d102      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80089b0:	4b28      	ldr	r3, [pc, #160]	; (8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80089b2:	637b      	str	r3, [r7, #52]	; 0x34
 80089b4:	e010      	b.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089b6:	4b24      	ldr	r3, [pc, #144]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089c2:	d106      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80089c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089ca:	d102      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80089cc:	4b22      	ldr	r3, [pc, #136]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80089ce:	637b      	str	r3, [r7, #52]	; 0x34
 80089d0:	e002      	b.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80089d6:	e003      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80089d8:	e002      	b.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089de:	bf00      	nop
          }
        }
        break;
 80089e0:	e25d      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80089e2:	4b19      	ldr	r3, [pc, #100]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80089e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089e8:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80089ec:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d103      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80089f4:	f7fb fadc 	bl	8003fb0 <HAL_RCC_GetPCLK2Freq>
 80089f8:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80089fa:	e250      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80089fc:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a08:	d10b      	bne.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a10:	d107      	bne.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a12:	f107 0314 	add.w	r3, r7, #20
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fd fc22 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a20:	e04f      	b.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8008a22:	4b09      	ldr	r3, [pc, #36]	; (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a2e:	d115      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a36:	d111      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a38:	f107 0308 	add.w	r3, r7, #8
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fd fd79 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	637b      	str	r3, [r7, #52]	; 0x34
 8008a46:	e03c      	b.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8008a48:	44020c00 	.word	0x44020c00
 8008a4c:	00bb8000 	.word	0x00bb8000
 8008a50:	03d09000 	.word	0x03d09000
 8008a54:	003d0900 	.word	0x003d0900
 8008a58:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8008a5c:	4b94      	ldr	r3, [pc, #592]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d10d      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8008a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008a6e:	d109      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a70:	4b8f      	ldr	r3, [pc, #572]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	08db      	lsrs	r3, r3, #3
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	4a8e      	ldr	r2, [pc, #568]	; (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a80:	637b      	str	r3, [r7, #52]	; 0x34
 8008a82:	e01e      	b.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8008a84:	4b8a      	ldr	r3, [pc, #552]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a90:	d106      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a98:	d102      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8008a9a:	4b87      	ldr	r3, [pc, #540]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a9e:	e010      	b.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008aa0:	4b83      	ldr	r3, [pc, #524]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008aac:	d106      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008ab4:	d102      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8008ab6:	4b81      	ldr	r3, [pc, #516]	; (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8008aba:	e002      	b.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ac0:	e1ed      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ac2:	e1ec      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8008ac4:	4b7a      	ldr	r3, [pc, #488]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008aca:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008ace:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d103      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008ad6:	f7fb fa81 	bl	8003fdc <HAL_RCC_GetPCLK3Freq>
 8008ada:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008adc:	e1df      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8008ade:	4b74      	ldr	r3, [pc, #464]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008aea:	d10b      	bne.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af2:	d107      	bne.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008af4:	f107 0314 	add.w	r3, r7, #20
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fd fbb1 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	637b      	str	r3, [r7, #52]	; 0x34
 8008b02:	e045      	b.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8008b04:	4b6a      	ldr	r3, [pc, #424]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b10:	d10b      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b18:	d107      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b1a:	f107 0308 	add.w	r3, r7, #8
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fd fd08 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	637b      	str	r3, [r7, #52]	; 0x34
 8008b28:	e032      	b.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8008b2a:	4b61      	ldr	r3, [pc, #388]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0302 	and.w	r3, r3, #2
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d10d      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b3c:	d109      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b3e:	4b5c      	ldr	r3, [pc, #368]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	08db      	lsrs	r3, r3, #3
 8008b44:	f003 0303 	and.w	r3, r3, #3
 8008b48:	4a5a      	ldr	r2, [pc, #360]	; (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008b50:	e01e      	b.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8008b52:	4b57      	ldr	r3, [pc, #348]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b5e:	d106      	bne.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b66:	d102      	bne.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8008b68:	4b53      	ldr	r3, [pc, #332]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b6c:	e010      	b.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8008b6e:	4b50      	ldr	r3, [pc, #320]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b7a:	d106      	bne.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008b82:	d102      	bne.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8008b84:	4b4d      	ldr	r3, [pc, #308]	; (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008b86:	637b      	str	r3, [r7, #52]	; 0x34
 8008b88:	e002      	b.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b8e:	e186      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b90:	e185      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008b92:	4b47      	ldr	r3, [pc, #284]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b98:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8008b9c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d103      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008ba4:	f7fb fa04 	bl	8003fb0 <HAL_RCC_GetPCLK2Freq>
 8008ba8:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008baa:	e178      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8008bac:	4b40      	ldr	r3, [pc, #256]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bb8:	d10b      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8008bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bc0:	d107      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bc2:	f107 0314 	add.w	r3, r7, #20
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fd fb4a 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	637b      	str	r3, [r7, #52]	; 0x34
 8008bd0:	e045      	b.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8008bd2:	4b37      	ldr	r3, [pc, #220]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bde:	d10b      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8008be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008be6:	d107      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008be8:	f107 0308 	add.w	r3, r7, #8
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fd fca1 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf6:	e032      	b.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8008bf8:	4b2d      	ldr	r3, [pc, #180]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0302 	and.w	r3, r3, #2
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d10d      	bne.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008c0a:	d109      	bne.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c0c:	4b28      	ldr	r3, [pc, #160]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	08db      	lsrs	r3, r3, #3
 8008c12:	f003 0303 	and.w	r3, r3, #3
 8008c16:	4a27      	ldr	r2, [pc, #156]	; (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008c18:	fa22 f303 	lsr.w	r3, r2, r3
 8008c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c1e:	e01e      	b.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8008c20:	4b23      	ldr	r3, [pc, #140]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c2c:	d106      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c34:	d102      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8008c36:	4b20      	ldr	r3, [pc, #128]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008c38:	637b      	str	r3, [r7, #52]	; 0x34
 8008c3a:	e010      	b.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8008c3c:	4b1c      	ldr	r3, [pc, #112]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c48:	d106      	bne.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008c50:	d102      	bne.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8008c52:	4b1a      	ldr	r3, [pc, #104]	; (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008c54:	637b      	str	r3, [r7, #52]	; 0x34
 8008c56:	e002      	b.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c5c:	e11f      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c5e:	e11e      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008c60:	4b13      	ldr	r3, [pc, #76]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008c62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008c66:	f003 0303 	and.w	r3, r3, #3
 8008c6a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d85f      	bhi.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8008c72:	a201      	add	r2, pc, #4	; (adr r2, 8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8008c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c78:	08008c89 	.word	0x08008c89
 8008c7c:	08008c91 	.word	0x08008c91
 8008c80:	08008ca1 	.word	0x08008ca1
 8008c84:	08008cc1 	.word	0x08008cc1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8008c88:	f7fb f960 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8008c8c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008c8e:	e053      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c90:	f107 0320 	add.w	r3, r7, #32
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fd f979 	bl	8005f8c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c9e:	e04b      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ca0:	f107 0314 	add.w	r3, r7, #20
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7fd fadb 	bl	8006260 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008cae:	e043      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008cb0:	44020c00 	.word	0x44020c00
 8008cb4:	03d09000 	.word	0x03d09000
 8008cb8:	003d0900 	.word	0x003d0900
 8008cbc:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cc0:	4b79      	ldr	r3, [pc, #484]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008cc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008cc6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008cca:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ccc:	4b76      	ldr	r3, [pc, #472]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d10c      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8008cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d109      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cde:	4b72      	ldr	r3, [pc, #456]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	08db      	lsrs	r3, r3, #3
 8008ce4:	f003 0303 	and.w	r3, r3, #3
 8008ce8:	4a70      	ldr	r2, [pc, #448]	; (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8008cea:	fa22 f303 	lsr.w	r3, r2, r3
 8008cee:	637b      	str	r3, [r7, #52]	; 0x34
 8008cf0:	e01e      	b.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cf2:	4b6d      	ldr	r3, [pc, #436]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cfe:	d106      	bne.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8008d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d06:	d102      	bne.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008d08:	4b69      	ldr	r3, [pc, #420]	; (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8008d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d0c:	e010      	b.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d0e:	4b66      	ldr	r3, [pc, #408]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d1a:	d106      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8008d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d22:	d102      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008d24:	4b63      	ldr	r3, [pc, #396]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8008d26:	637b      	str	r3, [r7, #52]	; 0x34
 8008d28:	e002      	b.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008d2e:	e003      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008d30:	e002      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d36:	bf00      	nop
          }
        }
        break;
 8008d38:	e0b1      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008d3a:	4b5b      	ldr	r3, [pc, #364]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008d40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d44:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008d46:	4b58      	ldr	r3, [pc, #352]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d4c:	f003 0302 	and.w	r3, r3, #2
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d106      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8008d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d103      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8008d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d60:	e01f      	b.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8008d62:	4b51      	ldr	r3, [pc, #324]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d70:	d106      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8008d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d74:	2b40      	cmp	r3, #64	; 0x40
 8008d76:	d103      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8008d78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d7e:	e010      	b.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8008d80:	4b49      	ldr	r3, [pc, #292]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d8c:	d106      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	2b80      	cmp	r3, #128	; 0x80
 8008d92:	d103      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8008d94:	f248 0312 	movw	r3, #32786	; 0x8012
 8008d98:	637b      	str	r3, [r7, #52]	; 0x34
 8008d9a:	e002      	b.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008da0:	e07d      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008da2:	e07c      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008da4:	4b40      	ldr	r3, [pc, #256]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008daa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008dae:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008db0:	4b3d      	ldr	r3, [pc, #244]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dbc:	d105      	bne.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d102      	bne.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8008dc4:	4b3c      	ldr	r3, [pc, #240]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8008dc8:	e031      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008dca:	4b37      	ldr	r3, [pc, #220]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dd6:	d10a      	bne.n	8008dee <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dda:	2b10      	cmp	r3, #16
 8008ddc:	d107      	bne.n	8008dee <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dde:	f107 0320 	add.w	r3, r7, #32
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fd f8d2 	bl	8005f8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	637b      	str	r3, [r7, #52]	; 0x34
 8008dec:	e01f      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8008dee:	4b2e      	ldr	r3, [pc, #184]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d106      	bne.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfe:	2b20      	cmp	r3, #32
 8008e00:	d103      	bne.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8008e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e06:	637b      	str	r3, [r7, #52]	; 0x34
 8008e08:	e011      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008e0a:	4b27      	ldr	r3, [pc, #156]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e18:	d106      	bne.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	2b30      	cmp	r3, #48	; 0x30
 8008e1e:	d103      	bne.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8008e20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008e24:	637b      	str	r3, [r7, #52]	; 0x34
 8008e26:	e002      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008e2c:	e037      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e2e:	e036      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008e30:	4b1d      	ldr	r3, [pc, #116]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008e32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008e36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e3a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	2b10      	cmp	r3, #16
 8008e40:	d107      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e42:	f107 0320 	add.w	r3, r7, #32
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fd f8a0 	bl	8005f8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008e50:	e025      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8008e52:	4b15      	ldr	r3, [pc, #84]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e5e:	d10a      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	2b20      	cmp	r3, #32
 8008e64:	d107      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e66:	f107 0308 	add.w	r3, r7, #8
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fd fb62 	bl	8006534 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	637b      	str	r3, [r7, #52]	; 0x34
 8008e74:	e00f      	b.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008e76:	4b0c      	ldr	r3, [pc, #48]	; (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e82:	d105      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8008e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e86:	2b30      	cmp	r3, #48	; 0x30
 8008e88:	d102      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8008e8a:	4b0b      	ldr	r3, [pc, #44]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e8e:	e002      	b.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8008e90:	2300      	movs	r3, #0
 8008e92:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8008e94:	e003      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e96:	e002      	b.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e9c:	bf00      	nop
    }
  }

  return (frequency);
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	373c      	adds	r7, #60	; 0x3c
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd90      	pop	{r4, r7, pc}
 8008ea8:	44020c00 	.word	0x44020c00
 8008eac:	03d09000 	.word	0x03d09000
 8008eb0:	003d0900 	.word	0x003d0900
 8008eb4:	007a1200 	.word	0x007a1200
 8008eb8:	02dc6c00 	.word	0x02dc6c00

08008ebc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008ec4:	4b48      	ldr	r3, [pc, #288]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a47      	ldr	r2, [pc, #284]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008eca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ece:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ed0:	f7f8 ff42 	bl	8001d58 <HAL_GetTick>
 8008ed4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ed6:	e008      	b.n	8008eea <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ed8:	f7f8 ff3e 	bl	8001d58 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d901      	bls.n	8008eea <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e07a      	b.n	8008fe0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008eea:	4b3f      	ldr	r3, [pc, #252]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1f0      	bne.n	8008ed8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008ef6:	4b3c      	ldr	r3, [pc, #240]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008efe:	f023 0303 	bic.w	r3, r3, #3
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	6811      	ldr	r1, [r2, #0]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	6852      	ldr	r2, [r2, #4]
 8008f0a:	0212      	lsls	r2, r2, #8
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	4936      	ldr	r1, [pc, #216]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008f10:	4313      	orrs	r3, r2
 8008f12:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	025b      	lsls	r3, r3, #9
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	041b      	lsls	r3, r3, #16
 8008f32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f36:	431a      	orrs	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	061b      	lsls	r3, r3, #24
 8008f40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f44:	4928      	ldr	r1, [pc, #160]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008f4a:	4b27      	ldr	r3, [pc, #156]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4e:	f023 020c 	bic.w	r2, r3, #12
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	4924      	ldr	r1, [pc, #144]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008f5c:	4b22      	ldr	r3, [pc, #136]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	f023 0220 	bic.w	r2, r3, #32
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	491f      	ldr	r1, [pc, #124]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008f6e:	4b1e      	ldr	r3, [pc, #120]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f76:	491c      	ldr	r1, [pc, #112]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008f7c:	4b1a      	ldr	r3, [pc, #104]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f80:	4a19      	ldr	r2, [pc, #100]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008f82:	f023 0310 	bic.w	r3, r3, #16
 8008f86:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008f88:	4b17      	ldr	r3, [pc, #92]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	6a12      	ldr	r2, [r2, #32]
 8008f98:	00d2      	lsls	r2, r2, #3
 8008f9a:	4913      	ldr	r1, [pc, #76]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008fa0:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa4:	4a10      	ldr	r2, [pc, #64]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008fa6:	f043 0310 	orr.w	r3, r3, #16
 8008faa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008fac:	4b0e      	ldr	r3, [pc, #56]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a0d      	ldr	r2, [pc, #52]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008fb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fb6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008fb8:	f7f8 fece 	bl	8001d58 <HAL_GetTick>
 8008fbc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fbe:	e008      	b.n	8008fd2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fc0:	f7f8 feca 	bl	8001d58 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d901      	bls.n	8008fd2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e006      	b.n	8008fe0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fd2:	4b05      	ldr	r3, [pc, #20]	; (8008fe8 <RCCEx_PLL2_Config+0x12c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d0f0      	beq.n	8008fc0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008fde:	2300      	movs	r3, #0

}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	44020c00 	.word	0x44020c00

08008fec <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008ff4:	4b48      	ldr	r3, [pc, #288]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a47      	ldr	r2, [pc, #284]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 8008ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ffe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009000:	f7f8 feaa 	bl	8001d58 <HAL_GetTick>
 8009004:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009006:	e008      	b.n	800901a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009008:	f7f8 fea6 	bl	8001d58 <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	2b02      	cmp	r3, #2
 8009014:	d901      	bls.n	800901a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e07a      	b.n	8009110 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800901a:	4b3f      	ldr	r3, [pc, #252]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1f0      	bne.n	8009008 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009026:	4b3c      	ldr	r3, [pc, #240]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 8009028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800902e:	f023 0303 	bic.w	r3, r3, #3
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	6811      	ldr	r1, [r2, #0]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	6852      	ldr	r2, [r2, #4]
 800903a:	0212      	lsls	r2, r2, #8
 800903c:	430a      	orrs	r2, r1
 800903e:	4936      	ldr	r1, [pc, #216]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 8009040:	4313      	orrs	r3, r2
 8009042:	630b      	str	r3, [r1, #48]	; 0x30
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	3b01      	subs	r3, #1
 800904a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	3b01      	subs	r3, #1
 8009054:	025b      	lsls	r3, r3, #9
 8009056:	b29b      	uxth	r3, r3
 8009058:	431a      	orrs	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	3b01      	subs	r3, #1
 8009060:	041b      	lsls	r3, r3, #16
 8009062:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	3b01      	subs	r3, #1
 800906e:	061b      	lsls	r3, r3, #24
 8009070:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009074:	4928      	ldr	r1, [pc, #160]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 8009076:	4313      	orrs	r3, r2
 8009078:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800907a:	4b27      	ldr	r3, [pc, #156]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907e:	f023 020c 	bic.w	r2, r3, #12
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	4924      	ldr	r1, [pc, #144]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 8009088:	4313      	orrs	r3, r2
 800908a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800908c:	4b22      	ldr	r3, [pc, #136]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 800908e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009090:	f023 0220 	bic.w	r2, r3, #32
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	491f      	ldr	r1, [pc, #124]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 800909a:	4313      	orrs	r3, r2
 800909c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800909e:	4b1e      	ldr	r3, [pc, #120]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 80090a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	491c      	ldr	r1, [pc, #112]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80090ac:	4b1a      	ldr	r3, [pc, #104]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 80090ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b0:	4a19      	ldr	r2, [pc, #100]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 80090b2:	f023 0310 	bic.w	r3, r3, #16
 80090b6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80090b8:	4b17      	ldr	r3, [pc, #92]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 80090ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	6a12      	ldr	r2, [r2, #32]
 80090c8:	00d2      	lsls	r2, r2, #3
 80090ca:	4913      	ldr	r1, [pc, #76]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80090d0:	4b11      	ldr	r3, [pc, #68]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 80090d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d4:	4a10      	ldr	r2, [pc, #64]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 80090d6:	f043 0310 	orr.w	r3, r3, #16
 80090da:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80090dc:	4b0e      	ldr	r3, [pc, #56]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a0d      	ldr	r2, [pc, #52]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 80090e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80090e8:	f7f8 fe36 	bl	8001d58 <HAL_GetTick>
 80090ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090ee:	e008      	b.n	8009102 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090f0:	f7f8 fe32 	bl	8001d58 <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d901      	bls.n	8009102 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e006      	b.n	8009110 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009102:	4b05      	ldr	r3, [pc, #20]	; (8009118 <RCCEx_PLL3_Config+0x12c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d0f0      	beq.n	80090f0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	44020c00 	.word	0x44020c00

0800911c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d071      	beq.n	8009212 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d106      	bne.n	8009148 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7f7 fe60 	bl	8000e08 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2202      	movs	r2, #2
 800914c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009150:	4b32      	ldr	r3, [pc, #200]	; (800921c <HAL_RTC_Init+0x100>)
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f003 0310 	and.w	r3, r3, #16
 8009158:	2b10      	cmp	r3, #16
 800915a:	d051      	beq.n	8009200 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800915c:	4b2f      	ldr	r3, [pc, #188]	; (800921c <HAL_RTC_Init+0x100>)
 800915e:	22ca      	movs	r2, #202	; 0xca
 8009160:	625a      	str	r2, [r3, #36]	; 0x24
 8009162:	4b2e      	ldr	r3, [pc, #184]	; (800921c <HAL_RTC_Init+0x100>)
 8009164:	2253      	movs	r2, #83	; 0x53
 8009166:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f88b 	bl	8009284 <RTC_EnterInitMode>
 800916e:	4603      	mov	r3, r0
 8009170:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d13f      	bne.n	80091f8 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009178:	4b28      	ldr	r3, [pc, #160]	; (800921c <HAL_RTC_Init+0x100>)
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	4a27      	ldr	r2, [pc, #156]	; (800921c <HAL_RTC_Init+0x100>)
 800917e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8009182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009186:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009188:	4b24      	ldr	r3, [pc, #144]	; (800921c <HAL_RTC_Init+0x100>)
 800918a:	699a      	ldr	r2, [r3, #24]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6859      	ldr	r1, [r3, #4]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	4319      	orrs	r1, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	430b      	orrs	r3, r1
 800919c:	491f      	ldr	r1, [pc, #124]	; (800921c <HAL_RTC_Init+0x100>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68da      	ldr	r2, [r3, #12]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	041b      	lsls	r3, r3, #16
 80091ac:	491b      	ldr	r1, [pc, #108]	; (800921c <HAL_RTC_Init+0x100>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80091b2:	4b1a      	ldr	r3, [pc, #104]	; (800921c <HAL_RTC_Init+0x100>)
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c2:	430b      	orrs	r3, r1
 80091c4:	4915      	ldr	r1, [pc, #84]	; (800921c <HAL_RTC_Init+0x100>)
 80091c6:	4313      	orrs	r3, r2
 80091c8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f896 	bl	80092fc <RTC_ExitInitMode>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10e      	bne.n	80091f8 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 80091da:	4b10      	ldr	r3, [pc, #64]	; (800921c <HAL_RTC_Init+0x100>)
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a19      	ldr	r1, [r3, #32]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	4319      	orrs	r1, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	430b      	orrs	r3, r1
 80091f2:	490a      	ldr	r1, [pc, #40]	; (800921c <HAL_RTC_Init+0x100>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091f8:	4b08      	ldr	r3, [pc, #32]	; (800921c <HAL_RTC_Init+0x100>)
 80091fa:	22ff      	movs	r2, #255	; 0xff
 80091fc:	625a      	str	r2, [r3, #36]	; 0x24
 80091fe:	e001      	b.n	8009204 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d103      	bne.n	8009212 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8009212:	7bfb      	ldrb	r3, [r7, #15]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	44007800 	.word	0x44007800

08009220 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009228:	4b15      	ldr	r3, [pc, #84]	; (8009280 <HAL_RTC_WaitForSynchro+0x60>)
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	4a14      	ldr	r2, [pc, #80]	; (8009280 <HAL_RTC_WaitForSynchro+0x60>)
 800922e:	f023 0320 	bic.w	r3, r3, #32
 8009232:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009234:	f7f8 fd90 	bl	8001d58 <HAL_GetTick>
 8009238:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800923a:	e013      	b.n	8009264 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800923c:	f7f8 fd8c 	bl	8001d58 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800924a:	d90b      	bls.n	8009264 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800924c:	4b0c      	ldr	r3, [pc, #48]	; (8009280 <HAL_RTC_WaitForSynchro+0x60>)
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	f003 0320 	and.w	r3, r3, #32
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10c      	bne.n	8009272 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2203      	movs	r2, #3
 800925c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e008      	b.n	8009276 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009264:	4b06      	ldr	r3, [pc, #24]	; (8009280 <HAL_RTC_WaitForSynchro+0x60>)
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f003 0320 	and.w	r3, r3, #32
 800926c:	2b00      	cmp	r3, #0
 800926e:	d0e5      	beq.n	800923c <HAL_RTC_WaitForSynchro+0x1c>
 8009270:	e000      	b.n	8009274 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8009272:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	44007800 	.word	0x44007800

08009284 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009290:	4b19      	ldr	r3, [pc, #100]	; (80092f8 <RTC_EnterInitMode+0x74>)
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009298:	2b00      	cmp	r3, #0
 800929a:	d128      	bne.n	80092ee <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800929c:	4b16      	ldr	r3, [pc, #88]	; (80092f8 <RTC_EnterInitMode+0x74>)
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	4a15      	ldr	r2, [pc, #84]	; (80092f8 <RTC_EnterInitMode+0x74>)
 80092a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80092a8:	f7f8 fd56 	bl	8001d58 <HAL_GetTick>
 80092ac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80092ae:	e013      	b.n	80092d8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80092b0:	f7f8 fd52 	bl	8001d58 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092be:	d90b      	bls.n	80092d8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80092c0:	4b0d      	ldr	r3, [pc, #52]	; (80092f8 <RTC_EnterInitMode+0x74>)
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10f      	bne.n	80092ec <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2203      	movs	r2, #3
 80092d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80092d8:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <RTC_EnterInitMode+0x74>)
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d104      	bne.n	80092ee <RTC_EnterInitMode+0x6a>
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d1e2      	bne.n	80092b0 <RTC_EnterInitMode+0x2c>
 80092ea:	e000      	b.n	80092ee <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 80092ec:	bf00      	nop
        }
      }
    }
  }

  return status;
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	44007800 	.word	0x44007800

080092fc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009308:	4b1a      	ldr	r3, [pc, #104]	; (8009374 <RTC_ExitInitMode+0x78>)
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	4a19      	ldr	r2, [pc, #100]	; (8009374 <RTC_ExitInitMode+0x78>)
 800930e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009312:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009314:	4b17      	ldr	r3, [pc, #92]	; (8009374 <RTC_ExitInitMode+0x78>)
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	f003 0320 	and.w	r3, r3, #32
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10c      	bne.n	800933a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7ff ff7d 	bl	8009220 <HAL_RTC_WaitForSynchro>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d01e      	beq.n	800936a <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2203      	movs	r2, #3
 8009330:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009334:	2303      	movs	r3, #3
 8009336:	73fb      	strb	r3, [r7, #15]
 8009338:	e017      	b.n	800936a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800933a:	4b0e      	ldr	r3, [pc, #56]	; (8009374 <RTC_ExitInitMode+0x78>)
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	4a0d      	ldr	r2, [pc, #52]	; (8009374 <RTC_ExitInitMode+0x78>)
 8009340:	f023 0320 	bic.w	r3, r3, #32
 8009344:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7ff ff6a 	bl	8009220 <HAL_RTC_WaitForSynchro>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d005      	beq.n	800935e <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2203      	movs	r2, #3
 8009356:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800935e:	4b05      	ldr	r3, [pc, #20]	; (8009374 <RTC_ExitInitMode+0x78>)
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	4a04      	ldr	r2, [pc, #16]	; (8009374 <RTC_ExitInitMode+0x78>)
 8009364:	f043 0320 	orr.w	r3, r3, #32
 8009368:	6193      	str	r3, [r2, #24]
  }
  return status;
 800936a:	7bfb      	ldrb	r3, [r7, #15]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	44007800 	.word	0x44007800

08009378 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009378:	b480      	push	{r7}
 800937a:	b087      	sub	sp, #28
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 8009384:	4b07      	ldr	r3, [pc, #28]	; (80093a4 <HAL_RTCEx_BKUPWrite+0x2c>)
 8009386:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	4413      	add	r3, r2
 8009390:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	601a      	str	r2, [r3, #0]
}
 8009398:	bf00      	nop
 800939a:	371c      	adds	r7, #28
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	44007d00 	.word	0x44007d00

080093a8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 80093b2:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <HAL_RTCEx_BKUPRead+0x28>)
 80093b4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	4413      	add	r3, r2
 80093be:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	44007d00 	.word	0x44007d00

080093d4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	4910      	ldr	r1, [pc, #64]	; (8009428 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80093e8:	4313      	orrs	r3, r2
 80093ea:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	689a      	ldr	r2, [r3, #8]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	431a      	orrs	r2, r3
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	490c      	ldr	r1, [pc, #48]	; (800942c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	624b      	str	r3, [r1, #36]	; 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 8009400:	4b0a      	ldr	r3, [pc, #40]	; (800942c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009402:	6a1b      	ldr	r3, [r3, #32]
 8009404:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	6919      	ldr	r1, [r3, #16]
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	041b      	lsls	r3, r3, #16
 8009412:	430b      	orrs	r3, r1
 8009414:	4905      	ldr	r1, [pc, #20]	; (800942c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009416:	4313      	orrs	r3, r2
 8009418:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	44007800 	.word	0x44007800
 800942c:	44007c00 	.word	0x44007c00

08009430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d101      	bne.n	8009442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e049      	b.n	80094d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d106      	bne.n	800945c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f841 	bl	80094de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2202      	movs	r2, #2
 8009460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	3304      	adds	r3, #4
 800946c:	4619      	mov	r1, r3
 800946e:	4610      	mov	r0, r2
 8009470:	f000 fa60 	bl	8009934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80094de:	b480      	push	{r7}
 80094e0:	b083      	sub	sp, #12
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
	...

080094f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b01      	cmp	r3, #1
 8009506:	d001      	beq.n	800950c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e07c      	b.n	8009606 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2202      	movs	r2, #2
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68da      	ldr	r2, [r3, #12]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f042 0201 	orr.w	r2, r2, #1
 8009522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a3a      	ldr	r2, [pc, #232]	; (8009614 <HAL_TIM_Base_Start_IT+0x120>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d04a      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a39      	ldr	r2, [pc, #228]	; (8009618 <HAL_TIM_Base_Start_IT+0x124>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d045      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009540:	d040      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800954a:	d03b      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a32      	ldr	r2, [pc, #200]	; (800961c <HAL_TIM_Base_Start_IT+0x128>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d036      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a31      	ldr	r2, [pc, #196]	; (8009620 <HAL_TIM_Base_Start_IT+0x12c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d031      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a2f      	ldr	r2, [pc, #188]	; (8009624 <HAL_TIM_Base_Start_IT+0x130>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d02c      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a2e      	ldr	r2, [pc, #184]	; (8009628 <HAL_TIM_Base_Start_IT+0x134>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d027      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a2c      	ldr	r2, [pc, #176]	; (800962c <HAL_TIM_Base_Start_IT+0x138>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d022      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a2b      	ldr	r2, [pc, #172]	; (8009630 <HAL_TIM_Base_Start_IT+0x13c>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d01d      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a29      	ldr	r2, [pc, #164]	; (8009634 <HAL_TIM_Base_Start_IT+0x140>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d018      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a28      	ldr	r2, [pc, #160]	; (8009638 <HAL_TIM_Base_Start_IT+0x144>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d013      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a26      	ldr	r2, [pc, #152]	; (800963c <HAL_TIM_Base_Start_IT+0x148>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d00e      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a25      	ldr	r2, [pc, #148]	; (8009640 <HAL_TIM_Base_Start_IT+0x14c>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d009      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a23      	ldr	r2, [pc, #140]	; (8009644 <HAL_TIM_Base_Start_IT+0x150>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d004      	beq.n	80095c4 <HAL_TIM_Base_Start_IT+0xd0>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a22      	ldr	r2, [pc, #136]	; (8009648 <HAL_TIM_Base_Start_IT+0x154>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d115      	bne.n	80095f0 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	689a      	ldr	r2, [r3, #8]
 80095ca:	4b20      	ldr	r3, [pc, #128]	; (800964c <HAL_TIM_Base_Start_IT+0x158>)
 80095cc:	4013      	ands	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2b06      	cmp	r3, #6
 80095d4:	d015      	beq.n	8009602 <HAL_TIM_Base_Start_IT+0x10e>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095dc:	d011      	beq.n	8009602 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f042 0201 	orr.w	r2, r2, #1
 80095ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ee:	e008      	b.n	8009602 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f042 0201 	orr.w	r2, r2, #1
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	e000      	b.n	8009604 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009602:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	40012c00 	.word	0x40012c00
 8009618:	50012c00 	.word	0x50012c00
 800961c:	40000400 	.word	0x40000400
 8009620:	50000400 	.word	0x50000400
 8009624:	40000800 	.word	0x40000800
 8009628:	50000800 	.word	0x50000800
 800962c:	40000c00 	.word	0x40000c00
 8009630:	50000c00 	.word	0x50000c00
 8009634:	40013400 	.word	0x40013400
 8009638:	50013400 	.word	0x50013400
 800963c:	40001800 	.word	0x40001800
 8009640:	50001800 	.word	0x50001800
 8009644:	40014000 	.word	0x40014000
 8009648:	50014000 	.word	0x50014000
 800964c:	00010007 	.word	0x00010007

08009650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d020      	beq.n	80096b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b00      	cmp	r3, #0
 800967a:	d01b      	beq.n	80096b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f06f 0202 	mvn.w	r2, #2
 8009684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	f003 0303 	and.w	r3, r3, #3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f92c 	bl	80098f8 <HAL_TIM_IC_CaptureCallback>
 80096a0:	e005      	b.n	80096ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f91e 	bl	80098e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f92f 	bl	800990c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	f003 0304 	and.w	r3, r3, #4
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d020      	beq.n	8009700 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f003 0304 	and.w	r3, r3, #4
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d01b      	beq.n	8009700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f06f 0204 	mvn.w	r2, #4
 80096d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2202      	movs	r2, #2
 80096d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f906 	bl	80098f8 <HAL_TIM_IC_CaptureCallback>
 80096ec:	e005      	b.n	80096fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f8f8 	bl	80098e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f909 	bl	800990c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	f003 0308 	and.w	r3, r3, #8
 8009706:	2b00      	cmp	r3, #0
 8009708:	d020      	beq.n	800974c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f003 0308 	and.w	r3, r3, #8
 8009710:	2b00      	cmp	r3, #0
 8009712:	d01b      	beq.n	800974c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f06f 0208 	mvn.w	r2, #8
 800971c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2204      	movs	r2, #4
 8009722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	f003 0303 	and.w	r3, r3, #3
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f8e0 	bl	80098f8 <HAL_TIM_IC_CaptureCallback>
 8009738:	e005      	b.n	8009746 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f8d2 	bl	80098e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f8e3 	bl	800990c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	f003 0310 	and.w	r3, r3, #16
 8009752:	2b00      	cmp	r3, #0
 8009754:	d020      	beq.n	8009798 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f003 0310 	and.w	r3, r3, #16
 800975c:	2b00      	cmp	r3, #0
 800975e:	d01b      	beq.n	8009798 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f06f 0210 	mvn.w	r2, #16
 8009768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2208      	movs	r2, #8
 800976e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800977a:	2b00      	cmp	r3, #0
 800977c:	d003      	beq.n	8009786 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f8ba 	bl	80098f8 <HAL_TIM_IC_CaptureCallback>
 8009784:	e005      	b.n	8009792 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f8ac 	bl	80098e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f8bd 	bl	800990c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00c      	beq.n	80097bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d007      	beq.n	80097bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f06f 0201 	mvn.w	r2, #1
 80097b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7f7 fa48 	bl	8000c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00c      	beq.n	80097e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d007      	beq.n	80097e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f9d2 	bl	8009b84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00c      	beq.n	8009804 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d007      	beq.n	8009804 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80097fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f9ca 	bl	8009b98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00c      	beq.n	8009828 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009814:	2b00      	cmp	r3, #0
 8009816:	d007      	beq.n	8009828 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f87c 	bl	8009920 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f003 0320 	and.w	r3, r3, #32
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00c      	beq.n	800984c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f003 0320 	and.w	r3, r3, #32
 8009838:	2b00      	cmp	r3, #0
 800983a:	d007      	beq.n	800984c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f06f 0220 	mvn.w	r2, #32
 8009844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f992 	bl	8009b70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00c      	beq.n	8009870 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d007      	beq.n	8009870 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f99e 	bl	8009bac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00c      	beq.n	8009894 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d007      	beq.n	8009894 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800988c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f996 	bl	8009bc0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00c      	beq.n	80098b8 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d007      	beq.n	80098b8 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80098b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f98e 	bl	8009bd4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00c      	beq.n	80098dc <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d007      	beq.n	80098dc <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80098d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f986 	bl	8009be8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098dc:	bf00      	nop
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a74      	ldr	r2, [pc, #464]	; (8009b18 <TIM_Base_SetConfig+0x1e4>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d02b      	beq.n	80099a4 <TIM_Base_SetConfig+0x70>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a73      	ldr	r2, [pc, #460]	; (8009b1c <TIM_Base_SetConfig+0x1e8>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d027      	beq.n	80099a4 <TIM_Base_SetConfig+0x70>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800995a:	d023      	beq.n	80099a4 <TIM_Base_SetConfig+0x70>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009962:	d01f      	beq.n	80099a4 <TIM_Base_SetConfig+0x70>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a6e      	ldr	r2, [pc, #440]	; (8009b20 <TIM_Base_SetConfig+0x1ec>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d01b      	beq.n	80099a4 <TIM_Base_SetConfig+0x70>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a6d      	ldr	r2, [pc, #436]	; (8009b24 <TIM_Base_SetConfig+0x1f0>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d017      	beq.n	80099a4 <TIM_Base_SetConfig+0x70>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a6c      	ldr	r2, [pc, #432]	; (8009b28 <TIM_Base_SetConfig+0x1f4>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d013      	beq.n	80099a4 <TIM_Base_SetConfig+0x70>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a6b      	ldr	r2, [pc, #428]	; (8009b2c <TIM_Base_SetConfig+0x1f8>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d00f      	beq.n	80099a4 <TIM_Base_SetConfig+0x70>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a6a      	ldr	r2, [pc, #424]	; (8009b30 <TIM_Base_SetConfig+0x1fc>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d00b      	beq.n	80099a4 <TIM_Base_SetConfig+0x70>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a69      	ldr	r2, [pc, #420]	; (8009b34 <TIM_Base_SetConfig+0x200>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d007      	beq.n	80099a4 <TIM_Base_SetConfig+0x70>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a68      	ldr	r2, [pc, #416]	; (8009b38 <TIM_Base_SetConfig+0x204>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d003      	beq.n	80099a4 <TIM_Base_SetConfig+0x70>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a67      	ldr	r2, [pc, #412]	; (8009b3c <TIM_Base_SetConfig+0x208>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d108      	bne.n	80099b6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a57      	ldr	r2, [pc, #348]	; (8009b18 <TIM_Base_SetConfig+0x1e4>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d05b      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a56      	ldr	r2, [pc, #344]	; (8009b1c <TIM_Base_SetConfig+0x1e8>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d057      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099cc:	d053      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099d4:	d04f      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a51      	ldr	r2, [pc, #324]	; (8009b20 <TIM_Base_SetConfig+0x1ec>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d04b      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a50      	ldr	r2, [pc, #320]	; (8009b24 <TIM_Base_SetConfig+0x1f0>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d047      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a4f      	ldr	r2, [pc, #316]	; (8009b28 <TIM_Base_SetConfig+0x1f4>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d043      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a4e      	ldr	r2, [pc, #312]	; (8009b2c <TIM_Base_SetConfig+0x1f8>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d03f      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a4d      	ldr	r2, [pc, #308]	; (8009b30 <TIM_Base_SetConfig+0x1fc>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d03b      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a4c      	ldr	r2, [pc, #304]	; (8009b34 <TIM_Base_SetConfig+0x200>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d037      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a4b      	ldr	r2, [pc, #300]	; (8009b38 <TIM_Base_SetConfig+0x204>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d033      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a4a      	ldr	r2, [pc, #296]	; (8009b3c <TIM_Base_SetConfig+0x208>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d02f      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a49      	ldr	r2, [pc, #292]	; (8009b40 <TIM_Base_SetConfig+0x20c>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d02b      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a48      	ldr	r2, [pc, #288]	; (8009b44 <TIM_Base_SetConfig+0x210>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d027      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a47      	ldr	r2, [pc, #284]	; (8009b48 <TIM_Base_SetConfig+0x214>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d023      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a46      	ldr	r2, [pc, #280]	; (8009b4c <TIM_Base_SetConfig+0x218>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d01f      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a45      	ldr	r2, [pc, #276]	; (8009b50 <TIM_Base_SetConfig+0x21c>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d01b      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a44      	ldr	r2, [pc, #272]	; (8009b54 <TIM_Base_SetConfig+0x220>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d017      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a43      	ldr	r2, [pc, #268]	; (8009b58 <TIM_Base_SetConfig+0x224>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d013      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a42      	ldr	r2, [pc, #264]	; (8009b5c <TIM_Base_SetConfig+0x228>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d00f      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a41      	ldr	r2, [pc, #260]	; (8009b60 <TIM_Base_SetConfig+0x22c>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d00b      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a40      	ldr	r2, [pc, #256]	; (8009b64 <TIM_Base_SetConfig+0x230>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d007      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a3f      	ldr	r2, [pc, #252]	; (8009b68 <TIM_Base_SetConfig+0x234>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d003      	beq.n	8009a76 <TIM_Base_SetConfig+0x142>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4a3e      	ldr	r2, [pc, #248]	; (8009b6c <TIM_Base_SetConfig+0x238>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d108      	bne.n	8009a88 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	695b      	ldr	r3, [r3, #20]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	689a      	ldr	r2, [r3, #8]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a1a      	ldr	r2, [pc, #104]	; (8009b18 <TIM_Base_SetConfig+0x1e4>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d023      	beq.n	8009afc <TIM_Base_SetConfig+0x1c8>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a19      	ldr	r2, [pc, #100]	; (8009b1c <TIM_Base_SetConfig+0x1e8>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d01f      	beq.n	8009afc <TIM_Base_SetConfig+0x1c8>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a1e      	ldr	r2, [pc, #120]	; (8009b38 <TIM_Base_SetConfig+0x204>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d01b      	beq.n	8009afc <TIM_Base_SetConfig+0x1c8>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a1d      	ldr	r2, [pc, #116]	; (8009b3c <TIM_Base_SetConfig+0x208>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d017      	beq.n	8009afc <TIM_Base_SetConfig+0x1c8>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a22      	ldr	r2, [pc, #136]	; (8009b58 <TIM_Base_SetConfig+0x224>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d013      	beq.n	8009afc <TIM_Base_SetConfig+0x1c8>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a21      	ldr	r2, [pc, #132]	; (8009b5c <TIM_Base_SetConfig+0x228>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d00f      	beq.n	8009afc <TIM_Base_SetConfig+0x1c8>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a20      	ldr	r2, [pc, #128]	; (8009b60 <TIM_Base_SetConfig+0x22c>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d00b      	beq.n	8009afc <TIM_Base_SetConfig+0x1c8>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a1f      	ldr	r2, [pc, #124]	; (8009b64 <TIM_Base_SetConfig+0x230>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d007      	beq.n	8009afc <TIM_Base_SetConfig+0x1c8>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a1e      	ldr	r2, [pc, #120]	; (8009b68 <TIM_Base_SetConfig+0x234>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d003      	beq.n	8009afc <TIM_Base_SetConfig+0x1c8>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a1d      	ldr	r2, [pc, #116]	; (8009b6c <TIM_Base_SetConfig+0x238>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d103      	bne.n	8009b04 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	691a      	ldr	r2, [r3, #16]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	615a      	str	r2, [r3, #20]
}
 8009b0a:	bf00      	nop
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	40012c00 	.word	0x40012c00
 8009b1c:	50012c00 	.word	0x50012c00
 8009b20:	40000400 	.word	0x40000400
 8009b24:	50000400 	.word	0x50000400
 8009b28:	40000800 	.word	0x40000800
 8009b2c:	50000800 	.word	0x50000800
 8009b30:	40000c00 	.word	0x40000c00
 8009b34:	50000c00 	.word	0x50000c00
 8009b38:	40013400 	.word	0x40013400
 8009b3c:	50013400 	.word	0x50013400
 8009b40:	40001800 	.word	0x40001800
 8009b44:	50001800 	.word	0x50001800
 8009b48:	40001c00 	.word	0x40001c00
 8009b4c:	50001c00 	.word	0x50001c00
 8009b50:	40002000 	.word	0x40002000
 8009b54:	50002000 	.word	0x50002000
 8009b58:	40014000 	.word	0x40014000
 8009b5c:	50014000 	.word	0x50014000
 8009b60:	40014400 	.word	0x40014400
 8009b64:	50014400 	.word	0x50014400
 8009b68:	40014800 	.word	0x40014800
 8009b6c:	50014800 	.word	0x50014800

08009b70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e042      	b.n	8009c94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d106      	bne.n	8009c26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7f7 f951 	bl	8000ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2224      	movs	r2, #36	; 0x24
 8009c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 0201 	bic.w	r2, r2, #1
 8009c3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fe0a 	bl	800a860 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fc19 	bl	800a484 <UART_SetConfig>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d101      	bne.n	8009c5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e01b      	b.n	8009c94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	689a      	ldr	r2, [r3, #8]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f042 0201 	orr.w	r2, r2, #1
 8009c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 fe89 	bl	800a9a4 <UART_CheckIdleState>
 8009c92:	4603      	mov	r3, r0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08a      	sub	sp, #40	; 0x28
 8009ca0:	af02      	add	r7, sp, #8
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb2:	2b20      	cmp	r3, #32
 8009cb4:	f040 808b 	bne.w	8009dce <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d002      	beq.n	8009cc4 <HAL_UART_Transmit+0x28>
 8009cbe:	88fb      	ldrh	r3, [r7, #6]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d101      	bne.n	8009cc8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e083      	b.n	8009dd0 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd2:	2b80      	cmp	r3, #128	; 0x80
 8009cd4:	d107      	bne.n	8009ce6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	689a      	ldr	r2, [r3, #8]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ce4:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2221      	movs	r2, #33	; 0x21
 8009cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cf6:	f7f8 f82f 	bl	8001d58 <HAL_GetTick>
 8009cfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	88fa      	ldrh	r2, [r7, #6]
 8009d00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	88fa      	ldrh	r2, [r7, #6]
 8009d08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d14:	d108      	bne.n	8009d28 <HAL_UART_Transmit+0x8c>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d104      	bne.n	8009d28 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	61bb      	str	r3, [r7, #24]
 8009d26:	e003      	b.n	8009d30 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d30:	e030      	b.n	8009d94 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2180      	movs	r1, #128	; 0x80
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 fedb 	bl	800aaf8 <UART_WaitOnFlagUntilTimeout>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d005      	beq.n	8009d54 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e03d      	b.n	8009dd0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10b      	bne.n	8009d72 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	3302      	adds	r3, #2
 8009d6e:	61bb      	str	r3, [r7, #24]
 8009d70:	e007      	b.n	8009d82 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	781a      	ldrb	r2, [r3, #0]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1c8      	bne.n	8009d32 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2200      	movs	r2, #0
 8009da8:	2140      	movs	r1, #64	; 0x40
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f000 fea4 	bl	800aaf8 <UART_WaitOnFlagUntilTimeout>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d005      	beq.n	8009dc2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2220      	movs	r2, #32
 8009dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e006      	b.n	8009dd0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2220      	movs	r2, #32
 8009dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	e000      	b.n	8009dd0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009dce:	2302      	movs	r3, #2
  }
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3720      	adds	r7, #32
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b08a      	sub	sp, #40	; 0x28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	4613      	mov	r3, r2
 8009de4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dec:	2b20      	cmp	r3, #32
 8009dee:	d14b      	bne.n	8009e88 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <HAL_UART_Receive_IT+0x24>
 8009df6:	88fb      	ldrh	r3, [r7, #6]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d101      	bne.n	8009e00 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e044      	b.n	8009e8a <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e10:	2b40      	cmp	r3, #64	; 0x40
 8009e12:	d107      	bne.n	8009e24 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689a      	ldr	r2, [r3, #8]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e22:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a1a      	ldr	r2, [pc, #104]	; (8009e94 <HAL_UART_Receive_IT+0xbc>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d024      	beq.n	8009e78 <HAL_UART_Receive_IT+0xa0>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a19      	ldr	r2, [pc, #100]	; (8009e98 <HAL_UART_Receive_IT+0xc0>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d01f      	beq.n	8009e78 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d018      	beq.n	8009e78 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	e853 3f00 	ldrex	r3, [r3]
 8009e52:	613b      	str	r3, [r7, #16]
   return(result);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	461a      	mov	r2, r3
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e64:	623b      	str	r3, [r7, #32]
 8009e66:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e68:	69f9      	ldr	r1, [r7, #28]
 8009e6a:	6a3a      	ldr	r2, [r7, #32]
 8009e6c:	e841 2300 	strex	r3, r2, [r1]
 8009e70:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e6      	bne.n	8009e46 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009e78:	88fb      	ldrh	r3, [r7, #6]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	68b9      	ldr	r1, [r7, #8]
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f000 fea2 	bl	800abc8 <UART_Start_Receive_IT>
 8009e84:	4603      	mov	r3, r0
 8009e86:	e000      	b.n	8009e8a <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8009e88:	2302      	movs	r3, #2
  }
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3728      	adds	r7, #40	; 0x28
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	44002400 	.word	0x44002400
 8009e98:	54002400 	.word	0x54002400

08009e9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b0ae      	sub	sp, #184	; 0xb8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009ec6:	f640 030f 	movw	r3, #2063	; 0x80f
 8009eca:	4013      	ands	r3, r2
 8009ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8009ed0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d11b      	bne.n	8009f10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ed8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009edc:	f003 0320 	and.w	r3, r3, #32
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d015      	beq.n	8009f10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ee4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009ee8:	f003 0320 	and.w	r3, r3, #32
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d105      	bne.n	8009efc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d009      	beq.n	8009f10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f000 8293 	beq.w	800a42c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	4798      	blx	r3
      }
      return;
 8009f0e:	e28d      	b.n	800a42c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009f10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f000 80fd 	beq.w	800a114 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009f1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009f1e:	4b7a      	ldr	r3, [pc, #488]	; (800a108 <HAL_UART_IRQHandler+0x26c>)
 8009f20:	4013      	ands	r3, r2
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d106      	bne.n	8009f34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009f26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f2a:	4b78      	ldr	r3, [pc, #480]	; (800a10c <HAL_UART_IRQHandler+0x270>)
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 80f0 	beq.w	800a114 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d011      	beq.n	8009f64 <HAL_UART_IRQHandler+0xc8>
 8009f40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00b      	beq.n	8009f64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2201      	movs	r2, #1
 8009f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f5a:	f043 0201 	orr.w	r2, r3, #1
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f68:	f003 0302 	and.w	r3, r3, #2
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d011      	beq.n	8009f94 <HAL_UART_IRQHandler+0xf8>
 8009f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00b      	beq.n	8009f94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2202      	movs	r2, #2
 8009f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f8a:	f043 0204 	orr.w	r2, r3, #4
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f98:	f003 0304 	and.w	r3, r3, #4
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d011      	beq.n	8009fc4 <HAL_UART_IRQHandler+0x128>
 8009fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2204      	movs	r2, #4
 8009fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fba:	f043 0202 	orr.w	r2, r3, #2
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009fc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009fc8:	f003 0308 	and.w	r3, r3, #8
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d017      	beq.n	800a000 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009fd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009fd4:	f003 0320 	and.w	r3, r3, #32
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d105      	bne.n	8009fe8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009fdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009fe0:	4b49      	ldr	r3, [pc, #292]	; (800a108 <HAL_UART_IRQHandler+0x26c>)
 8009fe2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00b      	beq.n	800a000 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2208      	movs	r2, #8
 8009fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ff6:	f043 0208 	orr.w	r2, r3, #8
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d012      	beq.n	800a032 <HAL_UART_IRQHandler+0x196>
 800a00c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00c      	beq.n	800a032 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a020:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a028:	f043 0220 	orr.w	r2, r3, #32
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 81f9 	beq.w	800a430 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a03e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a042:	f003 0320 	and.w	r3, r3, #32
 800a046:	2b00      	cmp	r3, #0
 800a048:	d013      	beq.n	800a072 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a04a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a04e:	f003 0320 	and.w	r3, r3, #32
 800a052:	2b00      	cmp	r3, #0
 800a054:	d105      	bne.n	800a062 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a05a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d007      	beq.n	800a072 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a066:	2b00      	cmp	r3, #0
 800a068:	d003      	beq.n	800a072 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a086:	2b40      	cmp	r3, #64	; 0x40
 800a088:	d005      	beq.n	800a096 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a08a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a08e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a092:	2b00      	cmp	r3, #0
 800a094:	d02e      	beq.n	800a0f4 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 feb8 	bl	800ae0c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a6:	2b40      	cmp	r3, #64	; 0x40
 800a0a8:	d120      	bne.n	800a0ec <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d017      	beq.n	800a0e4 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0ba:	4a15      	ldr	r2, [pc, #84]	; (800a110 <HAL_UART_IRQHandler+0x274>)
 800a0bc:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7f7 ffe9 	bl	800209c <HAL_DMA_Abort_IT>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d019      	beq.n	800a104 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a0de:	4610      	mov	r0, r2
 800a0e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0e2:	e00f      	b.n	800a104 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f9b7 	bl	800a458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ea:	e00b      	b.n	800a104 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f9b3 	bl	800a458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f2:	e007      	b.n	800a104 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f9af 	bl	800a458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a102:	e195      	b.n	800a430 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a104:	bf00      	nop
    return;
 800a106:	e193      	b.n	800a430 <HAL_UART_IRQHandler+0x594>
 800a108:	10000001 	.word	0x10000001
 800a10c:	04000120 	.word	0x04000120
 800a110:	0800aed9 	.word	0x0800aed9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a118:	2b01      	cmp	r3, #1
 800a11a:	f040 8129 	bne.w	800a370 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a11e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a122:	f003 0310 	and.w	r3, r3, #16
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 8122 	beq.w	800a370 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a12c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a130:	f003 0310 	and.w	r3, r3, #16
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 811b 	beq.w	800a370 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2210      	movs	r2, #16
 800a140:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a14c:	2b40      	cmp	r3, #64	; 0x40
 800a14e:	f040 8091 	bne.w	800a274 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a15c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800a160:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 8165 	beq.w	800a434 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a170:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800a174:	429a      	cmp	r2, r3
 800a176:	f080 815d 	bcs.w	800a434 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800a180:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a18a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a18c:	2b81      	cmp	r3, #129	; 0x81
 800a18e:	d060      	beq.n	800a252 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a198:	e853 3f00 	ldrex	r3, [r3]
 800a19c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a19e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1b6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a1ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a1be:	e841 2300 	strex	r3, r2, [r1]
 800a1c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a1c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1e2      	bne.n	800a190 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3308      	adds	r3, #8
 800a1d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1d4:	e853 3f00 	ldrex	r3, [r3]
 800a1d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a1da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1dc:	f023 0301 	bic.w	r3, r3, #1
 800a1e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a1ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a1f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a1f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a1f6:	e841 2300 	strex	r3, r2, [r1]
 800a1fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a1fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1e3      	bne.n	800a1ca <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2220      	movs	r2, #32
 800a206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a218:	e853 3f00 	ldrex	r3, [r3]
 800a21c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a21e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a220:	f023 0310 	bic.w	r3, r3, #16
 800a224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	461a      	mov	r2, r3
 800a22e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a232:	65bb      	str	r3, [r7, #88]	; 0x58
 800a234:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a236:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a23a:	e841 2300 	strex	r3, r2, [r1]
 800a23e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e4      	bne.n	800a210 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7f7 fea9 	bl	8001fa4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2202      	movs	r2, #2
 800a256:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a264:	b29b      	uxth	r3, r3
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	b29b      	uxth	r3, r3
 800a26a:	4619      	mov	r1, r3
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f8fd 	bl	800a46c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a272:	e0df      	b.n	800a434 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a280:	b29b      	uxth	r3, r3
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a28e:	b29b      	uxth	r3, r3
 800a290:	2b00      	cmp	r3, #0
 800a292:	f000 80d1 	beq.w	800a438 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800a296:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f000 80cc 	beq.w	800a438 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	e853 3f00 	ldrex	r3, [r3]
 800a2ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2c2:	647b      	str	r3, [r7, #68]	; 0x44
 800a2c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2ca:	e841 2300 	strex	r3, r2, [r1]
 800a2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1e4      	bne.n	800a2a0 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	3308      	adds	r3, #8
 800a2dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e0:	e853 3f00 	ldrex	r3, [r3]
 800a2e4:	623b      	str	r3, [r7, #32]
   return(result);
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2ec:	f023 0301 	bic.w	r3, r3, #1
 800a2f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a2fe:	633a      	str	r2, [r7, #48]	; 0x30
 800a300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a306:	e841 2300 	strex	r3, r2, [r1]
 800a30a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1e1      	bne.n	800a2d6 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2220      	movs	r2, #32
 800a316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	e853 3f00 	ldrex	r3, [r3]
 800a332:	60fb      	str	r3, [r7, #12]
   return(result);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f023 0310 	bic.w	r3, r3, #16
 800a33a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	461a      	mov	r2, r3
 800a344:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a348:	61fb      	str	r3, [r7, #28]
 800a34a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34c:	69b9      	ldr	r1, [r7, #24]
 800a34e:	69fa      	ldr	r2, [r7, #28]
 800a350:	e841 2300 	strex	r3, r2, [r1]
 800a354:	617b      	str	r3, [r7, #20]
   return(result);
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e4      	bne.n	800a326 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2202      	movs	r2, #2
 800a360:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a362:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f87f 	bl	800a46c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a36e:	e063      	b.n	800a438 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a370:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00e      	beq.n	800a39a <HAL_UART_IRQHandler+0x4fe>
 800a37c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a384:	2b00      	cmp	r3, #0
 800a386:	d008      	beq.n	800a39a <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a390:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f001 fb1a 	bl	800b9cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a398:	e051      	b.n	800a43e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a39a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d014      	beq.n	800a3d0 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a3a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a3aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d105      	bne.n	800a3be <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a3b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d008      	beq.n	800a3d0 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d03a      	beq.n	800a43c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	4798      	blx	r3
    }
    return;
 800a3ce:	e035      	b.n	800a43c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a3d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a3d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d009      	beq.n	800a3f0 <HAL_UART_IRQHandler+0x554>
 800a3dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a3e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d003      	beq.n	800a3f0 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fd8b 	bl	800af04 <UART_EndTransmit_IT>
    return;
 800a3ee:	e026      	b.n	800a43e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a3f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a3f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d009      	beq.n	800a410 <HAL_UART_IRQHandler+0x574>
 800a3fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a400:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d003      	beq.n	800a410 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f001 faf3 	bl	800b9f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a40e:	e016      	b.n	800a43e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a410:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d010      	beq.n	800a43e <HAL_UART_IRQHandler+0x5a2>
 800a41c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a420:	2b00      	cmp	r3, #0
 800a422:	da0c      	bge.n	800a43e <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f001 fadb 	bl	800b9e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a42a:	e008      	b.n	800a43e <HAL_UART_IRQHandler+0x5a2>
      return;
 800a42c:	bf00      	nop
 800a42e:	e006      	b.n	800a43e <HAL_UART_IRQHandler+0x5a2>
    return;
 800a430:	bf00      	nop
 800a432:	e004      	b.n	800a43e <HAL_UART_IRQHandler+0x5a2>
      return;
 800a434:	bf00      	nop
 800a436:	e002      	b.n	800a43e <HAL_UART_IRQHandler+0x5a2>
      return;
 800a438:	bf00      	nop
 800a43a:	e000      	b.n	800a43e <HAL_UART_IRQHandler+0x5a2>
    return;
 800a43c:	bf00      	nop
  }
}
 800a43e:	37b8      	adds	r7, #184	; 0xb8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	460b      	mov	r3, r1
 800a476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a488:	b094      	sub	sp, #80	; 0x50
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	4b78      	ldr	r3, [pc, #480]	; (800a67c <UART_SetConfig+0x1f8>)
 800a49a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49e:	689a      	ldr	r2, [r3, #8]
 800a4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	431a      	orrs	r2, r3
 800a4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	431a      	orrs	r2, r3
 800a4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ae:	69db      	ldr	r3, [r3, #28]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4971      	ldr	r1, [pc, #452]	; (800a680 <UART_SetConfig+0x1fc>)
 800a4bc:	4019      	ands	r1, r3
 800a4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c4:	430b      	orrs	r3, r1
 800a4c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d4:	68d9      	ldr	r1, [r3, #12]
 800a4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	ea40 0301 	orr.w	r3, r0, r1
 800a4de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	4b64      	ldr	r3, [pc, #400]	; (800a67c <UART_SetConfig+0x1f8>)
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d009      	beq.n	800a504 <UART_SetConfig+0x80>
 800a4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	4b63      	ldr	r3, [pc, #396]	; (800a684 <UART_SetConfig+0x200>)
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d004      	beq.n	800a504 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fc:	6a1a      	ldr	r2, [r3, #32]
 800a4fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a500:	4313      	orrs	r3, r2
 800a502:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a50e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a518:	430b      	orrs	r3, r1
 800a51a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a522:	f023 000f 	bic.w	r0, r3, #15
 800a526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a528:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	ea40 0301 	orr.w	r3, r0, r1
 800a532:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	4b53      	ldr	r3, [pc, #332]	; (800a688 <UART_SetConfig+0x204>)
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d102      	bne.n	800a544 <UART_SetConfig+0xc0>
 800a53e:	2301      	movs	r3, #1
 800a540:	64bb      	str	r3, [r7, #72]	; 0x48
 800a542:	e066      	b.n	800a612 <UART_SetConfig+0x18e>
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	4b50      	ldr	r3, [pc, #320]	; (800a68c <UART_SetConfig+0x208>)
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d102      	bne.n	800a554 <UART_SetConfig+0xd0>
 800a54e:	2302      	movs	r3, #2
 800a550:	64bb      	str	r3, [r7, #72]	; 0x48
 800a552:	e05e      	b.n	800a612 <UART_SetConfig+0x18e>
 800a554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	4b4d      	ldr	r3, [pc, #308]	; (800a690 <UART_SetConfig+0x20c>)
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d102      	bne.n	800a564 <UART_SetConfig+0xe0>
 800a55e:	2304      	movs	r3, #4
 800a560:	64bb      	str	r3, [r7, #72]	; 0x48
 800a562:	e056      	b.n	800a612 <UART_SetConfig+0x18e>
 800a564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	4b4a      	ldr	r3, [pc, #296]	; (800a694 <UART_SetConfig+0x210>)
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d102      	bne.n	800a574 <UART_SetConfig+0xf0>
 800a56e:	2308      	movs	r3, #8
 800a570:	64bb      	str	r3, [r7, #72]	; 0x48
 800a572:	e04e      	b.n	800a612 <UART_SetConfig+0x18e>
 800a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	4b47      	ldr	r3, [pc, #284]	; (800a698 <UART_SetConfig+0x214>)
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d102      	bne.n	800a584 <UART_SetConfig+0x100>
 800a57e:	2310      	movs	r3, #16
 800a580:	64bb      	str	r3, [r7, #72]	; 0x48
 800a582:	e046      	b.n	800a612 <UART_SetConfig+0x18e>
 800a584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	4b44      	ldr	r3, [pc, #272]	; (800a69c <UART_SetConfig+0x218>)
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d102      	bne.n	800a594 <UART_SetConfig+0x110>
 800a58e:	2320      	movs	r3, #32
 800a590:	64bb      	str	r3, [r7, #72]	; 0x48
 800a592:	e03e      	b.n	800a612 <UART_SetConfig+0x18e>
 800a594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	4b41      	ldr	r3, [pc, #260]	; (800a6a0 <UART_SetConfig+0x21c>)
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d102      	bne.n	800a5a4 <UART_SetConfig+0x120>
 800a59e:	2340      	movs	r3, #64	; 0x40
 800a5a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5a2:	e036      	b.n	800a612 <UART_SetConfig+0x18e>
 800a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	4b3e      	ldr	r3, [pc, #248]	; (800a6a4 <UART_SetConfig+0x220>)
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d102      	bne.n	800a5b4 <UART_SetConfig+0x130>
 800a5ae:	2380      	movs	r3, #128	; 0x80
 800a5b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5b2:	e02e      	b.n	800a612 <UART_SetConfig+0x18e>
 800a5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	4b3b      	ldr	r3, [pc, #236]	; (800a6a8 <UART_SetConfig+0x224>)
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d103      	bne.n	800a5c6 <UART_SetConfig+0x142>
 800a5be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5c4:	e025      	b.n	800a612 <UART_SetConfig+0x18e>
 800a5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	4b38      	ldr	r3, [pc, #224]	; (800a6ac <UART_SetConfig+0x228>)
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d103      	bne.n	800a5d8 <UART_SetConfig+0x154>
 800a5d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5d6:	e01c      	b.n	800a612 <UART_SetConfig+0x18e>
 800a5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	4b34      	ldr	r3, [pc, #208]	; (800a6b0 <UART_SetConfig+0x22c>)
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d103      	bne.n	800a5ea <UART_SetConfig+0x166>
 800a5e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5e8:	e013      	b.n	800a612 <UART_SetConfig+0x18e>
 800a5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	4b31      	ldr	r3, [pc, #196]	; (800a6b4 <UART_SetConfig+0x230>)
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d103      	bne.n	800a5fc <UART_SetConfig+0x178>
 800a5f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5fa:	e00a      	b.n	800a612 <UART_SetConfig+0x18e>
 800a5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	4b1e      	ldr	r3, [pc, #120]	; (800a67c <UART_SetConfig+0x1f8>)
 800a602:	429a      	cmp	r2, r3
 800a604:	d103      	bne.n	800a60e <UART_SetConfig+0x18a>
 800a606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a60a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a60c:	e001      	b.n	800a612 <UART_SetConfig+0x18e>
 800a60e:	2300      	movs	r3, #0
 800a610:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	4b19      	ldr	r3, [pc, #100]	; (800a67c <UART_SetConfig+0x1f8>)
 800a618:	429a      	cmp	r2, r3
 800a61a:	d005      	beq.n	800a628 <UART_SetConfig+0x1a4>
 800a61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	4b18      	ldr	r3, [pc, #96]	; (800a684 <UART_SetConfig+0x200>)
 800a622:	429a      	cmp	r2, r3
 800a624:	f040 8094 	bne.w	800a750 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a62a:	2200      	movs	r2, #0
 800a62c:	623b      	str	r3, [r7, #32]
 800a62e:	627a      	str	r2, [r7, #36]	; 0x24
 800a630:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a634:	f7fc f8e8 	bl	8006808 <HAL_RCCEx_GetPeriphCLKFreq>
 800a638:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 80f7 	beq.w	800a830 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	4a1c      	ldr	r2, [pc, #112]	; (800a6b8 <UART_SetConfig+0x234>)
 800a648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a64c:	461a      	mov	r2, r3
 800a64e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a650:	fbb3 f3f2 	udiv	r3, r3, r2
 800a654:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	4613      	mov	r3, r2
 800a65c:	005b      	lsls	r3, r3, #1
 800a65e:	4413      	add	r3, r2
 800a660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a662:	429a      	cmp	r2, r3
 800a664:	d305      	bcc.n	800a672 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a66c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a66e:	429a      	cmp	r2, r3
 800a670:	d924      	bls.n	800a6bc <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a678:	e069      	b.n	800a74e <UART_SetConfig+0x2ca>
 800a67a:	bf00      	nop
 800a67c:	44002400 	.word	0x44002400
 800a680:	cfff69f3 	.word	0xcfff69f3
 800a684:	54002400 	.word	0x54002400
 800a688:	40013800 	.word	0x40013800
 800a68c:	40004400 	.word	0x40004400
 800a690:	40004800 	.word	0x40004800
 800a694:	40004c00 	.word	0x40004c00
 800a698:	40005000 	.word	0x40005000
 800a69c:	40006400 	.word	0x40006400
 800a6a0:	40007800 	.word	0x40007800
 800a6a4:	40007c00 	.word	0x40007c00
 800a6a8:	40008000 	.word	0x40008000
 800a6ac:	40006800 	.word	0x40006800
 800a6b0:	40006c00 	.word	0x40006c00
 800a6b4:	40008400 	.word	0x40008400
 800a6b8:	08010430 	.word	0x08010430
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6be:	2200      	movs	r2, #0
 800a6c0:	61bb      	str	r3, [r7, #24]
 800a6c2:	61fa      	str	r2, [r7, #28]
 800a6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c8:	4a64      	ldr	r2, [pc, #400]	; (800a85c <UART_SetConfig+0x3d8>)
 800a6ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	613b      	str	r3, [r7, #16]
 800a6d4:	617a      	str	r2, [r7, #20]
 800a6d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a6da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a6de:	f7f5 fde9 	bl	80002b4 <__aeabi_uldivmod>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	4610      	mov	r0, r2
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	f04f 0200 	mov.w	r2, #0
 800a6ee:	f04f 0300 	mov.w	r3, #0
 800a6f2:	020b      	lsls	r3, r1, #8
 800a6f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a6f8:	0202      	lsls	r2, r0, #8
 800a6fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6fc:	6849      	ldr	r1, [r1, #4]
 800a6fe:	0849      	lsrs	r1, r1, #1
 800a700:	2000      	movs	r0, #0
 800a702:	460c      	mov	r4, r1
 800a704:	4605      	mov	r5, r0
 800a706:	eb12 0804 	adds.w	r8, r2, r4
 800a70a:	eb43 0905 	adc.w	r9, r3, r5
 800a70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	60bb      	str	r3, [r7, #8]
 800a716:	60fa      	str	r2, [r7, #12]
 800a718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a71c:	4640      	mov	r0, r8
 800a71e:	4649      	mov	r1, r9
 800a720:	f7f5 fdc8 	bl	80002b4 <__aeabi_uldivmod>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4613      	mov	r3, r2
 800a72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a72e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a732:	d308      	bcc.n	800a746 <UART_SetConfig+0x2c2>
 800a734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a73a:	d204      	bcs.n	800a746 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a742:	60da      	str	r2, [r3, #12]
 800a744:	e003      	b.n	800a74e <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800a74c:	e070      	b.n	800a830 <UART_SetConfig+0x3ac>
 800a74e:	e06f      	b.n	800a830 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a752:	69db      	ldr	r3, [r3, #28]
 800a754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a758:	d13c      	bne.n	800a7d4 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a75a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a75c:	2200      	movs	r2, #0
 800a75e:	603b      	str	r3, [r7, #0]
 800a760:	607a      	str	r2, [r7, #4]
 800a762:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a766:	f7fc f84f 	bl	8006808 <HAL_RCCEx_GetPeriphCLKFreq>
 800a76a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d05e      	beq.n	800a830 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	4a39      	ldr	r2, [pc, #228]	; (800a85c <UART_SetConfig+0x3d8>)
 800a778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a77c:	461a      	mov	r2, r3
 800a77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a780:	fbb3 f3f2 	udiv	r3, r3, r2
 800a784:	005a      	lsls	r2, r3, #1
 800a786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	085b      	lsrs	r3, r3, #1
 800a78c:	441a      	add	r2, r3
 800a78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	fbb2 f3f3 	udiv	r3, r2, r3
 800a796:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a79a:	2b0f      	cmp	r3, #15
 800a79c:	d916      	bls.n	800a7cc <UART_SetConfig+0x348>
 800a79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7a4:	d212      	bcs.n	800a7cc <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	f023 030f 	bic.w	r3, r3, #15
 800a7ae:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b2:	085b      	lsrs	r3, r3, #1
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	f003 0307 	and.w	r3, r3, #7
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800a7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a7c8:	60da      	str	r2, [r3, #12]
 800a7ca:	e031      	b.n	800a830 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a7d2:	e02d      	b.n	800a830 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a7d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	469a      	mov	sl, r3
 800a7da:	4693      	mov	fp, r2
 800a7dc:	4650      	mov	r0, sl
 800a7de:	4659      	mov	r1, fp
 800a7e0:	f7fc f812 	bl	8006808 <HAL_RCCEx_GetPeriphCLKFreq>
 800a7e4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800a7e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d021      	beq.n	800a830 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	4a1a      	ldr	r2, [pc, #104]	; (800a85c <UART_SetConfig+0x3d8>)
 800a7f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	085b      	lsrs	r3, r3, #1
 800a804:	441a      	add	r2, r3
 800a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a80e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a812:	2b0f      	cmp	r3, #15
 800a814:	d909      	bls.n	800a82a <UART_SetConfig+0x3a6>
 800a816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a81c:	d205      	bcs.n	800a82a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a820:	b29a      	uxth	r2, r3
 800a822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	60da      	str	r2, [r3, #12]
 800a828:	e002      	b.n	800a830 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a832:	2201      	movs	r2, #1
 800a834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83a:	2201      	movs	r2, #1
 800a83c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a842:	2200      	movs	r2, #0
 800a844:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	2200      	movs	r2, #0
 800a84a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a84c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a850:	4618      	mov	r0, r3
 800a852:	3750      	adds	r7, #80	; 0x50
 800a854:	46bd      	mov	sp, r7
 800a856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a85a:	bf00      	nop
 800a85c:	08010430 	.word	0x08010430

0800a860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a86c:	f003 0308 	and.w	r3, r3, #8
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00a      	beq.n	800a88a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	430a      	orrs	r2, r1
 800a888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88e:	f003 0301 	and.w	r3, r3, #1
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00a      	beq.n	800a8ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	430a      	orrs	r2, r1
 800a8aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b0:	f003 0302 	and.w	r3, r3, #2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00a      	beq.n	800a8ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	430a      	orrs	r2, r1
 800a8cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d2:	f003 0304 	and.w	r3, r3, #4
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	430a      	orrs	r2, r1
 800a8ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f4:	f003 0310 	and.w	r3, r3, #16
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00a      	beq.n	800a912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	430a      	orrs	r2, r1
 800a910:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a916:	f003 0320 	and.w	r3, r3, #32
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00a      	beq.n	800a934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	430a      	orrs	r2, r1
 800a932:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d01a      	beq.n	800a976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	430a      	orrs	r2, r1
 800a954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a95a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a95e:	d10a      	bne.n	800a976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	430a      	orrs	r2, r1
 800a974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00a      	beq.n	800a998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	430a      	orrs	r2, r1
 800a996:	605a      	str	r2, [r3, #4]
  }
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b098      	sub	sp, #96	; 0x60
 800a9a8:	af02      	add	r7, sp, #8
 800a9aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9b4:	f7f7 f9d0 	bl	8001d58 <HAL_GetTick>
 800a9b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0308 	and.w	r3, r3, #8
 800a9c4:	2b08      	cmp	r3, #8
 800a9c6:	d12f      	bne.n	800aa28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9cc:	9300      	str	r3, [sp, #0]
 800a9ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f88e 	bl	800aaf8 <UART_WaitOnFlagUntilTimeout>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d022      	beq.n	800aa28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ea:	e853 3f00 	ldrex	r3, [r3]
 800a9ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9f6:	653b      	str	r3, [r7, #80]	; 0x50
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa00:	647b      	str	r3, [r7, #68]	; 0x44
 800aa02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa08:	e841 2300 	strex	r3, r2, [r1]
 800aa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1e6      	bne.n	800a9e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2220      	movs	r2, #32
 800aa18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa24:	2303      	movs	r3, #3
 800aa26:	e063      	b.n	800aaf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 0304 	and.w	r3, r3, #4
 800aa32:	2b04      	cmp	r3, #4
 800aa34:	d149      	bne.n	800aaca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f857 	bl	800aaf8 <UART_WaitOnFlagUntilTimeout>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d03c      	beq.n	800aaca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	e853 3f00 	ldrex	r3, [r3]
 800aa5c:	623b      	str	r3, [r7, #32]
   return(result);
 800aa5e:	6a3b      	ldr	r3, [r7, #32]
 800aa60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa6e:	633b      	str	r3, [r7, #48]	; 0x30
 800aa70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa76:	e841 2300 	strex	r3, r2, [r1]
 800aa7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1e6      	bne.n	800aa50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	3308      	adds	r3, #8
 800aa88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	e853 3f00 	ldrex	r3, [r3]
 800aa90:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f023 0301 	bic.w	r3, r3, #1
 800aa98:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	3308      	adds	r3, #8
 800aaa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaa2:	61fa      	str	r2, [r7, #28]
 800aaa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa6:	69b9      	ldr	r1, [r7, #24]
 800aaa8:	69fa      	ldr	r2, [r7, #28]
 800aaaa:	e841 2300 	strex	r3, r2, [r1]
 800aaae:	617b      	str	r3, [r7, #20]
   return(result);
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1e5      	bne.n	800aa82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2220      	movs	r2, #32
 800aaba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e012      	b.n	800aaf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2220      	movs	r2, #32
 800aace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2220      	movs	r2, #32
 800aad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3758      	adds	r7, #88	; 0x58
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	603b      	str	r3, [r7, #0]
 800ab04:	4613      	mov	r3, r2
 800ab06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab08:	e049      	b.n	800ab9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab10:	d045      	beq.n	800ab9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab12:	f7f7 f921 	bl	8001d58 <HAL_GetTick>
 800ab16:	4602      	mov	r2, r0
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	69ba      	ldr	r2, [r7, #24]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d302      	bcc.n	800ab28 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d101      	bne.n	800ab2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ab28:	2303      	movs	r3, #3
 800ab2a:	e048      	b.n	800abbe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 0304 	and.w	r3, r3, #4
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d031      	beq.n	800ab9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	69db      	ldr	r3, [r3, #28]
 800ab40:	f003 0308 	and.w	r3, r3, #8
 800ab44:	2b08      	cmp	r3, #8
 800ab46:	d110      	bne.n	800ab6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2208      	movs	r2, #8
 800ab4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 f95b 	bl	800ae0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2208      	movs	r2, #8
 800ab5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e029      	b.n	800abbe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	69db      	ldr	r3, [r3, #28]
 800ab70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab78:	d111      	bne.n	800ab9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f000 f941 	bl	800ae0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2220      	movs	r2, #32
 800ab8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	e00f      	b.n	800abbe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	69da      	ldr	r2, [r3, #28]
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	4013      	ands	r3, r2
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	429a      	cmp	r2, r3
 800abac:	bf0c      	ite	eq
 800abae:	2301      	moveq	r3, #1
 800abb0:	2300      	movne	r3, #0
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	461a      	mov	r2, r3
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d0a6      	beq.n	800ab0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
	...

0800abc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abc8:	b480      	push	{r7}
 800abca:	b0a3      	sub	sp, #140	; 0x8c
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	4613      	mov	r3, r2
 800abd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	88fa      	ldrh	r2, [r7, #6]
 800abe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	88fa      	ldrh	r2, [r7, #6]
 800abe8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abfa:	d10e      	bne.n	800ac1a <UART_Start_Receive_IT+0x52>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d105      	bne.n	800ac10 <UART_Start_Receive_IT+0x48>
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ac0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac0e:	e02d      	b.n	800ac6c <UART_Start_Receive_IT+0xa4>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	22ff      	movs	r2, #255	; 0xff
 800ac14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac18:	e028      	b.n	800ac6c <UART_Start_Receive_IT+0xa4>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10d      	bne.n	800ac3e <UART_Start_Receive_IT+0x76>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d104      	bne.n	800ac34 <UART_Start_Receive_IT+0x6c>
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	22ff      	movs	r2, #255	; 0xff
 800ac2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac32:	e01b      	b.n	800ac6c <UART_Start_Receive_IT+0xa4>
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	227f      	movs	r2, #127	; 0x7f
 800ac38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac3c:	e016      	b.n	800ac6c <UART_Start_Receive_IT+0xa4>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac46:	d10d      	bne.n	800ac64 <UART_Start_Receive_IT+0x9c>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d104      	bne.n	800ac5a <UART_Start_Receive_IT+0x92>
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	227f      	movs	r2, #127	; 0x7f
 800ac54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac58:	e008      	b.n	800ac6c <UART_Start_Receive_IT+0xa4>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	223f      	movs	r2, #63	; 0x3f
 800ac5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac62:	e003      	b.n	800ac6c <UART_Start_Receive_IT+0xa4>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2222      	movs	r2, #34	; 0x22
 800ac78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3308      	adds	r3, #8
 800ac82:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac86:	e853 3f00 	ldrex	r3, [r3]
 800ac8a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ac8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac8e:	f043 0301 	orr.w	r3, r3, #1
 800ac92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	3308      	adds	r3, #8
 800ac9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800aca0:	673a      	str	r2, [r7, #112]	; 0x70
 800aca2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800aca6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800aca8:	e841 2300 	strex	r3, r2, [r1]
 800acac:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800acae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1e3      	bne.n	800ac7c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acbc:	d14f      	bne.n	800ad5e <UART_Start_Receive_IT+0x196>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800acc4:	88fa      	ldrh	r2, [r7, #6]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d349      	bcc.n	800ad5e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acd2:	d107      	bne.n	800ace4 <UART_Start_Receive_IT+0x11c>
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d103      	bne.n	800ace4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	4a47      	ldr	r2, [pc, #284]	; (800adfc <UART_Start_Receive_IT+0x234>)
 800ace0:	675a      	str	r2, [r3, #116]	; 0x74
 800ace2:	e002      	b.n	800acea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	4a46      	ldr	r2, [pc, #280]	; (800ae00 <UART_Start_Receive_IT+0x238>)
 800ace8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d01a      	beq.n	800ad28 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acfa:	e853 3f00 	ldrex	r3, [r3]
 800acfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ad14:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad16:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad1c:	e841 2300 	strex	r3, r2, [r1]
 800ad20:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ad22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1e4      	bne.n	800acf2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	3308      	adds	r3, #8
 800ad2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad32:	e853 3f00 	ldrex	r3, [r3]
 800ad36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	3308      	adds	r3, #8
 800ad46:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ad48:	64ba      	str	r2, [r7, #72]	; 0x48
 800ad4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad50:	e841 2300 	strex	r3, r2, [r1]
 800ad54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ad56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1e5      	bne.n	800ad28 <UART_Start_Receive_IT+0x160>
 800ad5c:	e046      	b.n	800adec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad66:	d107      	bne.n	800ad78 <UART_Start_Receive_IT+0x1b0>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d103      	bne.n	800ad78 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	4a24      	ldr	r2, [pc, #144]	; (800ae04 <UART_Start_Receive_IT+0x23c>)
 800ad74:	675a      	str	r2, [r3, #116]	; 0x74
 800ad76:	e002      	b.n	800ad7e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	4a23      	ldr	r2, [pc, #140]	; (800ae08 <UART_Start_Receive_IT+0x240>)
 800ad7c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d019      	beq.n	800adba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8e:	e853 3f00 	ldrex	r3, [r3]
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ad9a:	677b      	str	r3, [r7, #116]	; 0x74
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	461a      	mov	r2, r3
 800ada2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ada4:	637b      	str	r3, [r7, #52]	; 0x34
 800ada6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800adaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adac:	e841 2300 	strex	r3, r2, [r1]
 800adb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800adb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1e6      	bne.n	800ad86 <UART_Start_Receive_IT+0x1be>
 800adb8:	e018      	b.n	800adec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	e853 3f00 	ldrex	r3, [r3]
 800adc6:	613b      	str	r3, [r7, #16]
   return(result);
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	f043 0320 	orr.w	r3, r3, #32
 800adce:	67bb      	str	r3, [r7, #120]	; 0x78
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	461a      	mov	r2, r3
 800add6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800add8:	623b      	str	r3, [r7, #32]
 800adda:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800addc:	69f9      	ldr	r1, [r7, #28]
 800adde:	6a3a      	ldr	r2, [r7, #32]
 800ade0:	e841 2300 	strex	r3, r2, [r1]
 800ade4:	61bb      	str	r3, [r7, #24]
   return(result);
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1e6      	bne.n	800adba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	378c      	adds	r7, #140	; 0x8c
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	0800b655 	.word	0x0800b655
 800ae00:	0800b2e5 	.word	0x0800b2e5
 800ae04:	0800b121 	.word	0x0800b121
 800ae08:	0800af5d 	.word	0x0800af5d

0800ae0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b095      	sub	sp, #84	; 0x54
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1c:	e853 3f00 	ldrex	r3, [r3]
 800ae20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae32:	643b      	str	r3, [r7, #64]	; 0x40
 800ae34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae3a:	e841 2300 	strex	r3, r2, [r1]
 800ae3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1e6      	bne.n	800ae14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	3308      	adds	r3, #8
 800ae4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4e:	6a3b      	ldr	r3, [r7, #32]
 800ae50:	e853 3f00 	ldrex	r3, [r3]
 800ae54:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae5c:	f023 0301 	bic.w	r3, r3, #1
 800ae60:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3308      	adds	r3, #8
 800ae68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae72:	e841 2300 	strex	r3, r2, [r1]
 800ae76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1e3      	bne.n	800ae46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d118      	bne.n	800aeb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	e853 3f00 	ldrex	r3, [r3]
 800ae92:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	f023 0310 	bic.w	r3, r3, #16
 800ae9a:	647b      	str	r3, [r7, #68]	; 0x44
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	461a      	mov	r2, r3
 800aea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aea4:	61bb      	str	r3, [r7, #24]
 800aea6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea8:	6979      	ldr	r1, [r7, #20]
 800aeaa:	69ba      	ldr	r2, [r7, #24]
 800aeac:	e841 2300 	strex	r3, r2, [r1]
 800aeb0:	613b      	str	r3, [r7, #16]
   return(result);
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1e6      	bne.n	800ae86 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2220      	movs	r2, #32
 800aebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	675a      	str	r2, [r3, #116]	; 0x74
}
 800aecc:	bf00      	nop
 800aece:	3754      	adds	r7, #84	; 0x54
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aee4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f7ff faae 	bl	800a458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aefc:	bf00      	nop
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b088      	sub	sp, #32
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	e853 3f00 	ldrex	r3, [r3]
 800af18:	60bb      	str	r3, [r7, #8]
   return(result);
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af20:	61fb      	str	r3, [r7, #28]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	61bb      	str	r3, [r7, #24]
 800af2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2e:	6979      	ldr	r1, [r7, #20]
 800af30:	69ba      	ldr	r2, [r7, #24]
 800af32:	e841 2300 	strex	r3, r2, [r1]
 800af36:	613b      	str	r3, [r7, #16]
   return(result);
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1e6      	bne.n	800af0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2220      	movs	r2, #32
 800af42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7ff fa79 	bl	800a444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af52:	bf00      	nop
 800af54:	3720      	adds	r7, #32
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
	...

0800af5c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b09c      	sub	sp, #112	; 0x70
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af6a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af74:	2b22      	cmp	r3, #34	; 0x22
 800af76:	f040 80c3 	bne.w	800b100 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800af84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800af88:	b2d9      	uxtb	r1, r3
 800af8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af94:	400a      	ands	r2, r1
 800af96:	b2d2      	uxtb	r2, r2
 800af98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af9e:	1c5a      	adds	r2, r3, #1
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afaa:	b29b      	uxth	r3, r3
 800afac:	3b01      	subs	r3, #1
 800afae:	b29a      	uxth	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f040 80a6 	bne.w	800b110 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afcc:	e853 3f00 	ldrex	r3, [r3]
 800afd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800afd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afd8:	66bb      	str	r3, [r7, #104]	; 0x68
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	461a      	mov	r2, r3
 800afe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afe2:	65bb      	str	r3, [r7, #88]	; 0x58
 800afe4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800afe8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afea:	e841 2300 	strex	r3, r2, [r1]
 800afee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1e6      	bne.n	800afc4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	3308      	adds	r3, #8
 800affc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b000:	e853 3f00 	ldrex	r3, [r3]
 800b004:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b008:	f023 0301 	bic.w	r3, r3, #1
 800b00c:	667b      	str	r3, [r7, #100]	; 0x64
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	3308      	adds	r3, #8
 800b014:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b016:	647a      	str	r2, [r7, #68]	; 0x44
 800b018:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b01c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b01e:	e841 2300 	strex	r3, r2, [r1]
 800b022:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1e5      	bne.n	800aff6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2220      	movs	r2, #32
 800b02e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a35      	ldr	r2, [pc, #212]	; (800b118 <UART_RxISR_8BIT+0x1bc>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d024      	beq.n	800b092 <UART_RxISR_8BIT+0x136>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a33      	ldr	r2, [pc, #204]	; (800b11c <UART_RxISR_8BIT+0x1c0>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d01f      	beq.n	800b092 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d018      	beq.n	800b092 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b068:	e853 3f00 	ldrex	r3, [r3]
 800b06c:	623b      	str	r3, [r7, #32]
   return(result);
 800b06e:	6a3b      	ldr	r3, [r7, #32]
 800b070:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b074:	663b      	str	r3, [r7, #96]	; 0x60
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	461a      	mov	r2, r3
 800b07c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b07e:	633b      	str	r3, [r7, #48]	; 0x30
 800b080:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b086:	e841 2300 	strex	r3, r2, [r1]
 800b08a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1e6      	bne.n	800b060 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b096:	2b01      	cmp	r3, #1
 800b098:	d12e      	bne.n	800b0f8 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	e853 3f00 	ldrex	r3, [r3]
 800b0ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f023 0310 	bic.w	r3, r3, #16
 800b0b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0be:	61fb      	str	r3, [r7, #28]
 800b0c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c2:	69b9      	ldr	r1, [r7, #24]
 800b0c4:	69fa      	ldr	r2, [r7, #28]
 800b0c6:	e841 2300 	strex	r3, r2, [r1]
 800b0ca:	617b      	str	r3, [r7, #20]
   return(result);
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1e6      	bne.n	800b0a0 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	69db      	ldr	r3, [r3, #28]
 800b0d8:	f003 0310 	and.w	r3, r3, #16
 800b0dc:	2b10      	cmp	r3, #16
 800b0de:	d103      	bne.n	800b0e8 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2210      	movs	r2, #16
 800b0e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f7ff f9bb 	bl	800a46c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b0f6:	e00b      	b.n	800b110 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f7f6 fcf7 	bl	8001aec <HAL_UART_RxCpltCallback>
}
 800b0fe:	e007      	b.n	800b110 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	699a      	ldr	r2, [r3, #24]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f042 0208 	orr.w	r2, r2, #8
 800b10e:	619a      	str	r2, [r3, #24]
}
 800b110:	bf00      	nop
 800b112:	3770      	adds	r7, #112	; 0x70
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	44002400 	.word	0x44002400
 800b11c:	54002400 	.word	0x54002400

0800b120 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b09c      	sub	sp, #112	; 0x70
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b12e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b138:	2b22      	cmp	r3, #34	; 0x22
 800b13a:	f040 80c3 	bne.w	800b2c4 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b144:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b14c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b14e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b152:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b156:	4013      	ands	r3, r2
 800b158:	b29a      	uxth	r2, r3
 800b15a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b15c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b162:	1c9a      	adds	r2, r3, #2
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b16e:	b29b      	uxth	r3, r3
 800b170:	3b01      	subs	r3, #1
 800b172:	b29a      	uxth	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b180:	b29b      	uxth	r3, r3
 800b182:	2b00      	cmp	r3, #0
 800b184:	f040 80a6 	bne.w	800b2d4 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b190:	e853 3f00 	ldrex	r3, [r3]
 800b194:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b198:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b19c:	667b      	str	r3, [r7, #100]	; 0x64
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1a6:	657b      	str	r3, [r7, #84]	; 0x54
 800b1a8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1ae:	e841 2300 	strex	r3, r2, [r1]
 800b1b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b1b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1e6      	bne.n	800b188 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	3308      	adds	r3, #8
 800b1c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c4:	e853 3f00 	ldrex	r3, [r3]
 800b1c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1cc:	f023 0301 	bic.w	r3, r3, #1
 800b1d0:	663b      	str	r3, [r7, #96]	; 0x60
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b1da:	643a      	str	r2, [r7, #64]	; 0x40
 800b1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1e2:	e841 2300 	strex	r3, r2, [r1]
 800b1e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1e5      	bne.n	800b1ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2220      	movs	r2, #32
 800b1f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a35      	ldr	r2, [pc, #212]	; (800b2dc <UART_RxISR_16BIT+0x1bc>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d024      	beq.n	800b256 <UART_RxISR_16BIT+0x136>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a33      	ldr	r2, [pc, #204]	; (800b2e0 <UART_RxISR_16BIT+0x1c0>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d01f      	beq.n	800b256 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b220:	2b00      	cmp	r3, #0
 800b222:	d018      	beq.n	800b256 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	e853 3f00 	ldrex	r3, [r3]
 800b230:	61fb      	str	r3, [r7, #28]
   return(result);
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	461a      	mov	r2, r3
 800b240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b242:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b244:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b24a:	e841 2300 	strex	r3, r2, [r1]
 800b24e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1e6      	bne.n	800b224 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d12e      	bne.n	800b2bc <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	e853 3f00 	ldrex	r3, [r3]
 800b270:	60bb      	str	r3, [r7, #8]
   return(result);
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	f023 0310 	bic.w	r3, r3, #16
 800b278:	65bb      	str	r3, [r7, #88]	; 0x58
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	461a      	mov	r2, r3
 800b280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b282:	61bb      	str	r3, [r7, #24]
 800b284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b286:	6979      	ldr	r1, [r7, #20]
 800b288:	69ba      	ldr	r2, [r7, #24]
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	613b      	str	r3, [r7, #16]
   return(result);
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e6      	bne.n	800b264 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	69db      	ldr	r3, [r3, #28]
 800b29c:	f003 0310 	and.w	r3, r3, #16
 800b2a0:	2b10      	cmp	r3, #16
 800b2a2:	d103      	bne.n	800b2ac <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2210      	movs	r2, #16
 800b2aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f7ff f8d9 	bl	800a46c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b2ba:	e00b      	b.n	800b2d4 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7f6 fc15 	bl	8001aec <HAL_UART_RxCpltCallback>
}
 800b2c2:	e007      	b.n	800b2d4 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	699a      	ldr	r2, [r3, #24]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f042 0208 	orr.w	r2, r2, #8
 800b2d2:	619a      	str	r2, [r3, #24]
}
 800b2d4:	bf00      	nop
 800b2d6:	3770      	adds	r7, #112	; 0x70
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	44002400 	.word	0x44002400
 800b2e0:	54002400 	.word	0x54002400

0800b2e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b0ac      	sub	sp, #176	; 0xb0
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b2f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	69db      	ldr	r3, [r3, #28]
 800b2fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b31a:	2b22      	cmp	r3, #34	; 0x22
 800b31c:	f040 8187 	bne.w	800b62e <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b326:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b32a:	e12a      	b.n	800b582 <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b332:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b336:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b33a:	b2d9      	uxtb	r1, r3
 800b33c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b340:	b2da      	uxtb	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b346:	400a      	ands	r2, r1
 800b348:	b2d2      	uxtb	r2, r2
 800b34a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	3b01      	subs	r3, #1
 800b360:	b29a      	uxth	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	69db      	ldr	r3, [r3, #28]
 800b36e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b376:	f003 0307 	and.w	r3, r3, #7
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d053      	beq.n	800b426 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b37e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b382:	f003 0301 	and.w	r3, r3, #1
 800b386:	2b00      	cmp	r3, #0
 800b388:	d011      	beq.n	800b3ae <UART_RxISR_8BIT_FIFOEN+0xca>
 800b38a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00b      	beq.n	800b3ae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2201      	movs	r2, #1
 800b39c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3a4:	f043 0201 	orr.w	r2, r3, #1
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3b2:	f003 0302 	and.w	r3, r3, #2
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d011      	beq.n	800b3de <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b3ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3be:	f003 0301 	and.w	r3, r3, #1
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00b      	beq.n	800b3de <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3d4:	f043 0204 	orr.w	r2, r3, #4
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3e2:	f003 0304 	and.w	r3, r3, #4
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d011      	beq.n	800b40e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b3ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3ee:	f003 0301 	and.w	r3, r3, #1
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00b      	beq.n	800b40e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2204      	movs	r2, #4
 800b3fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b404:	f043 0202 	orr.w	r2, r3, #2
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b414:	2b00      	cmp	r3, #0
 800b416:	d006      	beq.n	800b426 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f7ff f81d 	bl	800a458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f040 80a7 	bne.w	800b582 <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b43c:	e853 3f00 	ldrex	r3, [r3]
 800b440:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	461a      	mov	r2, r3
 800b452:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b456:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b458:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b45c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b45e:	e841 2300 	strex	r3, r2, [r1]
 800b462:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1e4      	bne.n	800b434 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	3308      	adds	r3, #8
 800b470:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b474:	e853 3f00 	ldrex	r3, [r3]
 800b478:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b47a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b47c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b480:	f023 0301 	bic.w	r3, r3, #1
 800b484:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	3308      	adds	r3, #8
 800b48e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b492:	66ba      	str	r2, [r7, #104]	; 0x68
 800b494:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b496:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b498:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b49a:	e841 2300 	strex	r3, r2, [r1]
 800b49e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b4a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1e1      	bne.n	800b46a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2220      	movs	r2, #32
 800b4aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a62      	ldr	r2, [pc, #392]	; (800b648 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d026      	beq.n	800b512 <UART_RxISR_8BIT_FIFOEN+0x22e>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a60      	ldr	r2, [pc, #384]	; (800b64c <UART_RxISR_8BIT_FIFOEN+0x368>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d021      	beq.n	800b512 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d01a      	beq.n	800b512 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b4ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b4f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b4fe:	657b      	str	r3, [r7, #84]	; 0x54
 800b500:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b502:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b504:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b506:	e841 2300 	strex	r3, r2, [r1]
 800b50a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b50c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1e4      	bne.n	800b4dc <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b516:	2b01      	cmp	r3, #1
 800b518:	d130      	bne.n	800b57c <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b528:	e853 3f00 	ldrex	r3, [r3]
 800b52c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	f023 0310 	bic.w	r3, r3, #16
 800b534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	461a      	mov	r2, r3
 800b53e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b542:	643b      	str	r3, [r7, #64]	; 0x40
 800b544:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b546:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b548:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b54a:	e841 2300 	strex	r3, r2, [r1]
 800b54e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1e4      	bne.n	800b520 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	69db      	ldr	r3, [r3, #28]
 800b55c:	f003 0310 	and.w	r3, r3, #16
 800b560:	2b10      	cmp	r3, #16
 800b562:	d103      	bne.n	800b56c <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2210      	movs	r2, #16
 800b56a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b572:	4619      	mov	r1, r3
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f7fe ff79 	bl	800a46c <HAL_UARTEx_RxEventCallback>
 800b57a:	e002      	b.n	800b582 <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f7f6 fab5 	bl	8001aec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b582:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b586:	2b00      	cmp	r3, #0
 800b588:	d006      	beq.n	800b598 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 800b58a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b58e:	f003 0320 	and.w	r3, r3, #32
 800b592:	2b00      	cmp	r3, #0
 800b594:	f47f aeca 	bne.w	800b32c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b59e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b5a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d049      	beq.n	800b63e <UART_RxISR_8BIT_FIFOEN+0x35a>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5b0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d242      	bcs.n	800b63e <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3308      	adds	r3, #8
 800b5be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c0:	6a3b      	ldr	r3, [r7, #32]
 800b5c2:	e853 3f00 	ldrex	r3, [r3]
 800b5c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	3308      	adds	r3, #8
 800b5d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b5dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5e4:	e841 2300 	strex	r3, r2, [r1]
 800b5e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1e3      	bne.n	800b5b8 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a17      	ldr	r2, [pc, #92]	; (800b650 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800b5f4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	e853 3f00 	ldrex	r3, [r3]
 800b602:	60bb      	str	r3, [r7, #8]
   return(result);
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	f043 0320 	orr.w	r3, r3, #32
 800b60a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	461a      	mov	r2, r3
 800b614:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b618:	61bb      	str	r3, [r7, #24]
 800b61a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61c:	6979      	ldr	r1, [r7, #20]
 800b61e:	69ba      	ldr	r2, [r7, #24]
 800b620:	e841 2300 	strex	r3, r2, [r1]
 800b624:	613b      	str	r3, [r7, #16]
   return(result);
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1e4      	bne.n	800b5f6 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b62c:	e007      	b.n	800b63e <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	699a      	ldr	r2, [r3, #24]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f042 0208 	orr.w	r2, r2, #8
 800b63c:	619a      	str	r2, [r3, #24]
}
 800b63e:	bf00      	nop
 800b640:	37b0      	adds	r7, #176	; 0xb0
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	44002400 	.word	0x44002400
 800b64c:	54002400 	.word	0x54002400
 800b650:	0800af5d 	.word	0x0800af5d

0800b654 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b0ae      	sub	sp, #184	; 0xb8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b662:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	69db      	ldr	r3, [r3, #28]
 800b66c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b68a:	2b22      	cmp	r3, #34	; 0x22
 800b68c:	f040 818b 	bne.w	800b9a6 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b696:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b69a:	e12e      	b.n	800b8fa <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b6ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b6b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b6b6:	4013      	ands	r3, r2
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b6be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6c4:	1c9a      	adds	r2, r3, #2
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	69db      	ldr	r3, [r3, #28]
 800b6e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b6e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b6ea:	f003 0307 	and.w	r3, r3, #7
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d053      	beq.n	800b79a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b6f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b6f6:	f003 0301 	and.w	r3, r3, #1
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d011      	beq.n	800b722 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b6fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00b      	beq.n	800b722 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2201      	movs	r2, #1
 800b710:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b718:	f043 0201 	orr.w	r2, r3, #1
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b722:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b726:	f003 0302 	and.w	r3, r3, #2
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d011      	beq.n	800b752 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b72e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b732:	f003 0301 	and.w	r3, r3, #1
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00b      	beq.n	800b752 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2202      	movs	r2, #2
 800b740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b748:	f043 0204 	orr.w	r2, r3, #4
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b756:	f003 0304 	and.w	r3, r3, #4
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d011      	beq.n	800b782 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b75e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b762:	f003 0301 	and.w	r3, r3, #1
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00b      	beq.n	800b782 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2204      	movs	r2, #4
 800b770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b778:	f043 0202 	orr.w	r2, r3, #2
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d006      	beq.n	800b79a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7fe fe63 	bl	800a458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f040 80a9 	bne.w	800b8fa <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7b0:	e853 3f00 	ldrex	r3, [r3]
 800b7b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b7b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b7ce:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b7d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b7d6:	e841 2300 	strex	r3, r2, [r1]
 800b7da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b7dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1e2      	bne.n	800b7a8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	3308      	adds	r3, #8
 800b7e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7ec:	e853 3f00 	ldrex	r3, [r3]
 800b7f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b7f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7f8:	f023 0301 	bic.w	r3, r3, #1
 800b7fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	3308      	adds	r3, #8
 800b806:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b80a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b80c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b810:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b812:	e841 2300 	strex	r3, r2, [r1]
 800b816:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1e1      	bne.n	800b7e2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2220      	movs	r2, #32
 800b822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a62      	ldr	r2, [pc, #392]	; (800b9c0 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d026      	beq.n	800b88a <UART_RxISR_16BIT_FIFOEN+0x236>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a60      	ldr	r2, [pc, #384]	; (800b9c4 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d021      	beq.n	800b88a <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b850:	2b00      	cmp	r3, #0
 800b852:	d01a      	beq.n	800b88a <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b85c:	e853 3f00 	ldrex	r3, [r3]
 800b860:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b864:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b868:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	461a      	mov	r2, r3
 800b872:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b876:	65bb      	str	r3, [r7, #88]	; 0x58
 800b878:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b87c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b87e:	e841 2300 	strex	r3, r2, [r1]
 800b882:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1e4      	bne.n	800b854 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d130      	bne.n	800b8f4 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a0:	e853 3f00 	ldrex	r3, [r3]
 800b8a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a8:	f023 0310 	bic.w	r3, r3, #16
 800b8ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8ba:	647b      	str	r3, [r7, #68]	; 0x44
 800b8bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b8c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8c2:	e841 2300 	strex	r3, r2, [r1]
 800b8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1e4      	bne.n	800b898 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	69db      	ldr	r3, [r3, #28]
 800b8d4:	f003 0310 	and.w	r3, r3, #16
 800b8d8:	2b10      	cmp	r3, #16
 800b8da:	d103      	bne.n	800b8e4 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2210      	movs	r2, #16
 800b8e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7fe fdbd 	bl	800a46c <HAL_UARTEx_RxEventCallback>
 800b8f2:	e002      	b.n	800b8fa <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7f6 f8f9 	bl	8001aec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b8fa:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d006      	beq.n	800b910 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800b902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b906:	f003 0320 	and.w	r3, r3, #32
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f47f aec6 	bne.w	800b69c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b916:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b91a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d049      	beq.n	800b9b6 <UART_RxISR_16BIT_FIFOEN+0x362>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b928:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d242      	bcs.n	800b9b6 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3308      	adds	r3, #8
 800b936:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93a:	e853 3f00 	ldrex	r3, [r3]
 800b93e:	623b      	str	r3, [r7, #32]
   return(result);
 800b940:	6a3b      	ldr	r3, [r7, #32]
 800b942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	3308      	adds	r3, #8
 800b950:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b954:	633a      	str	r2, [r7, #48]	; 0x30
 800b956:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b95a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b95c:	e841 2300 	strex	r3, r2, [r1]
 800b960:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1e3      	bne.n	800b930 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a17      	ldr	r2, [pc, #92]	; (800b9c8 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800b96c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	e853 3f00 	ldrex	r3, [r3]
 800b97a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f043 0320 	orr.w	r3, r3, #32
 800b982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	461a      	mov	r2, r3
 800b98c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b990:	61fb      	str	r3, [r7, #28]
 800b992:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b994:	69b9      	ldr	r1, [r7, #24]
 800b996:	69fa      	ldr	r2, [r7, #28]
 800b998:	e841 2300 	strex	r3, r2, [r1]
 800b99c:	617b      	str	r3, [r7, #20]
   return(result);
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d1e4      	bne.n	800b96e <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b9a4:	e007      	b.n	800b9b6 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	699a      	ldr	r2, [r3, #24]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f042 0208 	orr.w	r2, r2, #8
 800b9b4:	619a      	str	r2, [r3, #24]
}
 800b9b6:	bf00      	nop
 800b9b8:	37b8      	adds	r7, #184	; 0xb8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	44002400 	.word	0x44002400
 800b9c4:	54002400 	.word	0x54002400
 800b9c8:	0800b121 	.word	0x0800b121

0800b9cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b9d4:	bf00      	nop
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b9e8:	bf00      	nop
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b9fc:	bf00      	nop
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d101      	bne.n	800ba1e <HAL_UARTEx_DisableFifoMode+0x16>
 800ba1a:	2302      	movs	r3, #2
 800ba1c:	e027      	b.n	800ba6e <HAL_UARTEx_DisableFifoMode+0x66>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2224      	movs	r2, #36	; 0x24
 800ba2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f022 0201 	bic.w	r2, r2, #1
 800ba44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ba4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2220      	movs	r2, #32
 800ba60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3714      	adds	r7, #20
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b084      	sub	sp, #16
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d101      	bne.n	800ba92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba8e:	2302      	movs	r3, #2
 800ba90:	e02d      	b.n	800baee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2201      	movs	r2, #1
 800ba96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2224      	movs	r2, #36	; 0x24
 800ba9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f022 0201 	bic.w	r2, r2, #1
 800bab8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	430a      	orrs	r2, r1
 800bacc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f850 	bl	800bb74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2220      	movs	r2, #32
 800bae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b084      	sub	sp, #16
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
 800bafe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d101      	bne.n	800bb0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb0a:	2302      	movs	r3, #2
 800bb0c:	e02d      	b.n	800bb6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2201      	movs	r2, #1
 800bb12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2224      	movs	r2, #36	; 0x24
 800bb1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f022 0201 	bic.w	r2, r2, #1
 800bb34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	683a      	ldr	r2, [r7, #0]
 800bb46:	430a      	orrs	r2, r1
 800bb48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f812 	bl	800bb74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2220      	movs	r2, #32
 800bb5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
	...

0800bb74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b085      	sub	sp, #20
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d108      	bne.n	800bb96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb94:	e031      	b.n	800bbfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb96:	2308      	movs	r3, #8
 800bb98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb9a:	2308      	movs	r3, #8
 800bb9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	0e5b      	lsrs	r3, r3, #25
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	f003 0307 	and.w	r3, r3, #7
 800bbac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	0f5b      	lsrs	r3, r3, #29
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	f003 0307 	and.w	r3, r3, #7
 800bbbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bbbe:	7bbb      	ldrb	r3, [r7, #14]
 800bbc0:	7b3a      	ldrb	r2, [r7, #12]
 800bbc2:	4911      	ldr	r1, [pc, #68]	; (800bc08 <UARTEx_SetNbDataToProcess+0x94>)
 800bbc4:	5c8a      	ldrb	r2, [r1, r2]
 800bbc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bbca:	7b3a      	ldrb	r2, [r7, #12]
 800bbcc:	490f      	ldr	r1, [pc, #60]	; (800bc0c <UARTEx_SetNbDataToProcess+0x98>)
 800bbce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bbd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
 800bbde:	7b7a      	ldrb	r2, [r7, #13]
 800bbe0:	4909      	ldr	r1, [pc, #36]	; (800bc08 <UARTEx_SetNbDataToProcess+0x94>)
 800bbe2:	5c8a      	ldrb	r2, [r1, r2]
 800bbe4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bbe8:	7b7a      	ldrb	r2, [r7, #13]
 800bbea:	4908      	ldr	r1, [pc, #32]	; (800bc0c <UARTEx_SetNbDataToProcess+0x98>)
 800bbec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbee:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bbfa:	bf00      	nop
 800bbfc:	3714      	adds	r7, #20
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	08010448 	.word	0x08010448
 800bc0c:	08010450 	.word	0x08010450

0800bc10 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b08b      	sub	sp, #44	; 0x2c
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	fa93 f3a3 	rbit	r3, r3
 800bc2a:	613b      	str	r3, [r7, #16]
  return result;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800bc36:	2320      	movs	r3, #32
 800bc38:	e003      	b.n	800bc42 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	fab3 f383 	clz	r3, r3
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	005b      	lsls	r3, r3, #1
 800bc44:	2103      	movs	r1, #3
 800bc46:	fa01 f303 	lsl.w	r3, r1, r3
 800bc4a:	43db      	mvns	r3, r3
 800bc4c:	401a      	ands	r2, r3
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	fa93 f3a3 	rbit	r3, r3
 800bc58:	61fb      	str	r3, [r7, #28]
  return result;
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d101      	bne.n	800bc68 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800bc64:	2320      	movs	r3, #32
 800bc66:	e003      	b.n	800bc70 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800bc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6a:	fab3 f383 	clz	r3, r3
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	005b      	lsls	r3, r3, #1
 800bc72:	6879      	ldr	r1, [r7, #4]
 800bc74:	fa01 f303 	lsl.w	r3, r1, r3
 800bc78:	431a      	orrs	r2, r3
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	601a      	str	r2, [r3, #0]
}
 800bc7e:	bf00      	nop
 800bc80:	372c      	adds	r7, #44	; 0x2c
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b085      	sub	sp, #20
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	60f8      	str	r0, [r7, #12]
 800bc92:	60b9      	str	r1, [r7, #8]
 800bc94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	685a      	ldr	r2, [r3, #4]
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	43db      	mvns	r3, r3
 800bc9e:	401a      	ands	r2, r3
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	6879      	ldr	r1, [r7, #4]
 800bca4:	fb01 f303 	mul.w	r3, r1, r3
 800bca8:	431a      	orrs	r2, r3
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	605a      	str	r2, [r3, #4]
}
 800bcae:	bf00      	nop
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800bcba:	b480      	push	{r7}
 800bcbc:	b08b      	sub	sp, #44	; 0x2c
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	60f8      	str	r0, [r7, #12]
 800bcc2:	60b9      	str	r1, [r7, #8]
 800bcc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	689a      	ldr	r2, [r3, #8]
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	fa93 f3a3 	rbit	r3, r3
 800bcd4:	613b      	str	r3, [r7, #16]
  return result;
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d101      	bne.n	800bce4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800bce0:	2320      	movs	r3, #32
 800bce2:	e003      	b.n	800bcec <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	fab3 f383 	clz	r3, r3
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	2103      	movs	r1, #3
 800bcf0:	fa01 f303 	lsl.w	r3, r1, r3
 800bcf4:	43db      	mvns	r3, r3
 800bcf6:	401a      	ands	r2, r3
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	fa93 f3a3 	rbit	r3, r3
 800bd02:	61fb      	str	r3, [r7, #28]
  return result;
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800bd0e:	2320      	movs	r3, #32
 800bd10:	e003      	b.n	800bd1a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800bd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd14:	fab3 f383 	clz	r3, r3
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	005b      	lsls	r3, r3, #1
 800bd1c:	6879      	ldr	r1, [r7, #4]
 800bd1e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd22:	431a      	orrs	r2, r3
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800bd28:	bf00      	nop
 800bd2a:	372c      	adds	r7, #44	; 0x2c
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b08b      	sub	sp, #44	; 0x2c
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	68da      	ldr	r2, [r3, #12]
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	fa93 f3a3 	rbit	r3, r3
 800bd4e:	613b      	str	r3, [r7, #16]
  return result;
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d101      	bne.n	800bd5e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800bd5a:	2320      	movs	r3, #32
 800bd5c:	e003      	b.n	800bd66 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	fab3 f383 	clz	r3, r3
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	005b      	lsls	r3, r3, #1
 800bd68:	2103      	movs	r1, #3
 800bd6a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd6e:	43db      	mvns	r3, r3
 800bd70:	401a      	ands	r2, r3
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd76:	6a3b      	ldr	r3, [r7, #32]
 800bd78:	fa93 f3a3 	rbit	r3, r3
 800bd7c:	61fb      	str	r3, [r7, #28]
  return result;
 800bd7e:	69fb      	ldr	r3, [r7, #28]
 800bd80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800bd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d101      	bne.n	800bd8c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800bd88:	2320      	movs	r3, #32
 800bd8a:	e003      	b.n	800bd94 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	fab3 f383 	clz	r3, r3
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	005b      	lsls	r3, r3, #1
 800bd96:	6879      	ldr	r1, [r7, #4]
 800bd98:	fa01 f303 	lsl.w	r3, r1, r3
 800bd9c:	431a      	orrs	r2, r3
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	60da      	str	r2, [r3, #12]
}
 800bda2:	bf00      	nop
 800bda4:	372c      	adds	r7, #44	; 0x2c
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr

0800bdae <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800bdae:	b480      	push	{r7}
 800bdb0:	b08b      	sub	sp, #44	; 0x2c
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	60f8      	str	r0, [r7, #12]
 800bdb6:	60b9      	str	r1, [r7, #8]
 800bdb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6a1a      	ldr	r2, [r3, #32]
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	fa93 f3a3 	rbit	r3, r3
 800bdc8:	613b      	str	r3, [r7, #16]
  return result;
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800bdd4:	2320      	movs	r3, #32
 800bdd6:	e003      	b.n	800bde0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	fab3 f383 	clz	r3, r3
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	210f      	movs	r1, #15
 800bde4:	fa01 f303 	lsl.w	r3, r1, r3
 800bde8:	43db      	mvns	r3, r3
 800bdea:	401a      	ands	r2, r3
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	fa93 f3a3 	rbit	r3, r3
 800bdf6:	61fb      	str	r3, [r7, #28]
  return result;
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800be02:	2320      	movs	r3, #32
 800be04:	e003      	b.n	800be0e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800be06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be08:	fab3 f383 	clz	r3, r3
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	6879      	ldr	r1, [r7, #4]
 800be12:	fa01 f303 	lsl.w	r3, r1, r3
 800be16:	431a      	orrs	r2, r3
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800be1c:	bf00      	nop
 800be1e:	372c      	adds	r7, #44	; 0x2c
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800be28:	b480      	push	{r7}
 800be2a:	b08b      	sub	sp, #44	; 0x2c
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	0a1b      	lsrs	r3, r3, #8
 800be3c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	fa93 f3a3 	rbit	r3, r3
 800be44:	613b      	str	r3, [r7, #16]
  return result;
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800be50:	2320      	movs	r3, #32
 800be52:	e003      	b.n	800be5c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	fab3 f383 	clz	r3, r3
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	210f      	movs	r1, #15
 800be60:	fa01 f303 	lsl.w	r3, r1, r3
 800be64:	43db      	mvns	r3, r3
 800be66:	401a      	ands	r2, r3
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	0a1b      	lsrs	r3, r3, #8
 800be6c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be6e:	6a3b      	ldr	r3, [r7, #32]
 800be70:	fa93 f3a3 	rbit	r3, r3
 800be74:	61fb      	str	r3, [r7, #28]
  return result;
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800be80:	2320      	movs	r3, #32
 800be82:	e003      	b.n	800be8c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800be84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be86:	fab3 f383 	clz	r3, r3
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	6879      	ldr	r1, [r7, #4]
 800be90:	fa01 f303 	lsl.w	r3, r1, r3
 800be94:	431a      	orrs	r2, r3
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800be9a:	bf00      	nop
 800be9c:	372c      	adds	r7, #44	; 0x2c
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b08a      	sub	sp, #40	; 0x28
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	fa93 f3a3 	rbit	r3, r3
 800bebc:	617b      	str	r3, [r7, #20]
  return result;
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d101      	bne.n	800becc <LL_GPIO_Init+0x26>
    return 32U;
 800bec8:	2320      	movs	r3, #32
 800beca:	e003      	b.n	800bed4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	fab3 f383 	clz	r3, r3
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800bed6:	e058      	b.n	800bf8a <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	2101      	movs	r1, #1
 800bede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee0:	fa01 f303 	lsl.w	r3, r1, r3
 800bee4:	4013      	ands	r3, r2
 800bee6:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800bee8:	6a3b      	ldr	r3, [r7, #32]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d04a      	beq.n	800bf84 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d003      	beq.n	800befe <LL_GPIO_Init+0x58>
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	2b02      	cmp	r3, #2
 800befc:	d10e      	bne.n	800bf1c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	461a      	mov	r2, r3
 800bf04:	6a39      	ldr	r1, [r7, #32]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7ff fed7 	bl	800bcba <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	6819      	ldr	r1, [r3, #0]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	461a      	mov	r2, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff feb7 	bl	800bc8a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	461a      	mov	r2, r3
 800bf22:	6a39      	ldr	r1, [r7, #32]
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f7ff ff05 	bl	800bd34 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	2b02      	cmp	r3, #2
 800bf30:	d121      	bne.n	800bf76 <LL_GPIO_Init+0xd0>
 800bf32:	6a3b      	ldr	r3, [r7, #32]
 800bf34:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	fa93 f3a3 	rbit	r3, r3
 800bf3c:	60bb      	str	r3, [r7, #8]
  return result;
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d101      	bne.n	800bf4c <LL_GPIO_Init+0xa6>
    return 32U;
 800bf48:	2320      	movs	r3, #32
 800bf4a:	e003      	b.n	800bf54 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	fab3 f383 	clz	r3, r3
 800bf52:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800bf54:	2b07      	cmp	r3, #7
 800bf56:	d807      	bhi.n	800bf68 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	695b      	ldr	r3, [r3, #20]
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	6a39      	ldr	r1, [r7, #32]
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f7ff ff24 	bl	800bdae <LL_GPIO_SetAFPin_0_7>
 800bf66:	e006      	b.n	800bf76 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	695b      	ldr	r3, [r3, #20]
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	6a39      	ldr	r1, [r7, #32]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7ff ff59 	bl	800be28 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	6a39      	ldr	r1, [r7, #32]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7ff fe46 	bl	800bc10 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf86:	3301      	adds	r3, #1
 800bf88:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf90:	fa22 f303 	lsr.w	r3, r2, r3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d19f      	bne.n	800bed8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3728      	adds	r7, #40	; 0x28
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bfa2:	b480      	push	{r7}
 800bfa4:	b085      	sub	sp, #20
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bfaa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800bfae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	43db      	mvns	r3, r3
 800bfb8:	401a      	ands	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800bfd8:	78fb      	ldrb	r3, [r7, #3]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d106      	bne.n	800bfec <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	641a      	str	r2, [r3, #64]	; 0x40
 800bfea:	e00b      	b.n	800c004 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800bfec:	78fb      	ldrb	r3, [r7, #3]
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d106      	bne.n	800c000 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	641a      	str	r2, [r3, #64]	; 0x40
 800bffe:	e001      	b.n	800c004 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	e000      	b.n	800c006 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr

0800c012 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c012:	b084      	sub	sp, #16
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	f107 001c 	add.w	r0, r7, #28
 800c020:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2201      	movs	r2, #1
 800c028:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02e:	f023 0201 	bic.w	r2, r3, #1
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800c036:	2100      	movs	r1, #0
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f7ff ffc7 	bl	800bfcc <USB_SetCurrentMode>
 800c03e:	4603      	mov	r3, r0
 800c040:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800c048:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c054:	b004      	add	sp, #16
 800c056:	4770      	bx	lr

0800c058 <svCLI_Init>:
// extern variables

// Functions
// svCLI_Init must be called before using CLI
void svCLI_Init(SVCLI_GET_CHAR_FUNC funcGetChar, SVCLI_PUT_CHAR_FUNC funcPutChar, SVCLI_COMMIT_FUNC funcCommit)
{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
	svGetChar = funcGetChar;
 800c064:	4a18      	ldr	r2, [pc, #96]	; (800c0c8 <svCLI_Init+0x70>)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6013      	str	r3, [r2, #0]
	svPutChar = funcPutChar;
 800c06a:	4a18      	ldr	r2, [pc, #96]	; (800c0cc <svCLI_Init+0x74>)
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	6013      	str	r3, [r2, #0]
	svCommit = funcCommit;
 800c070:	4a17      	ldr	r2, [pc, #92]	; (800c0d0 <svCLI_Init+0x78>)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6013      	str	r3, [r2, #0]
	szCLIString[0] = 0;
 800c076:	4b17      	ldr	r3, [pc, #92]	; (800c0d4 <svCLI_Init+0x7c>)
 800c078:	2200      	movs	r2, #0
 800c07a:	701a      	strb	r2, [r3, #0]
#pragma section=".Table4CLI"
  sCLITableBegin = (SVCLI_t*)__section_begin(".Table4CLI");
  sCLITablEnd = (SVCLI_t*)__section_end(".Table4CLI");

#elif defined ( __GNUC__ )
  sCLITableBegin = (SVCLI_t*)Table4CLI_start;
 800c07c:	4b16      	ldr	r3, [pc, #88]	; (800c0d8 <svCLI_Init+0x80>)
 800c07e:	4a17      	ldr	r2, [pc, #92]	; (800c0dc <svCLI_Init+0x84>)
 800c080:	601a      	str	r2, [r3, #0]
  sCLITablEnd = (SVCLI_t*)Table4CLI_end;
 800c082:	4b17      	ldr	r3, [pc, #92]	; (800c0e0 <svCLI_Init+0x88>)
 800c084:	4a17      	ldr	r2, [pc, #92]	; (800c0e4 <svCLI_Init+0x8c>)
 800c086:	601a      	str	r2, [r3, #0]
#endif

  if (s_bPwdOK) {
 800c088:	4b17      	ldr	r3, [pc, #92]	; (800c0e8 <svCLI_Init+0x90>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00d      	beq.n	800c0ac <svCLI_Init+0x54>
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800c090:	4b16      	ldr	r3, [pc, #88]	; (800c0ec <svCLI_Init+0x94>)
 800c092:	4a17      	ldr	r2, [pc, #92]	; (800c0f0 <svCLI_Init+0x98>)
 800c094:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c098:	6018      	str	r0, [r3, #0]
 800c09a:	3304      	adds	r3, #4
 800c09c:	8019      	strh	r1, [r3, #0]
 800c09e:	3302      	adds	r3, #2
 800c0a0:	0c0a      	lsrs	r2, r1, #16
 800c0a2:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800c0a4:	4b13      	ldr	r3, [pc, #76]	; (800c0f4 <svCLI_Init+0x9c>)
 800c0a6:	2206      	movs	r2, #6
 800c0a8:	601a      	str	r2, [r3, #0]
  }
  else {
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
  }
}
 800c0aa:	e007      	b.n	800c0bc <svCLI_Init+0x64>
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
 800c0ac:	4b0f      	ldr	r3, [pc, #60]	; (800c0ec <svCLI_Init+0x94>)
 800c0ae:	4a12      	ldr	r2, [pc, #72]	; (800c0f8 <svCLI_Init+0xa0>)
 800c0b0:	ca07      	ldmia	r2, {r0, r1, r2}
 800c0b2:	c303      	stmia	r3!, {r0, r1}
 800c0b4:	801a      	strh	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
 800c0b6:	4b0f      	ldr	r3, [pc, #60]	; (800c0f4 <svCLI_Init+0x9c>)
 800c0b8:	2209      	movs	r2, #9
 800c0ba:	601a      	str	r2, [r3, #0]
}
 800c0bc:	bf00      	nop
 800c0be:	3714      	adds	r7, #20
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	20000da8 	.word	0x20000da8
 800c0cc:	20000dac 	.word	0x20000dac
 800c0d0:	20000db0 	.word	0x20000db0
 800c0d4:	20000b94 	.word	0x20000b94
 800c0d8:	20000da0 	.word	0x20000da0
 800c0dc:	08010214 	.word	0x08010214
 800c0e0:	20000da4 	.word	0x20000da4
 800c0e4:	0801022c 	.word	0x0801022c
 800c0e8:	20000034 	.word	0x20000034
 800c0ec:	20000038 	.word	0x20000038
 800c0f0:	08010280 	.word	0x08010280
 800c0f4:	20000044 	.word	0x20000044
 800c0f8:	08010288 	.word	0x08010288

0800c0fc <svCLI_Printf>:

static int svCLI_Printf(char* fmt,...)
{
 800c0fc:	b40f      	push	{r0, r1, r2, r3}
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b084      	sub	sp, #16
 800c102:	af00      	add	r7, sp, #0
static char msg[256];
	va_list ap;
	int len;

	va_start(ap, fmt);
 800c104:	f107 031c 	add.w	r3, r7, #28
 800c108:	607b      	str	r3, [r7, #4]
	len = vsprintf(msg, fmt, ap);
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	69b9      	ldr	r1, [r7, #24]
 800c10e:	480f      	ldr	r0, [pc, #60]	; (800c14c <svCLI_Printf+0x50>)
 800c110:	f003 fc6e 	bl	800f9f0 <vsiprintf>
 800c114:	60b8      	str	r0, [r7, #8]
	va_end(ap);
	for (int i=0;i<len;i++) {
 800c116:	2300      	movs	r3, #0
 800c118:	60fb      	str	r3, [r7, #12]
 800c11a:	e00a      	b.n	800c132 <svCLI_Printf+0x36>
		svPutChar(msg[i]);
 800c11c:	4b0c      	ldr	r3, [pc, #48]	; (800c150 <svCLI_Printf+0x54>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	490a      	ldr	r1, [pc, #40]	; (800c14c <svCLI_Printf+0x50>)
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	440a      	add	r2, r1
 800c126:	7812      	ldrb	r2, [r2, #0]
 800c128:	4610      	mov	r0, r2
 800c12a:	4798      	blx	r3
	for (int i=0;i<len;i++) {
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3301      	adds	r3, #1
 800c130:	60fb      	str	r3, [r7, #12]
 800c132:	68fa      	ldr	r2, [r7, #12]
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	429a      	cmp	r2, r3
 800c138:	dbf0      	blt.n	800c11c <svCLI_Printf+0x20>
	}
	return len;
 800c13a:	68bb      	ldr	r3, [r7, #8]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c146:	b004      	add	sp, #16
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	20000dc0 	.word	0x20000dc0
 800c150:	20000dac 	.word	0x20000dac

0800c154 <svCLI_ShowHelp>:

void svCLI_ShowHelp(void)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
	if (svPutChar) {
 800c15a:	4b2d      	ldr	r3, [pc, #180]	; (800c210 <svCLI_ShowHelp+0xbc>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d04a      	beq.n	800c1f8 <svCLI_ShowHelp+0xa4>
		if (sCLITableBegin != sCLITablEnd) {
 800c162:	4b2c      	ldr	r3, [pc, #176]	; (800c214 <svCLI_ShowHelp+0xc0>)
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	4b2c      	ldr	r3, [pc, #176]	; (800c218 <svCLI_ShowHelp+0xc4>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d03e      	beq.n	800c1ec <svCLI_ShowHelp+0x98>
			for (unsigned int s=0;s<80;s++) svPutChar('=');
 800c16e:	2300      	movs	r3, #0
 800c170:	60fb      	str	r3, [r7, #12]
 800c172:	e006      	b.n	800c182 <svCLI_ShowHelp+0x2e>
 800c174:	4b26      	ldr	r3, [pc, #152]	; (800c210 <svCLI_ShowHelp+0xbc>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	203d      	movs	r0, #61	; 0x3d
 800c17a:	4798      	blx	r3
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	3301      	adds	r3, #1
 800c180:	60fb      	str	r3, [r7, #12]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2b4f      	cmp	r3, #79	; 0x4f
 800c186:	d9f5      	bls.n	800c174 <svCLI_ShowHelp+0x20>
			svCLI_Printf("\r\n");
 800c188:	4824      	ldr	r0, [pc, #144]	; (800c21c <svCLI_ShowHelp+0xc8>)
 800c18a:	f7ff ffb7 	bl	800c0fc <svCLI_Printf>
			SVCLI_t* pCLIEntry;
			int nCount = 1;
 800c18e:	2301      	movs	r3, #1
 800c190:	607b      	str	r3, [r7, #4]
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800c192:	4b20      	ldr	r3, [pc, #128]	; (800c214 <svCLI_ShowHelp+0xc0>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	60bb      	str	r3, [r7, #8]
 800c198:	e012      	b.n	800c1c0 <svCLI_ShowHelp+0x6c>
				svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 800c19a:	6879      	ldr	r1, [r7, #4]
 800c19c:	1c4b      	adds	r3, r1, #1
 800c19e:	607b      	str	r3, [r7, #4]
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d002      	beq.n	800c1b2 <svCLI_ShowHelp+0x5e>
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	e000      	b.n	800c1b4 <svCLI_ShowHelp+0x60>
 800c1b2:	4b1b      	ldr	r3, [pc, #108]	; (800c220 <svCLI_ShowHelp+0xcc>)
 800c1b4:	481b      	ldr	r0, [pc, #108]	; (800c224 <svCLI_ShowHelp+0xd0>)
 800c1b6:	f7ff ffa1 	bl	800c0fc <svCLI_Printf>
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	330c      	adds	r3, #12
 800c1be:	60bb      	str	r3, [r7, #8]
 800c1c0:	4b15      	ldr	r3, [pc, #84]	; (800c218 <svCLI_ShowHelp+0xc4>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d3e7      	bcc.n	800c19a <svCLI_ShowHelp+0x46>
			}
			svCLI_Printf(AES_RESET);
 800c1ca:	4817      	ldr	r0, [pc, #92]	; (800c228 <svCLI_ShowHelp+0xd4>)
 800c1cc:	f7ff ff96 	bl	800c0fc <svCLI_Printf>
			for (unsigned int s=0;s<80;s++) svPutChar('=');
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	603b      	str	r3, [r7, #0]
 800c1d4:	e006      	b.n	800c1e4 <svCLI_ShowHelp+0x90>
 800c1d6:	4b0e      	ldr	r3, [pc, #56]	; (800c210 <svCLI_ShowHelp+0xbc>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	203d      	movs	r0, #61	; 0x3d
 800c1dc:	4798      	blx	r3
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	603b      	str	r3, [r7, #0]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	2b4f      	cmp	r3, #79	; 0x4f
 800c1e8:	d9f5      	bls.n	800c1d6 <svCLI_ShowHelp+0x82>
 800c1ea:	e002      	b.n	800c1f2 <svCLI_ShowHelp+0x9e>
		}
		else {	// No CLI Entry
			svCLI_Printf("No CLI Entries !!!");
 800c1ec:	480f      	ldr	r0, [pc, #60]	; (800c22c <svCLI_ShowHelp+0xd8>)
 800c1ee:	f7ff ff85 	bl	800c0fc <svCLI_Printf>
		}
		svCLI_Printf("\r\n");
 800c1f2:	480a      	ldr	r0, [pc, #40]	; (800c21c <svCLI_ShowHelp+0xc8>)
 800c1f4:	f7ff ff82 	bl	800c0fc <svCLI_Printf>
	}
	if (svCommit) {
 800c1f8:	4b0d      	ldr	r3, [pc, #52]	; (800c230 <svCLI_ShowHelp+0xdc>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d002      	beq.n	800c206 <svCLI_ShowHelp+0xb2>
		svCommit();
 800c200:	4b0b      	ldr	r3, [pc, #44]	; (800c230 <svCLI_ShowHelp+0xdc>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4798      	blx	r3
	}
}
 800c206:	bf00      	nop
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	20000dac 	.word	0x20000dac
 800c214:	20000da0 	.word	0x20000da0
 800c218:	20000da4 	.word	0x20000da4
 800c21c:	08010294 	.word	0x08010294
 800c220:	08010298 	.word	0x08010298
 800c224:	0801029c 	.word	0x0801029c
 800c228:	080102bc 	.word	0x080102bc
 800c22c:	080102c4 	.word	0x080102c4
 800c230:	20000db0 	.word	0x20000db0

0800c234 <_strlenOffspace>:

// String length after stripped off space[0x20]
static int _strlenOffspace(const char* szString)
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
	int nCount = 0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	60fb      	str	r3, [r7, #12]
	if ((szString == NULL) || (*szString == 0))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <_strlenOffspace+0x1a>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d104      	bne.n	800c258 <_strlenOffspace+0x24>
		return 0;
 800c24e:	2300      	movs	r3, #0
 800c250:	e017      	b.n	800c282 <_strlenOffspace+0x4e>
	// Strip off first spaces
	while (*szString == ' ') szString++;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	3301      	adds	r3, #1
 800c256:	607b      	str	r3, [r7, #4]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	2b20      	cmp	r3, #32
 800c25e:	d0f8      	beq.n	800c252 <_strlenOffspace+0x1e>
	// Count
	while (*szString) {
 800c260:	e008      	b.n	800c274 <_strlenOffspace+0x40>
		if (*szString++ != ' ') {
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	1c5a      	adds	r2, r3, #1
 800c266:	607a      	str	r2, [r7, #4]
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	2b20      	cmp	r3, #32
 800c26c:	d007      	beq.n	800c27e <_strlenOffspace+0x4a>
			nCount++;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	3301      	adds	r3, #1
 800c272:	60fb      	str	r3, [r7, #12]
	while (*szString) {
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d1f2      	bne.n	800c262 <_strlenOffspace+0x2e>
 800c27c:	e000      	b.n	800c280 <_strlenOffspace+0x4c>
		}
		else
			break;
 800c27e:	bf00      	nop
	}
	return nCount;
 800c280:	68fb      	ldr	r3, [r7, #12]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3714      	adds	r7, #20
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr

0800c28e <_toLower>:

static char _toLower(char c)
{
 800c28e:	b480      	push	{r7}
 800c290:	b083      	sub	sp, #12
 800c292:	af00      	add	r7, sp, #0
 800c294:	4603      	mov	r3, r0
 800c296:	71fb      	strb	r3, [r7, #7]
  if ((c >= 'A') && (c <= 'Z')) {
 800c298:	79fb      	ldrb	r3, [r7, #7]
 800c29a:	2b40      	cmp	r3, #64	; 0x40
 800c29c:	d905      	bls.n	800c2aa <_toLower+0x1c>
 800c29e:	79fb      	ldrb	r3, [r7, #7]
 800c2a0:	2b5a      	cmp	r3, #90	; 0x5a
 800c2a2:	d802      	bhi.n	800c2aa <_toLower+0x1c>
    c = (c - 'A') + 'a';
 800c2a4:	79fb      	ldrb	r3, [r7, #7]
 800c2a6:	3320      	adds	r3, #32
 800c2a8:	71fb      	strb	r3, [r7, #7]
  }
  return c;
 800c2aa:	79fb      	ldrb	r3, [r7, #7]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <_isPrintable>:

static int _isPrintable(char c)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	4603      	mov	r3, r0
 800c2c0:	71fb      	strb	r3, [r7, #7]
	if ((' ' <= c) && (c <= '~'))
 800c2c2:	79fb      	ldrb	r3, [r7, #7]
 800c2c4:	2b1f      	cmp	r3, #31
 800c2c6:	d904      	bls.n	800c2d2 <_isPrintable+0x1a>
 800c2c8:	79fb      	ldrb	r3, [r7, #7]
 800c2ca:	2b7e      	cmp	r3, #126	; 0x7e
 800c2cc:	d801      	bhi.n	800c2d2 <_isPrintable+0x1a>
		return 1;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e000      	b.n	800c2d4 <_isPrintable+0x1c>
	return 0;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	370c      	adds	r7, #12
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <_isHex>:

static int _isHex(char c)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	71fb      	strb	r3, [r7, #7]
  if (((c >= '0') && (c <= '9')) ||				\
 800c2ea:	79fb      	ldrb	r3, [r7, #7]
 800c2ec:	2b2f      	cmp	r3, #47	; 0x2f
 800c2ee:	d902      	bls.n	800c2f6 <_isHex+0x16>
 800c2f0:	79fb      	ldrb	r3, [r7, #7]
 800c2f2:	2b39      	cmp	r3, #57	; 0x39
 800c2f4:	d90b      	bls.n	800c30e <_isHex+0x2e>
 800c2f6:	79fb      	ldrb	r3, [r7, #7]
 800c2f8:	2b40      	cmp	r3, #64	; 0x40
 800c2fa:	d902      	bls.n	800c302 <_isHex+0x22>
      ((c >= 'A') && (c <= 'F')) ||  	\
 800c2fc:	79fb      	ldrb	r3, [r7, #7]
 800c2fe:	2b46      	cmp	r3, #70	; 0x46
 800c300:	d905      	bls.n	800c30e <_isHex+0x2e>
 800c302:	79fb      	ldrb	r3, [r7, #7]
 800c304:	2b60      	cmp	r3, #96	; 0x60
 800c306:	d904      	bls.n	800c312 <_isHex+0x32>
      ((c >= 'a') && (c <= 'f')))
 800c308:	79fb      	ldrb	r3, [r7, #7]
 800c30a:	2b66      	cmp	r3, #102	; 0x66
 800c30c:	d801      	bhi.n	800c312 <_isHex+0x32>
    return 1;
 800c30e:	2301      	movs	r3, #1
 800c310:	e000      	b.n	800c314 <_isHex+0x34>
	return 0;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <_fromHex>:

static int _fromHex(char c) 
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
 800c326:	4603      	mov	r3, r0
 800c328:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 800c32a:	2300      	movs	r3, #0
 800c32c:	60fb      	str	r3, [r7, #12]

  if ((c >= '0') && (c <= '9')) {
 800c32e:	79fb      	ldrb	r3, [r7, #7]
 800c330:	2b2f      	cmp	r3, #47	; 0x2f
 800c332:	d906      	bls.n	800c342 <_fromHex+0x22>
 800c334:	79fb      	ldrb	r3, [r7, #7]
 800c336:	2b39      	cmp	r3, #57	; 0x39
 800c338:	d803      	bhi.n	800c342 <_fromHex+0x22>
    ret = (c - '0');
 800c33a:	79fb      	ldrb	r3, [r7, #7]
 800c33c:	3b30      	subs	r3, #48	; 0x30
 800c33e:	60fb      	str	r3, [r7, #12]
 800c340:	e012      	b.n	800c368 <_fromHex+0x48>
  } 
	else if ((c >= 'a') && (c <= 'f')) {
 800c342:	79fb      	ldrb	r3, [r7, #7]
 800c344:	2b60      	cmp	r3, #96	; 0x60
 800c346:	d906      	bls.n	800c356 <_fromHex+0x36>
 800c348:	79fb      	ldrb	r3, [r7, #7]
 800c34a:	2b66      	cmp	r3, #102	; 0x66
 800c34c:	d803      	bhi.n	800c356 <_fromHex+0x36>
    ret = (c - 'a' + 0x0a);
 800c34e:	79fb      	ldrb	r3, [r7, #7]
 800c350:	3b57      	subs	r3, #87	; 0x57
 800c352:	60fb      	str	r3, [r7, #12]
 800c354:	e008      	b.n	800c368 <_fromHex+0x48>
  } 
	else if ((c >= 'A') && (c <= 'F')) {
 800c356:	79fb      	ldrb	r3, [r7, #7]
 800c358:	2b40      	cmp	r3, #64	; 0x40
 800c35a:	d905      	bls.n	800c368 <_fromHex+0x48>
 800c35c:	79fb      	ldrb	r3, [r7, #7]
 800c35e:	2b46      	cmp	r3, #70	; 0x46
 800c360:	d802      	bhi.n	800c368 <_fromHex+0x48>
    ret = (c - 'A' + 0x0A);
 800c362:	79fb      	ldrb	r3, [r7, #7]
 800c364:	3b37      	subs	r3, #55	; 0x37
 800c366:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800c368:	68fb      	ldr	r3, [r7, #12]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3714      	adds	r7, #20
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <_strNoCaseCmp>:

static int _strNoCaseCmp(const char *s1, const char *s2, int nLenghth)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b086      	sub	sp, #24
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	60b9      	str	r1, [r7, #8]
 800c380:	607a      	str	r2, [r7, #4]
  char c1, c2;

  if (nLenghth == 0)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d101      	bne.n	800c38c <_strNoCaseCmp+0x16>
    return 0;
 800c388:	2300      	movs	r3, #0
 800c38a:	e026      	b.n	800c3da <_strNoCaseCmp+0x64>
  do {
		if ((c1 = _toLower(*s1++)) != (c2 = _toLower(*s2++))) {
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	1c5a      	adds	r2, r3, #1
 800c390:	60fa      	str	r2, [r7, #12]
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	4618      	mov	r0, r3
 800c396:	f7ff ff7a 	bl	800c28e <_toLower>
 800c39a:	4603      	mov	r3, r0
 800c39c:	75fb      	strb	r3, [r7, #23]
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	1c5a      	adds	r2, r3, #1
 800c3a2:	60ba      	str	r2, [r7, #8]
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff ff71 	bl	800c28e <_toLower>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	75bb      	strb	r3, [r7, #22]
 800c3b0:	7dfa      	ldrb	r2, [r7, #23]
 800c3b2:	7dbb      	ldrb	r3, [r7, #22]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d009      	beq.n	800c3cc <_strNoCaseCmp+0x56>
			if ((c1 == 0) || (c2 == 0))
 800c3b8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00c      	beq.n	800c3d8 <_strNoCaseCmp+0x62>
 800c3be:	7dbb      	ldrb	r3, [r7, #22]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d009      	beq.n	800c3d8 <_strNoCaseCmp+0x62>
					break;
			return ((unsigned char)c1 - (unsigned char)c2);
 800c3c4:	7dfa      	ldrb	r2, [r7, #23]
 800c3c6:	7dbb      	ldrb	r3, [r7, #22]
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	e006      	b.n	800c3da <_strNoCaseCmp+0x64>
		}
  } while (--nLenghth != 0);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	607b      	str	r3, [r7, #4]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1d9      	bne.n	800c38c <_strNoCaseCmp+0x16>
  return 0;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3718      	adds	r7, #24
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <_svMemCpy>:

static void _svMemCpy(char* dst, char *src, int nLength)
{
 800c3e2:	b480      	push	{r7}
 800c3e4:	b085      	sub	sp, #20
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	60f8      	str	r0, [r7, #12]
 800c3ea:	60b9      	str	r1, [r7, #8]
 800c3ec:	607a      	str	r2, [r7, #4]
	while (nLength--) {
 800c3ee:	e007      	b.n	800c400 <_svMemCpy+0x1e>
		*dst++=*src++;
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	1c53      	adds	r3, r2, #1
 800c3f4:	60bb      	str	r3, [r7, #8]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	1c59      	adds	r1, r3, #1
 800c3fa:	60f9      	str	r1, [r7, #12]
 800c3fc:	7812      	ldrb	r2, [r2, #0]
 800c3fe:	701a      	strb	r2, [r3, #0]
	while (nLength--) {
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	1e5a      	subs	r2, r3, #1
 800c404:	607a      	str	r2, [r7, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1f2      	bne.n	800c3f0 <_svMemCpy+0xe>
	}
}
 800c40a:	bf00      	nop
 800c40c:	bf00      	nop
 800c40e:	3714      	adds	r7, #20
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <_svClearLine>:

static void _svClearLine(void)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
	svPutChar('\r');
 800c41e:	4b16      	ldr	r3, [pc, #88]	; (800c478 <_svClearLine+0x60>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	200d      	movs	r0, #13
 800c424:	4798      	blx	r3
	// Remove Strings
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800c426:	2300      	movs	r3, #0
 800c428:	607b      	str	r3, [r7, #4]
 800c42a:	e006      	b.n	800c43a <_svClearLine+0x22>
		svPutChar(' ');
 800c42c:	4b12      	ldr	r3, [pc, #72]	; (800c478 <_svClearLine+0x60>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2020      	movs	r0, #32
 800c432:	4798      	blx	r3
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	3301      	adds	r3, #1
 800c438:	607b      	str	r3, [r7, #4]
 800c43a:	4b10      	ldr	r3, [pc, #64]	; (800c47c <_svClearLine+0x64>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a10      	ldr	r2, [pc, #64]	; (800c480 <_svClearLine+0x68>)
 800c440:	6812      	ldr	r2, [r2, #0]
 800c442:	441a      	add	r2, r3
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	429a      	cmp	r2, r3
 800c448:	d8f0      	bhi.n	800c42c <_svClearLine+0x14>
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800c44a:	2300      	movs	r3, #0
 800c44c:	603b      	str	r3, [r7, #0]
 800c44e:	e006      	b.n	800c45e <_svClearLine+0x46>
		svPutChar('\b');
 800c450:	4b09      	ldr	r3, [pc, #36]	; (800c478 <_svClearLine+0x60>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2008      	movs	r0, #8
 800c456:	4798      	blx	r3
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	3301      	adds	r3, #1
 800c45c:	603b      	str	r3, [r7, #0]
 800c45e:	4b07      	ldr	r3, [pc, #28]	; (800c47c <_svClearLine+0x64>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a07      	ldr	r2, [pc, #28]	; (800c480 <_svClearLine+0x68>)
 800c464:	6812      	ldr	r2, [r2, #0]
 800c466:	441a      	add	r2, r3
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d8f0      	bhi.n	800c450 <_svClearLine+0x38>
}
 800c46e:	bf00      	nop
 800c470:	bf00      	nop
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	20000dac 	.word	0x20000dac
 800c47c:	20000d9c 	.word	0x20000d9c
 800c480:	20000044 	.word	0x20000044

0800c484 <svCLIHandleHistory>:

static void svCLIHandleHistory(CLI_HISTORY_CMD_e eHistoryCmd)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	4603      	mov	r3, r0
 800c48c:	71fb      	strb	r3, [r7, #7]
	switch (eHistoryCmd) {
 800c48e:	79fb      	ldrb	r3, [r7, #7]
 800c490:	2b02      	cmp	r3, #2
 800c492:	d03f      	beq.n	800c514 <svCLIHandleHistory+0x90>
 800c494:	2b02      	cmp	r3, #2
 800c496:	dc6f      	bgt.n	800c578 <svCLIHandleHistory+0xf4>
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d002      	beq.n	800c4a2 <svCLIHandleHistory+0x1e>
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d052      	beq.n	800c546 <svCLIHandleHistory+0xc2>
			if (snCLIHistoryPos >= snCLIHistoryCount)
				snCLIHistoryPos = 0;
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
			break;
		default:
			break;
 800c4a0:	e06a      	b.n	800c578 <svCLIHandleHistory+0xf4>
			if (snCLIHistoryCount == MAX_CLI_HISTORY_BUFF_MAX) {	// Full
 800c4a2:	4b38      	ldr	r3, [pc, #224]	; (800c584 <svCLIHandleHistory+0x100>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b03      	cmp	r3, #3
 800c4a8:	d11c      	bne.n	800c4e4 <svCLIHandleHistory+0x60>
				for (int i=1;i<snCLIHistoryCount;i++) {
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	60fb      	str	r3, [r7, #12]
 800c4ae:	e00f      	b.n	800c4d0 <svCLIHandleHistory+0x4c>
	        _svMemCpy(&szCLIHistoryBuffer[i-1][0],&szCLIHistoryBuffer[i][0],MAX_CLI_CHARS);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	01db      	lsls	r3, r3, #7
 800c4b6:	4a34      	ldr	r2, [pc, #208]	; (800c588 <svCLIHandleHistory+0x104>)
 800c4b8:	1898      	adds	r0, r3, r2
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	01db      	lsls	r3, r3, #7
 800c4be:	4a32      	ldr	r2, [pc, #200]	; (800c588 <svCLIHandleHistory+0x104>)
 800c4c0:	4413      	add	r3, r2
 800c4c2:	2280      	movs	r2, #128	; 0x80
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	f7ff ff8c 	bl	800c3e2 <_svMemCpy>
				for (int i=1;i<snCLIHistoryCount;i++) {
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	60fb      	str	r3, [r7, #12]
 800c4d0:	4b2c      	ldr	r3, [pc, #176]	; (800c584 <svCLIHandleHistory+0x100>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	dbea      	blt.n	800c4b0 <svCLIHandleHistory+0x2c>
				snCLIHistoryCount--;
 800c4da:	4b2a      	ldr	r3, [pc, #168]	; (800c584 <svCLIHandleHistory+0x100>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	4a28      	ldr	r2, [pc, #160]	; (800c584 <svCLIHandleHistory+0x100>)
 800c4e2:	6013      	str	r3, [r2, #0]
			_svMemCpy(&szCLIHistoryBuffer[snCLIHistoryCount][0], &szCLIString[0],MAX_CLI_CHARS);
 800c4e4:	4b27      	ldr	r3, [pc, #156]	; (800c584 <svCLIHandleHistory+0x100>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	01db      	lsls	r3, r3, #7
 800c4ea:	4a27      	ldr	r2, [pc, #156]	; (800c588 <svCLIHandleHistory+0x104>)
 800c4ec:	4413      	add	r3, r2
 800c4ee:	2280      	movs	r2, #128	; 0x80
 800c4f0:	4926      	ldr	r1, [pc, #152]	; (800c58c <svCLIHandleHistory+0x108>)
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7ff ff75 	bl	800c3e2 <_svMemCpy>
			if (snCLIHistoryCount < MAX_CLI_HISTORY_BUFF_MAX)
 800c4f8:	4b22      	ldr	r3, [pc, #136]	; (800c584 <svCLIHandleHistory+0x100>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	dc04      	bgt.n	800c50a <svCLIHandleHistory+0x86>
				snCLIHistoryCount++;
 800c500:	4b20      	ldr	r3, [pc, #128]	; (800c584 <svCLIHandleHistory+0x100>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	3301      	adds	r3, #1
 800c506:	4a1f      	ldr	r2, [pc, #124]	; (800c584 <svCLIHandleHistory+0x100>)
 800c508:	6013      	str	r3, [r2, #0]
			snCLIHistoryPos = snCLIHistoryCount;
 800c50a:	4b1e      	ldr	r3, [pc, #120]	; (800c584 <svCLIHandleHistory+0x100>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a20      	ldr	r2, [pc, #128]	; (800c590 <svCLIHandleHistory+0x10c>)
 800c510:	6013      	str	r3, [r2, #0]
			break;
 800c512:	e032      	b.n	800c57a <svCLIHandleHistory+0xf6>
			snCLIHistoryPos--;
 800c514:	4b1e      	ldr	r3, [pc, #120]	; (800c590 <svCLIHandleHistory+0x10c>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	3b01      	subs	r3, #1
 800c51a:	4a1d      	ldr	r2, [pc, #116]	; (800c590 <svCLIHandleHistory+0x10c>)
 800c51c:	6013      	str	r3, [r2, #0]
			if (snCLIHistoryPos < 0)
 800c51e:	4b1c      	ldr	r3, [pc, #112]	; (800c590 <svCLIHandleHistory+0x10c>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	da04      	bge.n	800c530 <svCLIHandleHistory+0xac>
				snCLIHistoryPos = snCLIHistoryCount - 1;
 800c526:	4b17      	ldr	r3, [pc, #92]	; (800c584 <svCLIHandleHistory+0x100>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3b01      	subs	r3, #1
 800c52c:	4a18      	ldr	r2, [pc, #96]	; (800c590 <svCLIHandleHistory+0x10c>)
 800c52e:	6013      	str	r3, [r2, #0]
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800c530:	4b17      	ldr	r3, [pc, #92]	; (800c590 <svCLIHandleHistory+0x10c>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	01db      	lsls	r3, r3, #7
 800c536:	4a14      	ldr	r2, [pc, #80]	; (800c588 <svCLIHandleHistory+0x104>)
 800c538:	4413      	add	r3, r2
 800c53a:	2280      	movs	r2, #128	; 0x80
 800c53c:	4619      	mov	r1, r3
 800c53e:	4813      	ldr	r0, [pc, #76]	; (800c58c <svCLIHandleHistory+0x108>)
 800c540:	f7ff ff4f 	bl	800c3e2 <_svMemCpy>
			break;
 800c544:	e019      	b.n	800c57a <svCLIHandleHistory+0xf6>
			snCLIHistoryPos++;
 800c546:	4b12      	ldr	r3, [pc, #72]	; (800c590 <svCLIHandleHistory+0x10c>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	3301      	adds	r3, #1
 800c54c:	4a10      	ldr	r2, [pc, #64]	; (800c590 <svCLIHandleHistory+0x10c>)
 800c54e:	6013      	str	r3, [r2, #0]
			if (snCLIHistoryPos >= snCLIHistoryCount)
 800c550:	4b0f      	ldr	r3, [pc, #60]	; (800c590 <svCLIHandleHistory+0x10c>)
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	4b0b      	ldr	r3, [pc, #44]	; (800c584 <svCLIHandleHistory+0x100>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	429a      	cmp	r2, r3
 800c55a:	db02      	blt.n	800c562 <svCLIHandleHistory+0xde>
				snCLIHistoryPos = 0;
 800c55c:	4b0c      	ldr	r3, [pc, #48]	; (800c590 <svCLIHandleHistory+0x10c>)
 800c55e:	2200      	movs	r2, #0
 800c560:	601a      	str	r2, [r3, #0]
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800c562:	4b0b      	ldr	r3, [pc, #44]	; (800c590 <svCLIHandleHistory+0x10c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	01db      	lsls	r3, r3, #7
 800c568:	4a07      	ldr	r2, [pc, #28]	; (800c588 <svCLIHandleHistory+0x104>)
 800c56a:	4413      	add	r3, r2
 800c56c:	2280      	movs	r2, #128	; 0x80
 800c56e:	4619      	mov	r1, r3
 800c570:	4806      	ldr	r0, [pc, #24]	; (800c58c <svCLIHandleHistory+0x108>)
 800c572:	f7ff ff36 	bl	800c3e2 <_svMemCpy>
			break;
 800c576:	e000      	b.n	800c57a <svCLIHandleHistory+0xf6>
			break;
 800c578:	bf00      	nop
	}
}
 800c57a:	bf00      	nop
 800c57c:	3710      	adds	r7, #16
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	20000d94 	.word	0x20000d94
 800c588:	20000c14 	.word	0x20000c14
 800c58c:	20000b94 	.word	0x20000b94
 800c590:	20000d98 	.word	0x20000d98

0800c594 <svCLI_Search>:

static SVCLI_t* svCLI_Search(char **line)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b086      	sub	sp, #24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
	SVCLI_t* pCLIEntry;
	char* pCurrent = *line;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	613b      	str	r3, [r7, #16]
  // strip off leading spaces
  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 800c5a2:	e002      	b.n	800c5aa <svCLI_Search+0x16>
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	613b      	str	r3, [r7, #16]
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d003      	beq.n	800c5ba <svCLI_Search+0x26>
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	2b20      	cmp	r3, #32
 800c5b8:	d0f4      	beq.n	800c5a4 <svCLI_Search+0x10>
	for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800c5ba:	4b22      	ldr	r3, [pc, #136]	; (800c644 <svCLI_Search+0xb0>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	617b      	str	r3, [r7, #20]
 800c5c0:	e035      	b.n	800c62e <svCLI_Search+0x9a>
		int nCmdLength = _strlenOffspace(pCLIEntry->szCmd);
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7ff fe34 	bl	800c234 <_strlenOffspace>
 800c5cc:	60f8      	str	r0, [r7, #12]
		int nArgLength = _strlenOffspace(pCurrent);
 800c5ce:	6938      	ldr	r0, [r7, #16]
 800c5d0:	f7ff fe30 	bl	800c234 <_strlenOffspace>
 800c5d4:	60b8      	str	r0, [r7, #8]
		pCurrent[nArgLength] = 0;	// NULL termination just after command for comparing
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	693a      	ldr	r2, [r7, #16]
 800c5da:	4413      	add	r3, r2
 800c5dc:	2200      	movs	r2, #0
 800c5de:	701a      	strb	r2, [r3, #0]
		if (nCmdLength >= nArgLength) {
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	db1f      	blt.n	800c628 <svCLI_Search+0x94>
			if (_strNoCaseCmp(pCurrent, pCLIEntry->szCmd, nCmdLength) == 0) {	// Partial Command OK !!
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68fa      	ldr	r2, [r7, #12]
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	6938      	ldr	r0, [r7, #16]
 800c5f2:	f7ff fec0 	bl	800c376 <_strNoCaseCmp>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d115      	bne.n	800c628 <svCLI_Search+0x94>
				pCurrent += (nArgLength + 1);
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	3301      	adds	r3, #1
 800c600:	693a      	ldr	r2, [r7, #16]
 800c602:	4413      	add	r3, r2
 800c604:	613b      	str	r3, [r7, #16]
			  // strip off trailing spaces
			  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 800c606:	e002      	b.n	800c60e <svCLI_Search+0x7a>
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	3301      	adds	r3, #1
 800c60c:	613b      	str	r3, [r7, #16]
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d003      	beq.n	800c61e <svCLI_Search+0x8a>
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	2b20      	cmp	r3, #32
 800c61c:	d0f4      	beq.n	800c608 <svCLI_Search+0x74>
				*line = pCurrent;		// remove command & return
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	693a      	ldr	r2, [r7, #16]
 800c622:	601a      	str	r2, [r3, #0]
				
				return pCLIEntry;
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	e008      	b.n	800c63a <svCLI_Search+0xa6>
	for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	330c      	adds	r3, #12
 800c62c:	617b      	str	r3, [r7, #20]
 800c62e:	4b06      	ldr	r3, [pc, #24]	; (800c648 <svCLI_Search+0xb4>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	697a      	ldr	r2, [r7, #20]
 800c634:	429a      	cmp	r2, r3
 800c636:	d3c4      	bcc.n	800c5c2 <svCLI_Search+0x2e>
			}
		}
	}
	return NULL;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3718      	adds	r7, #24
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	20000da0 	.word	0x20000da0
 800c648:	20000da4 	.word	0x20000da4

0800c64c <svCLI_ParseNumber>:

int svCLI_ParseNumber(char *s, unsigned int *val, char **res, char *delimiter)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b08a      	sub	sp, #40	; 0x28
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
 800c658:	603b      	str	r3, [r7, #0]
  int first = 1;
 800c65a:	2301      	movs	r3, #1
 800c65c:	627b      	str	r3, [r7, #36]	; 0x24
  int radix = 10;
 800c65e:	230a      	movs	r3, #10
 800c660:	623b      	str	r3, [r7, #32]
  char c;
  unsigned long result = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	61fb      	str	r3, [r7, #28]
  int digit;
		// strip off leading spaces
    while (*s == ' ') s++;
 800c666:	e002      	b.n	800c66e <svCLI_ParseNumber+0x22>
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	3301      	adds	r3, #1
 800c66c:	60fb      	str	r3, [r7, #12]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	2b20      	cmp	r3, #32
 800c674:	d0f8      	beq.n	800c668 <svCLI_ParseNumber+0x1c>
		if (*s == 0)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d14d      	bne.n	800c71a <svCLI_ParseNumber+0xce>
			return 0;
 800c67e:	2300      	movs	r3, #0
 800c680:	e05b      	b.n	800c73a <svCLI_ParseNumber+0xee>
    while (*s) {
      if (first && (s[0] == '0') && (_toLower(s[1]) == 'x')) {
 800c682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c684:	2b00      	cmp	r3, #0
 800c686:	d011      	beq.n	800c6ac <svCLI_ParseNumber+0x60>
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b30      	cmp	r3, #48	; 0x30
 800c68e:	d10d      	bne.n	800c6ac <svCLI_ParseNumber+0x60>
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	3301      	adds	r3, #1
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	4618      	mov	r0, r3
 800c698:	f7ff fdf9 	bl	800c28e <_toLower>
 800c69c:	4603      	mov	r3, r0
 800c69e:	2b78      	cmp	r3, #120	; 0x78
 800c6a0:	d104      	bne.n	800c6ac <svCLI_ParseNumber+0x60>
        radix = 16;
 800c6a2:	2310      	movs	r3, #16
 800c6a4:	623b      	str	r3, [r7, #32]
        s += 2;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	3302      	adds	r3, #2
 800c6aa:	60fb      	str	r3, [r7, #12]
      }
      first = 0;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	627b      	str	r3, [r7, #36]	; 0x24
      c = *s++;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	1c5a      	adds	r2, r3, #1
 800c6b4:	60fa      	str	r2, [r7, #12]
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	75fb      	strb	r3, [r7, #23]
      if (_isHex(c) && ((digit = _fromHex(c)) < radix)) {
 800c6ba:	7dfb      	ldrb	r3, [r7, #23]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7ff fe0f 	bl	800c2e0 <_isHex>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d010      	beq.n	800c6ea <svCLI_ParseNumber+0x9e>
 800c6c8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7ff fe28 	bl	800c320 <_fromHex>
 800c6d0:	6138      	str	r0, [r7, #16]
 800c6d2:	693a      	ldr	r2, [r7, #16]
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	da07      	bge.n	800c6ea <svCLI_ParseNumber+0x9e>
        // Valid digit
        result = (result * radix) + digit;
 800c6da:	6a3b      	ldr	r3, [r7, #32]
 800c6dc:	69fa      	ldr	r2, [r7, #28]
 800c6de:	fb03 f202 	mul.w	r2, r3, r2
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	61fb      	str	r3, [r7, #28]
 800c6e8:	e017      	b.n	800c71a <svCLI_ParseNumber+0xce>
      } 
			else {
        if (delimiter != (char *)0) {
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d012      	beq.n	800c716 <svCLI_ParseNumber+0xca>
          // See if this character is one of the delimiters
          char *dp = delimiter;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	61bb      	str	r3, [r7, #24]
          while (*dp && (c != *dp)) dp++;
 800c6f4:	e002      	b.n	800c6fc <svCLI_ParseNumber+0xb0>
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	61bb      	str	r3, [r7, #24]
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d004      	beq.n	800c70e <svCLI_ParseNumber+0xc2>
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	7dfa      	ldrb	r2, [r7, #23]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d1f3      	bne.n	800c6f6 <svCLI_ParseNumber+0xaa>
          if (*dp) break;  // Found a good delimiter
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d106      	bne.n	800c724 <svCLI_ParseNumber+0xd8>
        }
        return 0;  // invalid number
 800c716:	2300      	movs	r3, #0
 800c718:	e00f      	b.n	800c73a <svCLI_ParseNumber+0xee>
    while (*s) {
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1af      	bne.n	800c682 <svCLI_ParseNumber+0x36>
 800c722:	e000      	b.n	800c726 <svCLI_ParseNumber+0xda>
          if (*dp) break;  // Found a good delimiter
 800c724:	bf00      	nop
      }
    }
    *val = result;
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	69fa      	ldr	r2, [r7, #28]
 800c72a:	601a      	str	r2, [r3, #0]
    if (res != (char **)0) {
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d002      	beq.n	800c738 <svCLI_ParseNumber+0xec>
      *res = s;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800c738:	2301      	movs	r3, #1
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3728      	adds	r7, #40	; 0x28
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
	...

0800c744 <svCLI_ParsenExecute>:

static void svCLI_ParsenExecute()
{
 800c744:	b590      	push	{r4, r7, lr}
 800c746:	b089      	sub	sp, #36	; 0x24
 800c748:	af00      	add	r7, sp, #0
	if (s_bPwdOK == FALSE) {	// Input Password
 800c74a:	4b3a      	ldr	r3, [pc, #232]	; (800c834 <svCLI_ParsenExecute+0xf0>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d120      	bne.n	800c794 <svCLI_ParsenExecute+0x50>
		if (strcmp(szCLIString, DEFAULT_PASSWORD) == 0) {
 800c752:	4939      	ldr	r1, [pc, #228]	; (800c838 <svCLI_ParsenExecute+0xf4>)
 800c754:	4839      	ldr	r0, [pc, #228]	; (800c83c <svCLI_ParsenExecute+0xf8>)
 800c756:	f7f3 fd9b 	bl	8000290 <strcmp>
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d115      	bne.n	800c78c <svCLI_ParsenExecute+0x48>
			s_bPwdOK = TRUE;
 800c760:	4b34      	ldr	r3, [pc, #208]	; (800c834 <svCLI_ParsenExecute+0xf0>)
 800c762:	2201      	movs	r2, #1
 800c764:	601a      	str	r2, [r3, #0]
			svCLI_Printf("Welcome !!\r\n");
 800c766:	4836      	ldr	r0, [pc, #216]	; (800c840 <svCLI_ParsenExecute+0xfc>)
 800c768:	f7ff fcc8 	bl	800c0fc <svCLI_Printf>
			strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800c76c:	4b35      	ldr	r3, [pc, #212]	; (800c844 <svCLI_ParsenExecute+0x100>)
 800c76e:	4a36      	ldr	r2, [pc, #216]	; (800c848 <svCLI_ParsenExecute+0x104>)
 800c770:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c774:	6018      	str	r0, [r3, #0]
 800c776:	3304      	adds	r3, #4
 800c778:	8019      	strh	r1, [r3, #0]
 800c77a:	3302      	adds	r3, #2
 800c77c:	0c0a      	lsrs	r2, r1, #16
 800c77e:	701a      	strb	r2, [r3, #0]
			snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800c780:	4b32      	ldr	r3, [pc, #200]	; (800c84c <svCLI_ParsenExecute+0x108>)
 800c782:	2206      	movs	r2, #6
 800c784:	601a      	str	r2, [r3, #0]
			svCLI_ShowHelp();
 800c786:	f7ff fce5 	bl	800c154 <svCLI_ShowHelp>
		}
		else {
			svCLI_Printf("Invalid Password !!\r\n");
		}
		return;
 800c78a:	e04f      	b.n	800c82c <svCLI_ParsenExecute+0xe8>
			svCLI_Printf("Invalid Password !!\r\n");
 800c78c:	4830      	ldr	r0, [pc, #192]	; (800c850 <svCLI_ParsenExecute+0x10c>)
 800c78e:	f7ff fcb5 	bl	800c0fc <svCLI_Printf>
		return;
 800c792:	e04b      	b.n	800c82c <svCLI_ParsenExecute+0xe8>
	}
	SVCLI_t* pCLIEntry;
	if (sCLITableBegin == sCLITablEnd) {
 800c794:	4b2f      	ldr	r3, [pc, #188]	; (800c854 <svCLI_ParsenExecute+0x110>)
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	4b2f      	ldr	r3, [pc, #188]	; (800c858 <svCLI_ParsenExecute+0x114>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d103      	bne.n	800c7a8 <svCLI_ParsenExecute+0x64>
		svCLI_Printf("No CLI Entries !!!\r\n");
 800c7a0:	482e      	ldr	r0, [pc, #184]	; (800c85c <svCLI_ParsenExecute+0x118>)
 800c7a2:	f7ff fcab 	bl	800c0fc <svCLI_Printf>
		return;
 800c7a6:	e041      	b.n	800c82c <svCLI_ParsenExecute+0xe8>
	}
	char* pLine = szCLIString;
 800c7a8:	4b24      	ldr	r3, [pc, #144]	; (800c83c <svCLI_ParsenExecute+0xf8>)
 800c7aa:	613b      	str	r3, [r7, #16]
	pCLIEntry = svCLI_Search(&pLine);
 800c7ac:	f107 0310 	add.w	r3, r7, #16
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7ff feef 	bl	800c594 <svCLI_Search>
 800c7b6:	61b8      	str	r0, [r7, #24]
	if (pCLIEntry) {
 800c7b8:	69bb      	ldr	r3, [r7, #24]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d033      	beq.n	800c826 <svCLI_ParsenExecute+0xe2>
		// Parse more for CLI function
		unsigned int nFirst, nSecond, nCount;
		nCount = 0;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	61fb      	str	r3, [r7, #28]
		nFirst = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	60fb      	str	r3, [r7, #12]
		nSecond = 0;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	60bb      	str	r3, [r7, #8]
		char* pParseLine = pLine;
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	617b      	str	r3, [r7, #20]
		char delim[3] = ", ";
 800c7ce:	4a24      	ldr	r2, [pc, #144]	; (800c860 <svCLI_ParsenExecute+0x11c>)
 800c7d0:	1d3b      	adds	r3, r7, #4
 800c7d2:	6812      	ldr	r2, [r2, #0]
 800c7d4:	4611      	mov	r1, r2
 800c7d6:	8019      	strh	r1, [r3, #0]
 800c7d8:	3302      	adds	r3, #2
 800c7da:	0c12      	lsrs	r2, r2, #16
 800c7dc:	701a      	strb	r2, [r3, #0]
		if (svCLI_ParseNumber(pLine, &nFirst, &pLine, delim)) {
 800c7de:	6938      	ldr	r0, [r7, #16]
 800c7e0:	1d3b      	adds	r3, r7, #4
 800c7e2:	f107 0210 	add.w	r2, r7, #16
 800c7e6:	f107 010c 	add.w	r1, r7, #12
 800c7ea:	f7ff ff2f 	bl	800c64c <svCLI_ParseNumber>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d010      	beq.n	800c816 <svCLI_ParsenExecute+0xd2>
			nCount++;
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	61fb      	str	r3, [r7, #28]
			if (svCLI_ParseNumber(pLine, &nSecond, &pLine, delim)) {
 800c7fa:	6938      	ldr	r0, [r7, #16]
 800c7fc:	1d3b      	adds	r3, r7, #4
 800c7fe:	f107 0210 	add.w	r2, r7, #16
 800c802:	f107 0108 	add.w	r1, r7, #8
 800c806:	f7ff ff21 	bl	800c64c <svCLI_ParseNumber>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d002      	beq.n	800c816 <svCLI_ParsenExecute+0xd2>
				nCount++;
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	3301      	adds	r3, #1
 800c814:	61fb      	str	r3, [r7, #28]
			}
		}
		pCLIEntry->func(pParseLine,nCount,nFirst,nSecond);
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	689c      	ldr	r4, [r3, #8]
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	69f9      	ldr	r1, [r7, #28]
 800c820:	6978      	ldr	r0, [r7, #20]
 800c822:	47a0      	blx	r4
 800c824:	e002      	b.n	800c82c <svCLI_ParsenExecute+0xe8>
	}
	else {
		svCLI_Printf("CLI command Not Found !! - Press Help\r\n");
 800c826:	480f      	ldr	r0, [pc, #60]	; (800c864 <svCLI_ParsenExecute+0x120>)
 800c828:	f7ff fc68 	bl	800c0fc <svCLI_Printf>
	}
}
 800c82c:	3724      	adds	r7, #36	; 0x24
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd90      	pop	{r4, r7, pc}
 800c832:	bf00      	nop
 800c834:	20000034 	.word	0x20000034
 800c838:	080102d8 	.word	0x080102d8
 800c83c:	20000b94 	.word	0x20000b94
 800c840:	080102e4 	.word	0x080102e4
 800c844:	20000038 	.word	0x20000038
 800c848:	08010280 	.word	0x08010280
 800c84c:	20000044 	.word	0x20000044
 800c850:	080102f4 	.word	0x080102f4
 800c854:	20000da0 	.word	0x20000da0
 800c858:	20000da4 	.word	0x20000da4
 800c85c:	0801030c 	.word	0x0801030c
 800c860:	0801034c 	.word	0x0801034c
 800c864:	08010324 	.word	0x08010324

0800c868 <svCLI_SetBypassFtn>:

// hellosmk 210225 added
void svCLI_SetBypassFtn(SVCLI_BYPASS_FUNC pfnBypass, char* szPrompt, char szExit, BOOL bEnter)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	603b      	str	r3, [r7, #0]
 800c874:	4613      	mov	r3, r2
 800c876:	71fb      	strb	r3, [r7, #7]
	if ((pfnBypass == NULL) || (szPrompt == NULL) || (szExit == NULL)) {
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d005      	beq.n	800c88a <svCLI_SetBypassFtn+0x22>
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d002      	beq.n	800c88a <svCLI_SetBypassFtn+0x22>
 800c884:	79fb      	ldrb	r3, [r7, #7]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d136      	bne.n	800c8f8 <svCLI_SetBypassFtn+0x90>
		if (svBypass == NULL) {
 800c88a:	4b28      	ldr	r3, [pc, #160]	; (800c92c <svCLI_SetBypassFtn+0xc4>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d048      	beq.n	800c924 <svCLI_SetBypassFtn+0xbc>
			// Nothing to do..
			return;
		}
		strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800c892:	4b27      	ldr	r3, [pc, #156]	; (800c930 <svCLI_SetBypassFtn+0xc8>)
 800c894:	4a27      	ldr	r2, [pc, #156]	; (800c934 <svCLI_SetBypassFtn+0xcc>)
 800c896:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c89a:	6018      	str	r0, [r3, #0]
 800c89c:	3304      	adds	r3, #4
 800c89e:	8019      	strh	r1, [r3, #0]
 800c8a0:	3302      	adds	r3, #2
 800c8a2:	0c0a      	lsrs	r2, r1, #16
 800c8a4:	701a      	strb	r2, [r3, #0]
		snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800c8a6:	4b24      	ldr	r3, [pc, #144]	; (800c938 <svCLI_SetBypassFtn+0xd0>)
 800c8a8:	2206      	movs	r2, #6
 800c8aa:	601a      	str	r2, [r3, #0]
		svBypass = NULL;
 800c8ac:	4b1f      	ldr	r3, [pc, #124]	; (800c92c <svCLI_SetBypassFtn+0xc4>)
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	601a      	str	r2, [r3, #0]

		svExit = NULL;
 800c8b2:	4b22      	ldr	r3, [pc, #136]	; (800c93c <svCLI_SetBypassFtn+0xd4>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	701a      	strb	r2, [r3, #0]
		sbEnter = FALSE;
 800c8b8:	4b21      	ldr	r3, [pc, #132]	; (800c940 <svCLI_SetBypassFtn+0xd8>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	601a      	str	r2, [r3, #0]
		
		scntCLIString = 0;	// Clean Up Char
 800c8be:	4b21      	ldr	r3, [pc, #132]	; (800c944 <svCLI_SetBypassFtn+0xdc>)
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	601a      	str	r2, [r3, #0]
		// clean up line string
		for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	617b      	str	r3, [r7, #20]
 800c8c8:	e007      	b.n	800c8da <svCLI_SetBypassFtn+0x72>
			szCLIString[i] = '\0';
 800c8ca:	4a1f      	ldr	r2, [pc, #124]	; (800c948 <svCLI_SetBypassFtn+0xe0>)
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	617b      	str	r3, [r7, #20]
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	2b7f      	cmp	r3, #127	; 0x7f
 800c8de:	ddf4      	ble.n	800c8ca <svCLI_SetBypassFtn+0x62>
		}
		svCLI_Printf("\r\nExit Bypass Mode\r\n%s", szCLI_PROMPT);
 800c8e0:	4913      	ldr	r1, [pc, #76]	; (800c930 <svCLI_SetBypassFtn+0xc8>)
 800c8e2:	481a      	ldr	r0, [pc, #104]	; (800c94c <svCLI_SetBypassFtn+0xe4>)
 800c8e4:	f7ff fc0a 	bl	800c0fc <svCLI_Printf>

		if (svCommit) {
 800c8e8:	4b19      	ldr	r3, [pc, #100]	; (800c950 <svCLI_SetBypassFtn+0xe8>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d01a      	beq.n	800c926 <svCLI_SetBypassFtn+0xbe>
			svCommit();
 800c8f0:	4b17      	ldr	r3, [pc, #92]	; (800c950 <svCLI_SetBypassFtn+0xe8>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4798      	blx	r3
		if (svCommit) {
 800c8f6:	e016      	b.n	800c926 <svCLI_SetBypassFtn+0xbe>
		}
	}
	else {
		strncpy(szCLI_PROMPT, szPrompt, sizeof(szCLI_PROMPT) - 1);
 800c8f8:	2209      	movs	r2, #9
 800c8fa:	68b9      	ldr	r1, [r7, #8]
 800c8fc:	480c      	ldr	r0, [pc, #48]	; (800c930 <svCLI_SetBypassFtn+0xc8>)
 800c8fe:	f003 f8a3 	bl	800fa48 <strncpy>
		snCLI_PROMPT_LENGTH = strlen(szCLI_PROMPT);
 800c902:	480b      	ldr	r0, [pc, #44]	; (800c930 <svCLI_SetBypassFtn+0xc8>)
 800c904:	f7f3 fcce 	bl	80002a4 <strlen>
 800c908:	4603      	mov	r3, r0
 800c90a:	461a      	mov	r2, r3
 800c90c:	4b0a      	ldr	r3, [pc, #40]	; (800c938 <svCLI_SetBypassFtn+0xd0>)
 800c90e:	601a      	str	r2, [r3, #0]
		svBypass = pfnBypass;
 800c910:	4a06      	ldr	r2, [pc, #24]	; (800c92c <svCLI_SetBypassFtn+0xc4>)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	6013      	str	r3, [r2, #0]
		svExit = szExit;
 800c916:	4a09      	ldr	r2, [pc, #36]	; (800c93c <svCLI_SetBypassFtn+0xd4>)
 800c918:	79fb      	ldrb	r3, [r7, #7]
 800c91a:	7013      	strb	r3, [r2, #0]
		sbEnter = bEnter;
 800c91c:	4a08      	ldr	r2, [pc, #32]	; (800c940 <svCLI_SetBypassFtn+0xd8>)
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	6013      	str	r3, [r2, #0]
 800c922:	e000      	b.n	800c926 <svCLI_SetBypassFtn+0xbe>
			return;
 800c924:	bf00      	nop
	}
}
 800c926:	3718      	adds	r7, #24
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	20000db4 	.word	0x20000db4
 800c930:	20000038 	.word	0x20000038
 800c934:	08010280 	.word	0x08010280
 800c938:	20000044 	.word	0x20000044
 800c93c:	20000db8 	.word	0x20000db8
 800c940:	20000dbc 	.word	0x20000dbc
 800c944:	20000d9c 	.word	0x20000d9c
 800c948:	20000b94 	.word	0x20000b94
 800c94c:	08010350 	.word	0x08010350
 800c950:	20000db0 	.word	0x20000db0

0800c954 <svCLI_Handler>:

void svCLI_Handler(void)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
	if (sbFirst) {
		svCLI_Printf("\r\n%s", szCLI_PROMPT);
		sbFirst = 0;
	}
#endif	
	if (svGetChar) {
 800c95a:	4b92      	ldr	r3, [pc, #584]	; (800cba4 <svCLI_Handler+0x250>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f000 8114 	beq.w	800cb8c <svCLI_Handler+0x238>
		char bSkipPrompt = 0;
 800c964:	2300      	movs	r3, #0
 800c966:	73fb      	strb	r3, [r7, #15]
		char szChar = svGetChar();
 800c968:	4b8e      	ldr	r3, [pc, #568]	; (800cba4 <svCLI_Handler+0x250>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4798      	blx	r3
 800c96e:	4603      	mov	r3, r0
 800c970:	71fb      	strb	r3, [r7, #7]
		if ((szChar != 0) && (szChar != '\n')) {
 800c972:	79fb      	ldrb	r3, [r7, #7]
 800c974:	2b00      	cmp	r3, #0
 800c976:	f000 8109 	beq.w	800cb8c <svCLI_Handler+0x238>
 800c97a:	79fb      	ldrb	r3, [r7, #7]
 800c97c:	2b0a      	cmp	r3, #10
 800c97e:	f000 8105 	beq.w	800cb8c <svCLI_Handler+0x238>
			if (szChar == '\r') {
 800c982:	79fb      	ldrb	r3, [r7, #7]
 800c984:	2b0d      	cmp	r3, #13
 800c986:	d154      	bne.n	800ca32 <svCLI_Handler+0xde>
				sbInEsc = 0;
 800c988:	4b87      	ldr	r3, [pc, #540]	; (800cba8 <svCLI_Handler+0x254>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	701a      	strb	r2, [r3, #0]
				svCLI_Printf("\r\n");
 800c98e:	4887      	ldr	r0, [pc, #540]	; (800cbac <svCLI_Handler+0x258>)
 800c990:	f7ff fbb4 	bl	800c0fc <svCLI_Printf>
				if (scntCLIString > 0) {
 800c994:	4b86      	ldr	r3, [pc, #536]	; (800cbb0 <svCLI_Handler+0x25c>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d031      	beq.n	800ca00 <svCLI_Handler+0xac>
					// Parse and Execute
					szCLIString[scntCLIString] = '\0';	// NULL Termination
 800c99c:	4b84      	ldr	r3, [pc, #528]	; (800cbb0 <svCLI_Handler+0x25c>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a84      	ldr	r2, [pc, #528]	; (800cbb4 <svCLI_Handler+0x260>)
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	54d1      	strb	r1, [r2, r3]
					// Save to history Buffer
					svCLIHandleHistory(CLI_HISTORY_ADD);					
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	f7ff fd6c 	bl	800c484 <svCLIHandleHistory>
					// Call Parser
					if (svBypass) {	// hellosmk 210225 added
 800c9ac:	4b82      	ldr	r3, [pc, #520]	; (800cbb8 <svCLI_Handler+0x264>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d011      	beq.n	800c9d8 <svCLI_Handler+0x84>
						bSkipPrompt = 1;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	73fb      	strb	r3, [r7, #15]
						szCLIString[scntCLIString] = '\r';
 800c9b8:	4b7d      	ldr	r3, [pc, #500]	; (800cbb0 <svCLI_Handler+0x25c>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a7d      	ldr	r2, [pc, #500]	; (800cbb4 <svCLI_Handler+0x260>)
 800c9be:	210d      	movs	r1, #13
 800c9c0:	54d1      	strb	r1, [r2, r3]
						szCLIString[scntCLIString+1] = '\0';
 800c9c2:	4b7b      	ldr	r3, [pc, #492]	; (800cbb0 <svCLI_Handler+0x25c>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	4a7a      	ldr	r2, [pc, #488]	; (800cbb4 <svCLI_Handler+0x260>)
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	54d1      	strb	r1, [r2, r3]
						svBypass(szCLIString);
 800c9ce:	4b7a      	ldr	r3, [pc, #488]	; (800cbb8 <svCLI_Handler+0x264>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4878      	ldr	r0, [pc, #480]	; (800cbb4 <svCLI_Handler+0x260>)
 800c9d4:	4798      	blx	r3
 800c9d6:	e001      	b.n	800c9dc <svCLI_Handler+0x88>
					}
					else {
						svCLI_ParsenExecute();
 800c9d8:	f7ff feb4 	bl	800c744 <svCLI_ParsenExecute>
					}
					scntCLIString = 0;	// Clean Up Char
 800c9dc:	4b74      	ldr	r3, [pc, #464]	; (800cbb0 <svCLI_Handler+0x25c>)
 800c9de:	2200      	movs	r2, #0
 800c9e0:	601a      	str	r2, [r3, #0]
					// clean up line string
					for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	60bb      	str	r3, [r7, #8]
 800c9e6:	e007      	b.n	800c9f8 <svCLI_Handler+0xa4>
						szCLIString[i] = '\0';
 800c9e8:	4a72      	ldr	r2, [pc, #456]	; (800cbb4 <svCLI_Handler+0x260>)
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	701a      	strb	r2, [r3, #0]
					for (int i=0;i<MAX_CLI_CHARS;i++) {
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	60bb      	str	r3, [r7, #8]
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	2b7f      	cmp	r3, #127	; 0x7f
 800c9fc:	ddf4      	ble.n	800c9e8 <svCLI_Handler+0x94>
 800c9fe:	e010      	b.n	800ca22 <svCLI_Handler+0xce>
					}
				}
				else if (sbEnter && svBypass) {
 800ca00:	4b6e      	ldr	r3, [pc, #440]	; (800cbbc <svCLI_Handler+0x268>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00c      	beq.n	800ca22 <svCLI_Handler+0xce>
 800ca08:	4b6b      	ldr	r3, [pc, #428]	; (800cbb8 <svCLI_Handler+0x264>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d008      	beq.n	800ca22 <svCLI_Handler+0xce>
					const char cszRet[2] = {'\n',0};
 800ca10:	230a      	movs	r3, #10
 800ca12:	80bb      	strh	r3, [r7, #4]
					svBypass((char*)cszRet);
 800ca14:	4b68      	ldr	r3, [pc, #416]	; (800cbb8 <svCLI_Handler+0x264>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	1d3a      	adds	r2, r7, #4
 800ca1a:	4610      	mov	r0, r2
 800ca1c:	4798      	blx	r3
					bSkipPrompt = 1;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	73fb      	strb	r3, [r7, #15]
				}
				
				if (bSkipPrompt == 0) {
 800ca22:	7bfb      	ldrb	r3, [r7, #15]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f040 80b1 	bne.w	800cb8c <svCLI_Handler+0x238>
					svCLI_Printf(szCLI_PROMPT);
 800ca2a:	4865      	ldr	r0, [pc, #404]	; (800cbc0 <svCLI_Handler+0x26c>)
 800ca2c:	f7ff fb66 	bl	800c0fc <svCLI_Printf>
 800ca30:	e0ac      	b.n	800cb8c <svCLI_Handler+0x238>
				}
			}
			else if (svBypass && (szChar == svExit)) {
 800ca32:	4b61      	ldr	r3, [pc, #388]	; (800cbb8 <svCLI_Handler+0x264>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d019      	beq.n	800ca6e <svCLI_Handler+0x11a>
 800ca3a:	4b62      	ldr	r3, [pc, #392]	; (800cbc4 <svCLI_Handler+0x270>)
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	79fa      	ldrb	r2, [r7, #7]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d114      	bne.n	800ca6e <svCLI_Handler+0x11a>
				// Exit Bypass mode
				if (0x11 == svExit) {
 800ca44:	4b5f      	ldr	r3, [pc, #380]	; (800cbc4 <svCLI_Handler+0x270>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	2b11      	cmp	r3, #17
 800ca4a:	d102      	bne.n	800ca52 <svCLI_Handler+0xfe>
					svCLI_Printf("^Q");
 800ca4c:	485e      	ldr	r0, [pc, #376]	; (800cbc8 <svCLI_Handler+0x274>)
 800ca4e:	f7ff fb55 	bl	800c0fc <svCLI_Printf>
				}
				svBypass(NULL);	// Notify Exit !!
 800ca52:	4b59      	ldr	r3, [pc, #356]	; (800cbb8 <svCLI_Handler+0x264>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2000      	movs	r0, #0
 800ca58:	4798      	blx	r3
				svCLI_SetBypassFtn(NULL,NULL,NULL,FALSE);
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	2100      	movs	r1, #0
 800ca60:	2000      	movs	r0, #0
 800ca62:	f7ff ff01 	bl	800c868 <svCLI_SetBypassFtn>
				sbInEsc = 0;
 800ca66:	4b50      	ldr	r3, [pc, #320]	; (800cba8 <svCLI_Handler+0x254>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	701a      	strb	r2, [r3, #0]
 800ca6c:	e08e      	b.n	800cb8c <svCLI_Handler+0x238>
			}
			else if (svBypass && (szChar == 0X1A)) {		// Ctrl+Z
 800ca6e:	4b52      	ldr	r3, [pc, #328]	; (800cbb8 <svCLI_Handler+0x264>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d014      	beq.n	800caa0 <svCLI_Handler+0x14c>
 800ca76:	79fb      	ldrb	r3, [r7, #7]
 800ca78:	2b1a      	cmp	r3, #26
 800ca7a:	d111      	bne.n	800caa0 <svCLI_Handler+0x14c>
				bSkipPrompt = 1;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	73fb      	strb	r3, [r7, #15]
				szCLIString[scntCLIString] = 0X1A;	//Ctrl+z
 800ca80:	4b4b      	ldr	r3, [pc, #300]	; (800cbb0 <svCLI_Handler+0x25c>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a4b      	ldr	r2, [pc, #300]	; (800cbb4 <svCLI_Handler+0x260>)
 800ca86:	211a      	movs	r1, #26
 800ca88:	54d1      	strb	r1, [r2, r3]
				szCLIString[scntCLIString+1] = '\0';	// NULL Termination
 800ca8a:	4b49      	ldr	r3, [pc, #292]	; (800cbb0 <svCLI_Handler+0x25c>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	4a48      	ldr	r2, [pc, #288]	; (800cbb4 <svCLI_Handler+0x260>)
 800ca92:	2100      	movs	r1, #0
 800ca94:	54d1      	strb	r1, [r2, r3]
				svBypass(szCLIString);
 800ca96:	4b48      	ldr	r3, [pc, #288]	; (800cbb8 <svCLI_Handler+0x264>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4846      	ldr	r0, [pc, #280]	; (800cbb4 <svCLI_Handler+0x260>)
 800ca9c:	4798      	blx	r3
 800ca9e:	e075      	b.n	800cb8c <svCLI_Handler+0x238>
			}
			else {
				if (szChar == '\b')	{ // Back space
 800caa0:	79fb      	ldrb	r3, [r7, #7]
 800caa2:	2b08      	cmp	r3, #8
 800caa4:	d118      	bne.n	800cad8 <svCLI_Handler+0x184>
					sbInEsc = 0;
 800caa6:	4b40      	ldr	r3, [pc, #256]	; (800cba8 <svCLI_Handler+0x254>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	701a      	strb	r2, [r3, #0]
					if (scntCLIString > 0) {
 800caac:	4b40      	ldr	r3, [pc, #256]	; (800cbb0 <svCLI_Handler+0x25c>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d06b      	beq.n	800cb8c <svCLI_Handler+0x238>
						_svClearLine();
 800cab4:	f7ff fcb0 	bl	800c418 <_svClearLine>
						scntCLIString--;
 800cab8:	4b3d      	ldr	r3, [pc, #244]	; (800cbb0 <svCLI_Handler+0x25c>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	3b01      	subs	r3, #1
 800cabe:	4a3c      	ldr	r2, [pc, #240]	; (800cbb0 <svCLI_Handler+0x25c>)
 800cac0:	6013      	str	r3, [r2, #0]
						szCLIString[scntCLIString] = '\0';	// NULL Termination
 800cac2:	4b3b      	ldr	r3, [pc, #236]	; (800cbb0 <svCLI_Handler+0x25c>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a3b      	ldr	r2, [pc, #236]	; (800cbb4 <svCLI_Handler+0x260>)
 800cac8:	2100      	movs	r1, #0
 800caca:	54d1      	strb	r1, [r2, r3]
						svCLI_Printf("%s%s", szCLI_PROMPT, szCLIString);
 800cacc:	4a39      	ldr	r2, [pc, #228]	; (800cbb4 <svCLI_Handler+0x260>)
 800cace:	493c      	ldr	r1, [pc, #240]	; (800cbc0 <svCLI_Handler+0x26c>)
 800cad0:	483e      	ldr	r0, [pc, #248]	; (800cbcc <svCLI_Handler+0x278>)
 800cad2:	f7ff fb13 	bl	800c0fc <svCLI_Printf>
 800cad6:	e059      	b.n	800cb8c <svCLI_Handler+0x238>
					}
				}
				else if (szChar == '[') {	// ESC sequence started
 800cad8:	79fb      	ldrb	r3, [r7, #7]
 800cada:	2b5b      	cmp	r3, #91	; 0x5b
 800cadc:	d103      	bne.n	800cae6 <svCLI_Handler+0x192>
					sbInEsc = 1;
 800cade:	4b32      	ldr	r3, [pc, #200]	; (800cba8 <svCLI_Handler+0x254>)
 800cae0:	2201      	movs	r2, #1
 800cae2:	701a      	strb	r2, [r3, #0]
 800cae4:	e052      	b.n	800cb8c <svCLI_Handler+0x238>
				}
				else if (_isPrintable(szChar)) {
 800cae6:	79fb      	ldrb	r3, [r7, #7]
 800cae8:	4618      	mov	r0, r3
 800caea:	f7ff fbe5 	bl	800c2b8 <_isPrintable>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d04b      	beq.n	800cb8c <svCLI_Handler+0x238>
					if (sbInEsc) {
 800caf4:	4b2c      	ldr	r3, [pc, #176]	; (800cba8 <svCLI_Handler+0x254>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d036      	beq.n	800cb6a <svCLI_Handler+0x216>
						sbInEsc = 0;
 800cafc:	4b2a      	ldr	r3, [pc, #168]	; (800cba8 <svCLI_Handler+0x254>)
 800cafe:	2200      	movs	r2, #0
 800cb00:	701a      	strb	r2, [r3, #0]
						if (snCLIHistoryCount > 0) {
 800cb02:	4b33      	ldr	r3, [pc, #204]	; (800cbd0 <svCLI_Handler+0x27c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	dd27      	ble.n	800cb5a <svCLI_Handler+0x206>
							switch (szChar) {
 800cb0a:	79fb      	ldrb	r3, [r7, #7]
 800cb0c:	2b41      	cmp	r3, #65	; 0x41
 800cb0e:	d002      	beq.n	800cb16 <svCLI_Handler+0x1c2>
 800cb10:	2b42      	cmp	r3, #66	; 0x42
 800cb12:	d011      	beq.n	800cb38 <svCLI_Handler+0x1e4>
									// echo back
									scntCLIString = svCLI_Printf("%s", szCLIString);
									// echo back
									break;
								default:	// Do Nothing
									break;
 800cb14:	e021      	b.n	800cb5a <svCLI_Handler+0x206>
									svCLIHandleHistory(CLI_HISTORY_PREV);
 800cb16:	2002      	movs	r0, #2
 800cb18:	f7ff fcb4 	bl	800c484 <svCLIHandleHistory>
									_svClearLine();
 800cb1c:	f7ff fc7c 	bl	800c418 <_svClearLine>
									svCLI_Printf(szCLI_PROMPT);
 800cb20:	4827      	ldr	r0, [pc, #156]	; (800cbc0 <svCLI_Handler+0x26c>)
 800cb22:	f7ff faeb 	bl	800c0fc <svCLI_Printf>
									scntCLIString = svCLI_Printf("%s", szCLIString);
 800cb26:	4923      	ldr	r1, [pc, #140]	; (800cbb4 <svCLI_Handler+0x260>)
 800cb28:	482a      	ldr	r0, [pc, #168]	; (800cbd4 <svCLI_Handler+0x280>)
 800cb2a:	f7ff fae7 	bl	800c0fc <svCLI_Printf>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	461a      	mov	r2, r3
 800cb32:	4b1f      	ldr	r3, [pc, #124]	; (800cbb0 <svCLI_Handler+0x25c>)
 800cb34:	601a      	str	r2, [r3, #0]
									break;
 800cb36:	e010      	b.n	800cb5a <svCLI_Handler+0x206>
									svCLIHandleHistory(CLI_HISTORY_NEXT);
 800cb38:	2001      	movs	r0, #1
 800cb3a:	f7ff fca3 	bl	800c484 <svCLIHandleHistory>
									_svClearLine();
 800cb3e:	f7ff fc6b 	bl	800c418 <_svClearLine>
									svCLI_Printf(szCLI_PROMPT);
 800cb42:	481f      	ldr	r0, [pc, #124]	; (800cbc0 <svCLI_Handler+0x26c>)
 800cb44:	f7ff fada 	bl	800c0fc <svCLI_Printf>
									scntCLIString = svCLI_Printf("%s", szCLIString);
 800cb48:	491a      	ldr	r1, [pc, #104]	; (800cbb4 <svCLI_Handler+0x260>)
 800cb4a:	4822      	ldr	r0, [pc, #136]	; (800cbd4 <svCLI_Handler+0x280>)
 800cb4c:	f7ff fad6 	bl	800c0fc <svCLI_Printf>
 800cb50:	4603      	mov	r3, r0
 800cb52:	461a      	mov	r2, r3
 800cb54:	4b16      	ldr	r3, [pc, #88]	; (800cbb0 <svCLI_Handler+0x25c>)
 800cb56:	601a      	str	r2, [r3, #0]
									break;
 800cb58:	bf00      	nop
							}
						}
						if (svCommit) {
 800cb5a:	4b1f      	ldr	r3, [pc, #124]	; (800cbd8 <svCLI_Handler+0x284>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d01c      	beq.n	800cb9c <svCLI_Handler+0x248>
							svCommit();
 800cb62:	4b1d      	ldr	r3, [pc, #116]	; (800cbd8 <svCLI_Handler+0x284>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4798      	blx	r3
						}
						return;
 800cb68:	e018      	b.n	800cb9c <svCLI_Handler+0x248>
					}
					if (scntCLIString < (MAX_CLI_CHARS-1)) {
 800cb6a:	4b11      	ldr	r3, [pc, #68]	; (800cbb0 <svCLI_Handler+0x25c>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b7e      	cmp	r3, #126	; 0x7e
 800cb70:	d80c      	bhi.n	800cb8c <svCLI_Handler+0x238>
						// echo back
						svPutChar(szChar);
 800cb72:	4b1a      	ldr	r3, [pc, #104]	; (800cbdc <svCLI_Handler+0x288>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	79fa      	ldrb	r2, [r7, #7]
 800cb78:	4610      	mov	r0, r2
 800cb7a:	4798      	blx	r3
						szCLIString[scntCLIString++] = szChar;
 800cb7c:	4b0c      	ldr	r3, [pc, #48]	; (800cbb0 <svCLI_Handler+0x25c>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	1c5a      	adds	r2, r3, #1
 800cb82:	490b      	ldr	r1, [pc, #44]	; (800cbb0 <svCLI_Handler+0x25c>)
 800cb84:	600a      	str	r2, [r1, #0]
 800cb86:	490b      	ldr	r1, [pc, #44]	; (800cbb4 <svCLI_Handler+0x260>)
 800cb88:	79fa      	ldrb	r2, [r7, #7]
 800cb8a:	54ca      	strb	r2, [r1, r3]
					}
				}
			}
		}
	}
	if (svCommit) {
 800cb8c:	4b12      	ldr	r3, [pc, #72]	; (800cbd8 <svCLI_Handler+0x284>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d004      	beq.n	800cb9e <svCLI_Handler+0x24a>
		svCommit();
 800cb94:	4b10      	ldr	r3, [pc, #64]	; (800cbd8 <svCLI_Handler+0x284>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4798      	blx	r3
 800cb9a:	e000      	b.n	800cb9e <svCLI_Handler+0x24a>
						return;
 800cb9c:	bf00      	nop
	}
}
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	20000da8 	.word	0x20000da8
 800cba8:	20000ec0 	.word	0x20000ec0
 800cbac:	08010294 	.word	0x08010294
 800cbb0:	20000d9c 	.word	0x20000d9c
 800cbb4:	20000b94 	.word	0x20000b94
 800cbb8:	20000db4 	.word	0x20000db4
 800cbbc:	20000dbc 	.word	0x20000dbc
 800cbc0:	20000038 	.word	0x20000038
 800cbc4:	20000db8 	.word	0x20000db8
 800cbc8:	08010368 	.word	0x08010368
 800cbcc:	0801036c 	.word	0x0801036c
 800cbd0:	20000d94 	.word	0x20000d94
 800cbd4:	08010374 	.word	0x08010374
 800cbd8:	20000db0 	.word	0x20000db0
 800cbdc:	20000dac 	.word	0x20000dac

0800cbe0 <CLI_Help>:
// for CLI
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (HELP,"Help","Help : Show menu",CLI_Help);

static void CLI_Help(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
 800cbec:	603b      	str	r3, [r7, #0]
	svCLI_ShowHelp();
 800cbee:	f7ff fab1 	bl	800c154 <svCLI_ShowHelp>
}
 800cbf2:	bf00      	nop
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <svRingBuffer_GetCount>:
{
	return rb->size;
}

unsigned int svRingBuffer_GetCount(const svRingBuffer_t *rb)
{
 800cbfa:	b480      	push	{r7}
 800cbfc:	b085      	sub	sp, #20
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
	unsigned char *h, *t;
	// use temporal value to avoid corruption in between context-switching / Interrupt 
	h = rb->head;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	60fb      	str	r3, [r7, #12]
	t = rb->tail;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	60bb      	str	r3, [r7, #8]
	if (h >= t)
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d303      	bcc.n	800cc1e <svRingBuffer_GetCount+0x24>
	  return (h - t);
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	e009      	b.n	800cc32 <svRingBuffer_GetCount+0x38>
	else
	  return (unsigned int)(rb->bufend - t + h - rb->buf);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	68da      	ldr	r2, [r3, #12]
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	1ad3      	subs	r3, r2, r3
 800cc26:	461a      	mov	r2, r3
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	441a      	add	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	1ad3      	subs	r3, r2, r3
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <svRingBuffer_Reset>:

void svRingBuffer_Reset(svRingBuffer_t *rb)
{
 800cc3e:	b480      	push	{r7}
 800cc40:	b083      	sub	sp, #12
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
	rb->head = rb->tail = rb->buf;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681a      	ldr	r2, [r3, #0]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	609a      	str	r2, [r3, #8]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	689a      	ldr	r2, [r3, #8]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	605a      	str	r2, [r3, #4]
	rb->fOverflow = 0;		// Clear Flag
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	615a      	str	r2, [r3, #20]
	rb->fTurnAround = 0;	// Clear Flag
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	619a      	str	r2, [r3, #24]
}
 800cc62:	bf00      	nop
 800cc64:	370c      	adds	r7, #12
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr

0800cc6e <svRingBuffer_Push>:
{
	rb->fOverflow = 0;
}

int svRingBuffer_Push(svRingBuffer_t *rb, unsigned char data)
{
 800cc6e:	b480      	push	{r7}
 800cc70:	b085      	sub	sp, #20
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	460b      	mov	r3, r1
 800cc78:	70fb      	strb	r3, [r7, #3]
	int nRet;
	nRet = 0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	60fb      	str	r3, [r7, #12]
	*(rb->head) = data;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	78fa      	ldrb	r2, [r7, #3]
 800cc84:	701a      	strb	r2, [r3, #0]
	rb->head++;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	1c5a      	adds	r2, r3, #1
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	605a      	str	r2, [r3, #4]
	if (rb->head == rb->bufend) {	// Wrap around
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685a      	ldr	r2, [r3, #4]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d109      	bne.n	800ccb0 <svRingBuffer_Push+0x42>
	  rb->head = rb->buf;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	605a      	str	r2, [r3, #4]
		rb->fTurnAround = 1;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	619a      	str	r2, [r3, #24]
		nRet = -1;
 800ccaa:	f04f 33ff 	mov.w	r3, #4294967295
 800ccae:	60fb      	str	r3, [r7, #12]
		// return -1;	// -- hellosmk 210512 to check overflow
	}
	if (rb->head == rb->tail) {		// Over flowed
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	685a      	ldr	r2, [r3, #4]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d105      	bne.n	800ccc8 <svRingBuffer_Push+0x5a>
	  rb->fOverflow = 1;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	615a      	str	r2, [r3, #20]
		nRet = -2;
 800ccc2:	f06f 0301 	mvn.w	r3, #1
 800ccc6:	60fb      	str	r3, [r7, #12]
	}
	return nRet;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3714      	adds	r7, #20
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <svRingBuffer_Pop>:

unsigned char svRingBuffer_Pop(svRingBuffer_t *rb)
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	b085      	sub	sp, #20
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
	unsigned char byData;
	byData = *(rb->tail);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	73fb      	strb	r3, [r7, #15]
	rb->tail++;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	1c5a      	adds	r2, r3, #1
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	609a      	str	r2, [r3, #8]
	if (rb->tail == rb->bufend)	// Wrap around
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	689a      	ldr	r2, [r3, #8]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d103      	bne.n	800cd04 <svRingBuffer_Pop+0x2e>
	  rb->tail = rb->buf;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	609a      	str	r2, [r3, #8]
	return byData;
 800cd04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3714      	adds	r7, #20
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr

0800cd12 <svTaskTimer_InitTimers>:

// Global variables
// Static Variables
// Functions
void svTaskTimer_InitTimers(svTaskTimer_t* pTaskTimer, SVUTIL_TIMETICK_FUNC_t pfnTimeTick)
{
 800cd12:	b480      	push	{r7}
 800cd14:	b085      	sub	sp, #20
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
 800cd1a:	6039      	str	r1, [r7, #0]
	// Note. Argument Integrity Not Check !!!
	pTaskTimer->pfnTimeTick = pfnTimeTick;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	683a      	ldr	r2, [r7, #0]
 800cd20:	605a      	str	r2, [r3, #4]
	for (int i=SV_TIMER_1;i<pTaskTimer->uNumOfTimers;i++) {
 800cd22:	2300      	movs	r3, #0
 800cd24:	60fb      	str	r3, [r7, #12]
 800cd26:	e03f      	b.n	800cda8 <svTaskTimer_InitTimers+0x96>
		pTaskTimer->psvUtilTimer[i].dwDuration = 0;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6899      	ldr	r1, [r3, #8]
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	4613      	mov	r3, r2
 800cd30:	005b      	lsls	r3, r3, #1
 800cd32:	4413      	add	r3, r2
 800cd34:	00db      	lsls	r3, r3, #3
 800cd36:	440b      	add	r3, r1
 800cd38:	2200      	movs	r2, #0
 800cd3a:	601a      	str	r2, [r3, #0]
		pTaskTimer->psvUtilTimer[i].dwTimeOut = 0;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6899      	ldr	r1, [r3, #8]
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	4613      	mov	r3, r2
 800cd44:	005b      	lsls	r3, r3, #1
 800cd46:	4413      	add	r3, r2
 800cd48:	00db      	lsls	r3, r3, #3
 800cd4a:	440b      	add	r3, r1
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	605a      	str	r2, [r3, #4]
		pTaskTimer->psvUtilTimer[i].bLive = FALSE;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6899      	ldr	r1, [r3, #8]
 800cd54:	68fa      	ldr	r2, [r7, #12]
 800cd56:	4613      	mov	r3, r2
 800cd58:	005b      	lsls	r3, r3, #1
 800cd5a:	4413      	add	r3, r2
 800cd5c:	00db      	lsls	r3, r3, #3
 800cd5e:	440b      	add	r3, r1
 800cd60:	2200      	movs	r2, #0
 800cd62:	615a      	str	r2, [r3, #20]
		pTaskTimer->psvUtilTimer[i].dwWrapAroundTick = 0;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6899      	ldr	r1, [r3, #8]
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	005b      	lsls	r3, r3, #1
 800cd6e:	4413      	add	r3, r2
 800cd70:	00db      	lsls	r3, r3, #3
 800cd72:	440b      	add	r3, r1
 800cd74:	2200      	movs	r2, #0
 800cd76:	609a      	str	r2, [r3, #8]
		pTaskTimer->psvUtilTimer[i].eTimerID = (svTimer_e)i;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6899      	ldr	r1, [r3, #8]
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	005b      	lsls	r3, r3, #1
 800cd82:	4413      	add	r3, r2
 800cd84:	00db      	lsls	r3, r3, #3
 800cd86:	440b      	add	r3, r1
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	b2d2      	uxtb	r2, r2
 800cd8c:	741a      	strb	r2, [r3, #16]
		pTaskTimer->psvUtilTimer[i].pfnCallback = 0;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6899      	ldr	r1, [r3, #8]
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	4613      	mov	r3, r2
 800cd96:	005b      	lsls	r3, r3, #1
 800cd98:	4413      	add	r3, r2
 800cd9a:	00db      	lsls	r3, r3, #3
 800cd9c:	440b      	add	r3, r1
 800cd9e:	2200      	movs	r2, #0
 800cda0:	60da      	str	r2, [r3, #12]
	for (int i=SV_TIMER_1;i<pTaskTimer->uNumOfTimers;i++) {
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	3301      	adds	r3, #1
 800cda6:	60fb      	str	r3, [r7, #12]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d8ba      	bhi.n	800cd28 <svTaskTimer_InitTimers+0x16>
	}
}
 800cdb2:	bf00      	nop
 800cdb4:	bf00      	nop
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <svTaskTimer_SetTimer>:
		pTaskTimer->psvUtilTimer[i].bLive = FALSE;
	}
}

BOOL svTaskTimer_SetTimer(svTaskTimer_t* pTaskTimer, svTimer_e eTimerID, unsigned int dwDuration, svTimerSet_e eTimerSet, pfnUtilTimerCallback pfnCallback)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b086      	sub	sp, #24
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	607a      	str	r2, [r7, #4]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	460b      	mov	r3, r1
 800cdce:	72fb      	strb	r3, [r7, #11]
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	72bb      	strb	r3, [r7, #10]
	if (dwDuration == 0) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d106      	bne.n	800cde8 <svTaskTimer_SetTimer+0x28>
		return svTaskTimer_KillTimer(pTaskTimer, eTimerID);
 800cdda:	7afb      	ldrb	r3, [r7, #11]
 800cddc:	4619      	mov	r1, r3
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f000 f86b 	bl	800ceba <svTaskTimer_KillTimer>
 800cde4:	4603      	mov	r3, r0
 800cde6:	e064      	b.n	800ceb2 <svTaskTimer_SetTimer+0xf2>
	}
	if (eTimerID >= pTaskTimer->uNumOfTimers) {
 800cde8:	7afa      	ldrb	r2, [r7, #11]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d301      	bcc.n	800cdf6 <svTaskTimer_SetTimer+0x36>
		return FALSE;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	e05d      	b.n	800ceb2 <svTaskTimer_SetTimer+0xf2>
	}
	// Check Wrap around !!!
	unsigned int dwCurrentTick = pTaskTimer->pfnTimeTick();
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	4798      	blx	r3
 800cdfc:	6178      	str	r0, [r7, #20]
	pTaskTimer->psvUtilTimer[eTimerID].dwTimeOut = dwCurrentTick + dwDuration;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6899      	ldr	r1, [r3, #8]
 800ce02:	7afa      	ldrb	r2, [r7, #11]
 800ce04:	4613      	mov	r3, r2
 800ce06:	005b      	lsls	r3, r3, #1
 800ce08:	4413      	add	r3, r2
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	440b      	add	r3, r1
 800ce0e:	6979      	ldr	r1, [r7, #20]
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	440a      	add	r2, r1
 800ce14:	605a      	str	r2, [r3, #4]

	if (pTaskTimer->psvUtilTimer[eTimerID].dwTimeOut < dwCurrentTick) {	// Wrap around
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6899      	ldr	r1, [r3, #8]
 800ce1a:	7afa      	ldrb	r2, [r7, #11]
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	005b      	lsls	r3, r3, #1
 800ce20:	4413      	add	r3, r2
 800ce22:	00db      	lsls	r3, r3, #3
 800ce24:	440b      	add	r3, r1
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	697a      	ldr	r2, [r7, #20]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d90a      	bls.n	800ce44 <svTaskTimer_SetTimer+0x84>
			pTaskTimer->psvUtilTimer[eTimerID].dwWrapAroundTick = dwCurrentTick;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	6899      	ldr	r1, [r3, #8]
 800ce32:	7afa      	ldrb	r2, [r7, #11]
 800ce34:	4613      	mov	r3, r2
 800ce36:	005b      	lsls	r3, r3, #1
 800ce38:	4413      	add	r3, r2
 800ce3a:	00db      	lsls	r3, r3, #3
 800ce3c:	440b      	add	r3, r1
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	609a      	str	r2, [r3, #8]
 800ce42:	e009      	b.n	800ce58 <svTaskTimer_SetTimer+0x98>
	}
	else {
			pTaskTimer->psvUtilTimer[eTimerID].dwWrapAroundTick = 0;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	6899      	ldr	r1, [r3, #8]
 800ce48:	7afa      	ldrb	r2, [r7, #11]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	4413      	add	r3, r2
 800ce50:	00db      	lsls	r3, r3, #3
 800ce52:	440b      	add	r3, r1
 800ce54:	2200      	movs	r2, #0
 800ce56:	609a      	str	r2, [r3, #8]
	}
	if (eTimerSet == SV_TIMER_REPEAT) {
 800ce58:	7abb      	ldrb	r3, [r7, #10]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d10a      	bne.n	800ce74 <svTaskTimer_SetTimer+0xb4>
		pTaskTimer->psvUtilTimer[eTimerID].dwDuration = dwDuration;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	6899      	ldr	r1, [r3, #8]
 800ce62:	7afa      	ldrb	r2, [r7, #11]
 800ce64:	4613      	mov	r3, r2
 800ce66:	005b      	lsls	r3, r3, #1
 800ce68:	4413      	add	r3, r2
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	440b      	add	r3, r1
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	601a      	str	r2, [r3, #0]
 800ce72:	e009      	b.n	800ce88 <svTaskTimer_SetTimer+0xc8>
	}
	else {
		pTaskTimer->psvUtilTimer[eTimerID].dwDuration = 0;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6899      	ldr	r1, [r3, #8]
 800ce78:	7afa      	ldrb	r2, [r7, #11]
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	005b      	lsls	r3, r3, #1
 800ce7e:	4413      	add	r3, r2
 800ce80:	00db      	lsls	r3, r3, #3
 800ce82:	440b      	add	r3, r1
 800ce84:	2200      	movs	r2, #0
 800ce86:	601a      	str	r2, [r3, #0]
	}
	pTaskTimer->psvUtilTimer[eTimerID].pfnCallback = pfnCallback;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6899      	ldr	r1, [r3, #8]
 800ce8c:	7afa      	ldrb	r2, [r7, #11]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	005b      	lsls	r3, r3, #1
 800ce92:	4413      	add	r3, r2
 800ce94:	00db      	lsls	r3, r3, #3
 800ce96:	440b      	add	r3, r1
 800ce98:	6a3a      	ldr	r2, [r7, #32]
 800ce9a:	60da      	str	r2, [r3, #12]
	pTaskTimer->psvUtilTimer[eTimerID].bLive = TRUE;		// Set Running
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6899      	ldr	r1, [r3, #8]
 800cea0:	7afa      	ldrb	r2, [r7, #11]
 800cea2:	4613      	mov	r3, r2
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	4413      	add	r3, r2
 800cea8:	00db      	lsls	r3, r3, #3
 800ceaa:	440b      	add	r3, r1
 800ceac:	2201      	movs	r2, #1
 800ceae:	615a      	str	r2, [r3, #20]
	return TRUE;
 800ceb0:	2301      	movs	r3, #1
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3718      	adds	r7, #24
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <svTaskTimer_KillTimer>:

BOOL svTaskTimer_KillTimer(svTaskTimer_t* pTaskTimer, svTimer_e eTimerID)
{
 800ceba:	b480      	push	{r7}
 800cebc:	b083      	sub	sp, #12
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
 800cec2:	460b      	mov	r3, r1
 800cec4:	70fb      	strb	r3, [r7, #3]
	if (eTimerID >= pTaskTimer->uNumOfTimers) {
 800cec6:	78fa      	ldrb	r2, [r7, #3]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d301      	bcc.n	800ced4 <svTaskTimer_KillTimer+0x1a>
		return FALSE;
 800ced0:	2300      	movs	r3, #0
 800ced2:	e00a      	b.n	800ceea <svTaskTimer_KillTimer+0x30>
	}
	pTaskTimer->psvUtilTimer[eTimerID].bLive = FALSE;		// Set Non-Running
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6899      	ldr	r1, [r3, #8]
 800ced8:	78fa      	ldrb	r2, [r7, #3]
 800ceda:	4613      	mov	r3, r2
 800cedc:	005b      	lsls	r3, r3, #1
 800cede:	4413      	add	r3, r2
 800cee0:	00db      	lsls	r3, r3, #3
 800cee2:	440b      	add	r3, r1
 800cee4:	2200      	movs	r2, #0
 800cee6:	615a      	str	r2, [r3, #20]
	return TRUE;
 800cee8:	2301      	movs	r3, #1
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	370c      	adds	r7, #12
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr

0800cef6 <svTaskTimer_CheckTimers>:
	}
	return FALSE;
}

BOOL svTaskTimer_CheckTimers(svTaskTimer_t* pTaskTimer)
{
 800cef6:	b590      	push	{r4, r7, lr}
 800cef8:	b087      	sub	sp, #28
 800cefa:	af02      	add	r7, sp, #8
 800cefc:	6078      	str	r0, [r7, #4]
	unsigned int dwCurrentTick = pTaskTimer->pfnTimeTick();
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	4798      	blx	r3
 800cf04:	60b8      	str	r0, [r7, #8]
	for (int i=SV_TIMER_1;i<pTaskTimer->uNumOfTimers;i++) {
 800cf06:	2300      	movs	r3, #0
 800cf08:	60fb      	str	r3, [r7, #12]
 800cf0a:	e07b      	b.n	800d004 <svTaskTimer_CheckTimers+0x10e>
		// Check Running Timer
		if (pTaskTimer->psvUtilTimer[i].bLive) {
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6899      	ldr	r1, [r3, #8]
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	4613      	mov	r3, r2
 800cf14:	005b      	lsls	r3, r3, #1
 800cf16:	4413      	add	r3, r2
 800cf18:	00db      	lsls	r3, r3, #3
 800cf1a:	440b      	add	r3, r1
 800cf1c:	695b      	ldr	r3, [r3, #20]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d06d      	beq.n	800cffe <svTaskTimer_CheckTimers+0x108>
			if (pTaskTimer->psvUtilTimer[i].dwWrapAroundTick > 0) {	// Wrap around
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6899      	ldr	r1, [r3, #8]
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	4613      	mov	r3, r2
 800cf2a:	005b      	lsls	r3, r3, #1
 800cf2c:	4413      	add	r3, r2
 800cf2e:	00db      	lsls	r3, r3, #3
 800cf30:	440b      	add	r3, r1
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d00b      	beq.n	800cf50 <svTaskTimer_CheckTimers+0x5a>
				if (dwCurrentTick >= pTaskTimer->psvUtilTimer[i].dwWrapAroundTick)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6899      	ldr	r1, [r3, #8]
 800cf3c:	68fa      	ldr	r2, [r7, #12]
 800cf3e:	4613      	mov	r3, r2
 800cf40:	005b      	lsls	r3, r3, #1
 800cf42:	4413      	add	r3, r2
 800cf44:	00db      	lsls	r3, r3, #3
 800cf46:	440b      	add	r3, r1
 800cf48:	689b      	ldr	r3, [r3, #8]
 800cf4a:	68ba      	ldr	r2, [r7, #8]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d255      	bcs.n	800cffc <svTaskTimer_CheckTimers+0x106>
					continue;
			}
			if (pTaskTimer->psvUtilTimer[i].dwTimeOut <= dwCurrentTick) {	// Expired !!!
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6899      	ldr	r1, [r3, #8]
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	4613      	mov	r3, r2
 800cf58:	005b      	lsls	r3, r3, #1
 800cf5a:	4413      	add	r3, r2
 800cf5c:	00db      	lsls	r3, r3, #3
 800cf5e:	440b      	add	r3, r1
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d34a      	bcc.n	800cffe <svTaskTimer_CheckTimers+0x108>
				if (pTaskTimer->psvUtilTimer[i].dwDuration > 0) {	// Repeat timer
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6899      	ldr	r1, [r3, #8]
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	4413      	add	r3, r2
 800cf74:	00db      	lsls	r3, r3, #3
 800cf76:	440b      	add	r3, r1
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d01b      	beq.n	800cfb6 <svTaskTimer_CheckTimers+0xc0>
					svTaskTimer_SetTimer(pTaskTimer, (svTimer_e)i, pTaskTimer->psvUtilTimer[i].dwDuration, SV_TIMER_REPEAT, pTaskTimer->psvUtilTimer[i].pfnCallback); 				
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	b2d8      	uxtb	r0, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6899      	ldr	r1, [r3, #8]
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	005b      	lsls	r3, r3, #1
 800cf8c:	4413      	add	r3, r2
 800cf8e:	00db      	lsls	r3, r3, #3
 800cf90:	440b      	add	r3, r1
 800cf92:	681c      	ldr	r4, [r3, #0]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6899      	ldr	r1, [r3, #8]
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	005b      	lsls	r3, r3, #1
 800cf9e:	4413      	add	r3, r2
 800cfa0:	00db      	lsls	r3, r3, #3
 800cfa2:	440b      	add	r3, r1
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	9300      	str	r3, [sp, #0]
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	4622      	mov	r2, r4
 800cfac:	4601      	mov	r1, r0
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7ff ff06 	bl	800cdc0 <svTaskTimer_SetTimer>
 800cfb4:	e009      	b.n	800cfca <svTaskTimer_CheckTimers+0xd4>
				}
				else {	// Stop Timer
					pTaskTimer->psvUtilTimer[i].bLive = FALSE;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6899      	ldr	r1, [r3, #8]
 800cfba:	68fa      	ldr	r2, [r7, #12]
 800cfbc:	4613      	mov	r3, r2
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	4413      	add	r3, r2
 800cfc2:	00db      	lsls	r3, r3, #3
 800cfc4:	440b      	add	r3, r1
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	615a      	str	r2, [r3, #20]
				}
				// Call Callback function !!
				if (pTaskTimer->psvUtilTimer[i].pfnCallback) {
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6899      	ldr	r1, [r3, #8]
 800cfce:	68fa      	ldr	r2, [r7, #12]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	4413      	add	r3, r2
 800cfd6:	00db      	lsls	r3, r3, #3
 800cfd8:	440b      	add	r3, r1
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d00e      	beq.n	800cffe <svTaskTimer_CheckTimers+0x108>
					pTaskTimer->psvUtilTimer[i].pfnCallback((svTimer_e)i);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6899      	ldr	r1, [r3, #8]
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	4413      	add	r3, r2
 800cfec:	00db      	lsls	r3, r3, #3
 800cfee:	440b      	add	r3, r1
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	b2d2      	uxtb	r2, r2
 800cff6:	4610      	mov	r0, r2
 800cff8:	4798      	blx	r3
 800cffa:	e000      	b.n	800cffe <svTaskTimer_CheckTimers+0x108>
					continue;
 800cffc:	bf00      	nop
	for (int i=SV_TIMER_1;i<pTaskTimer->uNumOfTimers;i++) {
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	3301      	adds	r3, #1
 800d002:	60fb      	str	r3, [r7, #12]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	f63f af7e 	bhi.w	800cf0c <svTaskTimer_CheckTimers+0x16>
				}
			}
		}
	}
	return TRUE;
 800d010:	2301      	movs	r3, #1
}
 800d012:	4618      	mov	r0, r3
 800d014:	3714      	adds	r7, #20
 800d016:	46bd      	mov	sp, r7
 800d018:	bd90      	pop	{r4, r7, pc}
	...

0800d01c <__NVIC_SetPriority>:
{
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	4603      	mov	r3, r0
 800d024:	6039      	str	r1, [r7, #0]
 800d026:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	db0a      	blt.n	800d046 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	b2da      	uxtb	r2, r3
 800d034:	490c      	ldr	r1, [pc, #48]	; (800d068 <__NVIC_SetPriority+0x4c>)
 800d036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d03a:	0112      	lsls	r2, r2, #4
 800d03c:	b2d2      	uxtb	r2, r2
 800d03e:	440b      	add	r3, r1
 800d040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d044:	e00a      	b.n	800d05c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	b2da      	uxtb	r2, r3
 800d04a:	4908      	ldr	r1, [pc, #32]	; (800d06c <__NVIC_SetPriority+0x50>)
 800d04c:	88fb      	ldrh	r3, [r7, #6]
 800d04e:	f003 030f 	and.w	r3, r3, #15
 800d052:	3b04      	subs	r3, #4
 800d054:	0112      	lsls	r2, r2, #4
 800d056:	b2d2      	uxtb	r2, r2
 800d058:	440b      	add	r3, r1
 800d05a:	761a      	strb	r2, [r3, #24]
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr
 800d068:	e000e100 	.word	0xe000e100
 800d06c:	e000ed00 	.word	0xe000ed00

0800d070 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d070:	b580      	push	{r7, lr}
 800d072:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800d074:	4b05      	ldr	r3, [pc, #20]	; (800d08c <SysTick_Handler+0x1c>)
 800d076:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d078:	f001 fb8c 	bl	800e794 <xTaskGetSchedulerState>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d001      	beq.n	800d086 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d082:	f001 ff2f 	bl	800eee4 <xPortSysTickHandler>
  }
}
 800d086:	bf00      	nop
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	e000e010 	.word	0xe000e010

0800d090 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d090:	b580      	push	{r7, lr}
 800d092:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800d094:	2100      	movs	r1, #0
 800d096:	f06f 0004 	mvn.w	r0, #4
 800d09a:	f7ff ffbf 	bl	800d01c <__NVIC_SetPriority>
#endif
}
 800d09e:	bf00      	nop
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b086      	sub	sp, #24
 800d0a6:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0ac:	f3ef 8305 	mrs	r3, IPSR
 800d0b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0b2:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d002      	beq.n	800d0be <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	617b      	str	r3, [r7, #20]
 800d0bc:	e013      	b.n	800d0e6 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800d0be:	f001 fb69 	bl	800e794 <xTaskGetSchedulerState>
 800d0c2:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d00d      	beq.n	800d0e6 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d0ca:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0d0:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d105      	bne.n	800d0e2 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0d6:	f3ef 8311 	mrs	r3, BASEPRI
 800d0da:	607b      	str	r3, [r7, #4]
  return(result);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d001      	beq.n	800d0e6 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800d0e6:	697b      	ldr	r3, [r7, #20]
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3718      	adds	r7, #24
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800d0f6:	f7ff ffd4 	bl	800d0a2 <IRQ_Context>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d003      	beq.n	800d108 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800d100:	f06f 0305 	mvn.w	r3, #5
 800d104:	607b      	str	r3, [r7, #4]
 800d106:	e012      	b.n	800d12e <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800d108:	f001 fb44 	bl	800e794 <xTaskGetSchedulerState>
 800d10c:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	2b01      	cmp	r3, #1
 800d112:	d109      	bne.n	800d128 <osKernelInitialize+0x38>
 800d114:	4b08      	ldr	r3, [pc, #32]	; (800d138 <osKernelInitialize+0x48>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d105      	bne.n	800d128 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d11c:	4b06      	ldr	r3, [pc, #24]	; (800d138 <osKernelInitialize+0x48>)
 800d11e:	2201      	movs	r2, #1
 800d120:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d122:	2300      	movs	r3, #0
 800d124:	607b      	str	r3, [r7, #4]
 800d126:	e002      	b.n	800d12e <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800d128:	f04f 33ff 	mov.w	r3, #4294967295
 800d12c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800d12e:	687b      	ldr	r3, [r7, #4]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	20000ec4 	.word	0x20000ec4

0800d13c <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800d142:	f7ff ffae 	bl	800d0a2 <IRQ_Context>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d003      	beq.n	800d154 <osKernelStart+0x18>
    stat = osErrorISR;
 800d14c:	f06f 0305 	mvn.w	r3, #5
 800d150:	607b      	str	r3, [r7, #4]
 800d152:	e016      	b.n	800d182 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800d154:	f001 fb1e 	bl	800e794 <xTaskGetSchedulerState>
 800d158:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d10d      	bne.n	800d17c <osKernelStart+0x40>
 800d160:	4b0a      	ldr	r3, [pc, #40]	; (800d18c <osKernelStart+0x50>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d109      	bne.n	800d17c <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d168:	f7ff ff92 	bl	800d090 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800d16c:	4b07      	ldr	r3, [pc, #28]	; (800d18c <osKernelStart+0x50>)
 800d16e:	2202      	movs	r2, #2
 800d170:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d172:	f000 fde5 	bl	800dd40 <vTaskStartScheduler>
      stat = osOK;
 800d176:	2300      	movs	r3, #0
 800d178:	607b      	str	r3, [r7, #4]
 800d17a:	e002      	b.n	800d182 <osKernelStart+0x46>
    } else {
      stat = osError;
 800d17c:	f04f 33ff 	mov.w	r3, #4294967295
 800d180:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800d182:	687b      	ldr	r3, [r7, #4]
}
 800d184:	4618      	mov	r0, r3
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	20000ec4 	.word	0x20000ec4

0800d190 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d190:	b580      	push	{r7, lr}
 800d192:	b08e      	sub	sp, #56	; 0x38
 800d194:	af04      	add	r7, sp, #16
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d19c:	2300      	movs	r3, #0
 800d19e:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800d1a0:	f7ff ff7f 	bl	800d0a2 <IRQ_Context>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d17e      	bne.n	800d2a8 <osThreadNew+0x118>
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d07b      	beq.n	800d2a8 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 800d1b0:	2380      	movs	r3, #128	; 0x80
 800d1b2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d1b4:	2318      	movs	r3, #24
 800d1b6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d1c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d045      	beq.n	800d254 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <osThreadNew+0x46>
        name = attr->name;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d002      	beq.n	800d1e4 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	699b      	ldr	r3, [r3, #24]
 800d1e2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d008      	beq.n	800d1fc <osThreadNew+0x6c>
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	2b38      	cmp	r3, #56	; 0x38
 800d1ee:	d805      	bhi.n	800d1fc <osThreadNew+0x6c>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	f003 0301 	and.w	r3, r3, #1
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d001      	beq.n	800d200 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	e054      	b.n	800d2aa <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d003      	beq.n	800d210 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	695b      	ldr	r3, [r3, #20]
 800d20c:	089b      	lsrs	r3, r3, #2
 800d20e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00e      	beq.n	800d236 <osThreadNew+0xa6>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	68db      	ldr	r3, [r3, #12]
 800d21c:	2b5b      	cmp	r3, #91	; 0x5b
 800d21e:	d90a      	bls.n	800d236 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d224:	2b00      	cmp	r3, #0
 800d226:	d006      	beq.n	800d236 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	695b      	ldr	r3, [r3, #20]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d002      	beq.n	800d236 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800d230:	2301      	movs	r3, #1
 800d232:	61bb      	str	r3, [r7, #24]
 800d234:	e010      	b.n	800d258 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d10c      	bne.n	800d258 <osThreadNew+0xc8>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d108      	bne.n	800d258 <osThreadNew+0xc8>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d104      	bne.n	800d258 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800d24e:	2300      	movs	r3, #0
 800d250:	61bb      	str	r3, [r7, #24]
 800d252:	e001      	b.n	800d258 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 800d254:	2300      	movs	r3, #0
 800d256:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d110      	bne.n	800d280 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d266:	9202      	str	r2, [sp, #8]
 800d268:	9301      	str	r3, [sp, #4]
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	9300      	str	r3, [sp, #0]
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	6a3a      	ldr	r2, [r7, #32]
 800d272:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f000 fb9b 	bl	800d9b0 <xTaskCreateStatic>
 800d27a:	4603      	mov	r3, r0
 800d27c:	617b      	str	r3, [r7, #20]
 800d27e:	e013      	b.n	800d2a8 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d110      	bne.n	800d2a8 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	b29a      	uxth	r2, r3
 800d28a:	f107 0314 	add.w	r3, r7, #20
 800d28e:	9301      	str	r3, [sp, #4]
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	f000 fbd3 	bl	800da44 <xTaskCreate>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d001      	beq.n	800d2a8 <osThreadNew+0x118>
            hTask = NULL;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800d2a8:	697b      	ldr	r3, [r7, #20]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3728      	adds	r7, #40	; 0x28
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b084      	sub	sp, #16
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800d2ba:	f7ff fef2 	bl	800d0a2 <IRQ_Context>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d003      	beq.n	800d2cc <osDelay+0x1a>
    stat = osErrorISR;
 800d2c4:	f06f 0305 	mvn.w	r3, #5
 800d2c8:	60fb      	str	r3, [r7, #12]
 800d2ca:	e007      	b.n	800d2dc <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d002      	beq.n	800d2dc <osDelay+0x2a>
      vTaskDelay(ticks);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 fd0e 	bl	800dcf8 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
	...

0800d2e8 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d2e8:	b480      	push	{r7}
 800d2ea:	b085      	sub	sp, #20
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	4a07      	ldr	r2, [pc, #28]	; (800d314 <vApplicationGetIdleTaskMemory+0x2c>)
 800d2f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	4a06      	ldr	r2, [pc, #24]	; (800d318 <vApplicationGetIdleTaskMemory+0x30>)
 800d2fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2280      	movs	r2, #128	; 0x80
 800d304:	601a      	str	r2, [r3, #0]
}
 800d306:	bf00      	nop
 800d308:	3714      	adds	r7, #20
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop
 800d314:	20000ec8 	.word	0x20000ec8
 800d318:	20000f24 	.word	0x20000f24

0800d31c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d31c:	b480      	push	{r7}
 800d31e:	b085      	sub	sp, #20
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	4a07      	ldr	r2, [pc, #28]	; (800d348 <vApplicationGetTimerTaskMemory+0x2c>)
 800d32c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	4a06      	ldr	r2, [pc, #24]	; (800d34c <vApplicationGetTimerTaskMemory+0x30>)
 800d332:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2280      	movs	r2, #128	; 0x80
 800d338:	601a      	str	r2, [r3, #0]
}
 800d33a:	bf00      	nop
 800d33c:	3714      	adds	r7, #20
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	20001124 	.word	0x20001124
 800d34c:	20001180 	.word	0x20001180

0800d350 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f103 0208 	add.w	r2, r3, #8
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f04f 32ff 	mov.w	r2, #4294967295
 800d368:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f103 0208 	add.w	r2, r3, #8
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f103 0208 	add.w	r2, r3, #8
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d384:	bf00      	nop
 800d386:	370c      	adds	r7, #12
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d39e:	bf00      	nop
 800d3a0:	370c      	adds	r7, #12
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr

0800d3aa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800d3aa:	b480      	push	{r7}
 800d3ac:	b085      	sub	sp, #20
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	6078      	str	r0, [r7, #4]
 800d3b2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c0:	d103      	bne.n	800d3ca <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	691b      	ldr	r3, [r3, #16]
 800d3c6:	60fb      	str	r3, [r7, #12]
 800d3c8:	e00c      	b.n	800d3e4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	3308      	adds	r3, #8
 800d3ce:	60fb      	str	r3, [r7, #12]
 800d3d0:	e002      	b.n	800d3d8 <vListInsert+0x2e>
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	60fb      	str	r3, [r7, #12]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	68ba      	ldr	r2, [r7, #8]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d2f6      	bcs.n	800d3d2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	685a      	ldr	r2, [r3, #4]
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	683a      	ldr	r2, [r7, #0]
 800d3f2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	68fa      	ldr	r2, [r7, #12]
 800d3f8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	683a      	ldr	r2, [r7, #0]
 800d3fe:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	1c5a      	adds	r2, r3, #1
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	601a      	str	r2, [r3, #0]
}
 800d410:	bf00      	nop
 800d412:	3714      	adds	r7, #20
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	6892      	ldr	r2, [r2, #8]
 800d432:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	6852      	ldr	r2, [r2, #4]
 800d43c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	429a      	cmp	r2, r3
 800d446:	d103      	bne.n	800d450 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	689a      	ldr	r2, [r3, #8]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	1e5a      	subs	r2, r3, #1
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
}
 800d464:	4618      	mov	r0, r3
 800d466:	3714      	adds	r7, #20
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800d47a:	2301      	movs	r3, #1
 800d47c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d102      	bne.n	800d48e <xQueueGenericReset+0x1e>
 800d488:	f001 fe3e 	bl	800f108 <ulSetInterruptMask>
 800d48c:	e7fe      	b.n	800d48c <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d057      	beq.n	800d544 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d053      	beq.n	800d544 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	fba3 2302 	umull	r2, r3, r3, r2
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d000      	beq.n	800d4b0 <xQueueGenericReset+0x40>
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d146      	bne.n	800d544 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800d4b6:	f001 fce9 	bl	800ee8c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4c2:	68b9      	ldr	r1, [r7, #8]
 800d4c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d4c6:	fb01 f303 	mul.w	r3, r1, r3
 800d4ca:	441a      	add	r2, r3
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	68b9      	ldr	r1, [r7, #8]
 800d4ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d4ec:	fb01 f303 	mul.w	r3, r1, r3
 800d4f0:	441a      	add	r2, r3
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	22ff      	movs	r2, #255	; 0xff
 800d4fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	22ff      	movs	r2, #255	; 0xff
 800d502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d10e      	bne.n	800d52a <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	691b      	ldr	r3, [r3, #16]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d014      	beq.n	800d53e <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	3310      	adds	r3, #16
 800d518:	4618      	mov	r0, r3
 800d51a:	f000 ff33 	bl	800e384 <xTaskRemoveFromEventList>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00c      	beq.n	800d53e <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800d524:	f001 fca0 	bl	800ee68 <vPortYield>
 800d528:	e009      	b.n	800d53e <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	3310      	adds	r3, #16
 800d52e:	4618      	mov	r0, r3
 800d530:	f7ff ff0e 	bl	800d350 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	3324      	adds	r3, #36	; 0x24
 800d538:	4618      	mov	r0, r3
 800d53a:	f7ff ff09 	bl	800d350 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800d53e:	f001 fcb7 	bl	800eeb0 <vPortExitCritical>
 800d542:	e001      	b.n	800d548 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 800d544:	2300      	movs	r3, #0
 800d546:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d102      	bne.n	800d554 <xQueueGenericReset+0xe4>
 800d54e:	f001 fddb 	bl	800f108 <ulSetInterruptMask>
 800d552:	e7fe      	b.n	800d552 <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800d554:	68fb      	ldr	r3, [r7, #12]
}
 800d556:	4618      	mov	r0, r3
 800d558:	3710      	adds	r7, #16
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800d55e:	b580      	push	{r7, lr}
 800d560:	b088      	sub	sp, #32
 800d562:	af02      	add	r7, sp, #8
 800d564:	60f8      	str	r0, [r7, #12]
 800d566:	60b9      	str	r1, [r7, #8]
 800d568:	607a      	str	r2, [r7, #4]
 800d56a:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800d56c:	2300      	movs	r3, #0
 800d56e:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d102      	bne.n	800d57c <xQueueGenericCreateStatic+0x1e>
 800d576:	f001 fdc7 	bl	800f108 <ulSetInterruptMask>
 800d57a:	e7fe      	b.n	800d57a <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d028      	beq.n	800d5d4 <xQueueGenericCreateStatic+0x76>
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d025      	beq.n	800d5d4 <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d002      	beq.n	800d594 <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d01f      	beq.n	800d5d4 <xQueueGenericCreateStatic+0x76>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d102      	bne.n	800d5a0 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d119      	bne.n	800d5d4 <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800d5a0:	2350      	movs	r3, #80	; 0x50
 800d5a2:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	2b50      	cmp	r3, #80	; 0x50
 800d5a8:	d002      	beq.n	800d5b0 <xQueueGenericCreateStatic+0x52>
 800d5aa:	f001 fdad 	bl	800f108 <ulSetInterruptMask>
 800d5ae:	e7fe      	b.n	800d5ae <xQueueGenericCreateStatic+0x50>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800d5b0:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d5be:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	9300      	str	r3, [sp, #0]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	68b9      	ldr	r1, [r7, #8]
 800d5cc:	68f8      	ldr	r0, [r7, #12]
 800d5ce:	f000 f80c 	bl	800d5ea <prvInitialiseNewQueue>
 800d5d2:	e005      	b.n	800d5e0 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d102      	bne.n	800d5e0 <xQueueGenericCreateStatic+0x82>
 800d5da:	f001 fd95 	bl	800f108 <ulSetInterruptMask>
 800d5de:	e7fe      	b.n	800d5de <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800d5e0:	697b      	ldr	r3, [r7, #20]
    }
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3718      	adds	r7, #24
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b084      	sub	sp, #16
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	60f8      	str	r0, [r7, #12]
 800d5f2:	60b9      	str	r1, [r7, #8]
 800d5f4:	607a      	str	r2, [r7, #4]
 800d5f6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d103      	bne.n	800d606 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	69ba      	ldr	r2, [r7, #24]
 800d602:	601a      	str	r2, [r3, #0]
 800d604:	e002      	b.n	800d60c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	68fa      	ldr	r2, [r7, #12]
 800d610:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	68ba      	ldr	r2, [r7, #8]
 800d616:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d618:	2101      	movs	r1, #1
 800d61a:	69b8      	ldr	r0, [r7, #24]
 800d61c:	f7ff ff28 	bl	800d470 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	78fa      	ldrb	r2, [r7, #3]
 800d624:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800d628:	bf00      	nop
 800d62a:	3710      	adds	r7, #16
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b08a      	sub	sp, #40	; 0x28
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800d63c:	2300      	movs	r3, #0
 800d63e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800d644:	6a3b      	ldr	r3, [r7, #32]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d102      	bne.n	800d650 <xQueueReceive+0x20>
 800d64a:	f001 fd5d 	bl	800f108 <ulSetInterruptMask>
 800d64e:	e7fe      	b.n	800d64e <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d103      	bne.n	800d65e <xQueueReceive+0x2e>
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d101      	bne.n	800d662 <xQueueReceive+0x32>
 800d65e:	2301      	movs	r3, #1
 800d660:	e000      	b.n	800d664 <xQueueReceive+0x34>
 800d662:	2300      	movs	r3, #0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d102      	bne.n	800d66e <xQueueReceive+0x3e>
 800d668:	f001 fd4e 	bl	800f108 <ulSetInterruptMask>
 800d66c:	e7fe      	b.n	800d66c <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d66e:	f001 f891 	bl	800e794 <xTaskGetSchedulerState>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d102      	bne.n	800d67e <xQueueReceive+0x4e>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d101      	bne.n	800d682 <xQueueReceive+0x52>
 800d67e:	2301      	movs	r3, #1
 800d680:	e000      	b.n	800d684 <xQueueReceive+0x54>
 800d682:	2300      	movs	r3, #0
 800d684:	2b00      	cmp	r3, #0
 800d686:	d102      	bne.n	800d68e <xQueueReceive+0x5e>
 800d688:	f001 fd3e 	bl	800f108 <ulSetInterruptMask>
 800d68c:	e7fe      	b.n	800d68c <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800d68e:	f001 fbfd 	bl	800ee8c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d692:	6a3b      	ldr	r3, [r7, #32]
 800d694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d696:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d019      	beq.n	800d6d2 <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d69e:	68b9      	ldr	r1, [r7, #8]
 800d6a0:	6a38      	ldr	r0, [r7, #32]
 800d6a2:	f000 f87e 	bl	800d7a2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	1e5a      	subs	r2, r3, #1
 800d6aa:	6a3b      	ldr	r3, [r7, #32]
 800d6ac:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6ae:	6a3b      	ldr	r3, [r7, #32]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d009      	beq.n	800d6ca <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6b6:	6a3b      	ldr	r3, [r7, #32]
 800d6b8:	3310      	adds	r3, #16
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f000 fe62 	bl	800e384 <xTaskRemoveFromEventList>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d001      	beq.n	800d6ca <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800d6c6:	f001 fbcf 	bl	800ee68 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800d6ca:	f001 fbf1 	bl	800eeb0 <vPortExitCritical>
                return pdPASS;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	e063      	b.n	800d79a <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d103      	bne.n	800d6e0 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800d6d8:	f001 fbea 	bl	800eeb0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	e05c      	b.n	800d79a <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800d6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d106      	bne.n	800d6f4 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800d6e6:	f107 0314 	add.w	r3, r7, #20
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f000 ff18 	bl	800e520 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800d6f4:	f001 fbdc 	bl	800eeb0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800d6f8:	f000 fb7c 	bl	800ddf4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800d6fc:	f001 fbc6 	bl	800ee8c <vPortEnterCritical>
 800d700:	6a3b      	ldr	r3, [r7, #32]
 800d702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d706:	b25b      	sxtb	r3, r3
 800d708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d70c:	d103      	bne.n	800d716 <xQueueReceive+0xe6>
 800d70e:	6a3b      	ldr	r3, [r7, #32]
 800d710:	2200      	movs	r2, #0
 800d712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d716:	6a3b      	ldr	r3, [r7, #32]
 800d718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d71c:	b25b      	sxtb	r3, r3
 800d71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d722:	d103      	bne.n	800d72c <xQueueReceive+0xfc>
 800d724:	6a3b      	ldr	r3, [r7, #32]
 800d726:	2200      	movs	r2, #0
 800d728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d72c:	f001 fbc0 	bl	800eeb0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d730:	1d3a      	adds	r2, r7, #4
 800d732:	f107 0314 	add.w	r3, r7, #20
 800d736:	4611      	mov	r1, r2
 800d738:	4618      	mov	r0, r3
 800d73a:	f000 ff07 	bl	800e54c <xTaskCheckForTimeOut>
 800d73e:	4603      	mov	r3, r0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d11d      	bne.n	800d780 <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d744:	6a38      	ldr	r0, [r7, #32]
 800d746:	f000 f8a4 	bl	800d892 <prvIsQueueEmpty>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d011      	beq.n	800d774 <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d750:	6a3b      	ldr	r3, [r7, #32]
 800d752:	3324      	adds	r3, #36	; 0x24
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	4611      	mov	r1, r2
 800d758:	4618      	mov	r0, r3
 800d75a:	f000 fdb9 	bl	800e2d0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800d75e:	6a38      	ldr	r0, [r7, #32]
 800d760:	f000 f845 	bl	800d7ee <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800d764:	f000 fb54 	bl	800de10 <xTaskResumeAll>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d18f      	bne.n	800d68e <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 800d76e:	f001 fb7b 	bl	800ee68 <vPortYield>
 800d772:	e78c      	b.n	800d68e <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800d774:	6a38      	ldr	r0, [r7, #32]
 800d776:	f000 f83a 	bl	800d7ee <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800d77a:	f000 fb49 	bl	800de10 <xTaskResumeAll>
 800d77e:	e786      	b.n	800d68e <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800d780:	6a38      	ldr	r0, [r7, #32]
 800d782:	f000 f834 	bl	800d7ee <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800d786:	f000 fb43 	bl	800de10 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d78a:	6a38      	ldr	r0, [r7, #32]
 800d78c:	f000 f881 	bl	800d892 <prvIsQueueEmpty>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	f43f af7b 	beq.w	800d68e <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800d798:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3728      	adds	r7, #40	; 0x28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}

0800d7a2 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b082      	sub	sp, #8
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
 800d7aa:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d018      	beq.n	800d7e6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	68da      	ldr	r2, [r3, #12]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7bc:	441a      	add	r2, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	68da      	ldr	r2, [r3, #12]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d303      	bcc.n	800d7d6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	68d9      	ldr	r1, [r3, #12]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7de:	461a      	mov	r2, r3
 800d7e0:	6838      	ldr	r0, [r7, #0]
 800d7e2:	f002 f981 	bl	800fae8 <memcpy>
    }
}
 800d7e6:	bf00      	nop
 800d7e8:	3708      	adds	r7, #8
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b084      	sub	sp, #16
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800d7f6:	f001 fb49 	bl	800ee8c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d800:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800d802:	e011      	b.n	800d828 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d012      	beq.n	800d832 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	3324      	adds	r3, #36	; 0x24
 800d810:	4618      	mov	r0, r3
 800d812:	f000 fdb7 	bl	800e384 <xTaskRemoveFromEventList>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d001      	beq.n	800d820 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800d81c:	f000 feec 	bl	800e5f8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800d820:	7bfb      	ldrb	r3, [r7, #15]
 800d822:	3b01      	subs	r3, #1
 800d824:	b2db      	uxtb	r3, r3
 800d826:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800d828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	dce9      	bgt.n	800d804 <prvUnlockQueue+0x16>
 800d830:	e000      	b.n	800d834 <prvUnlockQueue+0x46>
                    break;
 800d832:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	22ff      	movs	r2, #255	; 0xff
 800d838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800d83c:	f001 fb38 	bl	800eeb0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800d840:	f001 fb24 	bl	800ee8c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d84a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800d84c:	e011      	b.n	800d872 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d012      	beq.n	800d87c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	3310      	adds	r3, #16
 800d85a:	4618      	mov	r0, r3
 800d85c:	f000 fd92 	bl	800e384 <xTaskRemoveFromEventList>
 800d860:	4603      	mov	r3, r0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d001      	beq.n	800d86a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800d866:	f000 fec7 	bl	800e5f8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800d86a:	7bbb      	ldrb	r3, [r7, #14]
 800d86c:	3b01      	subs	r3, #1
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800d872:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d876:	2b00      	cmp	r3, #0
 800d878:	dce9      	bgt.n	800d84e <prvUnlockQueue+0x60>
 800d87a:	e000      	b.n	800d87e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800d87c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	22ff      	movs	r2, #255	; 0xff
 800d882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800d886:	f001 fb13 	bl	800eeb0 <vPortExitCritical>
}
 800d88a:	bf00      	nop
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b084      	sub	sp, #16
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800d89a:	f001 faf7 	bl	800ee8c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d102      	bne.n	800d8ac <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	60fb      	str	r3, [r7, #12]
 800d8aa:	e001      	b.n	800d8b0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800d8b0:	f001 fafe 	bl	800eeb0 <vPortExitCritical>

    return xReturn;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
	...

0800d8c0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d102      	bne.n	800d8da <vQueueAddToRegistry+0x1a>
 800d8d4:	f001 fc18 	bl	800f108 <ulSetInterruptMask>
 800d8d8:	e7fe      	b.n	800d8d8 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d024      	beq.n	800d92a <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	60fb      	str	r3, [r7, #12]
 800d8e4:	e01e      	b.n	800d924 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800d8e6:	4a17      	ldr	r2, [pc, #92]	; (800d944 <vQueueAddToRegistry+0x84>)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	00db      	lsls	r3, r3, #3
 800d8ec:	4413      	add	r3, r2
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d105      	bne.n	800d902 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	00db      	lsls	r3, r3, #3
 800d8fa:	4a12      	ldr	r2, [pc, #72]	; (800d944 <vQueueAddToRegistry+0x84>)
 800d8fc:	4413      	add	r3, r2
 800d8fe:	60bb      	str	r3, [r7, #8]
                    break;
 800d900:	e013      	b.n	800d92a <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d10a      	bne.n	800d91e <vQueueAddToRegistry+0x5e>
 800d908:	4a0e      	ldr	r2, [pc, #56]	; (800d944 <vQueueAddToRegistry+0x84>)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d104      	bne.n	800d91e <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	00db      	lsls	r3, r3, #3
 800d918:	4a0a      	ldr	r2, [pc, #40]	; (800d944 <vQueueAddToRegistry+0x84>)
 800d91a:	4413      	add	r3, r2
 800d91c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	3301      	adds	r3, #1
 800d922:	60fb      	str	r3, [r7, #12]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b07      	cmp	r3, #7
 800d928:	d9dd      	bls.n	800d8e6 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d005      	beq.n	800d93c <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	683a      	ldr	r2, [r7, #0]
 800d934:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	687a      	ldr	r2, [r7, #4]
 800d93a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800d93c:	bf00      	nop
 800d93e:	3710      	adds	r7, #16
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	20001380 	.word	0x20001380

0800d948 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800d948:	b580      	push	{r7, lr}
 800d94a:	b086      	sub	sp, #24
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	60b9      	str	r1, [r7, #8]
 800d952:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800d958:	f001 fa98 	bl	800ee8c <vPortEnterCritical>
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d962:	b25b      	sxtb	r3, r3
 800d964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d968:	d103      	bne.n	800d972 <vQueueWaitForMessageRestricted+0x2a>
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	2200      	movs	r2, #0
 800d96e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d978:	b25b      	sxtb	r3, r3
 800d97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d97e:	d103      	bne.n	800d988 <vQueueWaitForMessageRestricted+0x40>
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	2200      	movs	r2, #0
 800d984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d988:	f001 fa92 	bl	800eeb0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d990:	2b00      	cmp	r3, #0
 800d992:	d106      	bne.n	800d9a2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	3324      	adds	r3, #36	; 0x24
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	68b9      	ldr	r1, [r7, #8]
 800d99c:	4618      	mov	r0, r3
 800d99e:	f000 fcb3 	bl	800e308 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800d9a2:	6978      	ldr	r0, [r7, #20]
 800d9a4:	f7ff ff23 	bl	800d7ee <prvUnlockQueue>
    }
 800d9a8:	bf00      	nop
 800d9aa:	3718      	adds	r7, #24
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b08c      	sub	sp, #48	; 0x30
 800d9b4:	af04      	add	r7, sp, #16
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
 800d9bc:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800d9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d102      	bne.n	800d9ca <xTaskCreateStatic+0x1a>
 800d9c4:	f001 fba0 	bl	800f108 <ulSetInterruptMask>
 800d9c8:	e7fe      	b.n	800d9c8 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800d9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d102      	bne.n	800d9d6 <xTaskCreateStatic+0x26>
 800d9d0:	f001 fb9a 	bl	800f108 <ulSetInterruptMask>
 800d9d4:	e7fe      	b.n	800d9d4 <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800d9d6:	235c      	movs	r3, #92	; 0x5c
 800d9d8:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	2b5c      	cmp	r3, #92	; 0x5c
 800d9de:	d002      	beq.n	800d9e6 <xTaskCreateStatic+0x36>
 800d9e0:	f001 fb92 	bl	800f108 <ulSetInterruptMask>
 800d9e4:	e7fe      	b.n	800d9e4 <xTaskCreateStatic+0x34>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d9e6:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d023      	beq.n	800da36 <xTaskCreateStatic+0x86>
 800d9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d020      	beq.n	800da36 <xTaskCreateStatic+0x86>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f6:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d9f8:	225c      	movs	r2, #92	; 0x5c
 800d9fa:	2100      	movs	r1, #0
 800d9fc:	69f8      	ldr	r0, [r7, #28]
 800d9fe:	f002 f81b 	bl	800fa38 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da06:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	2202      	movs	r2, #2
 800da0c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800da10:	2300      	movs	r3, #0
 800da12:	9303      	str	r3, [sp, #12]
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	9302      	str	r3, [sp, #8]
 800da18:	f107 0318 	add.w	r3, r7, #24
 800da1c:	9301      	str	r3, [sp, #4]
 800da1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	687a      	ldr	r2, [r7, #4]
 800da26:	68b9      	ldr	r1, [r7, #8]
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f000 f855 	bl	800dad8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800da2e:	69f8      	ldr	r0, [r7, #28]
 800da30:	f000 f8d2 	bl	800dbd8 <prvAddNewTaskToReadyList>
 800da34:	e001      	b.n	800da3a <xTaskCreateStatic+0x8a>
        }
        else
        {
            xReturn = NULL;
 800da36:	2300      	movs	r3, #0
 800da38:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800da3a:	69bb      	ldr	r3, [r7, #24]
    }
 800da3c:	4618      	mov	r0, r3
 800da3e:	3720      	adds	r7, #32
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800da44:	b580      	push	{r7, lr}
 800da46:	b08c      	sub	sp, #48	; 0x30
 800da48:	af04      	add	r7, sp, #16
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	60b9      	str	r1, [r7, #8]
 800da4e:	603b      	str	r3, [r7, #0]
 800da50:	4613      	mov	r3, r2
 800da52:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da54:	88fb      	ldrh	r3, [r7, #6]
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	4618      	mov	r0, r3
 800da5a:	f001 fbb5 	bl	800f1c8 <pvPortMalloc>
 800da5e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d013      	beq.n	800da8e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800da66:	205c      	movs	r0, #92	; 0x5c
 800da68:	f001 fbae 	bl	800f1c8 <pvPortMalloc>
 800da6c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d008      	beq.n	800da86 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800da74:	225c      	movs	r2, #92	; 0x5c
 800da76:	2100      	movs	r1, #0
 800da78:	69f8      	ldr	r0, [r7, #28]
 800da7a:	f001 ffdd 	bl	800fa38 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	697a      	ldr	r2, [r7, #20]
 800da82:	631a      	str	r2, [r3, #48]	; 0x30
 800da84:	e005      	b.n	800da92 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800da86:	6978      	ldr	r0, [r7, #20]
 800da88:	f001 fc48 	bl	800f31c <vPortFree>
 800da8c:	e001      	b.n	800da92 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800da8e:	2300      	movs	r3, #0
 800da90:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d017      	beq.n	800dac8 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	2200      	movs	r2, #0
 800da9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800daa0:	88fa      	ldrh	r2, [r7, #6]
 800daa2:	2300      	movs	r3, #0
 800daa4:	9303      	str	r3, [sp, #12]
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	9302      	str	r3, [sp, #8]
 800daaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daac:	9301      	str	r3, [sp, #4]
 800daae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab0:	9300      	str	r3, [sp, #0]
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	68b9      	ldr	r1, [r7, #8]
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f000 f80e 	bl	800dad8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800dabc:	69f8      	ldr	r0, [r7, #28]
 800dabe:	f000 f88b 	bl	800dbd8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800dac2:	2301      	movs	r3, #1
 800dac4:	61bb      	str	r3, [r7, #24]
 800dac6:	e002      	b.n	800dace <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dac8:	f04f 33ff 	mov.w	r3, #4294967295
 800dacc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800dace:	69bb      	ldr	r3, [r7, #24]
    }
 800dad0:	4618      	mov	r0, r3
 800dad2:	3720      	adds	r7, #32
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b086      	sub	sp, #24
 800dadc:	af00      	add	r7, sp, #0
 800dade:	60f8      	str	r0, [r7, #12]
 800dae0:	60b9      	str	r1, [r7, #8]
 800dae2:	607a      	str	r2, [r7, #4]
 800dae4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	461a      	mov	r2, r3
 800daf0:	21a5      	movs	r1, #165	; 0xa5
 800daf2:	f001 ffa1 	bl	800fa38 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800daf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800db00:	3b01      	subs	r3, #1
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	4413      	add	r3, r2
 800db06:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	f023 0307 	bic.w	r3, r3, #7
 800db0e:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	f003 0307 	and.w	r3, r3, #7
 800db16:	2b00      	cmp	r3, #0
 800db18:	d002      	beq.n	800db20 <prvInitialiseNewTask+0x48>
 800db1a:	f001 faf5 	bl	800f108 <ulSetInterruptMask>
 800db1e:	e7fe      	b.n	800db1e <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d01e      	beq.n	800db64 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db26:	2300      	movs	r3, #0
 800db28:	617b      	str	r3, [r7, #20]
 800db2a:	e012      	b.n	800db52 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db2c:	68ba      	ldr	r2, [r7, #8]
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	4413      	add	r3, r2
 800db32:	7819      	ldrb	r1, [r3, #0]
 800db34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	4413      	add	r3, r2
 800db3a:	3334      	adds	r3, #52	; 0x34
 800db3c:	460a      	mov	r2, r1
 800db3e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800db40:	68ba      	ldr	r2, [r7, #8]
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	4413      	add	r3, r2
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d006      	beq.n	800db5a <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	3301      	adds	r3, #1
 800db50:	617b      	str	r3, [r7, #20]
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	2b0f      	cmp	r3, #15
 800db56:	d9e9      	bls.n	800db2c <prvInitialiseNewTask+0x54>
 800db58:	e000      	b.n	800db5c <prvInitialiseNewTask+0x84>
            {
                break;
 800db5a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5e:	2200      	movs	r2, #0
 800db60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	2b37      	cmp	r3, #55	; 0x37
 800db68:	d902      	bls.n	800db70 <prvInitialiseNewTask+0x98>
 800db6a:	f001 facd 	bl	800f108 <ulSetInterruptMask>
 800db6e:	e7fe      	b.n	800db6e <prvInitialiseNewTask+0x96>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db70:	6a3b      	ldr	r3, [r7, #32]
 800db72:	2b37      	cmp	r3, #55	; 0x37
 800db74:	d901      	bls.n	800db7a <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db76:	2337      	movs	r3, #55	; 0x37
 800db78:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800db7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7c:	6a3a      	ldr	r2, [r7, #32]
 800db7e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800db80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db82:	6a3a      	ldr	r2, [r7, #32]
 800db84:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db88:	3304      	adds	r3, #4
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7ff fc00 	bl	800d390 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db92:	3318      	adds	r3, #24
 800db94:	4618      	mov	r0, r3
 800db96:	f7ff fbfb 	bl	800d390 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db9e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dba0:	6a3b      	ldr	r3, [r7, #32]
 800dba2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbae:	625a      	str	r2, [r3, #36]	; 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800dbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	68fa      	ldr	r2, [r7, #12]
 800dbb8:	6938      	ldr	r0, [r7, #16]
 800dbba:	f001 f9c3 	bl	800ef44 <pxPortInitialiseStack>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d002      	beq.n	800dbd0 <prvInitialiseNewTask+0xf8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbce:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800dbd0:	bf00      	nop
 800dbd2:	3718      	adds	r7, #24
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800dbe0:	f001 f954 	bl	800ee8c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800dbe4:	4b3e      	ldr	r3, [pc, #248]	; (800dce0 <prvAddNewTaskToReadyList+0x108>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	4a3d      	ldr	r2, [pc, #244]	; (800dce0 <prvAddNewTaskToReadyList+0x108>)
 800dbec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800dbee:	4b3d      	ldr	r3, [pc, #244]	; (800dce4 <prvAddNewTaskToReadyList+0x10c>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d109      	bne.n	800dc0a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800dbf6:	4a3b      	ldr	r2, [pc, #236]	; (800dce4 <prvAddNewTaskToReadyList+0x10c>)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dbfc:	4b38      	ldr	r3, [pc, #224]	; (800dce0 <prvAddNewTaskToReadyList+0x108>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d110      	bne.n	800dc26 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800dc04:	f000 fd14 	bl	800e630 <prvInitialiseTaskLists>
 800dc08:	e00d      	b.n	800dc26 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800dc0a:	4b37      	ldr	r3, [pc, #220]	; (800dce8 <prvAddNewTaskToReadyList+0x110>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d109      	bne.n	800dc26 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc12:	4b34      	ldr	r3, [pc, #208]	; (800dce4 <prvAddNewTaskToReadyList+0x10c>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d802      	bhi.n	800dc26 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800dc20:	4a30      	ldr	r2, [pc, #192]	; (800dce4 <prvAddNewTaskToReadyList+0x10c>)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800dc26:	4b31      	ldr	r3, [pc, #196]	; (800dcec <prvAddNewTaskToReadyList+0x114>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	4a2f      	ldr	r2, [pc, #188]	; (800dcec <prvAddNewTaskToReadyList+0x114>)
 800dc2e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc30:	4b2e      	ldr	r3, [pc, #184]	; (800dcec <prvAddNewTaskToReadyList+0x114>)
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc3c:	4b2c      	ldr	r3, [pc, #176]	; (800dcf0 <prvAddNewTaskToReadyList+0x118>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d903      	bls.n	800dc4c <prvAddNewTaskToReadyList+0x74>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc48:	4a29      	ldr	r2, [pc, #164]	; (800dcf0 <prvAddNewTaskToReadyList+0x118>)
 800dc4a:	6013      	str	r3, [r2, #0]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc50:	4928      	ldr	r1, [pc, #160]	; (800dcf4 <prvAddNewTaskToReadyList+0x11c>)
 800dc52:	4613      	mov	r3, r2
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	4413      	add	r3, r2
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	440b      	add	r3, r1
 800dc5c:	3304      	adds	r3, #4
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	60fb      	str	r3, [r7, #12]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	609a      	str	r2, [r3, #8]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	689a      	ldr	r2, [r3, #8]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	60da      	str	r2, [r3, #12]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	687a      	ldr	r2, [r7, #4]
 800dc76:	3204      	adds	r2, #4
 800dc78:	605a      	str	r2, [r3, #4]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	1d1a      	adds	r2, r3, #4
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	609a      	str	r2, [r3, #8]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc86:	4613      	mov	r3, r2
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	4413      	add	r3, r2
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	4a19      	ldr	r2, [pc, #100]	; (800dcf4 <prvAddNewTaskToReadyList+0x11c>)
 800dc90:	441a      	add	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	615a      	str	r2, [r3, #20]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc9a:	4916      	ldr	r1, [pc, #88]	; (800dcf4 <prvAddNewTaskToReadyList+0x11c>)
 800dc9c:	4613      	mov	r3, r2
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4413      	add	r3, r2
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	440b      	add	r3, r1
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	1c59      	adds	r1, r3, #1
 800dcaa:	4812      	ldr	r0, [pc, #72]	; (800dcf4 <prvAddNewTaskToReadyList+0x11c>)
 800dcac:	4613      	mov	r3, r2
 800dcae:	009b      	lsls	r3, r3, #2
 800dcb0:	4413      	add	r3, r2
 800dcb2:	009b      	lsls	r3, r3, #2
 800dcb4:	4403      	add	r3, r0
 800dcb6:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800dcb8:	f001 f8fa 	bl	800eeb0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800dcbc:	4b0a      	ldr	r3, [pc, #40]	; (800dce8 <prvAddNewTaskToReadyList+0x110>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d008      	beq.n	800dcd6 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dcc4:	4b07      	ldr	r3, [pc, #28]	; (800dce4 <prvAddNewTaskToReadyList+0x10c>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d201      	bcs.n	800dcd6 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800dcd2:	f001 f8c9 	bl	800ee68 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800dcd6:	bf00      	nop
 800dcd8:	3710      	adds	r7, #16
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	20001894 	.word	0x20001894
 800dce4:	200013c0 	.word	0x200013c0
 800dce8:	200018a0 	.word	0x200018a0
 800dcec:	200018b0 	.word	0x200018b0
 800dcf0:	2000189c 	.word	0x2000189c
 800dcf4:	200013c4 	.word	0x200013c4

0800dcf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800dd00:	2300      	movs	r3, #0
 800dd02:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00f      	beq.n	800dd2a <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800dd0a:	4b0c      	ldr	r3, [pc, #48]	; (800dd3c <vTaskDelay+0x44>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d002      	beq.n	800dd18 <vTaskDelay+0x20>
 800dd12:	f001 f9f9 	bl	800f108 <ulSetInterruptMask>
 800dd16:	e7fe      	b.n	800dd16 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800dd18:	f000 f86c 	bl	800ddf4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 fd56 	bl	800e7d0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800dd24:	f000 f874 	bl	800de10 <xTaskResumeAll>
 800dd28:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d101      	bne.n	800dd34 <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 800dd30:	f001 f89a 	bl	800ee68 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800dd34:	bf00      	nop
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	200018bc 	.word	0x200018bc

0800dd40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b088      	sub	sp, #32
 800dd44:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800dd46:	2300      	movs	r3, #0
 800dd48:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd4e:	463a      	mov	r2, r7
 800dd50:	1d39      	adds	r1, r7, #4
 800dd52:	f107 0308 	add.w	r3, r7, #8
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7ff fac6 	bl	800d2e8 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	68ba      	ldr	r2, [r7, #8]
 800dd62:	9202      	str	r2, [sp, #8]
 800dd64:	9301      	str	r3, [sp, #4]
 800dd66:	2300      	movs	r3, #0
 800dd68:	9300      	str	r3, [sp, #0]
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	460a      	mov	r2, r1
 800dd6e:	491a      	ldr	r1, [pc, #104]	; (800ddd8 <vTaskStartScheduler+0x98>)
 800dd70:	481a      	ldr	r0, [pc, #104]	; (800dddc <vTaskStartScheduler+0x9c>)
 800dd72:	f7ff fe1d 	bl	800d9b0 <xTaskCreateStatic>
 800dd76:	4603      	mov	r3, r0
 800dd78:	4a19      	ldr	r2, [pc, #100]	; (800dde0 <vTaskStartScheduler+0xa0>)
 800dd7a:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800dd7c:	4b18      	ldr	r3, [pc, #96]	; (800dde0 <vTaskStartScheduler+0xa0>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d002      	beq.n	800dd8a <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800dd84:	2301      	movs	r3, #1
 800dd86:	60fb      	str	r3, [r7, #12]
 800dd88:	e001      	b.n	800dd8e <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d102      	bne.n	800dd9a <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800dd94:	f000 fd8a 	bl	800e8ac <xTimerCreateTimerTask>
 800dd98:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d10e      	bne.n	800ddbe <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800dda0:	f001 f9b2 	bl	800f108 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800dda4:	4b0f      	ldr	r3, [pc, #60]	; (800dde4 <vTaskStartScheduler+0xa4>)
 800dda6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddaa:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800ddac:	4b0e      	ldr	r3, [pc, #56]	; (800dde8 <vTaskStartScheduler+0xa8>)
 800ddae:	2201      	movs	r2, #1
 800ddb0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ddb2:	4b0e      	ldr	r3, [pc, #56]	; (800ddec <vTaskStartScheduler+0xac>)
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800ddb8:	f001 f94e 	bl	800f058 <xPortStartScheduler>
 800ddbc:	e006      	b.n	800ddcc <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddc4:	d102      	bne.n	800ddcc <vTaskStartScheduler+0x8c>
 800ddc6:	f001 f99f 	bl	800f108 <ulSetInterruptMask>
 800ddca:	e7fe      	b.n	800ddca <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800ddcc:	4b08      	ldr	r3, [pc, #32]	; (800ddf0 <vTaskStartScheduler+0xb0>)
 800ddce:	681b      	ldr	r3, [r3, #0]
}
 800ddd0:	bf00      	nop
 800ddd2:	3710      	adds	r7, #16
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	08010394 	.word	0x08010394
 800dddc:	0800e611 	.word	0x0800e611
 800dde0:	200018b8 	.word	0x200018b8
 800dde4:	200018b4 	.word	0x200018b4
 800dde8:	200018a0 	.word	0x200018a0
 800ddec:	20001898 	.word	0x20001898
 800ddf0:	20000048 	.word	0x20000048

0800ddf4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800ddf8:	4b04      	ldr	r3, [pc, #16]	; (800de0c <vTaskSuspendAll+0x18>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	4a03      	ldr	r2, [pc, #12]	; (800de0c <vTaskSuspendAll+0x18>)
 800de00:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800de02:	bf00      	nop
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr
 800de0c:	200018bc 	.word	0x200018bc

0800de10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800de16:	2300      	movs	r3, #0
 800de18:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800de1a:	2300      	movs	r3, #0
 800de1c:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800de1e:	4b6a      	ldr	r3, [pc, #424]	; (800dfc8 <xTaskResumeAll+0x1b8>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d102      	bne.n	800de2c <xTaskResumeAll+0x1c>
 800de26:	f001 f96f 	bl	800f108 <ulSetInterruptMask>
 800de2a:	e7fe      	b.n	800de2a <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800de2c:	f001 f82e 	bl	800ee8c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800de30:	4b65      	ldr	r3, [pc, #404]	; (800dfc8 <xTaskResumeAll+0x1b8>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	3b01      	subs	r3, #1
 800de36:	4a64      	ldr	r2, [pc, #400]	; (800dfc8 <xTaskResumeAll+0x1b8>)
 800de38:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de3a:	4b63      	ldr	r3, [pc, #396]	; (800dfc8 <xTaskResumeAll+0x1b8>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f040 80bb 	bne.w	800dfba <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de44:	4b61      	ldr	r3, [pc, #388]	; (800dfcc <xTaskResumeAll+0x1bc>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f000 80b6 	beq.w	800dfba <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de4e:	e08b      	b.n	800df68 <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de50:	4b5f      	ldr	r3, [pc, #380]	; (800dfd0 <xTaskResumeAll+0x1c0>)
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5c:	60bb      	str	r3, [r7, #8]
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	69db      	ldr	r3, [r3, #28]
 800de62:	697a      	ldr	r2, [r7, #20]
 800de64:	6a12      	ldr	r2, [r2, #32]
 800de66:	609a      	str	r2, [r3, #8]
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	6a1b      	ldr	r3, [r3, #32]
 800de6c:	697a      	ldr	r2, [r7, #20]
 800de6e:	69d2      	ldr	r2, [r2, #28]
 800de70:	605a      	str	r2, [r3, #4]
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	685a      	ldr	r2, [r3, #4]
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	3318      	adds	r3, #24
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d103      	bne.n	800de86 <xTaskResumeAll+0x76>
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	6a1a      	ldr	r2, [r3, #32]
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	605a      	str	r2, [r3, #4]
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	2200      	movs	r2, #0
 800de8a:	629a      	str	r2, [r3, #40]	; 0x28
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	1e5a      	subs	r2, r3, #1
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	607b      	str	r3, [r7, #4]
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	697a      	ldr	r2, [r7, #20]
 800dea2:	68d2      	ldr	r2, [r2, #12]
 800dea4:	609a      	str	r2, [r3, #8]
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	697a      	ldr	r2, [r7, #20]
 800deac:	6892      	ldr	r2, [r2, #8]
 800deae:	605a      	str	r2, [r3, #4]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	685a      	ldr	r2, [r3, #4]
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	3304      	adds	r3, #4
 800deb8:	429a      	cmp	r2, r3
 800deba:	d103      	bne.n	800dec4 <xTaskResumeAll+0xb4>
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	68da      	ldr	r2, [r3, #12]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	605a      	str	r2, [r3, #4]
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	2200      	movs	r2, #0
 800dec8:	615a      	str	r2, [r3, #20]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	1e5a      	subs	r2, r3, #1
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded8:	4b3e      	ldr	r3, [pc, #248]	; (800dfd4 <xTaskResumeAll+0x1c4>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d903      	bls.n	800dee8 <xTaskResumeAll+0xd8>
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee4:	4a3b      	ldr	r2, [pc, #236]	; (800dfd4 <xTaskResumeAll+0x1c4>)
 800dee6:	6013      	str	r3, [r2, #0]
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deec:	493a      	ldr	r1, [pc, #232]	; (800dfd8 <xTaskResumeAll+0x1c8>)
 800deee:	4613      	mov	r3, r2
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	4413      	add	r3, r2
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	440b      	add	r3, r1
 800def8:	3304      	adds	r3, #4
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	603b      	str	r3, [r7, #0]
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	683a      	ldr	r2, [r7, #0]
 800df02:	609a      	str	r2, [r3, #8]
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	689a      	ldr	r2, [r3, #8]
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	60da      	str	r2, [r3, #12]
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	689b      	ldr	r3, [r3, #8]
 800df10:	697a      	ldr	r2, [r7, #20]
 800df12:	3204      	adds	r2, #4
 800df14:	605a      	str	r2, [r3, #4]
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	1d1a      	adds	r2, r3, #4
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	609a      	str	r2, [r3, #8]
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df22:	4613      	mov	r3, r2
 800df24:	009b      	lsls	r3, r3, #2
 800df26:	4413      	add	r3, r2
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	4a2b      	ldr	r2, [pc, #172]	; (800dfd8 <xTaskResumeAll+0x1c8>)
 800df2c:	441a      	add	r2, r3
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	615a      	str	r2, [r3, #20]
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df36:	4928      	ldr	r1, [pc, #160]	; (800dfd8 <xTaskResumeAll+0x1c8>)
 800df38:	4613      	mov	r3, r2
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	4413      	add	r3, r2
 800df3e:	009b      	lsls	r3, r3, #2
 800df40:	440b      	add	r3, r1
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	1c59      	adds	r1, r3, #1
 800df46:	4824      	ldr	r0, [pc, #144]	; (800dfd8 <xTaskResumeAll+0x1c8>)
 800df48:	4613      	mov	r3, r2
 800df4a:	009b      	lsls	r3, r3, #2
 800df4c:	4413      	add	r3, r2
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	4403      	add	r3, r0
 800df52:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df58:	4b20      	ldr	r3, [pc, #128]	; (800dfdc <xTaskResumeAll+0x1cc>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df5e:	429a      	cmp	r2, r3
 800df60:	d302      	bcc.n	800df68 <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 800df62:	4b1f      	ldr	r3, [pc, #124]	; (800dfe0 <xTaskResumeAll+0x1d0>)
 800df64:	2201      	movs	r2, #1
 800df66:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df68:	4b19      	ldr	r3, [pc, #100]	; (800dfd0 <xTaskResumeAll+0x1c0>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f47f af6f 	bne.w	800de50 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d001      	beq.n	800df7c <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800df78:	f000 fbf0 	bl	800e75c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800df7c:	4b19      	ldr	r3, [pc, #100]	; (800dfe4 <xTaskResumeAll+0x1d4>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d010      	beq.n	800dfaa <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800df88:	f000 f83e 	bl	800e008 <xTaskIncrementTick>
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d002      	beq.n	800df98 <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 800df92:	4b13      	ldr	r3, [pc, #76]	; (800dfe0 <xTaskResumeAll+0x1d0>)
 800df94:	2201      	movs	r2, #1
 800df96:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	3b01      	subs	r3, #1
 800df9c:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1f1      	bne.n	800df88 <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 800dfa4:	4b0f      	ldr	r3, [pc, #60]	; (800dfe4 <xTaskResumeAll+0x1d4>)
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800dfaa:	4b0d      	ldr	r3, [pc, #52]	; (800dfe0 <xTaskResumeAll+0x1d0>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d003      	beq.n	800dfba <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800dfb6:	f000 ff57 	bl	800ee68 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800dfba:	f000 ff79 	bl	800eeb0 <vPortExitCritical>

    return xAlreadyYielded;
 800dfbe:	693b      	ldr	r3, [r7, #16]
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3718      	adds	r7, #24
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	200018bc 	.word	0x200018bc
 800dfcc:	20001894 	.word	0x20001894
 800dfd0:	20001854 	.word	0x20001854
 800dfd4:	2000189c 	.word	0x2000189c
 800dfd8:	200013c4 	.word	0x200013c4
 800dfdc:	200013c0 	.word	0x200013c0
 800dfe0:	200018a8 	.word	0x200018a8
 800dfe4:	200018a4 	.word	0x200018a4

0800dfe8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800dfee:	4b05      	ldr	r3, [pc, #20]	; (800e004 <xTaskGetTickCount+0x1c>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800dff4:	687b      	ldr	r3, [r7, #4]
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	370c      	adds	r7, #12
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop
 800e004:	20001898 	.word	0x20001898

0800e008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b088      	sub	sp, #32
 800e00c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800e00e:	2300      	movs	r3, #0
 800e010:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e012:	4b7a      	ldr	r3, [pc, #488]	; (800e1fc <xTaskIncrementTick+0x1f4>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	f040 80e5 	bne.w	800e1e6 <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e01c:	4b78      	ldr	r3, [pc, #480]	; (800e200 <xTaskIncrementTick+0x1f8>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	3301      	adds	r3, #1
 800e022:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800e024:	4a76      	ldr	r2, [pc, #472]	; (800e200 <xTaskIncrementTick+0x1f8>)
 800e026:	69bb      	ldr	r3, [r7, #24]
 800e028:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d118      	bne.n	800e062 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 800e030:	4b74      	ldr	r3, [pc, #464]	; (800e204 <xTaskIncrementTick+0x1fc>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d002      	beq.n	800e040 <xTaskIncrementTick+0x38>
 800e03a:	f001 f865 	bl	800f108 <ulSetInterruptMask>
 800e03e:	e7fe      	b.n	800e03e <xTaskIncrementTick+0x36>
 800e040:	4b70      	ldr	r3, [pc, #448]	; (800e204 <xTaskIncrementTick+0x1fc>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	617b      	str	r3, [r7, #20]
 800e046:	4b70      	ldr	r3, [pc, #448]	; (800e208 <xTaskIncrementTick+0x200>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4a6e      	ldr	r2, [pc, #440]	; (800e204 <xTaskIncrementTick+0x1fc>)
 800e04c:	6013      	str	r3, [r2, #0]
 800e04e:	4a6e      	ldr	r2, [pc, #440]	; (800e208 <xTaskIncrementTick+0x200>)
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	6013      	str	r3, [r2, #0]
 800e054:	4b6d      	ldr	r3, [pc, #436]	; (800e20c <xTaskIncrementTick+0x204>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	3301      	adds	r3, #1
 800e05a:	4a6c      	ldr	r2, [pc, #432]	; (800e20c <xTaskIncrementTick+0x204>)
 800e05c:	6013      	str	r3, [r2, #0]
 800e05e:	f000 fb7d 	bl	800e75c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800e062:	4b6b      	ldr	r3, [pc, #428]	; (800e210 <xTaskIncrementTick+0x208>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	69ba      	ldr	r2, [r7, #24]
 800e068:	429a      	cmp	r2, r3
 800e06a:	f0c0 80a7 	bcc.w	800e1bc <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e06e:	4b65      	ldr	r3, [pc, #404]	; (800e204 <xTaskIncrementTick+0x1fc>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d104      	bne.n	800e082 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e078:	4b65      	ldr	r3, [pc, #404]	; (800e210 <xTaskIncrementTick+0x208>)
 800e07a:	f04f 32ff 	mov.w	r2, #4294967295
 800e07e:	601a      	str	r2, [r3, #0]
                    break;
 800e080:	e09c      	b.n	800e1bc <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e082:	4b60      	ldr	r3, [pc, #384]	; (800e204 <xTaskIncrementTick+0x1fc>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	68db      	ldr	r3, [r3, #12]
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800e092:	69ba      	ldr	r2, [r7, #24]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	429a      	cmp	r2, r3
 800e098:	d203      	bcs.n	800e0a2 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800e09a:	4a5d      	ldr	r2, [pc, #372]	; (800e210 <xTaskIncrementTick+0x208>)
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800e0a0:	e08c      	b.n	800e1bc <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	695b      	ldr	r3, [r3, #20]
 800e0a6:	60bb      	str	r3, [r7, #8]
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	693a      	ldr	r2, [r7, #16]
 800e0ae:	68d2      	ldr	r2, [r2, #12]
 800e0b0:	609a      	str	r2, [r3, #8]
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	693a      	ldr	r2, [r7, #16]
 800e0b8:	6892      	ldr	r2, [r2, #8]
 800e0ba:	605a      	str	r2, [r3, #4]
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	685a      	ldr	r2, [r3, #4]
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	3304      	adds	r3, #4
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d103      	bne.n	800e0d0 <xTaskIncrementTick+0xc8>
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	68da      	ldr	r2, [r3, #12]
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	605a      	str	r2, [r3, #4]
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	615a      	str	r2, [r3, #20]
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	1e5a      	subs	r2, r3, #1
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d01e      	beq.n	800e126 <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ec:	607b      	str	r3, [r7, #4]
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	69db      	ldr	r3, [r3, #28]
 800e0f2:	693a      	ldr	r2, [r7, #16]
 800e0f4:	6a12      	ldr	r2, [r2, #32]
 800e0f6:	609a      	str	r2, [r3, #8]
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	6a1b      	ldr	r3, [r3, #32]
 800e0fc:	693a      	ldr	r2, [r7, #16]
 800e0fe:	69d2      	ldr	r2, [r2, #28]
 800e100:	605a      	str	r2, [r3, #4]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	685a      	ldr	r2, [r3, #4]
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	3318      	adds	r3, #24
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d103      	bne.n	800e116 <xTaskIncrementTick+0x10e>
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	6a1a      	ldr	r2, [r3, #32]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	605a      	str	r2, [r3, #4]
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	2200      	movs	r2, #0
 800e11a:	629a      	str	r2, [r3, #40]	; 0x28
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	1e5a      	subs	r2, r3, #1
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e12a:	4b3a      	ldr	r3, [pc, #232]	; (800e214 <xTaskIncrementTick+0x20c>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d903      	bls.n	800e13a <xTaskIncrementTick+0x132>
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e136:	4a37      	ldr	r2, [pc, #220]	; (800e214 <xTaskIncrementTick+0x20c>)
 800e138:	6013      	str	r3, [r2, #0]
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e13e:	4936      	ldr	r1, [pc, #216]	; (800e218 <xTaskIncrementTick+0x210>)
 800e140:	4613      	mov	r3, r2
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	4413      	add	r3, r2
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	440b      	add	r3, r1
 800e14a:	3304      	adds	r3, #4
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	603b      	str	r3, [r7, #0]
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	683a      	ldr	r2, [r7, #0]
 800e154:	609a      	str	r2, [r3, #8]
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	689a      	ldr	r2, [r3, #8]
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	60da      	str	r2, [r3, #12]
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	693a      	ldr	r2, [r7, #16]
 800e164:	3204      	adds	r2, #4
 800e166:	605a      	str	r2, [r3, #4]
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	1d1a      	adds	r2, r3, #4
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	609a      	str	r2, [r3, #8]
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e174:	4613      	mov	r3, r2
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	4413      	add	r3, r2
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	4a26      	ldr	r2, [pc, #152]	; (800e218 <xTaskIncrementTick+0x210>)
 800e17e:	441a      	add	r2, r3
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	615a      	str	r2, [r3, #20]
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e188:	4923      	ldr	r1, [pc, #140]	; (800e218 <xTaskIncrementTick+0x210>)
 800e18a:	4613      	mov	r3, r2
 800e18c:	009b      	lsls	r3, r3, #2
 800e18e:	4413      	add	r3, r2
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	440b      	add	r3, r1
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	1c59      	adds	r1, r3, #1
 800e198:	481f      	ldr	r0, [pc, #124]	; (800e218 <xTaskIncrementTick+0x210>)
 800e19a:	4613      	mov	r3, r2
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	4413      	add	r3, r2
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	4403      	add	r3, r0
 800e1a4:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1aa:	4b1c      	ldr	r3, [pc, #112]	; (800e21c <xTaskIncrementTick+0x214>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	f67f af5c 	bls.w	800e06e <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1ba:	e758      	b.n	800e06e <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e1bc:	4b17      	ldr	r3, [pc, #92]	; (800e21c <xTaskIncrementTick+0x214>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1c2:	4915      	ldr	r1, [pc, #84]	; (800e218 <xTaskIncrementTick+0x210>)
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	4413      	add	r3, r2
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	440b      	add	r3, r1
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d901      	bls.n	800e1d8 <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800e1d8:	4b11      	ldr	r3, [pc, #68]	; (800e220 <xTaskIncrementTick+0x218>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d007      	beq.n	800e1f0 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	61fb      	str	r3, [r7, #28]
 800e1e4:	e004      	b.n	800e1f0 <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800e1e6:	4b0f      	ldr	r3, [pc, #60]	; (800e224 <xTaskIncrementTick+0x21c>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	4a0d      	ldr	r2, [pc, #52]	; (800e224 <xTaskIncrementTick+0x21c>)
 800e1ee:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800e1f0:	69fb      	ldr	r3, [r7, #28]
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3720      	adds	r7, #32
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	200018bc 	.word	0x200018bc
 800e200:	20001898 	.word	0x20001898
 800e204:	2000184c 	.word	0x2000184c
 800e208:	20001850 	.word	0x20001850
 800e20c:	200018ac 	.word	0x200018ac
 800e210:	200018b4 	.word	0x200018b4
 800e214:	2000189c 	.word	0x2000189c
 800e218:	200013c4 	.word	0x200013c4
 800e21c:	200013c0 	.word	0x200013c0
 800e220:	200018a8 	.word	0x200018a8
 800e224:	200018a4 	.word	0x200018a4

0800e228 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e22e:	4b23      	ldr	r3, [pc, #140]	; (800e2bc <vTaskSwitchContext+0x94>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d003      	beq.n	800e23e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800e236:	4b22      	ldr	r3, [pc, #136]	; (800e2c0 <vTaskSwitchContext+0x98>)
 800e238:	2201      	movs	r2, #1
 800e23a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800e23c:	e039      	b.n	800e2b2 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800e23e:	4b20      	ldr	r3, [pc, #128]	; (800e2c0 <vTaskSwitchContext+0x98>)
 800e240:	2200      	movs	r2, #0
 800e242:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e244:	4b1f      	ldr	r3, [pc, #124]	; (800e2c4 <vTaskSwitchContext+0x9c>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	607b      	str	r3, [r7, #4]
 800e24a:	e008      	b.n	800e25e <vTaskSwitchContext+0x36>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d102      	bne.n	800e258 <vTaskSwitchContext+0x30>
 800e252:	f000 ff59 	bl	800f108 <ulSetInterruptMask>
 800e256:	e7fe      	b.n	800e256 <vTaskSwitchContext+0x2e>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	3b01      	subs	r3, #1
 800e25c:	607b      	str	r3, [r7, #4]
 800e25e:	491a      	ldr	r1, [pc, #104]	; (800e2c8 <vTaskSwitchContext+0xa0>)
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	4613      	mov	r3, r2
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	4413      	add	r3, r2
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	440b      	add	r3, r1
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d0ec      	beq.n	800e24c <vTaskSwitchContext+0x24>
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	4613      	mov	r3, r2
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	4413      	add	r3, r2
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	4a12      	ldr	r2, [pc, #72]	; (800e2c8 <vTaskSwitchContext+0xa0>)
 800e27e:	4413      	add	r3, r2
 800e280:	603b      	str	r3, [r7, #0]
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	685a      	ldr	r2, [r3, #4]
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	605a      	str	r2, [r3, #4]
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	685a      	ldr	r2, [r3, #4]
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	3308      	adds	r3, #8
 800e294:	429a      	cmp	r2, r3
 800e296:	d104      	bne.n	800e2a2 <vTaskSwitchContext+0x7a>
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	685a      	ldr	r2, [r3, #4]
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	605a      	str	r2, [r3, #4]
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	4a08      	ldr	r2, [pc, #32]	; (800e2cc <vTaskSwitchContext+0xa4>)
 800e2aa:	6013      	str	r3, [r2, #0]
 800e2ac:	4a05      	ldr	r2, [pc, #20]	; (800e2c4 <vTaskSwitchContext+0x9c>)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6013      	str	r3, [r2, #0]
}
 800e2b2:	bf00      	nop
 800e2b4:	3708      	adds	r7, #8
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	200018bc 	.word	0x200018bc
 800e2c0:	200018a8 	.word	0x200018a8
 800e2c4:	2000189c 	.word	0x2000189c
 800e2c8:	200013c4 	.word	0x200013c4
 800e2cc:	200013c0 	.word	0x200013c0

0800e2d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d102      	bne.n	800e2e6 <vTaskPlaceOnEventList+0x16>
 800e2e0:	f000 ff12 	bl	800f108 <ulSetInterruptMask>
 800e2e4:	e7fe      	b.n	800e2e4 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2e6:	4b07      	ldr	r3, [pc, #28]	; (800e304 <vTaskPlaceOnEventList+0x34>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	3318      	adds	r3, #24
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7ff f85b 	bl	800d3aa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e2f4:	2101      	movs	r1, #1
 800e2f6:	6838      	ldr	r0, [r7, #0]
 800e2f8:	f000 fa6a 	bl	800e7d0 <prvAddCurrentTaskToDelayedList>
}
 800e2fc:	bf00      	nop
 800e2fe:	3708      	adds	r7, #8
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}
 800e304:	200013c0 	.word	0x200013c0

0800e308 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800e308:	b580      	push	{r7, lr}
 800e30a:	b086      	sub	sp, #24
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d102      	bne.n	800e320 <vTaskPlaceOnEventListRestricted+0x18>
 800e31a:	f000 fef5 	bl	800f108 <ulSetInterruptMask>
 800e31e:	e7fe      	b.n	800e31e <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	617b      	str	r3, [r7, #20]
 800e326:	4b16      	ldr	r3, [pc, #88]	; (800e380 <vTaskPlaceOnEventListRestricted+0x78>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	697a      	ldr	r2, [r7, #20]
 800e32c:	61da      	str	r2, [r3, #28]
 800e32e:	4b14      	ldr	r3, [pc, #80]	; (800e380 <vTaskPlaceOnEventListRestricted+0x78>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	697a      	ldr	r2, [r7, #20]
 800e334:	6892      	ldr	r2, [r2, #8]
 800e336:	621a      	str	r2, [r3, #32]
 800e338:	4b11      	ldr	r3, [pc, #68]	; (800e380 <vTaskPlaceOnEventListRestricted+0x78>)
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	3218      	adds	r2, #24
 800e342:	605a      	str	r2, [r3, #4]
 800e344:	4b0e      	ldr	r3, [pc, #56]	; (800e380 <vTaskPlaceOnEventListRestricted+0x78>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f103 0218 	add.w	r2, r3, #24
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	609a      	str	r2, [r3, #8]
 800e350:	4b0b      	ldr	r3, [pc, #44]	; (800e380 <vTaskPlaceOnEventListRestricted+0x78>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	629a      	str	r2, [r3, #40]	; 0x28
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	1c5a      	adds	r2, r3, #1
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d002      	beq.n	800e36e <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 800e368:	f04f 33ff 	mov.w	r3, #4294967295
 800e36c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e36e:	6879      	ldr	r1, [r7, #4]
 800e370:	68b8      	ldr	r0, [r7, #8]
 800e372:	f000 fa2d 	bl	800e7d0 <prvAddCurrentTaskToDelayedList>
    }
 800e376:	bf00      	nop
 800e378:	3718      	adds	r7, #24
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	200013c0 	.word	0x200013c0

0800e384 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b088      	sub	sp, #32
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800e394:	69bb      	ldr	r3, [r7, #24]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d102      	bne.n	800e3a0 <xTaskRemoveFromEventList+0x1c>
 800e39a:	f000 feb5 	bl	800f108 <ulSetInterruptMask>
 800e39e:	e7fe      	b.n	800e39e <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a4:	617b      	str	r3, [r7, #20]
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	69db      	ldr	r3, [r3, #28]
 800e3aa:	69ba      	ldr	r2, [r7, #24]
 800e3ac:	6a12      	ldr	r2, [r2, #32]
 800e3ae:	609a      	str	r2, [r3, #8]
 800e3b0:	69bb      	ldr	r3, [r7, #24]
 800e3b2:	6a1b      	ldr	r3, [r3, #32]
 800e3b4:	69ba      	ldr	r2, [r7, #24]
 800e3b6:	69d2      	ldr	r2, [r2, #28]
 800e3b8:	605a      	str	r2, [r3, #4]
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	685a      	ldr	r2, [r3, #4]
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	3318      	adds	r3, #24
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d103      	bne.n	800e3ce <xTaskRemoveFromEventList+0x4a>
 800e3c6:	69bb      	ldr	r3, [r7, #24]
 800e3c8:	6a1a      	ldr	r2, [r3, #32]
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	605a      	str	r2, [r3, #4]
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	629a      	str	r2, [r3, #40]	; 0x28
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	1e5a      	subs	r2, r3, #1
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3de:	4b4a      	ldr	r3, [pc, #296]	; (800e508 <xTaskRemoveFromEventList+0x184>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d15f      	bne.n	800e4a6 <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	695b      	ldr	r3, [r3, #20]
 800e3ea:	60fb      	str	r3, [r7, #12]
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	689b      	ldr	r3, [r3, #8]
 800e3f0:	69ba      	ldr	r2, [r7, #24]
 800e3f2:	68d2      	ldr	r2, [r2, #12]
 800e3f4:	609a      	str	r2, [r3, #8]
 800e3f6:	69bb      	ldr	r3, [r7, #24]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	69ba      	ldr	r2, [r7, #24]
 800e3fc:	6892      	ldr	r2, [r2, #8]
 800e3fe:	605a      	str	r2, [r3, #4]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	685a      	ldr	r2, [r3, #4]
 800e404:	69bb      	ldr	r3, [r7, #24]
 800e406:	3304      	adds	r3, #4
 800e408:	429a      	cmp	r2, r3
 800e40a:	d103      	bne.n	800e414 <xTaskRemoveFromEventList+0x90>
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	68da      	ldr	r2, [r3, #12]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	605a      	str	r2, [r3, #4]
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	2200      	movs	r2, #0
 800e418:	615a      	str	r2, [r3, #20]
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	1e5a      	subs	r2, r3, #1
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800e424:	69bb      	ldr	r3, [r7, #24]
 800e426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e428:	4b38      	ldr	r3, [pc, #224]	; (800e50c <xTaskRemoveFromEventList+0x188>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d903      	bls.n	800e438 <xTaskRemoveFromEventList+0xb4>
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e434:	4a35      	ldr	r2, [pc, #212]	; (800e50c <xTaskRemoveFromEventList+0x188>)
 800e436:	6013      	str	r3, [r2, #0]
 800e438:	69bb      	ldr	r3, [r7, #24]
 800e43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e43c:	4934      	ldr	r1, [pc, #208]	; (800e510 <xTaskRemoveFromEventList+0x18c>)
 800e43e:	4613      	mov	r3, r2
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	4413      	add	r3, r2
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	440b      	add	r3, r1
 800e448:	3304      	adds	r3, #4
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	60bb      	str	r3, [r7, #8]
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	68ba      	ldr	r2, [r7, #8]
 800e452:	609a      	str	r2, [r3, #8]
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	689a      	ldr	r2, [r3, #8]
 800e458:	69bb      	ldr	r3, [r7, #24]
 800e45a:	60da      	str	r2, [r3, #12]
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	689b      	ldr	r3, [r3, #8]
 800e460:	69ba      	ldr	r2, [r7, #24]
 800e462:	3204      	adds	r2, #4
 800e464:	605a      	str	r2, [r3, #4]
 800e466:	69bb      	ldr	r3, [r7, #24]
 800e468:	1d1a      	adds	r2, r3, #4
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	609a      	str	r2, [r3, #8]
 800e46e:	69bb      	ldr	r3, [r7, #24]
 800e470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e472:	4613      	mov	r3, r2
 800e474:	009b      	lsls	r3, r3, #2
 800e476:	4413      	add	r3, r2
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	4a25      	ldr	r2, [pc, #148]	; (800e510 <xTaskRemoveFromEventList+0x18c>)
 800e47c:	441a      	add	r2, r3
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	615a      	str	r2, [r3, #20]
 800e482:	69bb      	ldr	r3, [r7, #24]
 800e484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e486:	4922      	ldr	r1, [pc, #136]	; (800e510 <xTaskRemoveFromEventList+0x18c>)
 800e488:	4613      	mov	r3, r2
 800e48a:	009b      	lsls	r3, r3, #2
 800e48c:	4413      	add	r3, r2
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	440b      	add	r3, r1
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	1c59      	adds	r1, r3, #1
 800e496:	481e      	ldr	r0, [pc, #120]	; (800e510 <xTaskRemoveFromEventList+0x18c>)
 800e498:	4613      	mov	r3, r2
 800e49a:	009b      	lsls	r3, r3, #2
 800e49c:	4413      	add	r3, r2
 800e49e:	009b      	lsls	r3, r3, #2
 800e4a0:	4403      	add	r3, r0
 800e4a2:	6019      	str	r1, [r3, #0]
 800e4a4:	e01b      	b.n	800e4de <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e4a6:	4b1b      	ldr	r3, [pc, #108]	; (800e514 <xTaskRemoveFromEventList+0x190>)
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	613b      	str	r3, [r7, #16]
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	693a      	ldr	r2, [r7, #16]
 800e4b0:	61da      	str	r2, [r3, #28]
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	689a      	ldr	r2, [r3, #8]
 800e4b6:	69bb      	ldr	r3, [r7, #24]
 800e4b8:	621a      	str	r2, [r3, #32]
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	69ba      	ldr	r2, [r7, #24]
 800e4c0:	3218      	adds	r2, #24
 800e4c2:	605a      	str	r2, [r3, #4]
 800e4c4:	69bb      	ldr	r3, [r7, #24]
 800e4c6:	f103 0218 	add.w	r2, r3, #24
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	609a      	str	r2, [r3, #8]
 800e4ce:	69bb      	ldr	r3, [r7, #24]
 800e4d0:	4a10      	ldr	r2, [pc, #64]	; (800e514 <xTaskRemoveFromEventList+0x190>)
 800e4d2:	629a      	str	r2, [r3, #40]	; 0x28
 800e4d4:	4b0f      	ldr	r3, [pc, #60]	; (800e514 <xTaskRemoveFromEventList+0x190>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	4a0e      	ldr	r2, [pc, #56]	; (800e514 <xTaskRemoveFromEventList+0x190>)
 800e4dc:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e4de:	69bb      	ldr	r3, [r7, #24]
 800e4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4e2:	4b0d      	ldr	r3, [pc, #52]	; (800e518 <xTaskRemoveFromEventList+0x194>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d905      	bls.n	800e4f8 <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800e4f0:	4b0a      	ldr	r3, [pc, #40]	; (800e51c <xTaskRemoveFromEventList+0x198>)
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	601a      	str	r2, [r3, #0]
 800e4f6:	e001      	b.n	800e4fc <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800e4fc:	69fb      	ldr	r3, [r7, #28]
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3720      	adds	r7, #32
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	200018bc 	.word	0x200018bc
 800e50c:	2000189c 	.word	0x2000189c
 800e510:	200013c4 	.word	0x200013c4
 800e514:	20001854 	.word	0x20001854
 800e518:	200013c0 	.word	0x200013c0
 800e51c:	200018a8 	.word	0x200018a8

0800e520 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e528:	4b06      	ldr	r3, [pc, #24]	; (800e544 <vTaskInternalSetTimeOutState+0x24>)
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800e530:	4b05      	ldr	r3, [pc, #20]	; (800e548 <vTaskInternalSetTimeOutState+0x28>)
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	605a      	str	r2, [r3, #4]
}
 800e538:	bf00      	nop
 800e53a:	370c      	adds	r7, #12
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr
 800e544:	200018ac 	.word	0x200018ac
 800e548:	20001898 	.word	0x20001898

0800e54c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b086      	sub	sp, #24
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d102      	bne.n	800e562 <xTaskCheckForTimeOut+0x16>
 800e55c:	f000 fdd4 	bl	800f108 <ulSetInterruptMask>
 800e560:	e7fe      	b.n	800e560 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d102      	bne.n	800e56e <xTaskCheckForTimeOut+0x22>
 800e568:	f000 fdce 	bl	800f108 <ulSetInterruptMask>
 800e56c:	e7fe      	b.n	800e56c <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 800e56e:	f000 fc8d 	bl	800ee8c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800e572:	4b1f      	ldr	r3, [pc, #124]	; (800e5f0 <xTaskCheckForTimeOut+0xa4>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	693a      	ldr	r2, [r7, #16]
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e58a:	d102      	bne.n	800e592 <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800e58c:	2300      	movs	r3, #0
 800e58e:	617b      	str	r3, [r7, #20]
 800e590:	e026      	b.n	800e5e0 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	4b17      	ldr	r3, [pc, #92]	; (800e5f4 <xTaskCheckForTimeOut+0xa8>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d00a      	beq.n	800e5b4 <xTaskCheckForTimeOut+0x68>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	693a      	ldr	r2, [r7, #16]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d305      	bcc.n	800e5b4 <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	601a      	str	r2, [r3, #0]
 800e5b2:	e015      	b.n	800e5e0 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	68fa      	ldr	r2, [r7, #12]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d20b      	bcs.n	800e5d6 <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	1ad2      	subs	r2, r2, r3
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f7ff ffa8 	bl	800e520 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	617b      	str	r3, [r7, #20]
 800e5d4:	e004      	b.n	800e5e0 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800e5e0:	f000 fc66 	bl	800eeb0 <vPortExitCritical>

    return xReturn;
 800e5e4:	697b      	ldr	r3, [r7, #20]
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3718      	adds	r7, #24
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	20001898 	.word	0x20001898
 800e5f4:	200018ac 	.word	0x200018ac

0800e5f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800e5fc:	4b03      	ldr	r3, [pc, #12]	; (800e60c <vTaskMissedYield+0x14>)
 800e5fe:	2201      	movs	r2, #1
 800e600:	601a      	str	r2, [r3, #0]
}
 800e602:	bf00      	nop
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr
 800e60c:	200018a8 	.word	0x200018a8

0800e610 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800e618:	f000 f84a 	bl	800e6b0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e61c:	4b03      	ldr	r3, [pc, #12]	; (800e62c <prvIdleTask+0x1c>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2b01      	cmp	r3, #1
 800e622:	d9f9      	bls.n	800e618 <prvIdleTask+0x8>
            {
                taskYIELD();
 800e624:	f000 fc20 	bl	800ee68 <vPortYield>
        prvCheckTasksWaitingTermination();
 800e628:	e7f6      	b.n	800e618 <prvIdleTask+0x8>
 800e62a:	bf00      	nop
 800e62c:	200013c4 	.word	0x200013c4

0800e630 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e636:	2300      	movs	r3, #0
 800e638:	607b      	str	r3, [r7, #4]
 800e63a:	e00c      	b.n	800e656 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e63c:	687a      	ldr	r2, [r7, #4]
 800e63e:	4613      	mov	r3, r2
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	4413      	add	r3, r2
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	4a12      	ldr	r2, [pc, #72]	; (800e690 <prvInitialiseTaskLists+0x60>)
 800e648:	4413      	add	r3, r2
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7fe fe80 	bl	800d350 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	3301      	adds	r3, #1
 800e654:	607b      	str	r3, [r7, #4]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2b37      	cmp	r3, #55	; 0x37
 800e65a:	d9ef      	bls.n	800e63c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800e65c:	480d      	ldr	r0, [pc, #52]	; (800e694 <prvInitialiseTaskLists+0x64>)
 800e65e:	f7fe fe77 	bl	800d350 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800e662:	480d      	ldr	r0, [pc, #52]	; (800e698 <prvInitialiseTaskLists+0x68>)
 800e664:	f7fe fe74 	bl	800d350 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800e668:	480c      	ldr	r0, [pc, #48]	; (800e69c <prvInitialiseTaskLists+0x6c>)
 800e66a:	f7fe fe71 	bl	800d350 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800e66e:	480c      	ldr	r0, [pc, #48]	; (800e6a0 <prvInitialiseTaskLists+0x70>)
 800e670:	f7fe fe6e 	bl	800d350 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800e674:	480b      	ldr	r0, [pc, #44]	; (800e6a4 <prvInitialiseTaskLists+0x74>)
 800e676:	f7fe fe6b 	bl	800d350 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800e67a:	4b0b      	ldr	r3, [pc, #44]	; (800e6a8 <prvInitialiseTaskLists+0x78>)
 800e67c:	4a05      	ldr	r2, [pc, #20]	; (800e694 <prvInitialiseTaskLists+0x64>)
 800e67e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e680:	4b0a      	ldr	r3, [pc, #40]	; (800e6ac <prvInitialiseTaskLists+0x7c>)
 800e682:	4a05      	ldr	r2, [pc, #20]	; (800e698 <prvInitialiseTaskLists+0x68>)
 800e684:	601a      	str	r2, [r3, #0]
}
 800e686:	bf00      	nop
 800e688:	3708      	adds	r7, #8
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
 800e68e:	bf00      	nop
 800e690:	200013c4 	.word	0x200013c4
 800e694:	20001824 	.word	0x20001824
 800e698:	20001838 	.word	0x20001838
 800e69c:	20001854 	.word	0x20001854
 800e6a0:	20001868 	.word	0x20001868
 800e6a4:	20001880 	.word	0x20001880
 800e6a8:	2000184c 	.word	0x2000184c
 800e6ac:	20001850 	.word	0x20001850

0800e6b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e6b6:	e019      	b.n	800e6ec <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800e6b8:	f000 fbe8 	bl	800ee8c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6bc:	4b10      	ldr	r3, [pc, #64]	; (800e700 <prvCheckTasksWaitingTermination+0x50>)
 800e6be:	68db      	ldr	r3, [r3, #12]
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	3304      	adds	r3, #4
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7fe fea7 	bl	800d41c <uxListRemove>
                --uxCurrentNumberOfTasks;
 800e6ce:	4b0d      	ldr	r3, [pc, #52]	; (800e704 <prvCheckTasksWaitingTermination+0x54>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	3b01      	subs	r3, #1
 800e6d4:	4a0b      	ldr	r2, [pc, #44]	; (800e704 <prvCheckTasksWaitingTermination+0x54>)
 800e6d6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800e6d8:	4b0b      	ldr	r3, [pc, #44]	; (800e708 <prvCheckTasksWaitingTermination+0x58>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	3b01      	subs	r3, #1
 800e6de:	4a0a      	ldr	r2, [pc, #40]	; (800e708 <prvCheckTasksWaitingTermination+0x58>)
 800e6e0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800e6e2:	f000 fbe5 	bl	800eeb0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f000 f810 	bl	800e70c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e6ec:	4b06      	ldr	r3, [pc, #24]	; (800e708 <prvCheckTasksWaitingTermination+0x58>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d1e1      	bne.n	800e6b8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800e6f4:	bf00      	nop
 800e6f6:	bf00      	nop
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	20001868 	.word	0x20001868
 800e704:	20001894 	.word	0x20001894
 800e708:	2000187c 	.word	0x2000187c

0800e70c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d108      	bne.n	800e730 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e722:	4618      	mov	r0, r3
 800e724:	f000 fdfa 	bl	800f31c <vPortFree>
                vPortFree( pxTCB );
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 fdf7 	bl	800f31c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800e72e:	e010      	b.n	800e752 <prvDeleteTCB+0x46>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e736:	2b01      	cmp	r3, #1
 800e738:	d103      	bne.n	800e742 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f000 fdee 	bl	800f31c <vPortFree>
    }
 800e740:	e007      	b.n	800e752 <prvDeleteTCB+0x46>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e748:	2b02      	cmp	r3, #2
 800e74a:	d002      	beq.n	800e752 <prvDeleteTCB+0x46>
 800e74c:	f000 fcdc 	bl	800f108 <ulSetInterruptMask>
 800e750:	e7fe      	b.n	800e750 <prvDeleteTCB+0x44>
    }
 800e752:	bf00      	nop
 800e754:	3708      	adds	r7, #8
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
	...

0800e75c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e75c:	b480      	push	{r7}
 800e75e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e760:	4b0a      	ldr	r3, [pc, #40]	; (800e78c <prvResetNextTaskUnblockTime+0x30>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d104      	bne.n	800e774 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800e76a:	4b09      	ldr	r3, [pc, #36]	; (800e790 <prvResetNextTaskUnblockTime+0x34>)
 800e76c:	f04f 32ff 	mov.w	r2, #4294967295
 800e770:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800e772:	e005      	b.n	800e780 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e774:	4b05      	ldr	r3, [pc, #20]	; (800e78c <prvResetNextTaskUnblockTime+0x30>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	68db      	ldr	r3, [r3, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4a04      	ldr	r2, [pc, #16]	; (800e790 <prvResetNextTaskUnblockTime+0x34>)
 800e77e:	6013      	str	r3, [r2, #0]
}
 800e780:	bf00      	nop
 800e782:	46bd      	mov	sp, r7
 800e784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e788:	4770      	bx	lr
 800e78a:	bf00      	nop
 800e78c:	2000184c 	.word	0x2000184c
 800e790:	200018b4 	.word	0x200018b4

0800e794 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800e794:	b480      	push	{r7}
 800e796:	b083      	sub	sp, #12
 800e798:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800e79a:	4b0b      	ldr	r3, [pc, #44]	; (800e7c8 <xTaskGetSchedulerState+0x34>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d102      	bne.n	800e7a8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	607b      	str	r3, [r7, #4]
 800e7a6:	e008      	b.n	800e7ba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7a8:	4b08      	ldr	r3, [pc, #32]	; (800e7cc <xTaskGetSchedulerState+0x38>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d102      	bne.n	800e7b6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800e7b0:	2302      	movs	r3, #2
 800e7b2:	607b      	str	r3, [r7, #4]
 800e7b4:	e001      	b.n	800e7ba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800e7ba:	687b      	ldr	r3, [r7, #4]
    }
 800e7bc:	4618      	mov	r0, r3
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr
 800e7c8:	200018a0 	.word	0x200018a0
 800e7cc:	200018bc 	.word	0x200018bc

0800e7d0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b086      	sub	sp, #24
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800e7da:	4b2e      	ldr	r3, [pc, #184]	; (800e894 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7e0:	4b2d      	ldr	r3, [pc, #180]	; (800e898 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	3304      	adds	r3, #4
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7fe fe18 	bl	800d41c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f2:	d124      	bne.n	800e83e <prvAddCurrentTaskToDelayedList+0x6e>
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d021      	beq.n	800e83e <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7fa:	4b28      	ldr	r3, [pc, #160]	; (800e89c <prvAddCurrentTaskToDelayedList+0xcc>)
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	613b      	str	r3, [r7, #16]
 800e800:	4b25      	ldr	r3, [pc, #148]	; (800e898 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	693a      	ldr	r2, [r7, #16]
 800e806:	609a      	str	r2, [r3, #8]
 800e808:	4b23      	ldr	r3, [pc, #140]	; (800e898 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	693a      	ldr	r2, [r7, #16]
 800e80e:	6892      	ldr	r2, [r2, #8]
 800e810:	60da      	str	r2, [r3, #12]
 800e812:	4b21      	ldr	r3, [pc, #132]	; (800e898 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	3204      	adds	r2, #4
 800e81c:	605a      	str	r2, [r3, #4]
 800e81e:	4b1e      	ldr	r3, [pc, #120]	; (800e898 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	1d1a      	adds	r2, r3, #4
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	609a      	str	r2, [r3, #8]
 800e828:	4b1b      	ldr	r3, [pc, #108]	; (800e898 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a1b      	ldr	r2, [pc, #108]	; (800e89c <prvAddCurrentTaskToDelayedList+0xcc>)
 800e82e:	615a      	str	r2, [r3, #20]
 800e830:	4b1a      	ldr	r3, [pc, #104]	; (800e89c <prvAddCurrentTaskToDelayedList+0xcc>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	3301      	adds	r3, #1
 800e836:	4a19      	ldr	r2, [pc, #100]	; (800e89c <prvAddCurrentTaskToDelayedList+0xcc>)
 800e838:	6013      	str	r3, [r2, #0]
 800e83a:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800e83c:	e026      	b.n	800e88c <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800e83e:	697a      	ldr	r2, [r7, #20]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4413      	add	r3, r2
 800e844:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e846:	4b14      	ldr	r3, [pc, #80]	; (800e898 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	68fa      	ldr	r2, [r7, #12]
 800e84c:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	429a      	cmp	r2, r3
 800e854:	d209      	bcs.n	800e86a <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e856:	4b12      	ldr	r3, [pc, #72]	; (800e8a0 <prvAddCurrentTaskToDelayedList+0xd0>)
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	4b0f      	ldr	r3, [pc, #60]	; (800e898 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	3304      	adds	r3, #4
 800e860:	4619      	mov	r1, r3
 800e862:	4610      	mov	r0, r2
 800e864:	f7fe fda1 	bl	800d3aa <vListInsert>
}
 800e868:	e010      	b.n	800e88c <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e86a:	4b0e      	ldr	r3, [pc, #56]	; (800e8a4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	4b0a      	ldr	r3, [pc, #40]	; (800e898 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	3304      	adds	r3, #4
 800e874:	4619      	mov	r1, r3
 800e876:	4610      	mov	r0, r2
 800e878:	f7fe fd97 	bl	800d3aa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800e87c:	4b0a      	ldr	r3, [pc, #40]	; (800e8a8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	429a      	cmp	r2, r3
 800e884:	d202      	bcs.n	800e88c <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800e886:	4a08      	ldr	r2, [pc, #32]	; (800e8a8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	6013      	str	r3, [r2, #0]
}
 800e88c:	bf00      	nop
 800e88e:	3718      	adds	r7, #24
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	20001898 	.word	0x20001898
 800e898:	200013c0 	.word	0x200013c0
 800e89c:	20001880 	.word	0x20001880
 800e8a0:	20001850 	.word	0x20001850
 800e8a4:	2000184c 	.word	0x2000184c
 800e8a8:	200018b4 	.word	0x200018b4

0800e8ac <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b088      	sub	sp, #32
 800e8b0:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800e8b6:	f000 fa59 	bl	800ed6c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800e8ba:	4b18      	ldr	r3, [pc, #96]	; (800e91c <xTimerCreateTimerTask+0x70>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d020      	beq.n	800e904 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e8ca:	463a      	mov	r2, r7
 800e8cc:	1d39      	adds	r1, r7, #4
 800e8ce:	f107 0308 	add.w	r3, r7, #8
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fe fd22 	bl	800d31c <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800e8d8:	6839      	ldr	r1, [r7, #0]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	68ba      	ldr	r2, [r7, #8]
 800e8de:	9202      	str	r2, [sp, #8]
 800e8e0:	9301      	str	r3, [sp, #4]
 800e8e2:	2302      	movs	r3, #2
 800e8e4:	9300      	str	r3, [sp, #0]
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	460a      	mov	r2, r1
 800e8ea:	490d      	ldr	r1, [pc, #52]	; (800e920 <xTimerCreateTimerTask+0x74>)
 800e8ec:	480d      	ldr	r0, [pc, #52]	; (800e924 <xTimerCreateTimerTask+0x78>)
 800e8ee:	f7ff f85f 	bl	800d9b0 <xTaskCreateStatic>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	4a0c      	ldr	r2, [pc, #48]	; (800e928 <xTimerCreateTimerTask+0x7c>)
 800e8f6:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800e8f8:	4b0b      	ldr	r3, [pc, #44]	; (800e928 <xTimerCreateTimerTask+0x7c>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d001      	beq.n	800e904 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800e900:	2301      	movs	r3, #1
 800e902:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d102      	bne.n	800e910 <xTimerCreateTimerTask+0x64>
 800e90a:	f000 fbfd 	bl	800f108 <ulSetInterruptMask>
 800e90e:	e7fe      	b.n	800e90e <xTimerCreateTimerTask+0x62>
        return xReturn;
 800e910:	68fb      	ldr	r3, [r7, #12]
    }
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	200018f0 	.word	0x200018f0
 800e920:	0801039c 	.word	0x0801039c
 800e924:	0800e9d1 	.word	0x0800e9d1
 800e928:	200018f4 	.word	0x200018f4

0800e92c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e938:	e008      	b.n	800e94c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	699b      	ldr	r3, [r3, #24]
 800e93e:	68ba      	ldr	r2, [r7, #8]
 800e940:	4413      	add	r3, r2
 800e942:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	6a1b      	ldr	r3, [r3, #32]
 800e948:	68f8      	ldr	r0, [r7, #12]
 800e94a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	699a      	ldr	r2, [r3, #24]
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	18d1      	adds	r1, r2, r3
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	687a      	ldr	r2, [r7, #4]
 800e958:	68f8      	ldr	r0, [r7, #12]
 800e95a:	f000 f8d5 	bl	800eb08 <prvInsertTimerInActiveList>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d1ea      	bne.n	800e93a <prvReloadTimer+0xe>
        }
    }
 800e964:	bf00      	nop
 800e966:	bf00      	nop
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
	...

0800e970 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e97a:	4b14      	ldr	r3, [pc, #80]	; (800e9cc <prvProcessExpiredTimer+0x5c>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	3304      	adds	r3, #4
 800e988:	4618      	mov	r0, r3
 800e98a:	f7fe fd47 	bl	800d41c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e994:	f003 0304 	and.w	r3, r3, #4
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d005      	beq.n	800e9a8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800e99c:	683a      	ldr	r2, [r7, #0]
 800e99e:	6879      	ldr	r1, [r7, #4]
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f7ff ffc3 	bl	800e92c <prvReloadTimer>
 800e9a6:	e008      	b.n	800e9ba <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9ae:	f023 0301 	bic.w	r3, r3, #1
 800e9b2:	b2da      	uxtb	r2, r3
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	6a1b      	ldr	r3, [r3, #32]
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	4798      	blx	r3
    }
 800e9c2:	bf00      	nop
 800e9c4:	3710      	adds	r7, #16
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	200018e8 	.word	0x200018e8

0800e9d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b084      	sub	sp, #16
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e9d8:	f107 0308 	add.w	r3, r7, #8
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f000 f84f 	bl	800ea80 <prvGetNextExpireTime>
 800e9e2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	68f8      	ldr	r0, [r7, #12]
 800e9ea:	f000 f803 	bl	800e9f4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800e9ee:	f000 f8cd 	bl	800eb8c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e9f2:	e7f1      	b.n	800e9d8 <prvTimerTask+0x8>

0800e9f4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800e9fe:	f7ff f9f9 	bl	800ddf4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea02:	f107 0308 	add.w	r3, r7, #8
 800ea06:	4618      	mov	r0, r3
 800ea08:	f000 f85e 	bl	800eac8 <prvSampleTimeNow>
 800ea0c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d12a      	bne.n	800ea6a <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d10a      	bne.n	800ea30 <prvProcessTimerOrBlockTask+0x3c>
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d806      	bhi.n	800ea30 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800ea22:	f7ff f9f5 	bl	800de10 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ea26:	68f9      	ldr	r1, [r7, #12]
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f7ff ffa1 	bl	800e970 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800ea2e:	e01e      	b.n	800ea6e <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d008      	beq.n	800ea48 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ea36:	4b10      	ldr	r3, [pc, #64]	; (800ea78 <prvProcessTimerOrBlockTask+0x84>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d101      	bne.n	800ea44 <prvProcessTimerOrBlockTask+0x50>
 800ea40:	2301      	movs	r3, #1
 800ea42:	e000      	b.n	800ea46 <prvProcessTimerOrBlockTask+0x52>
 800ea44:	2300      	movs	r3, #0
 800ea46:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ea48:	4b0c      	ldr	r3, [pc, #48]	; (800ea7c <prvProcessTimerOrBlockTask+0x88>)
 800ea4a:	6818      	ldr	r0, [r3, #0]
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	1ad3      	subs	r3, r2, r3
 800ea52:	683a      	ldr	r2, [r7, #0]
 800ea54:	4619      	mov	r1, r3
 800ea56:	f7fe ff77 	bl	800d948 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800ea5a:	f7ff f9d9 	bl	800de10 <xTaskResumeAll>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d104      	bne.n	800ea6e <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800ea64:	f000 fa00 	bl	800ee68 <vPortYield>
    }
 800ea68:	e001      	b.n	800ea6e <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800ea6a:	f7ff f9d1 	bl	800de10 <xTaskResumeAll>
    }
 800ea6e:	bf00      	nop
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	200018ec 	.word	0x200018ec
 800ea7c:	200018f0 	.word	0x200018f0

0800ea80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800ea80:	b480      	push	{r7}
 800ea82:	b085      	sub	sp, #20
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ea88:	4b0e      	ldr	r3, [pc, #56]	; (800eac4 <prvGetNextExpireTime+0x44>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d101      	bne.n	800ea96 <prvGetNextExpireTime+0x16>
 800ea92:	2201      	movs	r2, #1
 800ea94:	e000      	b.n	800ea98 <prvGetNextExpireTime+0x18>
 800ea96:	2200      	movs	r2, #0
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d105      	bne.n	800eab0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eaa4:	4b07      	ldr	r3, [pc, #28]	; (800eac4 <prvGetNextExpireTime+0x44>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	68db      	ldr	r3, [r3, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	60fb      	str	r3, [r7, #12]
 800eaae:	e001      	b.n	800eab4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800eab0:	2300      	movs	r3, #0
 800eab2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800eab4:	68fb      	ldr	r3, [r7, #12]
    }
 800eab6:	4618      	mov	r0, r3
 800eab8:	3714      	adds	r7, #20
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr
 800eac2:	bf00      	nop
 800eac4:	200018e8 	.word	0x200018e8

0800eac8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800ead0:	f7ff fa8a 	bl	800dfe8 <xTaskGetTickCount>
 800ead4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800ead6:	4b0b      	ldr	r3, [pc, #44]	; (800eb04 <prvSampleTimeNow+0x3c>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	68fa      	ldr	r2, [r7, #12]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d205      	bcs.n	800eaec <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800eae0:	f000 f91e 	bl	800ed20 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2201      	movs	r2, #1
 800eae8:	601a      	str	r2, [r3, #0]
 800eaea:	e002      	b.n	800eaf2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800eaf2:	4a04      	ldr	r2, [pc, #16]	; (800eb04 <prvSampleTimeNow+0x3c>)
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
    }
 800eafa:	4618      	mov	r0, r3
 800eafc:	3710      	adds	r7, #16
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	200018f8 	.word	0x200018f8

0800eb08 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b086      	sub	sp, #24
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	60b9      	str	r1, [r7, #8]
 800eb12:	607a      	str	r2, [r7, #4]
 800eb14:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800eb16:	2300      	movs	r3, #0
 800eb18:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	68ba      	ldr	r2, [r7, #8]
 800eb1e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800eb26:	68ba      	ldr	r2, [r7, #8]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d812      	bhi.n	800eb54 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	1ad2      	subs	r2, r2, r3
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	699b      	ldr	r3, [r3, #24]
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d302      	bcc.n	800eb42 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	617b      	str	r3, [r7, #20]
 800eb40:	e01b      	b.n	800eb7a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eb42:	4b10      	ldr	r3, [pc, #64]	; (800eb84 <prvInsertTimerInActiveList+0x7c>)
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	3304      	adds	r3, #4
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	4610      	mov	r0, r2
 800eb4e:	f7fe fc2c 	bl	800d3aa <vListInsert>
 800eb52:	e012      	b.n	800eb7a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d206      	bcs.n	800eb6a <prvInsertTimerInActiveList+0x62>
 800eb5c:	68ba      	ldr	r2, [r7, #8]
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d302      	bcc.n	800eb6a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800eb64:	2301      	movs	r3, #1
 800eb66:	617b      	str	r3, [r7, #20]
 800eb68:	e007      	b.n	800eb7a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb6a:	4b07      	ldr	r3, [pc, #28]	; (800eb88 <prvInsertTimerInActiveList+0x80>)
 800eb6c:	681a      	ldr	r2, [r3, #0]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	3304      	adds	r3, #4
 800eb72:	4619      	mov	r1, r3
 800eb74:	4610      	mov	r0, r2
 800eb76:	f7fe fc18 	bl	800d3aa <vListInsert>
            }
        }

        return xProcessTimerNow;
 800eb7a:	697b      	ldr	r3, [r7, #20]
    }
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3718      	adds	r7, #24
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	200018ec 	.word	0x200018ec
 800eb88:	200018e8 	.word	0x200018e8

0800eb8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b088      	sub	sp, #32
 800eb90:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb92:	e0b2      	b.n	800ecfa <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	da10      	bge.n	800ebbc <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eb9a:	1d3b      	adds	r3, r7, #4
 800eb9c:	3304      	adds	r3, #4
 800eb9e:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d102      	bne.n	800ebac <prvProcessReceivedCommands+0x20>
 800eba6:	f000 faaf 	bl	800f108 <ulSetInterruptMask>
 800ebaa:	e7fe      	b.n	800ebaa <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	69fa      	ldr	r2, [r7, #28]
 800ebb2:	6850      	ldr	r0, [r2, #4]
 800ebb4:	69fa      	ldr	r2, [r7, #28]
 800ebb6:	6892      	ldr	r2, [r2, #8]
 800ebb8:	4611      	mov	r1, r2
 800ebba:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	f2c0 809b 	blt.w	800ecfa <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ebc8:	69bb      	ldr	r3, [r7, #24]
 800ebca:	695b      	ldr	r3, [r3, #20]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d004      	beq.n	800ebda <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7fe fc21 	bl	800d41c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ebda:	463b      	mov	r3, r7
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7ff ff73 	bl	800eac8 <prvSampleTimeNow>
 800ebe2:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	2b08      	cmp	r3, #8
 800ebea:	f200 8085 	bhi.w	800ecf8 <prvProcessReceivedCommands+0x16c>
 800ebee:	a201      	add	r2, pc, #4	; (adr r2, 800ebf4 <prvProcessReceivedCommands+0x68>)
 800ebf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf4:	0800ec19 	.word	0x0800ec19
 800ebf8:	0800ec19 	.word	0x0800ec19
 800ebfc:	0800ec81 	.word	0x0800ec81
 800ec00:	0800ec95 	.word	0x0800ec95
 800ec04:	0800eccf 	.word	0x0800eccf
 800ec08:	0800ec19 	.word	0x0800ec19
 800ec0c:	0800ec19 	.word	0x0800ec19
 800ec10:	0800ec81 	.word	0x0800ec81
 800ec14:	0800ec95 	.word	0x0800ec95
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec1e:	f043 0301 	orr.w	r3, r3, #1
 800ec22:	b2da      	uxtb	r2, r3
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ec2a:	68ba      	ldr	r2, [r7, #8]
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	699b      	ldr	r3, [r3, #24]
 800ec30:	18d1      	adds	r1, r2, r3
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	697a      	ldr	r2, [r7, #20]
 800ec36:	69b8      	ldr	r0, [r7, #24]
 800ec38:	f7ff ff66 	bl	800eb08 <prvInsertTimerInActiveList>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d05b      	beq.n	800ecfa <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec48:	f003 0304 	and.w	r3, r3, #4
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d009      	beq.n	800ec64 <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800ec50:	68ba      	ldr	r2, [r7, #8]
 800ec52:	69bb      	ldr	r3, [r7, #24]
 800ec54:	699b      	ldr	r3, [r3, #24]
 800ec56:	4413      	add	r3, r2
 800ec58:	697a      	ldr	r2, [r7, #20]
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	69b8      	ldr	r0, [r7, #24]
 800ec5e:	f7ff fe65 	bl	800e92c <prvReloadTimer>
 800ec62:	e008      	b.n	800ec76 <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ec64:	69bb      	ldr	r3, [r7, #24]
 800ec66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec6a:	f023 0301 	bic.w	r3, r3, #1
 800ec6e:	b2da      	uxtb	r2, r3
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	6a1b      	ldr	r3, [r3, #32]
 800ec7a:	69b8      	ldr	r0, [r7, #24]
 800ec7c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800ec7e:	e03c      	b.n	800ecfa <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ec80:	69bb      	ldr	r3, [r7, #24]
 800ec82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec86:	f023 0301 	bic.w	r3, r3, #1
 800ec8a:	b2da      	uxtb	r2, r3
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800ec92:	e032      	b.n	800ecfa <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec94:	69bb      	ldr	r3, [r7, #24]
 800ec96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec9a:	f043 0301 	orr.w	r3, r3, #1
 800ec9e:	b2da      	uxtb	r2, r3
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eca6:	68ba      	ldr	r2, [r7, #8]
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	699b      	ldr	r3, [r3, #24]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d102      	bne.n	800ecba <prvProcessReceivedCommands+0x12e>
 800ecb4:	f000 fa28 	bl	800f108 <ulSetInterruptMask>
 800ecb8:	e7fe      	b.n	800ecb8 <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ecba:	69bb      	ldr	r3, [r7, #24]
 800ecbc:	699a      	ldr	r2, [r3, #24]
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	18d1      	adds	r1, r2, r3
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	697a      	ldr	r2, [r7, #20]
 800ecc6:	69b8      	ldr	r0, [r7, #24]
 800ecc8:	f7ff ff1e 	bl	800eb08 <prvInsertTimerInActiveList>
                        break;
 800eccc:	e015      	b.n	800ecfa <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecd4:	f003 0302 	and.w	r3, r3, #2
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d103      	bne.n	800ece4 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 800ecdc:	69b8      	ldr	r0, [r7, #24]
 800ecde:	f000 fb1d 	bl	800f31c <vPortFree>
 800ece2:	e00a      	b.n	800ecfa <prvProcessReceivedCommands+0x16e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecea:	f023 0301 	bic.w	r3, r3, #1
 800ecee:	b2da      	uxtb	r2, r3
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800ecf6:	e000      	b.n	800ecfa <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800ecf8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ecfa:	4b08      	ldr	r3, [pc, #32]	; (800ed1c <prvProcessReceivedCommands+0x190>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	1d39      	adds	r1, r7, #4
 800ed00:	2200      	movs	r2, #0
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7fe fc94 	bl	800d630 <xQueueReceive>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	f47f af42 	bne.w	800eb94 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800ed10:	bf00      	nop
 800ed12:	bf00      	nop
 800ed14:	3720      	adds	r7, #32
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	200018f0 	.word	0x200018f0

0800ed20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b082      	sub	sp, #8
 800ed24:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed26:	e009      	b.n	800ed3c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ed28:	4b0e      	ldr	r3, [pc, #56]	; (800ed64 <prvSwitchTimerLists+0x44>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800ed32:	f04f 31ff 	mov.w	r1, #4294967295
 800ed36:	6838      	ldr	r0, [r7, #0]
 800ed38:	f7ff fe1a 	bl	800e970 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed3c:	4b09      	ldr	r3, [pc, #36]	; (800ed64 <prvSwitchTimerLists+0x44>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d1f0      	bne.n	800ed28 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800ed46:	4b07      	ldr	r3, [pc, #28]	; (800ed64 <prvSwitchTimerLists+0x44>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800ed4c:	4b06      	ldr	r3, [pc, #24]	; (800ed68 <prvSwitchTimerLists+0x48>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4a04      	ldr	r2, [pc, #16]	; (800ed64 <prvSwitchTimerLists+0x44>)
 800ed52:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800ed54:	4a04      	ldr	r2, [pc, #16]	; (800ed68 <prvSwitchTimerLists+0x48>)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6013      	str	r3, [r2, #0]
    }
 800ed5a:	bf00      	nop
 800ed5c:	3708      	adds	r7, #8
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	200018e8 	.word	0x200018e8
 800ed68:	200018ec 	.word	0x200018ec

0800ed6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800ed72:	f000 f88b 	bl	800ee8c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800ed76:	4b15      	ldr	r3, [pc, #84]	; (800edcc <prvCheckForValidListAndQueue+0x60>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d120      	bne.n	800edc0 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800ed7e:	4814      	ldr	r0, [pc, #80]	; (800edd0 <prvCheckForValidListAndQueue+0x64>)
 800ed80:	f7fe fae6 	bl	800d350 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800ed84:	4813      	ldr	r0, [pc, #76]	; (800edd4 <prvCheckForValidListAndQueue+0x68>)
 800ed86:	f7fe fae3 	bl	800d350 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800ed8a:	4b13      	ldr	r3, [pc, #76]	; (800edd8 <prvCheckForValidListAndQueue+0x6c>)
 800ed8c:	4a10      	ldr	r2, [pc, #64]	; (800edd0 <prvCheckForValidListAndQueue+0x64>)
 800ed8e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800ed90:	4b12      	ldr	r3, [pc, #72]	; (800eddc <prvCheckForValidListAndQueue+0x70>)
 800ed92:	4a10      	ldr	r2, [pc, #64]	; (800edd4 <prvCheckForValidListAndQueue+0x68>)
 800ed94:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ed96:	2300      	movs	r3, #0
 800ed98:	9300      	str	r3, [sp, #0]
 800ed9a:	4b11      	ldr	r3, [pc, #68]	; (800ede0 <prvCheckForValidListAndQueue+0x74>)
 800ed9c:	4a11      	ldr	r2, [pc, #68]	; (800ede4 <prvCheckForValidListAndQueue+0x78>)
 800ed9e:	2110      	movs	r1, #16
 800eda0:	200a      	movs	r0, #10
 800eda2:	f7fe fbdc 	bl	800d55e <xQueueGenericCreateStatic>
 800eda6:	4603      	mov	r3, r0
 800eda8:	4a08      	ldr	r2, [pc, #32]	; (800edcc <prvCheckForValidListAndQueue+0x60>)
 800edaa:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800edac:	4b07      	ldr	r3, [pc, #28]	; (800edcc <prvCheckForValidListAndQueue+0x60>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d005      	beq.n	800edc0 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800edb4:	4b05      	ldr	r3, [pc, #20]	; (800edcc <prvCheckForValidListAndQueue+0x60>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	490b      	ldr	r1, [pc, #44]	; (800ede8 <prvCheckForValidListAndQueue+0x7c>)
 800edba:	4618      	mov	r0, r3
 800edbc:	f7fe fd80 	bl	800d8c0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800edc0:	f000 f876 	bl	800eeb0 <vPortExitCritical>
    }
 800edc4:	bf00      	nop
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop
 800edcc:	200018f0 	.word	0x200018f0
 800edd0:	200018c0 	.word	0x200018c0
 800edd4:	200018d4 	.word	0x200018d4
 800edd8:	200018e8 	.word	0x200018e8
 800eddc:	200018ec 	.word	0x200018ec
 800ede0:	2000199c 	.word	0x2000199c
 800ede4:	200018fc 	.word	0x200018fc
 800ede8:	080103a4 	.word	0x080103a4

0800edec <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800edec:	b480      	push	{r7}
 800edee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800edf0:	4b0b      	ldr	r3, [pc, #44]	; (800ee20 <vPortSetupTimerInterrupt+0x34>)
 800edf2:	2200      	movs	r2, #0
 800edf4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800edf6:	4b0b      	ldr	r3, [pc, #44]	; (800ee24 <vPortSetupTimerInterrupt+0x38>)
 800edf8:	2200      	movs	r2, #0
 800edfa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800edfc:	4b0a      	ldr	r3, [pc, #40]	; (800ee28 <vPortSetupTimerInterrupt+0x3c>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a0a      	ldr	r2, [pc, #40]	; (800ee2c <vPortSetupTimerInterrupt+0x40>)
 800ee02:	fba2 2303 	umull	r2, r3, r2, r3
 800ee06:	099b      	lsrs	r3, r3, #6
 800ee08:	4a09      	ldr	r2, [pc, #36]	; (800ee30 <vPortSetupTimerInterrupt+0x44>)
 800ee0a:	3b01      	subs	r3, #1
 800ee0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800ee0e:	4b04      	ldr	r3, [pc, #16]	; (800ee20 <vPortSetupTimerInterrupt+0x34>)
 800ee10:	2207      	movs	r2, #7
 800ee12:	601a      	str	r2, [r3, #0]
}
 800ee14:	bf00      	nop
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop
 800ee20:	e000e010 	.word	0xe000e010
 800ee24:	e000e018 	.word	0xe000e018
 800ee28:	2000000c 	.word	0x2000000c
 800ee2c:	10624dd3 	.word	0x10624dd3
 800ee30:	e000e014 	.word	0xe000e014

0800ee34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800ee3e:	4b09      	ldr	r3, [pc, #36]	; (800ee64 <prvTaskExitError+0x30>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee46:	d002      	beq.n	800ee4e <prvTaskExitError+0x1a>
 800ee48:	f000 f95e 	bl	800f108 <ulSetInterruptMask>
 800ee4c:	e7fe      	b.n	800ee4c <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800ee4e:	f000 f95b 	bl	800f108 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800ee52:	bf00      	nop
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d0fc      	beq.n	800ee54 <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800ee5a:	bf00      	nop
 800ee5c:	bf00      	nop
 800ee5e:	3708      	adds	r7, #8
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	2000004c 	.word	0x2000004c

0800ee68 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800ee68:	b480      	push	{r7}
 800ee6a:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ee6c:	4b06      	ldr	r3, [pc, #24]	; (800ee88 <vPortYield+0x20>)
 800ee6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee72:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ee74:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ee78:	f3bf 8f6f 	isb	sy
}
 800ee7c:	bf00      	nop
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	e000ed04 	.word	0xe000ed04

0800ee8c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800ee90:	f000 f93a 	bl	800f108 <ulSetInterruptMask>
    ulCriticalNesting++;
 800ee94:	4b05      	ldr	r3, [pc, #20]	; (800eeac <vPortEnterCritical+0x20>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	4a04      	ldr	r2, [pc, #16]	; (800eeac <vPortEnterCritical+0x20>)
 800ee9c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ee9e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800eea2:	f3bf 8f6f 	isb	sy
}
 800eea6:	bf00      	nop
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	2000004c 	.word	0x2000004c

0800eeb0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800eeb4:	4b0a      	ldr	r3, [pc, #40]	; (800eee0 <vPortExitCritical+0x30>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d102      	bne.n	800eec2 <vPortExitCritical+0x12>
 800eebc:	f000 f924 	bl	800f108 <ulSetInterruptMask>
 800eec0:	e7fe      	b.n	800eec0 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800eec2:	4b07      	ldr	r3, [pc, #28]	; (800eee0 <vPortExitCritical+0x30>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	3b01      	subs	r3, #1
 800eec8:	4a05      	ldr	r2, [pc, #20]	; (800eee0 <vPortExitCritical+0x30>)
 800eeca:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800eecc:	4b04      	ldr	r3, [pc, #16]	; (800eee0 <vPortExitCritical+0x30>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d102      	bne.n	800eeda <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 800eed4:	2000      	movs	r0, #0
 800eed6:	f000 f924 	bl	800f122 <vClearInterruptMask>
    }
}
 800eeda:	bf00      	nop
 800eedc:	bd80      	pop	{r7, pc}
 800eede:	bf00      	nop
 800eee0:	2000004c 	.word	0x2000004c

0800eee4 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800eeea:	f000 f90d 	bl	800f108 <ulSetInterruptMask>
 800eeee:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800eef0:	f7ff f88a 	bl	800e008 <xTaskIncrementTick>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d003      	beq.n	800ef02 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eefa:	4b05      	ldr	r3, [pc, #20]	; (800ef10 <xPortSysTickHandler+0x2c>)
 800eefc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef00:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f000 f90d 	bl	800f122 <vClearInterruptMask>
}
 800ef08:	bf00      	nop
 800ef0a:	3708      	adds	r7, #8
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	e000ed04 	.word	0xe000ed04

0800ef14 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b084      	sub	sp, #16
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	699b      	ldr	r3, [r3, #24]
 800ef20:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	3b02      	subs	r3, #2
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800ef2a:	7afb      	ldrb	r3, [r7, #11]
 800ef2c:	2b02      	cmp	r3, #2
 800ef2e:	d102      	bne.n	800ef36 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800ef30:	f000 f8b6 	bl	800f0a0 <vRestoreContextOfFirstTask>
            break;
 800ef34:	e002      	b.n	800ef3c <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800ef36:	f000 f8e7 	bl	800f108 <ulSetInterruptMask>
 800ef3a:	e7fe      	b.n	800ef3a <vPortSVCHandler_C+0x26>
    }
}
 800ef3c:	bf00      	nop
 800ef3e:	3710      	adds	r7, #16
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800ef44:	b480      	push	{r7}
 800ef46:	b085      	sub	sp, #20
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	60b9      	str	r1, [r7, #8]
 800ef4e:	607a      	str	r2, [r7, #4]
 800ef50:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	3b04      	subs	r3, #4
 800ef56:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ef5e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	3b04      	subs	r3, #4
 800ef64:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	3b04      	subs	r3, #4
 800ef70:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800ef72:	4a38      	ldr	r2, [pc, #224]	; (800f054 <pxPortInitialiseStack+0x110>)
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	3b04      	subs	r3, #4
 800ef7c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800ef84:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	3b04      	subs	r3, #4
 800ef8a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800ef92:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	3b04      	subs	r3, #4
 800ef98:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800efa0:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	3b04      	subs	r3, #4
 800efa6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800efae:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	3b04      	subs	r3, #4
 800efb4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800efb6:	683a      	ldr	r2, [r7, #0]
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	3b04      	subs	r3, #4
 800efc0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800efc8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	3b04      	subs	r3, #4
 800efce:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800efd6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	3b04      	subs	r3, #4
 800efdc:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800efe4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	3b04      	subs	r3, #4
 800efea:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800eff2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	3b04      	subs	r3, #4
 800eff8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800f000:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	3b04      	subs	r3, #4
 800f006:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800f00e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	3b04      	subs	r3, #4
 800f014:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800f01c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	3b04      	subs	r3, #4
 800f022:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800f02a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	3b04      	subs	r3, #4
 800f030:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800f038:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	3b04      	subs	r3, #4
 800f03e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800f040:	68ba      	ldr	r2, [r7, #8]
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800f046:	68fb      	ldr	r3, [r7, #12]
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3714      	adds	r7, #20
 800f04c:	46bd      	mov	sp, r7
 800f04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f052:	4770      	bx	lr
 800f054:	0800ee35 	.word	0x0800ee35

0800f058 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800f05c:	4b0c      	ldr	r3, [pc, #48]	; (800f090 <xPortStartScheduler+0x38>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4a0b      	ldr	r2, [pc, #44]	; (800f090 <xPortStartScheduler+0x38>)
 800f062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f066:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800f068:	4b09      	ldr	r3, [pc, #36]	; (800f090 <xPortStartScheduler+0x38>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a08      	ldr	r2, [pc, #32]	; (800f090 <xPortStartScheduler+0x38>)
 800f06e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f072:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800f074:	f7ff feba 	bl	800edec <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800f078:	4b06      	ldr	r3, [pc, #24]	; (800f094 <xPortStartScheduler+0x3c>)
 800f07a:	2200      	movs	r2, #0
 800f07c:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800f07e:	f000 f82f 	bl	800f0e0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800f082:	f7ff f8d1 	bl	800e228 <vTaskSwitchContext>
    prvTaskExitError();
 800f086:	f7ff fed5 	bl	800ee34 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800f08a:	2300      	movs	r3, #0
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	e000ed20 	.word	0xe000ed20
 800f094:	2000004c 	.word	0x2000004c
	...

0800f0a0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800f0a0:	4a0b      	ldr	r2, [pc, #44]	; (800f0d0 <pxCurrentTCBConst2>)
 800f0a2:	6811      	ldr	r1, [r2, #0]
 800f0a4:	6808      	ldr	r0, [r1, #0]
 800f0a6:	c806      	ldmia	r0!, {r1, r2}
 800f0a8:	f381 880b 	msr	PSPLIM, r1
 800f0ac:	2102      	movs	r1, #2
 800f0ae:	f381 8814 	msr	CONTROL, r1
 800f0b2:	3020      	adds	r0, #32
 800f0b4:	f380 8809 	msr	PSP, r0
 800f0b8:	f3bf 8f6f 	isb	sy
 800f0bc:	f04f 0000 	mov.w	r0, #0
 800f0c0:	f380 8811 	msr	BASEPRI, r0
 800f0c4:	4710      	bx	r2
 800f0c6:	bf00      	nop
 800f0c8:	f3af 8000 	nop.w
 800f0cc:	f3af 8000 	nop.w

0800f0d0 <pxCurrentTCBConst2>:
 800f0d0:	200013c0 	.word	0x200013c0
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800f0d4:	bf00      	nop
 800f0d6:	bf00      	nop
	...

0800f0e0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800f0e0:	4807      	ldr	r0, [pc, #28]	; (800f100 <xVTORConst>)
 800f0e2:	6800      	ldr	r0, [r0, #0]
 800f0e4:	6800      	ldr	r0, [r0, #0]
 800f0e6:	f380 8808 	msr	MSP, r0
 800f0ea:	b662      	cpsie	i
 800f0ec:	b661      	cpsie	f
 800f0ee:	f3bf 8f4f 	dsb	sy
 800f0f2:	f3bf 8f6f 	isb	sy
 800f0f6:	df02      	svc	2
 800f0f8:	bf00      	nop
 800f0fa:	bf00      	nop
 800f0fc:	f3af 8000 	nop.w

0800f100 <xVTORConst>:
 800f100:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800f104:	bf00      	nop
 800f106:	bf00      	nop

0800f108 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800f108:	f3ef 8011 	mrs	r0, BASEPRI
 800f10c:	f04f 0150 	mov.w	r1, #80	; 0x50
 800f110:	f381 8811 	msr	BASEPRI, r1
 800f114:	f3bf 8f4f 	dsb	sy
 800f118:	f3bf 8f6f 	isb	sy
 800f11c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800f11e:	bf00      	nop
 800f120:	4618      	mov	r0, r3

0800f122 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800f122:	f380 8811 	msr	BASEPRI, r0
 800f126:	f3bf 8f4f 	dsb	sy
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800f130:	bf00      	nop
	...

0800f140 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800f140:	f3ef 8009 	mrs	r0, PSP
 800f144:	f3ef 820b 	mrs	r2, PSPLIM
 800f148:	4673      	mov	r3, lr
 800f14a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800f14e:	4a10      	ldr	r2, [pc, #64]	; (800f190 <pxCurrentTCBConst>)
 800f150:	6811      	ldr	r1, [r2, #0]
 800f152:	6008      	str	r0, [r1, #0]
 800f154:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f158:	f380 8811 	msr	BASEPRI, r0
 800f15c:	f3bf 8f4f 	dsb	sy
 800f160:	f3bf 8f6f 	isb	sy
 800f164:	f7ff f860 	bl	800e228 <vTaskSwitchContext>
 800f168:	f04f 0000 	mov.w	r0, #0
 800f16c:	f380 8811 	msr	BASEPRI, r0
 800f170:	4a07      	ldr	r2, [pc, #28]	; (800f190 <pxCurrentTCBConst>)
 800f172:	6811      	ldr	r1, [r2, #0]
 800f174:	6808      	ldr	r0, [r1, #0]
 800f176:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800f17a:	f382 880b 	msr	PSPLIM, r2
 800f17e:	f380 8809 	msr	PSP, r0
 800f182:	4718      	bx	r3
 800f184:	f3af 8000 	nop.w
 800f188:	f3af 8000 	nop.w
 800f18c:	f3af 8000 	nop.w

0800f190 <pxCurrentTCBConst>:
 800f190:	200013c0 	.word	0x200013c0
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800f194:	bf00      	nop
 800f196:	bf00      	nop
	...

0800f1a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800f1a0:	f01e 0f04 	tst.w	lr, #4
 800f1a4:	bf0c      	ite	eq
 800f1a6:	f3ef 8008 	mrseq	r0, MSP
 800f1aa:	f3ef 8009 	mrsne	r0, PSP
 800f1ae:	4904      	ldr	r1, [pc, #16]	; (800f1c0 <svchandler_address_const>)
 800f1b0:	4708      	bx	r1
 800f1b2:	bf00      	nop
 800f1b4:	f3af 8000 	nop.w
 800f1b8:	f3af 8000 	nop.w
 800f1bc:	f3af 8000 	nop.w

0800f1c0 <svchandler_address_const>:
 800f1c0:	0800ef15 	.word	0x0800ef15
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800f1c4:	bf00      	nop
 800f1c6:	bf00      	nop

0800f1c8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b088      	sub	sp, #32
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800f1d4:	f7fe fe0e 	bl	800ddf4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800f1d8:	4b4b      	ldr	r3, [pc, #300]	; (800f308 <pvPortMalloc+0x140>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d101      	bne.n	800f1e4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800f1e0:	f000 f8e8 	bl	800f3b4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d012      	beq.n	800f210 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800f1ea:	2208      	movs	r2, #8
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f003 0307 	and.w	r3, r3, #7
 800f1f2:	1ad3      	subs	r3, r2, r3
 800f1f4:	3308      	adds	r3, #8
 800f1f6:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	43db      	mvns	r3, r3
 800f1fc:	687a      	ldr	r2, [r7, #4]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d804      	bhi.n	800f20c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800f202:	687a      	ldr	r2, [r7, #4]
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	4413      	add	r3, r2
 800f208:	607b      	str	r3, [r7, #4]
 800f20a:	e001      	b.n	800f210 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800f20c:	2300      	movs	r3, #0
 800f20e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	db68      	blt.n	800f2e8 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d065      	beq.n	800f2e8 <pvPortMalloc+0x120>
 800f21c:	4b3b      	ldr	r3, [pc, #236]	; (800f30c <pvPortMalloc+0x144>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	687a      	ldr	r2, [r7, #4]
 800f222:	429a      	cmp	r2, r3
 800f224:	d860      	bhi.n	800f2e8 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800f226:	4b3a      	ldr	r3, [pc, #232]	; (800f310 <pvPortMalloc+0x148>)
 800f228:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800f22a:	4b39      	ldr	r3, [pc, #228]	; (800f310 <pvPortMalloc+0x148>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f230:	e004      	b.n	800f23c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800f232:	69fb      	ldr	r3, [r7, #28]
 800f234:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800f236:	69fb      	ldr	r3, [r7, #28]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	429a      	cmp	r2, r3
 800f244:	d903      	bls.n	800f24e <pvPortMalloc+0x86>
 800f246:	69fb      	ldr	r3, [r7, #28]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d1f1      	bne.n	800f232 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800f24e:	4b2e      	ldr	r3, [pc, #184]	; (800f308 <pvPortMalloc+0x140>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	69fa      	ldr	r2, [r7, #28]
 800f254:	429a      	cmp	r2, r3
 800f256:	d047      	beq.n	800f2e8 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	2208      	movs	r2, #8
 800f25e:	4413      	add	r3, r2
 800f260:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f262:	69fb      	ldr	r3, [r7, #28]
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f26a:	69fb      	ldr	r3, [r7, #28]
 800f26c:	685a      	ldr	r2, [r3, #4]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	1ad2      	subs	r2, r2, r3
 800f272:	2308      	movs	r3, #8
 800f274:	005b      	lsls	r3, r3, #1
 800f276:	429a      	cmp	r2, r3
 800f278:	d917      	bls.n	800f2aa <pvPortMalloc+0xe2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f27a:	69fa      	ldr	r2, [r7, #28]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4413      	add	r3, r2
 800f280:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f003 0307 	and.w	r3, r3, #7
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d002      	beq.n	800f292 <pvPortMalloc+0xca>
 800f28c:	f7ff ff3c 	bl	800f108 <ulSetInterruptMask>
 800f290:	e7fe      	b.n	800f290 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	685a      	ldr	r2, [r3, #4]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	1ad2      	subs	r2, r2, r3
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	f000 f8e1 	bl	800f46c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f2aa:	4b18      	ldr	r3, [pc, #96]	; (800f30c <pvPortMalloc+0x144>)
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	1ad3      	subs	r3, r2, r3
 800f2b4:	4a15      	ldr	r2, [pc, #84]	; (800f30c <pvPortMalloc+0x144>)
 800f2b6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f2b8:	4b14      	ldr	r3, [pc, #80]	; (800f30c <pvPortMalloc+0x144>)
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	4b15      	ldr	r3, [pc, #84]	; (800f314 <pvPortMalloc+0x14c>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d203      	bcs.n	800f2cc <pvPortMalloc+0x104>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f2c4:	4b11      	ldr	r3, [pc, #68]	; (800f30c <pvPortMalloc+0x144>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	4a12      	ldr	r2, [pc, #72]	; (800f314 <pvPortMalloc+0x14c>)
 800f2ca:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800f2d8:	69fb      	ldr	r3, [r7, #28]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800f2de:	4b0e      	ldr	r3, [pc, #56]	; (800f318 <pvPortMalloc+0x150>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	4a0c      	ldr	r2, [pc, #48]	; (800f318 <pvPortMalloc+0x150>)
 800f2e6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800f2e8:	f7fe fd92 	bl	800de10 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	f003 0307 	and.w	r3, r3, #7
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d002      	beq.n	800f2fc <pvPortMalloc+0x134>
 800f2f6:	f7ff ff07 	bl	800f108 <ulSetInterruptMask>
 800f2fa:	e7fe      	b.n	800f2fa <pvPortMalloc+0x132>
    return pvReturn;
 800f2fc:	697b      	ldr	r3, [r7, #20]
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3720      	adds	r7, #32
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	200039f4 	.word	0x200039f4
 800f30c:	200039f8 	.word	0x200039f8
 800f310:	200039ec 	.word	0x200039ec
 800f314:	200039fc 	.word	0x200039fc
 800f318:	20003a00 	.word	0x20003a00

0800f31c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d039      	beq.n	800f3a2 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800f32e:	2308      	movs	r3, #8
 800f330:	425b      	negs	r3, r3
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	4413      	add	r3, r2
 800f336:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	db02      	blt.n	800f34a <vPortFree+0x2e>
 800f344:	f7ff fee0 	bl	800f108 <ulSetInterruptMask>
 800f348:	e7fe      	b.n	800f348 <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d002      	beq.n	800f358 <vPortFree+0x3c>
 800f352:	f7ff fed9 	bl	800f108 <ulSetInterruptMask>
 800f356:	e7fe      	b.n	800f356 <vPortFree+0x3a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	0fdb      	lsrs	r3, r3, #31
 800f35e:	f003 0301 	and.w	r3, r3, #1
 800f362:	b2db      	uxtb	r3, r3
 800f364:	2b00      	cmp	r3, #0
 800f366:	d01c      	beq.n	800f3a2 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d118      	bne.n	800f3a2 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	685b      	ldr	r3, [r3, #4]
 800f374:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800f37c:	f7fe fd3a 	bl	800ddf4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	685a      	ldr	r2, [r3, #4]
 800f384:	4b09      	ldr	r3, [pc, #36]	; (800f3ac <vPortFree+0x90>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4413      	add	r3, r2
 800f38a:	4a08      	ldr	r2, [pc, #32]	; (800f3ac <vPortFree+0x90>)
 800f38c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f38e:	68b8      	ldr	r0, [r7, #8]
 800f390:	f000 f86c 	bl	800f46c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800f394:	4b06      	ldr	r3, [pc, #24]	; (800f3b0 <vPortFree+0x94>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	3301      	adds	r3, #1
 800f39a:	4a05      	ldr	r2, [pc, #20]	; (800f3b0 <vPortFree+0x94>)
 800f39c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800f39e:	f7fe fd37 	bl	800de10 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800f3a2:	bf00      	nop
 800f3a4:	3710      	adds	r7, #16
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
 800f3aa:	bf00      	nop
 800f3ac:	200039f8 	.word	0x200039f8
 800f3b0:	20003a04 	.word	0x20003a04

0800f3b4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b085      	sub	sp, #20
 800f3b8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f3ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f3be:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800f3c0:	4b25      	ldr	r3, [pc, #148]	; (800f458 <prvHeapInit+0xa4>)
 800f3c2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f003 0307 	and.w	r3, r3, #7
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d00c      	beq.n	800f3e8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	3307      	adds	r3, #7
 800f3d2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f023 0307 	bic.w	r3, r3, #7
 800f3da:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800f3dc:	68ba      	ldr	r2, [r7, #8]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	1ad3      	subs	r3, r2, r3
 800f3e2:	4a1d      	ldr	r2, [pc, #116]	; (800f458 <prvHeapInit+0xa4>)
 800f3e4:	4413      	add	r3, r2
 800f3e6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f3ec:	4a1b      	ldr	r2, [pc, #108]	; (800f45c <prvHeapInit+0xa8>)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800f3f2:	4b1a      	ldr	r3, [pc, #104]	; (800f45c <prvHeapInit+0xa8>)
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	68ba      	ldr	r2, [r7, #8]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800f400:	2208      	movs	r2, #8
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	1a9b      	subs	r3, r3, r2
 800f406:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f023 0307 	bic.w	r3, r3, #7
 800f40e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	4a13      	ldr	r2, [pc, #76]	; (800f460 <prvHeapInit+0xac>)
 800f414:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800f416:	4b12      	ldr	r3, [pc, #72]	; (800f460 <prvHeapInit+0xac>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2200      	movs	r2, #0
 800f41c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800f41e:	4b10      	ldr	r3, [pc, #64]	; (800f460 <prvHeapInit+0xac>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2200      	movs	r2, #0
 800f424:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	1ad2      	subs	r2, r2, r3
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f434:	4b0a      	ldr	r3, [pc, #40]	; (800f460 <prvHeapInit+0xac>)
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	4a08      	ldr	r2, [pc, #32]	; (800f464 <prvHeapInit+0xb0>)
 800f442:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	4a07      	ldr	r2, [pc, #28]	; (800f468 <prvHeapInit+0xb4>)
 800f44a:	6013      	str	r3, [r2, #0]
}
 800f44c:	bf00      	nop
 800f44e:	3714      	adds	r7, #20
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr
 800f458:	200019ec 	.word	0x200019ec
 800f45c:	200039ec 	.word	0x200039ec
 800f460:	200039f4 	.word	0x200039f4
 800f464:	200039fc 	.word	0x200039fc
 800f468:	200039f8 	.word	0x200039f8

0800f46c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800f46c:	b480      	push	{r7}
 800f46e:	b085      	sub	sp, #20
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f474:	4b28      	ldr	r3, [pc, #160]	; (800f518 <prvInsertBlockIntoFreeList+0xac>)
 800f476:	60fb      	str	r3, [r7, #12]
 800f478:	e002      	b.n	800f480 <prvInsertBlockIntoFreeList+0x14>
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	60fb      	str	r3, [r7, #12]
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	429a      	cmp	r2, r3
 800f488:	d8f7      	bhi.n	800f47a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	68ba      	ldr	r2, [r7, #8]
 800f494:	4413      	add	r3, r2
 800f496:	687a      	ldr	r2, [r7, #4]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d108      	bne.n	800f4ae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	685a      	ldr	r2, [r3, #4]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	441a      	add	r2, r3
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	685b      	ldr	r3, [r3, #4]
 800f4b6:	68ba      	ldr	r2, [r7, #8]
 800f4b8:	441a      	add	r2, r3
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d118      	bne.n	800f4f4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	4b15      	ldr	r3, [pc, #84]	; (800f51c <prvInsertBlockIntoFreeList+0xb0>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d00d      	beq.n	800f4ea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	685a      	ldr	r2, [r3, #4]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	685b      	ldr	r3, [r3, #4]
 800f4d8:	441a      	add	r2, r3
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	601a      	str	r2, [r3, #0]
 800f4e8:	e008      	b.n	800f4fc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f4ea:	4b0c      	ldr	r3, [pc, #48]	; (800f51c <prvInsertBlockIntoFreeList+0xb0>)
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	601a      	str	r2, [r3, #0]
 800f4f2:	e003      	b.n	800f4fc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800f4fc:	68fa      	ldr	r2, [r7, #12]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	429a      	cmp	r2, r3
 800f502:	d002      	beq.n	800f50a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800f50a:	bf00      	nop
 800f50c:	3714      	adds	r7, #20
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr
 800f516:	bf00      	nop
 800f518:	200039ec 	.word	0x200039ec
 800f51c:	200039f4 	.word	0x200039f4

0800f520 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d005      	beq.n	800f53e <lwrb_init+0x1e>
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d002      	beq.n	800f53e <lwrb_init+0x1e>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d101      	bne.n	800f542 <lwrb_init+0x22>
        return 0;
 800f53e:	2300      	movs	r3, #0
 800f540:	e00b      	b.n	800f55a <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 800f542:	2214      	movs	r2, #20
 800f544:	2100      	movs	r1, #0
 800f546:	68f8      	ldr	r0, [r7, #12]
 800f548:	f000 fa76 	bl	800fa38 <memset>

    buff->size = size;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	68ba      	ldr	r2, [r7, #8]
 800f556:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 800f558:	2301      	movs	r3, #1
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3710      	adds	r7, #16
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}

0800f562 <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 800f562:	b480      	push	{r7}
 800f564:	b083      	sub	sp, #12
 800f566:	af00      	add	r7, sp, #0
 800f568:	6078      	str	r0, [r7, #4]
 800f56a:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d00a      	beq.n	800f588 <lwrb_set_evt_fn+0x26>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d006      	beq.n	800f588 <lwrb_set_evt_fn+0x26>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d002      	beq.n	800f588 <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	683a      	ldr	r2, [r7, #0]
 800f586:	611a      	str	r2, [r3, #16]
    }
}
 800f588:	bf00      	nop
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr

0800f594 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 800f594:	b580      	push	{r7, lr}
 800f596:	b088      	sub	sp, #32
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	61bb      	str	r3, [r7, #24]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00d      	beq.n	800f5c6 <lwrb_write+0x32>
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d009      	beq.n	800f5c6 <lwrb_write+0x32>
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d005      	beq.n	800f5c6 <lwrb_write+0x32>
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d002      	beq.n	800f5c6 <lwrb_write+0x32>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d101      	bne.n	800f5ca <lwrb_write+0x36>
        return 0;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	e059      	b.n	800f67e <lwrb_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 800f5ca:	68f8      	ldr	r0, [r7, #12]
 800f5cc:	f000 f85b 	bl	800f686 <lwrb_get_free>
 800f5d0:	61f8      	str	r0, [r7, #28]

		if (free < btw) {
 800f5d2:	69fa      	ldr	r2, [r7, #28]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d20d      	bcs.n	800f5f6 <lwrb_write+0x62>
			BUF_SEND_EVT(buff, LWRB_EVT_FULL, free);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	691b      	ldr	r3, [r3, #16]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d005      	beq.n	800f5ee <lwrb_write+0x5a>
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	691b      	ldr	r3, [r3, #16]
 800f5e6:	69fa      	ldr	r2, [r7, #28]
 800f5e8:	2102      	movs	r1, #2
 800f5ea:	68f8      	ldr	r0, [r7, #12]
 800f5ec:	4798      	blx	r3
			free = lwrb_get_free(buff);
 800f5ee:	68f8      	ldr	r0, [r7, #12]
 800f5f0:	f000 f849 	bl	800f686 <lwrb_get_free>
 800f5f4:	61f8      	str	r0, [r7, #28]
		}
		
    btw = BUF_MIN(free, btw);
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	bf28      	it	cs
 800f5fe:	4613      	movcs	r3, r2
 800f600:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d101      	bne.n	800f60c <lwrb_write+0x78>
        return 0;
 800f608:	2300      	movs	r3, #0
 800f60a:	e038      	b.n	800f67e <lwrb_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	685a      	ldr	r2, [r3, #4]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	4293      	cmp	r3, r2
 800f61a:	bf28      	it	cs
 800f61c:	4613      	movcs	r3, r2
 800f61e:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	68db      	ldr	r3, [r3, #12]
 800f628:	4413      	add	r3, r2
 800f62a:	697a      	ldr	r2, [r7, #20]
 800f62c:	69b9      	ldr	r1, [r7, #24]
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 fa5a 	bl	800fae8 <memcpy>
    buff->w += tocopy;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	68da      	ldr	r2, [r3, #12]
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	441a      	add	r2, r3
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	1ad3      	subs	r3, r2, r3
 800f646:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00b      	beq.n	800f666 <lwrb_write+0xd2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	6818      	ldr	r0, [r3, #0]
 800f652:	69ba      	ldr	r2, [r7, #24]
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	4413      	add	r3, r2
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	4619      	mov	r1, r3
 800f65c:	f000 fa44 	bl	800fae8 <memcpy>
        buff->w = btw;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	68da      	ldr	r2, [r3, #12]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	685b      	ldr	r3, [r3, #4]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d302      	bcc.n	800f678 <lwrb_write+0xe4>
        buff->w = 0;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	2200      	movs	r2, #0
 800f676:	60da      	str	r2, [r3, #12]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
    return tocopy + btw;
 800f678:	697a      	ldr	r2, [r7, #20]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	4413      	add	r3, r2
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3720      	adds	r7, #32
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}

0800f686 <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 800f686:	b480      	push	{r7}
 800f688:	b087      	sub	sp, #28
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d007      	beq.n	800f6a4 <lwrb_get_free+0x1e>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d003      	beq.n	800f6a4 <lwrb_get_free+0x1e>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d101      	bne.n	800f6a8 <lwrb_get_free+0x22>
        return 0;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	e01f      	b.n	800f6e8 <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	689b      	ldr	r3, [r3, #8]
 800f6b2:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800f6b4:	693a      	ldr	r2, [r7, #16]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d103      	bne.n	800f6c4 <lwrb_get_free+0x3e>
        size = buff->size;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	617b      	str	r3, [r7, #20]
 800f6c2:	e00f      	b.n	800f6e4 <lwrb_get_free+0x5e>
    } else if (r > w) {
 800f6c4:	68fa      	ldr	r2, [r7, #12]
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d904      	bls.n	800f6d6 <lwrb_get_free+0x50>
        size = r - w;
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	1ad3      	subs	r3, r2, r3
 800f6d2:	617b      	str	r3, [r7, #20]
 800f6d4:	e006      	b.n	800f6e4 <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	685a      	ldr	r2, [r3, #4]
 800f6da:	68f9      	ldr	r1, [r7, #12]
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	1acb      	subs	r3, r1, r3
 800f6e0:	4413      	add	r3, r2
 800f6e2:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	3b01      	subs	r3, #1
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	371c      	adds	r7, #28
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr

0800f6f4 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 800f6f4:	b480      	push	{r7}
 800f6f6:	b087      	sub	sp, #28
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d007      	beq.n	800f712 <lwrb_get_full+0x1e>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d003      	beq.n	800f712 <lwrb_get_full+0x1e>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d101      	bne.n	800f716 <lwrb_get_full+0x22>
        return 0;
 800f712:	2300      	movs	r3, #0
 800f714:	e01d      	b.n	800f752 <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	689b      	ldr	r3, [r3, #8]
 800f720:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800f722:	693a      	ldr	r2, [r7, #16]
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	429a      	cmp	r2, r3
 800f728:	d102      	bne.n	800f730 <lwrb_get_full+0x3c>
        size = 0;
 800f72a:	2300      	movs	r3, #0
 800f72c:	617b      	str	r3, [r7, #20]
 800f72e:	e00f      	b.n	800f750 <lwrb_get_full+0x5c>
    } else if (w > r) {
 800f730:	693a      	ldr	r2, [r7, #16]
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	429a      	cmp	r2, r3
 800f736:	d904      	bls.n	800f742 <lwrb_get_full+0x4e>
        size = w - r;
 800f738:	693a      	ldr	r2, [r7, #16]
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	1ad3      	subs	r3, r2, r3
 800f73e:	617b      	str	r3, [r7, #20]
 800f740:	e006      	b.n	800f750 <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	685a      	ldr	r2, [r3, #4]
 800f746:	6939      	ldr	r1, [r7, #16]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	1acb      	subs	r3, r1, r3
 800f74c:	4413      	add	r3, r2
 800f74e:	617b      	str	r3, [r7, #20]
    }
    return size;
 800f750:	697b      	ldr	r3, [r7, #20]
}
 800f752:	4618      	mov	r0, r3
 800f754:	371c      	adds	r7, #28
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr

0800f75e <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 800f75e:	b480      	push	{r7}
 800f760:	b083      	sub	sp, #12
 800f762:	af00      	add	r7, sp, #0
 800f764:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d007      	beq.n	800f77c <lwrb_get_linear_block_read_address+0x1e>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d003      	beq.n	800f77c <lwrb_get_linear_block_read_address+0x1e>
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d101      	bne.n	800f780 <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 800f77c:	2300      	movs	r3, #0
 800f77e:	e004      	b.n	800f78a <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	689b      	ldr	r3, [r3, #8]
 800f788:	4413      	add	r3, r2
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	370c      	adds	r7, #12
 800f78e:	46bd      	mov	sp, r7
 800f790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f794:	4770      	bx	lr

0800f796 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 800f796:	b480      	push	{r7}
 800f798:	b087      	sub	sp, #28
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d007      	beq.n	800f7b4 <lwrb_get_linear_block_read_length+0x1e>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d003      	beq.n	800f7b4 <lwrb_get_linear_block_read_length+0x1e>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d101      	bne.n	800f7b8 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	e01b      	b.n	800f7f0 <lwrb_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	689b      	ldr	r3, [r3, #8]
 800f7c2:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 800f7c4:	693a      	ldr	r2, [r7, #16]
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d904      	bls.n	800f7d6 <lwrb_get_linear_block_read_length+0x40>
        len = w - r;
 800f7cc:	693a      	ldr	r2, [r7, #16]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	1ad3      	subs	r3, r2, r3
 800f7d2:	617b      	str	r3, [r7, #20]
 800f7d4:	e00b      	b.n	800f7ee <lwrb_get_linear_block_read_length+0x58>
    } else if (r > w) {
 800f7d6:	68fa      	ldr	r2, [r7, #12]
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d905      	bls.n	800f7ea <lwrb_get_linear_block_read_length+0x54>
        len = buff->size - r;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	685a      	ldr	r2, [r3, #4]
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	1ad3      	subs	r3, r2, r3
 800f7e6:	617b      	str	r3, [r7, #20]
 800f7e8:	e001      	b.n	800f7ee <lwrb_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	617b      	str	r3, [r7, #20]
    }
    return len;
 800f7ee:	697b      	ldr	r3, [r7, #20]
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	371c      	adds	r7, #28
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00a      	beq.n	800f822 <lwrb_skip+0x26>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d006      	beq.n	800f822 <lwrb_skip+0x26>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d002      	beq.n	800f822 <lwrb_skip+0x26>
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d101      	bne.n	800f826 <lwrb_skip+0x2a>
        return 0;
 800f822:	2300      	movs	r3, #0
 800f824:	e01d      	b.n	800f862 <lwrb_skip+0x66>
    }

    full = lwrb_get_full(buff);
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f7ff ff64 	bl	800f6f4 <lwrb_get_full>
 800f82c:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 800f82e:	683a      	ldr	r2, [r7, #0]
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	4293      	cmp	r3, r2
 800f834:	bf28      	it	cs
 800f836:	4613      	movcs	r3, r2
 800f838:	603b      	str	r3, [r7, #0]
    buff->r += len;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	689a      	ldr	r2, [r3, #8]
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	441a      	add	r2, r3
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	689a      	ldr	r2, [r3, #8]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d306      	bcc.n	800f860 <lwrb_skip+0x64>
        buff->r -= buff->size;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	689a      	ldr	r2, [r3, #8]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	1ad2      	subs	r2, r2, r3
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	609a      	str	r2, [r3, #8]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
    return len;
 800f860:	683b      	ldr	r3, [r7, #0]
}
 800f862:	4618      	mov	r0, r3
 800f864:	3710      	adds	r7, #16
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
	...

0800f86c <sbrk_aligned>:
 800f86c:	b570      	push	{r4, r5, r6, lr}
 800f86e:	4e0e      	ldr	r6, [pc, #56]	; (800f8a8 <sbrk_aligned+0x3c>)
 800f870:	460c      	mov	r4, r1
 800f872:	4605      	mov	r5, r0
 800f874:	6831      	ldr	r1, [r6, #0]
 800f876:	b911      	cbnz	r1, 800f87e <sbrk_aligned+0x12>
 800f878:	f000 f8fa 	bl	800fa70 <_sbrk_r>
 800f87c:	6030      	str	r0, [r6, #0]
 800f87e:	4621      	mov	r1, r4
 800f880:	4628      	mov	r0, r5
 800f882:	f000 f8f5 	bl	800fa70 <_sbrk_r>
 800f886:	1c43      	adds	r3, r0, #1
 800f888:	d00a      	beq.n	800f8a0 <sbrk_aligned+0x34>
 800f88a:	1cc4      	adds	r4, r0, #3
 800f88c:	f024 0403 	bic.w	r4, r4, #3
 800f890:	42a0      	cmp	r0, r4
 800f892:	d007      	beq.n	800f8a4 <sbrk_aligned+0x38>
 800f894:	1a21      	subs	r1, r4, r0
 800f896:	4628      	mov	r0, r5
 800f898:	f000 f8ea 	bl	800fa70 <_sbrk_r>
 800f89c:	3001      	adds	r0, #1
 800f89e:	d101      	bne.n	800f8a4 <sbrk_aligned+0x38>
 800f8a0:	f04f 34ff 	mov.w	r4, #4294967295
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	bd70      	pop	{r4, r5, r6, pc}
 800f8a8:	20003a0c 	.word	0x20003a0c

0800f8ac <_malloc_r>:
 800f8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8b0:	1ccd      	adds	r5, r1, #3
 800f8b2:	4607      	mov	r7, r0
 800f8b4:	f025 0503 	bic.w	r5, r5, #3
 800f8b8:	3508      	adds	r5, #8
 800f8ba:	2d0c      	cmp	r5, #12
 800f8bc:	bf38      	it	cc
 800f8be:	250c      	movcc	r5, #12
 800f8c0:	2d00      	cmp	r5, #0
 800f8c2:	db01      	blt.n	800f8c8 <_malloc_r+0x1c>
 800f8c4:	42a9      	cmp	r1, r5
 800f8c6:	d905      	bls.n	800f8d4 <_malloc_r+0x28>
 800f8c8:	230c      	movs	r3, #12
 800f8ca:	2600      	movs	r6, #0
 800f8cc:	603b      	str	r3, [r7, #0]
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f9a8 <_malloc_r+0xfc>
 800f8d8:	f000 f868 	bl	800f9ac <__malloc_lock>
 800f8dc:	f8d8 3000 	ldr.w	r3, [r8]
 800f8e0:	461c      	mov	r4, r3
 800f8e2:	bb5c      	cbnz	r4, 800f93c <_malloc_r+0x90>
 800f8e4:	4629      	mov	r1, r5
 800f8e6:	4638      	mov	r0, r7
 800f8e8:	f7ff ffc0 	bl	800f86c <sbrk_aligned>
 800f8ec:	1c43      	adds	r3, r0, #1
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	d155      	bne.n	800f99e <_malloc_r+0xf2>
 800f8f2:	f8d8 4000 	ldr.w	r4, [r8]
 800f8f6:	4626      	mov	r6, r4
 800f8f8:	2e00      	cmp	r6, #0
 800f8fa:	d145      	bne.n	800f988 <_malloc_r+0xdc>
 800f8fc:	2c00      	cmp	r4, #0
 800f8fe:	d048      	beq.n	800f992 <_malloc_r+0xe6>
 800f900:	6823      	ldr	r3, [r4, #0]
 800f902:	4631      	mov	r1, r6
 800f904:	4638      	mov	r0, r7
 800f906:	eb04 0903 	add.w	r9, r4, r3
 800f90a:	f000 f8b1 	bl	800fa70 <_sbrk_r>
 800f90e:	4581      	cmp	r9, r0
 800f910:	d13f      	bne.n	800f992 <_malloc_r+0xe6>
 800f912:	6821      	ldr	r1, [r4, #0]
 800f914:	4638      	mov	r0, r7
 800f916:	1a6d      	subs	r5, r5, r1
 800f918:	4629      	mov	r1, r5
 800f91a:	f7ff ffa7 	bl	800f86c <sbrk_aligned>
 800f91e:	3001      	adds	r0, #1
 800f920:	d037      	beq.n	800f992 <_malloc_r+0xe6>
 800f922:	6823      	ldr	r3, [r4, #0]
 800f924:	442b      	add	r3, r5
 800f926:	6023      	str	r3, [r4, #0]
 800f928:	f8d8 3000 	ldr.w	r3, [r8]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d038      	beq.n	800f9a2 <_malloc_r+0xf6>
 800f930:	685a      	ldr	r2, [r3, #4]
 800f932:	42a2      	cmp	r2, r4
 800f934:	d12b      	bne.n	800f98e <_malloc_r+0xe2>
 800f936:	2200      	movs	r2, #0
 800f938:	605a      	str	r2, [r3, #4]
 800f93a:	e00f      	b.n	800f95c <_malloc_r+0xb0>
 800f93c:	6822      	ldr	r2, [r4, #0]
 800f93e:	1b52      	subs	r2, r2, r5
 800f940:	d41f      	bmi.n	800f982 <_malloc_r+0xd6>
 800f942:	2a0b      	cmp	r2, #11
 800f944:	d917      	bls.n	800f976 <_malloc_r+0xca>
 800f946:	1961      	adds	r1, r4, r5
 800f948:	42a3      	cmp	r3, r4
 800f94a:	6025      	str	r5, [r4, #0]
 800f94c:	bf18      	it	ne
 800f94e:	6059      	strne	r1, [r3, #4]
 800f950:	6863      	ldr	r3, [r4, #4]
 800f952:	bf08      	it	eq
 800f954:	f8c8 1000 	streq.w	r1, [r8]
 800f958:	5162      	str	r2, [r4, r5]
 800f95a:	604b      	str	r3, [r1, #4]
 800f95c:	f104 060b 	add.w	r6, r4, #11
 800f960:	4638      	mov	r0, r7
 800f962:	f000 f829 	bl	800f9b8 <__malloc_unlock>
 800f966:	1d23      	adds	r3, r4, #4
 800f968:	f026 0607 	bic.w	r6, r6, #7
 800f96c:	1af2      	subs	r2, r6, r3
 800f96e:	d0ae      	beq.n	800f8ce <_malloc_r+0x22>
 800f970:	1b9b      	subs	r3, r3, r6
 800f972:	50a3      	str	r3, [r4, r2]
 800f974:	e7ab      	b.n	800f8ce <_malloc_r+0x22>
 800f976:	42a3      	cmp	r3, r4
 800f978:	6862      	ldr	r2, [r4, #4]
 800f97a:	d1dd      	bne.n	800f938 <_malloc_r+0x8c>
 800f97c:	f8c8 2000 	str.w	r2, [r8]
 800f980:	e7ec      	b.n	800f95c <_malloc_r+0xb0>
 800f982:	4623      	mov	r3, r4
 800f984:	6864      	ldr	r4, [r4, #4]
 800f986:	e7ac      	b.n	800f8e2 <_malloc_r+0x36>
 800f988:	4634      	mov	r4, r6
 800f98a:	6876      	ldr	r6, [r6, #4]
 800f98c:	e7b4      	b.n	800f8f8 <_malloc_r+0x4c>
 800f98e:	4613      	mov	r3, r2
 800f990:	e7cc      	b.n	800f92c <_malloc_r+0x80>
 800f992:	230c      	movs	r3, #12
 800f994:	4638      	mov	r0, r7
 800f996:	603b      	str	r3, [r7, #0]
 800f998:	f000 f80e 	bl	800f9b8 <__malloc_unlock>
 800f99c:	e797      	b.n	800f8ce <_malloc_r+0x22>
 800f99e:	6025      	str	r5, [r4, #0]
 800f9a0:	e7dc      	b.n	800f95c <_malloc_r+0xb0>
 800f9a2:	605b      	str	r3, [r3, #4]
 800f9a4:	deff      	udf	#255	; 0xff
 800f9a6:	bf00      	nop
 800f9a8:	20003a08 	.word	0x20003a08

0800f9ac <__malloc_lock>:
 800f9ac:	4801      	ldr	r0, [pc, #4]	; (800f9b4 <__malloc_lock+0x8>)
 800f9ae:	f000 b899 	b.w	800fae4 <__retarget_lock_acquire_recursive>
 800f9b2:	bf00      	nop
 800f9b4:	20003b4c 	.word	0x20003b4c

0800f9b8 <__malloc_unlock>:
 800f9b8:	4801      	ldr	r0, [pc, #4]	; (800f9c0 <__malloc_unlock+0x8>)
 800f9ba:	f000 b894 	b.w	800fae6 <__retarget_lock_release_recursive>
 800f9be:	bf00      	nop
 800f9c0:	20003b4c 	.word	0x20003b4c

0800f9c4 <_vsiprintf_r>:
 800f9c4:	b500      	push	{lr}
 800f9c6:	b09b      	sub	sp, #108	; 0x6c
 800f9c8:	9100      	str	r1, [sp, #0]
 800f9ca:	9104      	str	r1, [sp, #16]
 800f9cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f9d0:	9105      	str	r1, [sp, #20]
 800f9d2:	9102      	str	r1, [sp, #8]
 800f9d4:	4905      	ldr	r1, [pc, #20]	; (800f9ec <_vsiprintf_r+0x28>)
 800f9d6:	9103      	str	r1, [sp, #12]
 800f9d8:	4669      	mov	r1, sp
 800f9da:	f000 f939 	bl	800fc50 <_svfiprintf_r>
 800f9de:	9b00      	ldr	r3, [sp, #0]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	701a      	strb	r2, [r3, #0]
 800f9e4:	b01b      	add	sp, #108	; 0x6c
 800f9e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9ea:	bf00      	nop
 800f9ec:	ffff0208 	.word	0xffff0208

0800f9f0 <vsiprintf>:
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	460a      	mov	r2, r1
 800f9f4:	4601      	mov	r1, r0
 800f9f6:	4802      	ldr	r0, [pc, #8]	; (800fa00 <vsiprintf+0x10>)
 800f9f8:	6800      	ldr	r0, [r0, #0]
 800f9fa:	f7ff bfe3 	b.w	800f9c4 <_vsiprintf_r>
 800f9fe:	bf00      	nop
 800fa00:	2000009c 	.word	0x2000009c

0800fa04 <memmove>:
 800fa04:	4288      	cmp	r0, r1
 800fa06:	b510      	push	{r4, lr}
 800fa08:	eb01 0402 	add.w	r4, r1, r2
 800fa0c:	d902      	bls.n	800fa14 <memmove+0x10>
 800fa0e:	4284      	cmp	r4, r0
 800fa10:	4623      	mov	r3, r4
 800fa12:	d807      	bhi.n	800fa24 <memmove+0x20>
 800fa14:	1e43      	subs	r3, r0, #1
 800fa16:	42a1      	cmp	r1, r4
 800fa18:	d008      	beq.n	800fa2c <memmove+0x28>
 800fa1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa22:	e7f8      	b.n	800fa16 <memmove+0x12>
 800fa24:	4402      	add	r2, r0
 800fa26:	4601      	mov	r1, r0
 800fa28:	428a      	cmp	r2, r1
 800fa2a:	d100      	bne.n	800fa2e <memmove+0x2a>
 800fa2c:	bd10      	pop	{r4, pc}
 800fa2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa36:	e7f7      	b.n	800fa28 <memmove+0x24>

0800fa38 <memset>:
 800fa38:	4402      	add	r2, r0
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d100      	bne.n	800fa42 <memset+0xa>
 800fa40:	4770      	bx	lr
 800fa42:	f803 1b01 	strb.w	r1, [r3], #1
 800fa46:	e7f9      	b.n	800fa3c <memset+0x4>

0800fa48 <strncpy>:
 800fa48:	3901      	subs	r1, #1
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	b510      	push	{r4, lr}
 800fa4e:	b132      	cbz	r2, 800fa5e <strncpy+0x16>
 800fa50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fa54:	3a01      	subs	r2, #1
 800fa56:	f803 4b01 	strb.w	r4, [r3], #1
 800fa5a:	2c00      	cmp	r4, #0
 800fa5c:	d1f7      	bne.n	800fa4e <strncpy+0x6>
 800fa5e:	441a      	add	r2, r3
 800fa60:	2100      	movs	r1, #0
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d100      	bne.n	800fa68 <strncpy+0x20>
 800fa66:	bd10      	pop	{r4, pc}
 800fa68:	f803 1b01 	strb.w	r1, [r3], #1
 800fa6c:	e7f9      	b.n	800fa62 <strncpy+0x1a>
	...

0800fa70 <_sbrk_r>:
 800fa70:	b538      	push	{r3, r4, r5, lr}
 800fa72:	2300      	movs	r3, #0
 800fa74:	4d05      	ldr	r5, [pc, #20]	; (800fa8c <_sbrk_r+0x1c>)
 800fa76:	4604      	mov	r4, r0
 800fa78:	4608      	mov	r0, r1
 800fa7a:	602b      	str	r3, [r5, #0]
 800fa7c:	f7f1 fc78 	bl	8001370 <_sbrk>
 800fa80:	1c43      	adds	r3, r0, #1
 800fa82:	d102      	bne.n	800fa8a <_sbrk_r+0x1a>
 800fa84:	682b      	ldr	r3, [r5, #0]
 800fa86:	b103      	cbz	r3, 800fa8a <_sbrk_r+0x1a>
 800fa88:	6023      	str	r3, [r4, #0]
 800fa8a:	bd38      	pop	{r3, r4, r5, pc}
 800fa8c:	20003b48 	.word	0x20003b48

0800fa90 <__errno>:
 800fa90:	4b01      	ldr	r3, [pc, #4]	; (800fa98 <__errno+0x8>)
 800fa92:	6818      	ldr	r0, [r3, #0]
 800fa94:	4770      	bx	lr
 800fa96:	bf00      	nop
 800fa98:	2000009c 	.word	0x2000009c

0800fa9c <__libc_init_array>:
 800fa9c:	b570      	push	{r4, r5, r6, lr}
 800fa9e:	4d0d      	ldr	r5, [pc, #52]	; (800fad4 <__libc_init_array+0x38>)
 800faa0:	2600      	movs	r6, #0
 800faa2:	4c0d      	ldr	r4, [pc, #52]	; (800fad8 <__libc_init_array+0x3c>)
 800faa4:	1b64      	subs	r4, r4, r5
 800faa6:	10a4      	asrs	r4, r4, #2
 800faa8:	42a6      	cmp	r6, r4
 800faaa:	d109      	bne.n	800fac0 <__libc_init_array+0x24>
 800faac:	4d0b      	ldr	r5, [pc, #44]	; (800fadc <__libc_init_array+0x40>)
 800faae:	2600      	movs	r6, #0
 800fab0:	4c0b      	ldr	r4, [pc, #44]	; (800fae0 <__libc_init_array+0x44>)
 800fab2:	f000 fba3 	bl	80101fc <_init>
 800fab6:	1b64      	subs	r4, r4, r5
 800fab8:	10a4      	asrs	r4, r4, #2
 800faba:	42a6      	cmp	r6, r4
 800fabc:	d105      	bne.n	800faca <__libc_init_array+0x2e>
 800fabe:	bd70      	pop	{r4, r5, r6, pc}
 800fac0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fac4:	3601      	adds	r6, #1
 800fac6:	4798      	blx	r3
 800fac8:	e7ee      	b.n	800faa8 <__libc_init_array+0xc>
 800faca:	f855 3b04 	ldr.w	r3, [r5], #4
 800face:	3601      	adds	r6, #1
 800fad0:	4798      	blx	r3
 800fad2:	e7f2      	b.n	800faba <__libc_init_array+0x1e>
 800fad4:	08010494 	.word	0x08010494
 800fad8:	08010494 	.word	0x08010494
 800fadc:	08010494 	.word	0x08010494
 800fae0:	08010498 	.word	0x08010498

0800fae4 <__retarget_lock_acquire_recursive>:
 800fae4:	4770      	bx	lr

0800fae6 <__retarget_lock_release_recursive>:
 800fae6:	4770      	bx	lr

0800fae8 <memcpy>:
 800fae8:	440a      	add	r2, r1
 800faea:	1e43      	subs	r3, r0, #1
 800faec:	4291      	cmp	r1, r2
 800faee:	d100      	bne.n	800faf2 <memcpy+0xa>
 800faf0:	4770      	bx	lr
 800faf2:	b510      	push	{r4, lr}
 800faf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800faf8:	4291      	cmp	r1, r2
 800fafa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fafe:	d1f9      	bne.n	800faf4 <memcpy+0xc>
 800fb00:	bd10      	pop	{r4, pc}
	...

0800fb04 <_free_r>:
 800fb04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb06:	2900      	cmp	r1, #0
 800fb08:	d043      	beq.n	800fb92 <_free_r+0x8e>
 800fb0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb0e:	1f0c      	subs	r4, r1, #4
 800fb10:	9001      	str	r0, [sp, #4]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	bfb8      	it	lt
 800fb16:	18e4      	addlt	r4, r4, r3
 800fb18:	f7ff ff48 	bl	800f9ac <__malloc_lock>
 800fb1c:	4a1e      	ldr	r2, [pc, #120]	; (800fb98 <_free_r+0x94>)
 800fb1e:	9801      	ldr	r0, [sp, #4]
 800fb20:	6813      	ldr	r3, [r2, #0]
 800fb22:	b933      	cbnz	r3, 800fb32 <_free_r+0x2e>
 800fb24:	6063      	str	r3, [r4, #4]
 800fb26:	6014      	str	r4, [r2, #0]
 800fb28:	b003      	add	sp, #12
 800fb2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb2e:	f7ff bf43 	b.w	800f9b8 <__malloc_unlock>
 800fb32:	42a3      	cmp	r3, r4
 800fb34:	d908      	bls.n	800fb48 <_free_r+0x44>
 800fb36:	6825      	ldr	r5, [r4, #0]
 800fb38:	1961      	adds	r1, r4, r5
 800fb3a:	428b      	cmp	r3, r1
 800fb3c:	bf01      	itttt	eq
 800fb3e:	6819      	ldreq	r1, [r3, #0]
 800fb40:	685b      	ldreq	r3, [r3, #4]
 800fb42:	1949      	addeq	r1, r1, r5
 800fb44:	6021      	streq	r1, [r4, #0]
 800fb46:	e7ed      	b.n	800fb24 <_free_r+0x20>
 800fb48:	461a      	mov	r2, r3
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	b10b      	cbz	r3, 800fb52 <_free_r+0x4e>
 800fb4e:	42a3      	cmp	r3, r4
 800fb50:	d9fa      	bls.n	800fb48 <_free_r+0x44>
 800fb52:	6811      	ldr	r1, [r2, #0]
 800fb54:	1855      	adds	r5, r2, r1
 800fb56:	42a5      	cmp	r5, r4
 800fb58:	d10b      	bne.n	800fb72 <_free_r+0x6e>
 800fb5a:	6824      	ldr	r4, [r4, #0]
 800fb5c:	4421      	add	r1, r4
 800fb5e:	1854      	adds	r4, r2, r1
 800fb60:	6011      	str	r1, [r2, #0]
 800fb62:	42a3      	cmp	r3, r4
 800fb64:	d1e0      	bne.n	800fb28 <_free_r+0x24>
 800fb66:	681c      	ldr	r4, [r3, #0]
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	440c      	add	r4, r1
 800fb6c:	6053      	str	r3, [r2, #4]
 800fb6e:	6014      	str	r4, [r2, #0]
 800fb70:	e7da      	b.n	800fb28 <_free_r+0x24>
 800fb72:	d902      	bls.n	800fb7a <_free_r+0x76>
 800fb74:	230c      	movs	r3, #12
 800fb76:	6003      	str	r3, [r0, #0]
 800fb78:	e7d6      	b.n	800fb28 <_free_r+0x24>
 800fb7a:	6825      	ldr	r5, [r4, #0]
 800fb7c:	1961      	adds	r1, r4, r5
 800fb7e:	428b      	cmp	r3, r1
 800fb80:	bf02      	ittt	eq
 800fb82:	6819      	ldreq	r1, [r3, #0]
 800fb84:	685b      	ldreq	r3, [r3, #4]
 800fb86:	1949      	addeq	r1, r1, r5
 800fb88:	6063      	str	r3, [r4, #4]
 800fb8a:	bf08      	it	eq
 800fb8c:	6021      	streq	r1, [r4, #0]
 800fb8e:	6054      	str	r4, [r2, #4]
 800fb90:	e7ca      	b.n	800fb28 <_free_r+0x24>
 800fb92:	b003      	add	sp, #12
 800fb94:	bd30      	pop	{r4, r5, pc}
 800fb96:	bf00      	nop
 800fb98:	20003a08 	.word	0x20003a08

0800fb9c <__ssputs_r>:
 800fb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fba0:	461f      	mov	r7, r3
 800fba2:	688e      	ldr	r6, [r1, #8]
 800fba4:	4682      	mov	sl, r0
 800fba6:	460c      	mov	r4, r1
 800fba8:	42be      	cmp	r6, r7
 800fbaa:	4690      	mov	r8, r2
 800fbac:	680b      	ldr	r3, [r1, #0]
 800fbae:	d82c      	bhi.n	800fc0a <__ssputs_r+0x6e>
 800fbb0:	898a      	ldrh	r2, [r1, #12]
 800fbb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fbb6:	d026      	beq.n	800fc06 <__ssputs_r+0x6a>
 800fbb8:	6965      	ldr	r5, [r4, #20]
 800fbba:	6909      	ldr	r1, [r1, #16]
 800fbbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fbc0:	eba3 0901 	sub.w	r9, r3, r1
 800fbc4:	1c7b      	adds	r3, r7, #1
 800fbc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fbca:	444b      	add	r3, r9
 800fbcc:	106d      	asrs	r5, r5, #1
 800fbce:	429d      	cmp	r5, r3
 800fbd0:	bf38      	it	cc
 800fbd2:	461d      	movcc	r5, r3
 800fbd4:	0553      	lsls	r3, r2, #21
 800fbd6:	d527      	bpl.n	800fc28 <__ssputs_r+0x8c>
 800fbd8:	4629      	mov	r1, r5
 800fbda:	f7ff fe67 	bl	800f8ac <_malloc_r>
 800fbde:	4606      	mov	r6, r0
 800fbe0:	b360      	cbz	r0, 800fc3c <__ssputs_r+0xa0>
 800fbe2:	464a      	mov	r2, r9
 800fbe4:	6921      	ldr	r1, [r4, #16]
 800fbe6:	f7ff ff7f 	bl	800fae8 <memcpy>
 800fbea:	89a3      	ldrh	r3, [r4, #12]
 800fbec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fbf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbf4:	81a3      	strh	r3, [r4, #12]
 800fbf6:	6126      	str	r6, [r4, #16]
 800fbf8:	444e      	add	r6, r9
 800fbfa:	6165      	str	r5, [r4, #20]
 800fbfc:	eba5 0509 	sub.w	r5, r5, r9
 800fc00:	6026      	str	r6, [r4, #0]
 800fc02:	463e      	mov	r6, r7
 800fc04:	60a5      	str	r5, [r4, #8]
 800fc06:	42be      	cmp	r6, r7
 800fc08:	d900      	bls.n	800fc0c <__ssputs_r+0x70>
 800fc0a:	463e      	mov	r6, r7
 800fc0c:	4632      	mov	r2, r6
 800fc0e:	4641      	mov	r1, r8
 800fc10:	6820      	ldr	r0, [r4, #0]
 800fc12:	f7ff fef7 	bl	800fa04 <memmove>
 800fc16:	68a3      	ldr	r3, [r4, #8]
 800fc18:	2000      	movs	r0, #0
 800fc1a:	1b9b      	subs	r3, r3, r6
 800fc1c:	60a3      	str	r3, [r4, #8]
 800fc1e:	6823      	ldr	r3, [r4, #0]
 800fc20:	4433      	add	r3, r6
 800fc22:	6023      	str	r3, [r4, #0]
 800fc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc28:	462a      	mov	r2, r5
 800fc2a:	f000 faaf 	bl	801018c <_realloc_r>
 800fc2e:	4606      	mov	r6, r0
 800fc30:	2800      	cmp	r0, #0
 800fc32:	d1e0      	bne.n	800fbf6 <__ssputs_r+0x5a>
 800fc34:	6921      	ldr	r1, [r4, #16]
 800fc36:	4650      	mov	r0, sl
 800fc38:	f7ff ff64 	bl	800fb04 <_free_r>
 800fc3c:	230c      	movs	r3, #12
 800fc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc42:	f8ca 3000 	str.w	r3, [sl]
 800fc46:	89a3      	ldrh	r3, [r4, #12]
 800fc48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc4c:	81a3      	strh	r3, [r4, #12]
 800fc4e:	e7e9      	b.n	800fc24 <__ssputs_r+0x88>

0800fc50 <_svfiprintf_r>:
 800fc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc54:	4698      	mov	r8, r3
 800fc56:	898b      	ldrh	r3, [r1, #12]
 800fc58:	b09d      	sub	sp, #116	; 0x74
 800fc5a:	4607      	mov	r7, r0
 800fc5c:	061b      	lsls	r3, r3, #24
 800fc5e:	460d      	mov	r5, r1
 800fc60:	4614      	mov	r4, r2
 800fc62:	d50e      	bpl.n	800fc82 <_svfiprintf_r+0x32>
 800fc64:	690b      	ldr	r3, [r1, #16]
 800fc66:	b963      	cbnz	r3, 800fc82 <_svfiprintf_r+0x32>
 800fc68:	2140      	movs	r1, #64	; 0x40
 800fc6a:	f7ff fe1f 	bl	800f8ac <_malloc_r>
 800fc6e:	6028      	str	r0, [r5, #0]
 800fc70:	6128      	str	r0, [r5, #16]
 800fc72:	b920      	cbnz	r0, 800fc7e <_svfiprintf_r+0x2e>
 800fc74:	230c      	movs	r3, #12
 800fc76:	603b      	str	r3, [r7, #0]
 800fc78:	f04f 30ff 	mov.w	r0, #4294967295
 800fc7c:	e0d0      	b.n	800fe20 <_svfiprintf_r+0x1d0>
 800fc7e:	2340      	movs	r3, #64	; 0x40
 800fc80:	616b      	str	r3, [r5, #20]
 800fc82:	2300      	movs	r3, #0
 800fc84:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc88:	f04f 0901 	mov.w	r9, #1
 800fc8c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fe38 <_svfiprintf_r+0x1e8>
 800fc90:	9309      	str	r3, [sp, #36]	; 0x24
 800fc92:	2320      	movs	r3, #32
 800fc94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc98:	2330      	movs	r3, #48	; 0x30
 800fc9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc9e:	4623      	mov	r3, r4
 800fca0:	469a      	mov	sl, r3
 800fca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fca6:	b10a      	cbz	r2, 800fcac <_svfiprintf_r+0x5c>
 800fca8:	2a25      	cmp	r2, #37	; 0x25
 800fcaa:	d1f9      	bne.n	800fca0 <_svfiprintf_r+0x50>
 800fcac:	ebba 0b04 	subs.w	fp, sl, r4
 800fcb0:	d00b      	beq.n	800fcca <_svfiprintf_r+0x7a>
 800fcb2:	465b      	mov	r3, fp
 800fcb4:	4622      	mov	r2, r4
 800fcb6:	4629      	mov	r1, r5
 800fcb8:	4638      	mov	r0, r7
 800fcba:	f7ff ff6f 	bl	800fb9c <__ssputs_r>
 800fcbe:	3001      	adds	r0, #1
 800fcc0:	f000 80a9 	beq.w	800fe16 <_svfiprintf_r+0x1c6>
 800fcc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcc6:	445a      	add	r2, fp
 800fcc8:	9209      	str	r2, [sp, #36]	; 0x24
 800fcca:	f89a 3000 	ldrb.w	r3, [sl]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	f000 80a1 	beq.w	800fe16 <_svfiprintf_r+0x1c6>
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	f04f 32ff 	mov.w	r2, #4294967295
 800fcda:	f10a 0a01 	add.w	sl, sl, #1
 800fcde:	9304      	str	r3, [sp, #16]
 800fce0:	9307      	str	r3, [sp, #28]
 800fce2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fce6:	931a      	str	r3, [sp, #104]	; 0x68
 800fce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcec:	4654      	mov	r4, sl
 800fcee:	2205      	movs	r2, #5
 800fcf0:	4851      	ldr	r0, [pc, #324]	; (800fe38 <_svfiprintf_r+0x1e8>)
 800fcf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcf6:	f000 fa3b 	bl	8010170 <memchr>
 800fcfa:	9a04      	ldr	r2, [sp, #16]
 800fcfc:	b9d8      	cbnz	r0, 800fd36 <_svfiprintf_r+0xe6>
 800fcfe:	06d0      	lsls	r0, r2, #27
 800fd00:	bf44      	itt	mi
 800fd02:	2320      	movmi	r3, #32
 800fd04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd08:	0711      	lsls	r1, r2, #28
 800fd0a:	bf44      	itt	mi
 800fd0c:	232b      	movmi	r3, #43	; 0x2b
 800fd0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd12:	f89a 3000 	ldrb.w	r3, [sl]
 800fd16:	2b2a      	cmp	r3, #42	; 0x2a
 800fd18:	d015      	beq.n	800fd46 <_svfiprintf_r+0xf6>
 800fd1a:	9a07      	ldr	r2, [sp, #28]
 800fd1c:	4654      	mov	r4, sl
 800fd1e:	2000      	movs	r0, #0
 800fd20:	f04f 0c0a 	mov.w	ip, #10
 800fd24:	4621      	mov	r1, r4
 800fd26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd2a:	3b30      	subs	r3, #48	; 0x30
 800fd2c:	2b09      	cmp	r3, #9
 800fd2e:	d94d      	bls.n	800fdcc <_svfiprintf_r+0x17c>
 800fd30:	b1b0      	cbz	r0, 800fd60 <_svfiprintf_r+0x110>
 800fd32:	9207      	str	r2, [sp, #28]
 800fd34:	e014      	b.n	800fd60 <_svfiprintf_r+0x110>
 800fd36:	eba0 0308 	sub.w	r3, r0, r8
 800fd3a:	46a2      	mov	sl, r4
 800fd3c:	fa09 f303 	lsl.w	r3, r9, r3
 800fd40:	4313      	orrs	r3, r2
 800fd42:	9304      	str	r3, [sp, #16]
 800fd44:	e7d2      	b.n	800fcec <_svfiprintf_r+0x9c>
 800fd46:	9b03      	ldr	r3, [sp, #12]
 800fd48:	1d19      	adds	r1, r3, #4
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	9103      	str	r1, [sp, #12]
 800fd50:	bfbb      	ittet	lt
 800fd52:	425b      	neglt	r3, r3
 800fd54:	f042 0202 	orrlt.w	r2, r2, #2
 800fd58:	9307      	strge	r3, [sp, #28]
 800fd5a:	9307      	strlt	r3, [sp, #28]
 800fd5c:	bfb8      	it	lt
 800fd5e:	9204      	strlt	r2, [sp, #16]
 800fd60:	7823      	ldrb	r3, [r4, #0]
 800fd62:	2b2e      	cmp	r3, #46	; 0x2e
 800fd64:	d10c      	bne.n	800fd80 <_svfiprintf_r+0x130>
 800fd66:	7863      	ldrb	r3, [r4, #1]
 800fd68:	2b2a      	cmp	r3, #42	; 0x2a
 800fd6a:	d134      	bne.n	800fdd6 <_svfiprintf_r+0x186>
 800fd6c:	9b03      	ldr	r3, [sp, #12]
 800fd6e:	3402      	adds	r4, #2
 800fd70:	1d1a      	adds	r2, r3, #4
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	9203      	str	r2, [sp, #12]
 800fd78:	bfb8      	it	lt
 800fd7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd7e:	9305      	str	r3, [sp, #20]
 800fd80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fe48 <_svfiprintf_r+0x1f8>
 800fd84:	2203      	movs	r2, #3
 800fd86:	7821      	ldrb	r1, [r4, #0]
 800fd88:	4650      	mov	r0, sl
 800fd8a:	f000 f9f1 	bl	8010170 <memchr>
 800fd8e:	b138      	cbz	r0, 800fda0 <_svfiprintf_r+0x150>
 800fd90:	eba0 000a 	sub.w	r0, r0, sl
 800fd94:	2240      	movs	r2, #64	; 0x40
 800fd96:	9b04      	ldr	r3, [sp, #16]
 800fd98:	3401      	adds	r4, #1
 800fd9a:	4082      	lsls	r2, r0
 800fd9c:	4313      	orrs	r3, r2
 800fd9e:	9304      	str	r3, [sp, #16]
 800fda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fda4:	2206      	movs	r2, #6
 800fda6:	4825      	ldr	r0, [pc, #148]	; (800fe3c <_svfiprintf_r+0x1ec>)
 800fda8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdac:	f000 f9e0 	bl	8010170 <memchr>
 800fdb0:	2800      	cmp	r0, #0
 800fdb2:	d038      	beq.n	800fe26 <_svfiprintf_r+0x1d6>
 800fdb4:	4b22      	ldr	r3, [pc, #136]	; (800fe40 <_svfiprintf_r+0x1f0>)
 800fdb6:	bb1b      	cbnz	r3, 800fe00 <_svfiprintf_r+0x1b0>
 800fdb8:	9b03      	ldr	r3, [sp, #12]
 800fdba:	3307      	adds	r3, #7
 800fdbc:	f023 0307 	bic.w	r3, r3, #7
 800fdc0:	3308      	adds	r3, #8
 800fdc2:	9303      	str	r3, [sp, #12]
 800fdc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdc6:	4433      	add	r3, r6
 800fdc8:	9309      	str	r3, [sp, #36]	; 0x24
 800fdca:	e768      	b.n	800fc9e <_svfiprintf_r+0x4e>
 800fdcc:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdd0:	460c      	mov	r4, r1
 800fdd2:	2001      	movs	r0, #1
 800fdd4:	e7a6      	b.n	800fd24 <_svfiprintf_r+0xd4>
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	3401      	adds	r4, #1
 800fdda:	f04f 0c0a 	mov.w	ip, #10
 800fdde:	4619      	mov	r1, r3
 800fde0:	9305      	str	r3, [sp, #20]
 800fde2:	4620      	mov	r0, r4
 800fde4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fde8:	3a30      	subs	r2, #48	; 0x30
 800fdea:	2a09      	cmp	r2, #9
 800fdec:	d903      	bls.n	800fdf6 <_svfiprintf_r+0x1a6>
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d0c6      	beq.n	800fd80 <_svfiprintf_r+0x130>
 800fdf2:	9105      	str	r1, [sp, #20]
 800fdf4:	e7c4      	b.n	800fd80 <_svfiprintf_r+0x130>
 800fdf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdfa:	4604      	mov	r4, r0
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	e7f0      	b.n	800fde2 <_svfiprintf_r+0x192>
 800fe00:	ab03      	add	r3, sp, #12
 800fe02:	462a      	mov	r2, r5
 800fe04:	a904      	add	r1, sp, #16
 800fe06:	4638      	mov	r0, r7
 800fe08:	9300      	str	r3, [sp, #0]
 800fe0a:	4b0e      	ldr	r3, [pc, #56]	; (800fe44 <_svfiprintf_r+0x1f4>)
 800fe0c:	f3af 8000 	nop.w
 800fe10:	1c42      	adds	r2, r0, #1
 800fe12:	4606      	mov	r6, r0
 800fe14:	d1d6      	bne.n	800fdc4 <_svfiprintf_r+0x174>
 800fe16:	89ab      	ldrh	r3, [r5, #12]
 800fe18:	065b      	lsls	r3, r3, #25
 800fe1a:	f53f af2d 	bmi.w	800fc78 <_svfiprintf_r+0x28>
 800fe1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe20:	b01d      	add	sp, #116	; 0x74
 800fe22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe26:	ab03      	add	r3, sp, #12
 800fe28:	462a      	mov	r2, r5
 800fe2a:	a904      	add	r1, sp, #16
 800fe2c:	4638      	mov	r0, r7
 800fe2e:	9300      	str	r3, [sp, #0]
 800fe30:	4b04      	ldr	r3, [pc, #16]	; (800fe44 <_svfiprintf_r+0x1f4>)
 800fe32:	f000 f87d 	bl	800ff30 <_printf_i>
 800fe36:	e7eb      	b.n	800fe10 <_svfiprintf_r+0x1c0>
 800fe38:	08010458 	.word	0x08010458
 800fe3c:	08010462 	.word	0x08010462
 800fe40:	00000000 	.word	0x00000000
 800fe44:	0800fb9d 	.word	0x0800fb9d
 800fe48:	0801045e 	.word	0x0801045e

0800fe4c <_printf_common>:
 800fe4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe50:	4616      	mov	r6, r2
 800fe52:	4699      	mov	r9, r3
 800fe54:	688a      	ldr	r2, [r1, #8]
 800fe56:	4607      	mov	r7, r0
 800fe58:	690b      	ldr	r3, [r1, #16]
 800fe5a:	460c      	mov	r4, r1
 800fe5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fe60:	4293      	cmp	r3, r2
 800fe62:	bfb8      	it	lt
 800fe64:	4613      	movlt	r3, r2
 800fe66:	6033      	str	r3, [r6, #0]
 800fe68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fe6c:	b10a      	cbz	r2, 800fe72 <_printf_common+0x26>
 800fe6e:	3301      	adds	r3, #1
 800fe70:	6033      	str	r3, [r6, #0]
 800fe72:	6823      	ldr	r3, [r4, #0]
 800fe74:	0699      	lsls	r1, r3, #26
 800fe76:	bf42      	ittt	mi
 800fe78:	6833      	ldrmi	r3, [r6, #0]
 800fe7a:	3302      	addmi	r3, #2
 800fe7c:	6033      	strmi	r3, [r6, #0]
 800fe7e:	6825      	ldr	r5, [r4, #0]
 800fe80:	f015 0506 	ands.w	r5, r5, #6
 800fe84:	d106      	bne.n	800fe94 <_printf_common+0x48>
 800fe86:	f104 0a19 	add.w	sl, r4, #25
 800fe8a:	68e3      	ldr	r3, [r4, #12]
 800fe8c:	6832      	ldr	r2, [r6, #0]
 800fe8e:	1a9b      	subs	r3, r3, r2
 800fe90:	42ab      	cmp	r3, r5
 800fe92:	dc2b      	bgt.n	800feec <_printf_common+0xa0>
 800fe94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fe98:	1e13      	subs	r3, r2, #0
 800fe9a:	6822      	ldr	r2, [r4, #0]
 800fe9c:	bf18      	it	ne
 800fe9e:	2301      	movne	r3, #1
 800fea0:	0692      	lsls	r2, r2, #26
 800fea2:	d430      	bmi.n	800ff06 <_printf_common+0xba>
 800fea4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fea8:	4649      	mov	r1, r9
 800feaa:	4638      	mov	r0, r7
 800feac:	47c0      	blx	r8
 800feae:	3001      	adds	r0, #1
 800feb0:	d023      	beq.n	800fefa <_printf_common+0xae>
 800feb2:	6823      	ldr	r3, [r4, #0]
 800feb4:	341a      	adds	r4, #26
 800feb6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800feba:	f003 0306 	and.w	r3, r3, #6
 800febe:	2b04      	cmp	r3, #4
 800fec0:	bf0a      	itet	eq
 800fec2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800fec6:	2500      	movne	r5, #0
 800fec8:	6833      	ldreq	r3, [r6, #0]
 800feca:	f04f 0600 	mov.w	r6, #0
 800fece:	bf08      	it	eq
 800fed0:	1aed      	subeq	r5, r5, r3
 800fed2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800fed6:	bf08      	it	eq
 800fed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fedc:	4293      	cmp	r3, r2
 800fede:	bfc4      	itt	gt
 800fee0:	1a9b      	subgt	r3, r3, r2
 800fee2:	18ed      	addgt	r5, r5, r3
 800fee4:	42b5      	cmp	r5, r6
 800fee6:	d11a      	bne.n	800ff1e <_printf_common+0xd2>
 800fee8:	2000      	movs	r0, #0
 800feea:	e008      	b.n	800fefe <_printf_common+0xb2>
 800feec:	2301      	movs	r3, #1
 800feee:	4652      	mov	r2, sl
 800fef0:	4649      	mov	r1, r9
 800fef2:	4638      	mov	r0, r7
 800fef4:	47c0      	blx	r8
 800fef6:	3001      	adds	r0, #1
 800fef8:	d103      	bne.n	800ff02 <_printf_common+0xb6>
 800fefa:	f04f 30ff 	mov.w	r0, #4294967295
 800fefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff02:	3501      	adds	r5, #1
 800ff04:	e7c1      	b.n	800fe8a <_printf_common+0x3e>
 800ff06:	18e1      	adds	r1, r4, r3
 800ff08:	1c5a      	adds	r2, r3, #1
 800ff0a:	2030      	movs	r0, #48	; 0x30
 800ff0c:	3302      	adds	r3, #2
 800ff0e:	4422      	add	r2, r4
 800ff10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff1c:	e7c2      	b.n	800fea4 <_printf_common+0x58>
 800ff1e:	2301      	movs	r3, #1
 800ff20:	4622      	mov	r2, r4
 800ff22:	4649      	mov	r1, r9
 800ff24:	4638      	mov	r0, r7
 800ff26:	47c0      	blx	r8
 800ff28:	3001      	adds	r0, #1
 800ff2a:	d0e6      	beq.n	800fefa <_printf_common+0xae>
 800ff2c:	3601      	adds	r6, #1
 800ff2e:	e7d9      	b.n	800fee4 <_printf_common+0x98>

0800ff30 <_printf_i>:
 800ff30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff34:	7e0f      	ldrb	r7, [r1, #24]
 800ff36:	4691      	mov	r9, r2
 800ff38:	4680      	mov	r8, r0
 800ff3a:	460c      	mov	r4, r1
 800ff3c:	2f78      	cmp	r7, #120	; 0x78
 800ff3e:	469a      	mov	sl, r3
 800ff40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ff42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ff46:	d807      	bhi.n	800ff58 <_printf_i+0x28>
 800ff48:	2f62      	cmp	r7, #98	; 0x62
 800ff4a:	d80a      	bhi.n	800ff62 <_printf_i+0x32>
 800ff4c:	2f00      	cmp	r7, #0
 800ff4e:	f000 80d3 	beq.w	80100f8 <_printf_i+0x1c8>
 800ff52:	2f58      	cmp	r7, #88	; 0x58
 800ff54:	f000 80bf 	beq.w	80100d6 <_printf_i+0x1a6>
 800ff58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ff60:	e03a      	b.n	800ffd8 <_printf_i+0xa8>
 800ff62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ff66:	2b15      	cmp	r3, #21
 800ff68:	d8f6      	bhi.n	800ff58 <_printf_i+0x28>
 800ff6a:	a101      	add	r1, pc, #4	; (adr r1, 800ff70 <_printf_i+0x40>)
 800ff6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff70:	0800ffc9 	.word	0x0800ffc9
 800ff74:	0800ffdd 	.word	0x0800ffdd
 800ff78:	0800ff59 	.word	0x0800ff59
 800ff7c:	0800ff59 	.word	0x0800ff59
 800ff80:	0800ff59 	.word	0x0800ff59
 800ff84:	0800ff59 	.word	0x0800ff59
 800ff88:	0800ffdd 	.word	0x0800ffdd
 800ff8c:	0800ff59 	.word	0x0800ff59
 800ff90:	0800ff59 	.word	0x0800ff59
 800ff94:	0800ff59 	.word	0x0800ff59
 800ff98:	0800ff59 	.word	0x0800ff59
 800ff9c:	080100df 	.word	0x080100df
 800ffa0:	08010009 	.word	0x08010009
 800ffa4:	0801009b 	.word	0x0801009b
 800ffa8:	0800ff59 	.word	0x0800ff59
 800ffac:	0800ff59 	.word	0x0800ff59
 800ffb0:	08010101 	.word	0x08010101
 800ffb4:	0800ff59 	.word	0x0800ff59
 800ffb8:	08010009 	.word	0x08010009
 800ffbc:	0800ff59 	.word	0x0800ff59
 800ffc0:	0800ff59 	.word	0x0800ff59
 800ffc4:	080100a3 	.word	0x080100a3
 800ffc8:	682b      	ldr	r3, [r5, #0]
 800ffca:	1d1a      	adds	r2, r3, #4
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	602a      	str	r2, [r5, #0]
 800ffd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ffd8:	2301      	movs	r3, #1
 800ffda:	e09e      	b.n	801011a <_printf_i+0x1ea>
 800ffdc:	6820      	ldr	r0, [r4, #0]
 800ffde:	682b      	ldr	r3, [r5, #0]
 800ffe0:	0607      	lsls	r7, r0, #24
 800ffe2:	f103 0104 	add.w	r1, r3, #4
 800ffe6:	6029      	str	r1, [r5, #0]
 800ffe8:	d501      	bpl.n	800ffee <_printf_i+0xbe>
 800ffea:	681e      	ldr	r6, [r3, #0]
 800ffec:	e003      	b.n	800fff6 <_printf_i+0xc6>
 800ffee:	0646      	lsls	r6, r0, #25
 800fff0:	d5fb      	bpl.n	800ffea <_printf_i+0xba>
 800fff2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fff6:	2e00      	cmp	r6, #0
 800fff8:	da03      	bge.n	8010002 <_printf_i+0xd2>
 800fffa:	232d      	movs	r3, #45	; 0x2d
 800fffc:	4276      	negs	r6, r6
 800fffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010002:	4859      	ldr	r0, [pc, #356]	; (8010168 <_printf_i+0x238>)
 8010004:	230a      	movs	r3, #10
 8010006:	e012      	b.n	801002e <_printf_i+0xfe>
 8010008:	682b      	ldr	r3, [r5, #0]
 801000a:	6820      	ldr	r0, [r4, #0]
 801000c:	1d19      	adds	r1, r3, #4
 801000e:	6029      	str	r1, [r5, #0]
 8010010:	0605      	lsls	r5, r0, #24
 8010012:	d501      	bpl.n	8010018 <_printf_i+0xe8>
 8010014:	681e      	ldr	r6, [r3, #0]
 8010016:	e002      	b.n	801001e <_printf_i+0xee>
 8010018:	0641      	lsls	r1, r0, #25
 801001a:	d5fb      	bpl.n	8010014 <_printf_i+0xe4>
 801001c:	881e      	ldrh	r6, [r3, #0]
 801001e:	2f6f      	cmp	r7, #111	; 0x6f
 8010020:	4851      	ldr	r0, [pc, #324]	; (8010168 <_printf_i+0x238>)
 8010022:	bf0c      	ite	eq
 8010024:	2308      	moveq	r3, #8
 8010026:	230a      	movne	r3, #10
 8010028:	2100      	movs	r1, #0
 801002a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801002e:	6865      	ldr	r5, [r4, #4]
 8010030:	2d00      	cmp	r5, #0
 8010032:	60a5      	str	r5, [r4, #8]
 8010034:	bfa2      	ittt	ge
 8010036:	6821      	ldrge	r1, [r4, #0]
 8010038:	f021 0104 	bicge.w	r1, r1, #4
 801003c:	6021      	strge	r1, [r4, #0]
 801003e:	b90e      	cbnz	r6, 8010044 <_printf_i+0x114>
 8010040:	2d00      	cmp	r5, #0
 8010042:	d04a      	beq.n	80100da <_printf_i+0x1aa>
 8010044:	4615      	mov	r5, r2
 8010046:	fbb6 f1f3 	udiv	r1, r6, r3
 801004a:	fb03 6711 	mls	r7, r3, r1, r6
 801004e:	5dc7      	ldrb	r7, [r0, r7]
 8010050:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010054:	4637      	mov	r7, r6
 8010056:	460e      	mov	r6, r1
 8010058:	42bb      	cmp	r3, r7
 801005a:	d9f4      	bls.n	8010046 <_printf_i+0x116>
 801005c:	2b08      	cmp	r3, #8
 801005e:	d10b      	bne.n	8010078 <_printf_i+0x148>
 8010060:	6823      	ldr	r3, [r4, #0]
 8010062:	07de      	lsls	r6, r3, #31
 8010064:	d508      	bpl.n	8010078 <_printf_i+0x148>
 8010066:	6923      	ldr	r3, [r4, #16]
 8010068:	6861      	ldr	r1, [r4, #4]
 801006a:	4299      	cmp	r1, r3
 801006c:	bfde      	ittt	le
 801006e:	2330      	movle	r3, #48	; 0x30
 8010070:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010074:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010078:	1b52      	subs	r2, r2, r5
 801007a:	6122      	str	r2, [r4, #16]
 801007c:	464b      	mov	r3, r9
 801007e:	aa03      	add	r2, sp, #12
 8010080:	4621      	mov	r1, r4
 8010082:	4640      	mov	r0, r8
 8010084:	f8cd a000 	str.w	sl, [sp]
 8010088:	f7ff fee0 	bl	800fe4c <_printf_common>
 801008c:	3001      	adds	r0, #1
 801008e:	d149      	bne.n	8010124 <_printf_i+0x1f4>
 8010090:	f04f 30ff 	mov.w	r0, #4294967295
 8010094:	b004      	add	sp, #16
 8010096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801009a:	6823      	ldr	r3, [r4, #0]
 801009c:	f043 0320 	orr.w	r3, r3, #32
 80100a0:	6023      	str	r3, [r4, #0]
 80100a2:	2778      	movs	r7, #120	; 0x78
 80100a4:	4831      	ldr	r0, [pc, #196]	; (801016c <_printf_i+0x23c>)
 80100a6:	6823      	ldr	r3, [r4, #0]
 80100a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80100ac:	061f      	lsls	r7, r3, #24
 80100ae:	6829      	ldr	r1, [r5, #0]
 80100b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80100b4:	d402      	bmi.n	80100bc <_printf_i+0x18c>
 80100b6:	065f      	lsls	r7, r3, #25
 80100b8:	bf48      	it	mi
 80100ba:	b2b6      	uxthmi	r6, r6
 80100bc:	07df      	lsls	r7, r3, #31
 80100be:	6029      	str	r1, [r5, #0]
 80100c0:	bf44      	itt	mi
 80100c2:	f043 0320 	orrmi.w	r3, r3, #32
 80100c6:	6023      	strmi	r3, [r4, #0]
 80100c8:	b91e      	cbnz	r6, 80100d2 <_printf_i+0x1a2>
 80100ca:	6823      	ldr	r3, [r4, #0]
 80100cc:	f023 0320 	bic.w	r3, r3, #32
 80100d0:	6023      	str	r3, [r4, #0]
 80100d2:	2310      	movs	r3, #16
 80100d4:	e7a8      	b.n	8010028 <_printf_i+0xf8>
 80100d6:	4824      	ldr	r0, [pc, #144]	; (8010168 <_printf_i+0x238>)
 80100d8:	e7e5      	b.n	80100a6 <_printf_i+0x176>
 80100da:	4615      	mov	r5, r2
 80100dc:	e7be      	b.n	801005c <_printf_i+0x12c>
 80100de:	682b      	ldr	r3, [r5, #0]
 80100e0:	6826      	ldr	r6, [r4, #0]
 80100e2:	1d18      	adds	r0, r3, #4
 80100e4:	6961      	ldr	r1, [r4, #20]
 80100e6:	6028      	str	r0, [r5, #0]
 80100e8:	0635      	lsls	r5, r6, #24
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	d501      	bpl.n	80100f2 <_printf_i+0x1c2>
 80100ee:	6019      	str	r1, [r3, #0]
 80100f0:	e002      	b.n	80100f8 <_printf_i+0x1c8>
 80100f2:	0670      	lsls	r0, r6, #25
 80100f4:	d5fb      	bpl.n	80100ee <_printf_i+0x1be>
 80100f6:	8019      	strh	r1, [r3, #0]
 80100f8:	2300      	movs	r3, #0
 80100fa:	4615      	mov	r5, r2
 80100fc:	6123      	str	r3, [r4, #16]
 80100fe:	e7bd      	b.n	801007c <_printf_i+0x14c>
 8010100:	682b      	ldr	r3, [r5, #0]
 8010102:	2100      	movs	r1, #0
 8010104:	1d1a      	adds	r2, r3, #4
 8010106:	602a      	str	r2, [r5, #0]
 8010108:	681d      	ldr	r5, [r3, #0]
 801010a:	6862      	ldr	r2, [r4, #4]
 801010c:	4628      	mov	r0, r5
 801010e:	f000 f82f 	bl	8010170 <memchr>
 8010112:	b108      	cbz	r0, 8010118 <_printf_i+0x1e8>
 8010114:	1b40      	subs	r0, r0, r5
 8010116:	6060      	str	r0, [r4, #4]
 8010118:	6863      	ldr	r3, [r4, #4]
 801011a:	6123      	str	r3, [r4, #16]
 801011c:	2300      	movs	r3, #0
 801011e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010122:	e7ab      	b.n	801007c <_printf_i+0x14c>
 8010124:	6923      	ldr	r3, [r4, #16]
 8010126:	462a      	mov	r2, r5
 8010128:	4649      	mov	r1, r9
 801012a:	4640      	mov	r0, r8
 801012c:	47d0      	blx	sl
 801012e:	3001      	adds	r0, #1
 8010130:	d0ae      	beq.n	8010090 <_printf_i+0x160>
 8010132:	6823      	ldr	r3, [r4, #0]
 8010134:	079b      	lsls	r3, r3, #30
 8010136:	d413      	bmi.n	8010160 <_printf_i+0x230>
 8010138:	68e0      	ldr	r0, [r4, #12]
 801013a:	9b03      	ldr	r3, [sp, #12]
 801013c:	4298      	cmp	r0, r3
 801013e:	bfb8      	it	lt
 8010140:	4618      	movlt	r0, r3
 8010142:	e7a7      	b.n	8010094 <_printf_i+0x164>
 8010144:	2301      	movs	r3, #1
 8010146:	4632      	mov	r2, r6
 8010148:	4649      	mov	r1, r9
 801014a:	4640      	mov	r0, r8
 801014c:	47d0      	blx	sl
 801014e:	3001      	adds	r0, #1
 8010150:	d09e      	beq.n	8010090 <_printf_i+0x160>
 8010152:	3501      	adds	r5, #1
 8010154:	68e3      	ldr	r3, [r4, #12]
 8010156:	9903      	ldr	r1, [sp, #12]
 8010158:	1a5b      	subs	r3, r3, r1
 801015a:	42ab      	cmp	r3, r5
 801015c:	dcf2      	bgt.n	8010144 <_printf_i+0x214>
 801015e:	e7eb      	b.n	8010138 <_printf_i+0x208>
 8010160:	2500      	movs	r5, #0
 8010162:	f104 0619 	add.w	r6, r4, #25
 8010166:	e7f5      	b.n	8010154 <_printf_i+0x224>
 8010168:	08010469 	.word	0x08010469
 801016c:	0801047a 	.word	0x0801047a

08010170 <memchr>:
 8010170:	b2c9      	uxtb	r1, r1
 8010172:	4402      	add	r2, r0
 8010174:	b510      	push	{r4, lr}
 8010176:	4290      	cmp	r0, r2
 8010178:	4603      	mov	r3, r0
 801017a:	d101      	bne.n	8010180 <memchr+0x10>
 801017c:	2300      	movs	r3, #0
 801017e:	e003      	b.n	8010188 <memchr+0x18>
 8010180:	781c      	ldrb	r4, [r3, #0]
 8010182:	3001      	adds	r0, #1
 8010184:	428c      	cmp	r4, r1
 8010186:	d1f6      	bne.n	8010176 <memchr+0x6>
 8010188:	4618      	mov	r0, r3
 801018a:	bd10      	pop	{r4, pc}

0801018c <_realloc_r>:
 801018c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010190:	4680      	mov	r8, r0
 8010192:	4614      	mov	r4, r2
 8010194:	460e      	mov	r6, r1
 8010196:	b921      	cbnz	r1, 80101a2 <_realloc_r+0x16>
 8010198:	4611      	mov	r1, r2
 801019a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801019e:	f7ff bb85 	b.w	800f8ac <_malloc_r>
 80101a2:	b92a      	cbnz	r2, 80101b0 <_realloc_r+0x24>
 80101a4:	4625      	mov	r5, r4
 80101a6:	f7ff fcad 	bl	800fb04 <_free_r>
 80101aa:	4628      	mov	r0, r5
 80101ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101b0:	f000 f81b 	bl	80101ea <_malloc_usable_size_r>
 80101b4:	4284      	cmp	r4, r0
 80101b6:	4607      	mov	r7, r0
 80101b8:	d802      	bhi.n	80101c0 <_realloc_r+0x34>
 80101ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80101be:	d812      	bhi.n	80101e6 <_realloc_r+0x5a>
 80101c0:	4621      	mov	r1, r4
 80101c2:	4640      	mov	r0, r8
 80101c4:	f7ff fb72 	bl	800f8ac <_malloc_r>
 80101c8:	4605      	mov	r5, r0
 80101ca:	2800      	cmp	r0, #0
 80101cc:	d0ed      	beq.n	80101aa <_realloc_r+0x1e>
 80101ce:	42bc      	cmp	r4, r7
 80101d0:	4622      	mov	r2, r4
 80101d2:	4631      	mov	r1, r6
 80101d4:	bf28      	it	cs
 80101d6:	463a      	movcs	r2, r7
 80101d8:	f7ff fc86 	bl	800fae8 <memcpy>
 80101dc:	4631      	mov	r1, r6
 80101de:	4640      	mov	r0, r8
 80101e0:	f7ff fc90 	bl	800fb04 <_free_r>
 80101e4:	e7e1      	b.n	80101aa <_realloc_r+0x1e>
 80101e6:	4635      	mov	r5, r6
 80101e8:	e7df      	b.n	80101aa <_realloc_r+0x1e>

080101ea <_malloc_usable_size_r>:
 80101ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101ee:	1f18      	subs	r0, r3, #4
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	bfbc      	itt	lt
 80101f4:	580b      	ldrlt	r3, [r1, r0]
 80101f6:	18c0      	addlt	r0, r0, r3
 80101f8:	4770      	bx	lr
	...

080101fc <_init>:
 80101fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101fe:	bf00      	nop
 8010200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010202:	bc08      	pop	{r3}
 8010204:	469e      	mov	lr, r3
 8010206:	4770      	bx	lr

08010208 <_fini>:
 8010208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801020a:	bf00      	nop
 801020c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801020e:	bc08      	pop	{r3}
 8010210:	469e      	mov	lr, r3
 8010212:	4770      	bx	lr
